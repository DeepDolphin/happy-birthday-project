
C:/Users/David/Documents/GitHub/happy-birthday-project/project_main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	34 08 00 00 38 08 00 00 3c 08 00 00 40 08 00 00     4...8...<...@...
  30:	44 08 00 00 2c 65 00 00 d0 07 00 00 48 08 00 00     D...,e......H...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_region_zero_size_ram+0x60>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_region_zero_size_ram+0x5c>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_region_zero_size_ram+0x64>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_region_zero_size_ram+0x2c>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_region_zero_size_ram+0x2c>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_region_zero_size_ram+0x14>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_region_zero_size_ram+0x4c>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_region_zero_size_ram+0x3c>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb0018df 	bl	6458 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000068c4 	.word	0x000068c4

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	000071c0 	.word	0x000071c0

00000124 <__cs3_heap_start_ptr>:
     124:	00007240 	.word	0x00007240

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	000071c8 	.word	0x000071c8
     170:	000071cb 	.word	0x000071cb
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	000071c8 	.word	0x000071c8
     1bc:	000071c8 	.word	0x000071c8
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	000071c8 	.word	0x000071c8
     200:	00000000 	.word	0x00000000
     204:	000065b8 	.word	0x000065b8

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	000065b8 	.word	0x000065b8
     250:	000071cc 	.word	0x000071cc
     254:	000068c8 	.word	0x000068c8
     258:	00000000 	.word	0x00000000

0000025c <num_to_seg7_hex>:
	 
const char error_code = 0b01000000;

short int num_to_seg7_hex(unsigned int num){
	//make sure that the number does not exceed 0xFF
	if(num > 0xFF) return error_code | (error_code << 8);
     25c:	e35000ff 	cmp	r0, #255	; 0xff
	//extract the digits from the num given
	int first_hexdigit = num & 0xF;
	int second_hexdigit = num >> 4;
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     260:	930635c0 	movwls	r3, #26048	; 0x65c0
     264:	93403000 	movtls	r3, #0
     268:	97d32220 	ldrbls	r2, [r3, r0, lsr #4]
short int num_to_seg7_hex(unsigned int num){
	//make sure that the number does not exceed 0xFF
	if(num > 0xFF) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num & 0xF;
     26c:	9200000f 	andls	r0, r0, #15
	int second_hexdigit = num >> 4;
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     270:	97d33000 	ldrbls	r3, [r3, r0]
	
	return to_return;
     274:	91830402 	orrls	r0, r3, r2, lsl #8
	 
const char error_code = 0b01000000;

short int num_to_seg7_hex(unsigned int num){
	//make sure that the number does not exceed 0xFF
	if(num > 0xFF) return error_code | (error_code << 8);
     278:	83040040 	movwhi	r0, #16448	; 0x4040
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
	
	return to_return;
}
     27c:	e6bf0070 	sxth	r0, r0
     280:	e12fff1e 	bx	lr

00000284 <num_to_seg7_dec>:

short int num_to_seg7_dec(unsigned int num){
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
     284:	e3500063 	cmp	r0, #99	; 0x63
     288:	83040040 	movwhi	r0, #16448	; 0x4040
     28c:	8a00000b 	bhi	2c0 <num_to_seg7_dec+0x3c>
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     290:	e30635c0 	movw	r3, #26048	; 0x65c0
     294:	e3403000 	movt	r3, #0
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
     298:	e30c1ccd 	movw	r1, #52429	; 0xcccd
     29c:	e34c1ccc 	movt	r1, #52428	; 0xcccc
     2a0:	e0812091 	umull	r2, r1, r1, r0
     2a4:	e1a021a1 	lsr	r2, r1, #3
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     2a8:	e7d311a1 	ldrb	r1, [r3, r1, lsr #3]
short int num_to_seg7_dec(unsigned int num){
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
     2ac:	e0822102 	add	r2, r2, r2, lsl #2
     2b0:	e0400082 	sub	r0, r0, r2, lsl #1
	int second_hexdigit = num / 10;
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     2b4:	e7d33000 	ldrb	r3, [r3, r0]
	
	return to_return;
     2b8:	e1830401 	orr	r0, r3, r1, lsl #8
     2bc:	eaffffff 	b	2c0 <num_to_seg7_dec+0x3c>
     2c0:	e6bf0070 	sxth	r0, r0
     2c4:	e12fff1e 	bx	lr

000002c8 <display_status>:
	}
	
	return 0;
}

void display_status(){
     2c8:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
	
	//store all ledr displays
	int to_display_on_ledr = 0;
	
	//display if the audio_stream has been fully populated
	if (audio_stream.current_process_locations[0] == audio_stream.current_song.music_tracks[0].length) 
     2cc:	e30731e8 	movw	r3, #29160	; 0x71e8
     2d0:	e3403000 	movt	r3, #0
     2d4:	e5932004 	ldr	r2, [r3, #4]
     2d8:	e5933014 	ldr	r3, [r3, #20]
     2dc:	e5927000 	ldr	r7, [r2]
     2e0:	e5933008 	ldr	r3, [r3, #8]
     2e4:	e1570003 	cmp	r7, r3
     2e8:	13a07000 	movne	r7, #0
     2ec:	03a07001 	moveq	r7, #1
		to_display_on_ledr = 0b1;
	
	//display if the audio_stream is currently valid
	if (is_stream_valid())
     2f0:	eb0002fb 	bl	ee4 <is_stream_valid>
     2f4:	e3500000 	cmp	r0, #0
		to_display_on_ledr = to_display_on_ledr | 0b10;
     2f8:	13877002 	orrne	r7, r7, #2
	//store all hex displays
	int to_display_on_hex3_hex0 = 0;
	int to_display_on_hex5_hex4 = 0;
	
	//display the current volume on the hexes
	to_display_on_hex3_hex0 = num_to_seg7_dec(volume);
     2fc:	e30638d0 	movw	r3, #26832	; 0x68d0
     300:	e3403000 	movt	r3, #0
     304:	e5930000 	ldr	r0, [r3]
     308:	ebffffdd 	bl	284 <num_to_seg7_dec>
     30c:	e1a0a000 	mov	r10, r0
	
	//display the current length on the hexes as well
	double time_left = get_time_left();
     310:	eb000376 	bl	10f0 <get_time_left>
     314:	e1a04000 	mov	r4, r0
     318:	e1a05001 	mov	r5, r1
	to_display_on_hex3_hex0 = to_display_on_hex3_hex0 | (num_to_seg7_dec(((int) (time_left * 100)) % 100) << 16);
     31c:	e3a02000 	mov	r2, #0
     320:	e3a03000 	mov	r3, #0
     324:	e3443059 	movt	r3, #16473	; 0x4059
     328:	eb001221 	bl	4bb4 <__aeabi_dmul>
     32c:	eb001398 	bl	5194 <__aeabi_d2iz>
     330:	e1a03000 	mov	r3, r0
     334:	e308651f 	movw	r6, #34079	; 0x851f
     338:	e34561eb 	movt	r6, #20971	; 0x51eb
     33c:	e0c02096 	smull	r2, r0, r6, r0
     340:	e1a02fc3 	asr	r2, r3, #31
     344:	e06202c0 	rsb	r0, r2, r0, asr #5
     348:	e3a08064 	mov	r8, #100	; 0x64
     34c:	e0603098 	mls	r0, r8, r0, r3
     350:	ebffffcb 	bl	284 <num_to_seg7_dec>
     354:	e18aa800 	orr	r10, r10, r0, lsl #16
	to_display_on_hex5_hex4 = num_to_seg7_dec(((int) time_left) % 100);
     358:	e1a00004 	mov	r0, r4
     35c:	e1a01005 	mov	r1, r5
     360:	eb00138b 	bl	5194 <__aeabi_d2iz>
     364:	e0c63096 	smull	r3, r6, r6, r0
     368:	e1a03fc0 	asr	r3, r0, #31
     36c:	e06362c6 	rsb	r6, r3, r6, asr #5
     370:	e0600698 	mls	r0, r8, r6, r0
     374:	ebffffc2 	bl	284 <num_to_seg7_dec>
	
	//display on hex and ledr
	*ledr_base = to_display_on_ledr;
     378:	e3a03000 	mov	r3, #0
     37c:	e34f3f20 	movt	r3, #65312	; 0xff20
     380:	e5837000 	str	r7, [r3]
	*hex3_hex0_base = to_display_on_hex3_hex0;
     384:	e583a020 	str	r10, [r3, #32]
	*hex5_hex4_base = to_display_on_hex5_hex4;
     388:	e5830030 	str	r0, [r3, #48]	; 0x30
     38c:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}

00000390 <main>:
extern struct AudioStream audio_stream;
struct StatusFlags status_flags = {.clear_queue = false, .change_song = false, .is_playing = false};
unsigned int volume = 10;
const unsigned int max_volume = 20, min_volume = 1;

int main(){
     390:	e92d4070 	push	{r4, r5, r6, lr}
	volatile int * sw_base = (int*) SW_BASE;
	
	//configure the interrupts and hardware components
	set_A9_IRQ_stack();
     394:	eb0000d0 	bl	6dc <set_A9_IRQ_stack>
	config_GIC();
     398:	eb0000fd 	bl	794 <config_GIC>
	config_audio();
     39c:	eb0000c2 	bl	6ac <config_audio>
	config_keys();
     3a0:	eb0000c8 	bl	6c8 <config_keys>
					
	//initialize the audio stream
	audio_stream.current_song = test_song;
     3a4:	e59f3060 	ldr	r3, [pc, #96]	; 40c <main+0x7c>
     3a8:	e59f2060 	ldr	r2, [pc, #96]	; 410 <main+0x80>
     3ac:	e8920003 	ldm	r2, {r0, r1}
     3b0:	e8830003 	stm	r3, {r0, r1}
	initialize_stream();
     3b4:	eb00026c 	bl	d6c <initialize_stream>
	
	//enable interrupts once all setup is finished
	enable_A9_interrupts();
     3b8:	eb0000ce 	bl	6f8 <enable_A9_interrupts>
	while(1){
		//continue to populate the audio_stream
		populate_stream();
		
		//clear the audio_stream if requested
		if(status_flags.clear_queue || status_flags.change_song){
     3bc:	e30741e4 	movw	r4, #29156	; 0x71e4
     3c0:	e3404000 	movt	r4, #0
			clear_stream();
			
			//reset the flag so that clearing does not happen again
			status_flags.clear_queue = false;
     3c4:	e3a05000 	mov	r5, #0
		}
		
		//change current song if requested
		if(status_flags.change_song){
			int switches = *sw_base;
     3c8:	e1a06005 	mov	r6, r5
     3cc:	e34f6f20 	movt	r6, #65312	; 0xff20
	enable_A9_interrupts();
	
	//main loop
	while(1){
		//continue to populate the audio_stream
		populate_stream();
     3d0:	eb0002fe 	bl	fd0 <populate_stream>
		
		//clear the audio_stream if requested
		if(status_flags.clear_queue || status_flags.change_song){
     3d4:	e5d43000 	ldrb	r3, [r4]
     3d8:	e3530000 	cmp	r3, #0
     3dc:	1a000002 	bne	3ec <main+0x5c>
     3e0:	e5d43001 	ldrb	r3, [r4, #1]
     3e4:	e3530000 	cmp	r3, #0
     3e8:	0a000005 	beq	404 <main+0x74>
			clear_stream();
     3ec:	eb000294 	bl	e44 <clear_stream>
			
			//reset the flag so that clearing does not happen again
			status_flags.clear_queue = false;
     3f0:	e5c45000 	strb	r5, [r4]
		}
		
		//change current song if requested
		if(status_flags.change_song){
     3f4:	e5d43001 	ldrb	r3, [r4, #1]
     3f8:	e3530000 	cmp	r3, #0
			int switches = *sw_base;
     3fc:	15963040 	ldrne	r3, [r6, #64]	; 0x40
		
		
			//reset the flag so that changing the song does not happen again
			status_flags.change_song = false;
     400:	15c45001 	strbne	r5, [r4, #1]
		}
		
		//display status on leds and hexes
		display_status();
     404:	ebffffaf 	bl	2c8 <display_status>
	}
     408:	eafffff0 	b	3d0 <main+0x40>
     40c:	000071fc 	.word	0x000071fc
     410:	000065d0 	.word	0x000065d0

00000414 <stop_audio_playback>:
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     414:	e5903000 	ldr	r3, [r0]
     418:	e3530000 	cmp	r3, #0
     41c:	0a000006 	beq	43c <stop_audio_playback+0x28>
		//write nothing to the audio fifo (merely to clear the interrupt)
		*audio_fifo = 0;
     420:	e3a02000 	mov	r2, #0
     424:	e5812000 	str	r2, [r1]
		
		//advance the number of samples
		*num_samples = *num_samples - 1;
     428:	e5903000 	ldr	r3, [r0]
     42c:	e2433001 	sub	r3, r3, #1
     430:	e5803000 	str	r3, [r0]
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     434:	e3530000 	cmp	r3, #0
     438:	1afffff9 	bne	424 <stop_audio_playback+0x10>
		*num_samples = *num_samples - 1;
	}
	
	//turn off interrupts
	volatile int * audio_base = (int*) AUDIO_BASE;
	*audio_base = 0b0000;
     43c:	e3033fff 	movw	r3, #16383	; 0x3fff
     440:	e34f3f20 	movt	r3, #65312	; 0xff20
     444:	e3a02000 	mov	r2, #0
     448:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
	
	//set the status flags
	status_flags.is_playing = false;
     44c:	e30731e4 	movw	r3, #29156	; 0x71e4
     450:	e3403000 	movt	r3, #0
     454:	e5c32002 	strb	r2, [r3, #2]
     458:	e12fff1e 	bx	lr

0000045c <stop_all_audio_playback>:
	*ledr_base = to_display_on_ledr;
	*hex3_hex0_base = to_display_on_hex3_hex0;
	*hex5_hex4_base = to_display_on_hex5_hex4;
}

void stop_all_audio_playback(){
     45c:	e92d4010 	push	{r4, lr}
     460:	e24dd008 	sub	sp, sp, #8
	volatile int * audio_base = (int *) AUDIO_BASE;
	
	unsigned int fifo_space = *(audio_base + 1);
     464:	e3033fff 	movw	r3, #16383	; 0x3fff
     468:	e34f3f20 	movt	r3, #65312	; 0xff20
     46c:	e5134fbb 	ldr	r4, [r3, #-4027]	; 0xfffff045
	
	//stop audio playback for the right
	unsigned int num_samples_right = (unsigned int) ((fifo_space >> 16) & 0xFF);
     470:	e7e73854 	ubfx	r3, r4, #16, #8
     474:	e28d0008 	add	r0, sp, #8
     478:	e5203004 	str	r3, [r0, #-4]!
	stop_audio_playback(&num_samples_right, audio_base + 3);
     47c:	e303104c 	movw	r1, #12364	; 0x304c
     480:	e34f1f20 	movt	r1, #65312	; 0xff20
     484:	ebffffe2 	bl	414 <stop_audio_playback>
	
	//stop audio playback for the left
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
     488:	e1a04c24 	lsr	r4, r4, #24
     48c:	e28d0008 	add	r0, sp, #8
     490:	e5204008 	str	r4, [r0, #-8]!
	stop_audio_playback(&num_samples_left, audio_base + 2);
     494:	e1a0000d 	mov	r0, sp
     498:	e3031048 	movw	r1, #12360	; 0x3048
     49c:	e34f1f20 	movt	r1, #65312	; 0xff20
     4a0:	ebffffdb 	bl	414 <stop_audio_playback>
}
     4a4:	e28dd008 	add	sp, sp, #8
     4a8:	e8bd8010 	pop	{r4, pc}

000004ac <start_audio_playback>:
	
	//set the status flags
	status_flags.is_playing = false;
}

void start_audio_playback(){
     4ac:	e92d4008 	push	{r3, lr}
	//check to see if the stream is valid
	if(!is_stream_valid()) return;
     4b0:	eb00028b 	bl	ee4 <is_stream_valid>
     4b4:	e3500000 	cmp	r0, #0
     4b8:	08bd8008 	popeq	{r3, pc}
	
	//turn on interrupts
	volatile int * audio_base = (int*) AUDIO_BASE;
	*audio_base = 0b0010;
     4bc:	e3033fff 	movw	r3, #16383	; 0x3fff
     4c0:	e34f3f20 	movt	r3, #65312	; 0xff20
     4c4:	e3a02002 	mov	r2, #2
     4c8:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
	
	//set the playing flag
	status_flags.is_playing = true;
     4cc:	e30731e4 	movw	r3, #29156	; 0x71e4
     4d0:	e3403000 	movt	r3, #0
     4d4:	e3a02001 	mov	r2, #1
     4d8:	e5c32002 	strb	r2, [r3, #2]
     4dc:	e8bd8008 	pop	{r3, pc}

000004e0 <keys_ISR>:
}

void keys_ISR(){
     4e0:	e92d4010 	push	{r4, lr}
	volatile int * key_base = (int*) KEY_BASE;
	
	//read the reset the edgecapture bits
	int edgecapture = *(key_base + 3);
     4e4:	e3a03000 	mov	r3, #0
     4e8:	e34f3f20 	movt	r3, #65312	; 0xff20
     4ec:	e593405c 	ldr	r4, [r3, #92]	; 0x5c
	*(key_base + 3) = edgecapture;
     4f0:	e583405c 	str	r4, [r3, #92]	; 0x5c
	
	//play selected song with key press 0
	if(edgecapture & 0b0001){		
     4f4:	e3140001 	tst	r4, #1
     4f8:	0a000007 	beq	51c <keys_ISR+0x3c>
		if(status_flags.is_playing){
     4fc:	e30731e4 	movw	r3, #29156	; 0x71e4
     500:	e3403000 	movt	r3, #0
     504:	e5d33002 	ldrb	r3, [r3, #2]
     508:	e3530000 	cmp	r3, #0
     50c:	0a000001 	beq	518 <keys_ISR+0x38>
			stop_all_audio_playback();
     510:	ebffffd1 	bl	45c <stop_all_audio_playback>
     514:	ea000000 	b	51c <keys_ISR+0x3c>
		} else {
			start_audio_playback();
     518:	ebffffe3 	bl	4ac <start_audio_playback>
		}
	}
	
	//change song to selected on switches and clear current queue if key press 1
	if(edgecapture & 0b0010){
     51c:	e3140002 	tst	r4, #2
     520:	0a000007 	beq	544 <keys_ISR+0x64>
		status_flags.change_song = true;
     524:	e30731e4 	movw	r3, #29156	; 0x71e4
     528:	e3403000 	movt	r3, #0
     52c:	e3a02001 	mov	r2, #1
     530:	e5c32001 	strb	r2, [r3, #1]
		
		//stop playing if there is a song currently playing
		if(status_flags.is_playing){
     534:	e5d33002 	ldrb	r3, [r3, #2]
     538:	e3530000 	cmp	r3, #0
     53c:	0a000000 	beq	544 <keys_ISR+0x64>
			stop_all_audio_playback();
     540:	ebffffc5 	bl	45c <stop_all_audio_playback>
		}
	}
	
	//increase volume if key press 2
	if(edgecapture & 0b0100){
     544:	e3140004 	tst	r4, #4
     548:	0a000007 	beq	56c <keys_ISR+0x8c>
		if(volume < max_volume) volume++;
     54c:	e30638d0 	movw	r3, #26832	; 0x68d0
     550:	e3403000 	movt	r3, #0
     554:	e5933000 	ldr	r3, [r3]
     558:	e3530013 	cmp	r3, #19
     55c:	930628d0 	movwls	r2, #26832	; 0x68d0
     560:	93402000 	movtls	r2, #0
     564:	92833001 	addls	r3, r3, #1
     568:	95823000 	strls	r3, [r2]
	}
	
	//decrease volume if key press 3
	if(edgecapture & 0b1000){
     56c:	e3140008 	tst	r4, #8
     570:	08bd8010 	popeq	{r4, pc}
		if(volume > min_volume) volume--;
     574:	e30638d0 	movw	r3, #26832	; 0x68d0
     578:	e3403000 	movt	r3, #0
     57c:	e5932000 	ldr	r2, [r3]
     580:	e3520001 	cmp	r2, #1
     584:	830638d0 	movwhi	r3, #26832	; 0x68d0
     588:	83403000 	movthi	r3, #0
     58c:	82422001 	subhi	r2, r2, #1
     590:	85832000 	strhi	r2, [r3]
     594:	e8bd8010 	pop	{r4, pc}

00000598 <audio_ISR>:
	}
}

void audio_ISR(){
     598:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
	//catch if there is nothing to write to the audio queue
	if(!is_stream_valid()) while (1);
     59c:	eb000250 	bl	ee4 <is_stream_valid>
     5a0:	e3500000 	cmp	r0, #0
     5a4:	1a000000 	bne	5ac <audio_ISR+0x14>
     5a8:	eafffffe 	b	5a8 <audio_ISR+0x10>
	
	volatile int * audio_base = (int *) AUDIO_BASE;
	volatile int * audio_right = audio_base + 3;
	volatile int * audio_left = audio_base + 2;
	
	unsigned int fifo_space = *(audio_base + 1);
     5ac:	e3033fff 	movw	r3, #16383	; 0x3fff
     5b0:	e34f3f20 	movt	r3, #65312	; 0xff20
     5b4:	e5139fbb 	ldr	r9, [r3, #-4027]	; 0xfffff045
		
	//check the right and left write availability
	unsigned int num_samples_right = (unsigned int) ((fifo_space >> 16) & 0xFF);
     5b8:	e7e78859 	ubfx	r8, r9, #16, #8
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
     5bc:	e1a09c29 	lsr	r9, r9, #24
	while(num_samples_right > 0 || num_samples_left > 0){
		double sample_mono = get_sample(PLAYBACK_MONO);
		
		if(num_samples_right > 0){
			//retrieve and write a sample to the right
			*audio_right = (int) (volume * (get_sample(PLAYBACK_STEREO_R) + sample_mono));
     5c0:	e306b8d0 	movw	r11, #26832	; 0x68d0
     5c4:	e340b000 	movt	r11, #0
     5c8:	e303afff 	movw	r10, #16383	; 0x3fff
     5cc:	e34faf20 	movt	r10, #65312	; 0xff20
	unsigned int fifo_space = *(audio_base + 1);
		
	//check the right and left write availability
	unsigned int num_samples_right = (unsigned int) ((fifo_space >> 16) & 0xFF);
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	while(num_samples_right > 0 || num_samples_left > 0){
     5d0:	ea000032 	b	6a0 <audio_ISR+0x108>
		double sample_mono = get_sample(PLAYBACK_MONO);
     5d4:	e3a00000 	mov	r0, #0
     5d8:	eb0002e1 	bl	1164 <get_sample>
     5dc:	e1a04000 	mov	r4, r0
     5e0:	e1a05001 	mov	r5, r1
		
		if(num_samples_right > 0){
     5e4:	e3580000 	cmp	r8, #0
     5e8:	0a000010 	beq	630 <audio_ISR+0x98>
			//retrieve and write a sample to the right
			*audio_right = (int) (volume * (get_sample(PLAYBACK_STEREO_R) + sample_mono));
     5ec:	e59b0000 	ldr	r0, [r11]
     5f0:	eb00112f 	bl	4ab4 <__aeabi_ui2d>
     5f4:	e1a06000 	mov	r6, r0
     5f8:	e1a07001 	mov	r7, r1
     5fc:	e3a00001 	mov	r0, #1
     600:	eb0002d7 	bl	1164 <get_sample>
     604:	e1a02004 	mov	r2, r4
     608:	e1a03005 	mov	r3, r5
     60c:	eb001064 	bl	47a4 <__adddf3>
     610:	e1a02000 	mov	r2, r0
     614:	e1a03001 	mov	r3, r1
     618:	e1a00006 	mov	r0, r6
     61c:	e1a01007 	mov	r1, r7
     620:	eb001163 	bl	4bb4 <__aeabi_dmul>
     624:	eb0012da 	bl	5194 <__aeabi_d2iz>
     628:	e50a0fb3 	str	r0, [r10, #-4019]	; 0xfffff04d
			
			//decrement the number of samples required
			num_samples_right--;
     62c:	e2488001 	sub	r8, r8, #1
		}
		
		if(num_samples_left > 0){
     630:	e3590000 	cmp	r9, #0
     634:	0a000010 	beq	67c <audio_ISR+0xe4>
			//retrieve and write a sample to the left
			*audio_left = (int) (volume * (get_sample(PLAYBACK_STEREO_L) + sample_mono));
     638:	e59b0000 	ldr	r0, [r11]
     63c:	eb00111c 	bl	4ab4 <__aeabi_ui2d>
     640:	e1a06000 	mov	r6, r0
     644:	e1a07001 	mov	r7, r1
     648:	e3a00002 	mov	r0, #2
     64c:	eb0002c4 	bl	1164 <get_sample>
     650:	e1a02004 	mov	r2, r4
     654:	e1a03005 	mov	r3, r5
     658:	eb001051 	bl	47a4 <__adddf3>
     65c:	e1a02000 	mov	r2, r0
     660:	e1a03001 	mov	r3, r1
     664:	e1a00006 	mov	r0, r6
     668:	e1a01007 	mov	r1, r7
     66c:	eb001150 	bl	4bb4 <__aeabi_dmul>
     670:	eb0012c7 	bl	5194 <__aeabi_d2iz>
     674:	e50a0fb7 	str	r0, [r10, #-4023]	; 0xfffff049
			
			//decrement the number of samples required
			num_samples_left--;
     678:	e2499001 	sub	r9, r9, #1
		}
		
		//check if the audio stream is still valid
		if(!is_stream_valid()){
     67c:	eb000218 	bl	ee4 <is_stream_valid>
     680:	e3500000 	cmp	r0, #0
     684:	1a000005 	bne	6a0 <audio_ISR+0x108>
			stop_all_audio_playback();
     688:	ebffff73 	bl	45c <stop_all_audio_playback>
			status_flags.clear_queue = true;
     68c:	e30731e4 	movw	r3, #29156	; 0x71e4
     690:	e3403000 	movt	r3, #0
     694:	e3a02001 	mov	r2, #1
     698:	e5c32000 	strb	r2, [r3]
			break;
     69c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
	unsigned int fifo_space = *(audio_base + 1);
		
	//check the right and left write availability
	unsigned int num_samples_right = (unsigned int) ((fifo_space >> 16) & 0xFF);
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	while(num_samples_right > 0 || num_samples_left > 0){
     6a0:	e1993008 	orrs	r3, r9, r8
     6a4:	1affffca 	bne	5d4 <audio_ISR+0x3c>
     6a8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

000006ac <config_audio>:
void config_audio(){
	volatile int * audio_base = (int*) AUDIO_BASE;
	
	//set the control bits to clear both write and read queue in the audio controller
	int control = 0b1100;
	*audio_base = control;
     6ac:	e3033fff 	movw	r3, #16383	; 0x3fff
     6b0:	e34f3f20 	movt	r3, #65312	; 0xff20
     6b4:	e3a0200c 	mov	r2, #12
     6b8:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
	
	//unset the control bits to clear and set the correct interrupt bit in the audio controller
	control = 0b0000;
	*audio_base = control;
     6bc:	e3a02000 	mov	r2, #0
     6c0:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
     6c4:	e12fff1e 	bx	lr

000006c8 <config_keys>:
void config_keys(){
	volatile int * key_base = (int*) KEY_BASE;
	
	//turn on interrupts for all the keys
	int interrupt_mask = 0b1111;
	*(key_base + 2) = interrupt_mask;
     6c8:	e3a03000 	mov	r3, #0
     6cc:	e34f3f20 	movt	r3, #65312	; 0xff20
     6d0:	e3a0200f 	mov	r2, #15
     6d4:	e5832058 	str	r2, [r3, #88]	; 0x58
     6d8:	e12fff1e 	bx	lr

000006dc <set_A9_IRQ_stack>:

void set_A9_IRQ_stack(){
	register int stack __asm__ ("r2");
	register int mode __asm__ ("r3");
	
	stack = 0xFFFFFFFF - 7; //top of A9 on-chip memory, aligned to 8 bytes
     6dc:	e3e02007 	mvn	r2, #7
	
	/* change processor to IRQ mode with interrupts disabled */
	mode = 0b11010010;
     6e0:	e3a030d2 	mov	r3, #210	; 0xd2
	__asm__("msr cpsr, %[ps]" : : [ps] "r" (mode));
     6e4:	e129f003 	msr	CPSR_fc, r3
	/* set banked stack pointer */
	__asm__("mov sp, %[ps]" : : [ps] "r" (stack));
     6e8:	e1a0d002 	mov	sp, r2
	
	/* go back to SVC mode before executing subroutine return! */
	mode = 0b11010011;
     6ec:	e3a030d3 	mov	r3, #211	; 0xd3
	__asm__("msr cpsr, %[ps]" : : [ps] "r" (mode));
     6f0:	e129f003 	msr	CPSR_fc, r3
     6f4:	e12fff1e 	bx	lr

000006f8 <enable_A9_interrupts>:
}

void enable_A9_interrupts(){
     6f8:	e24dd008 	sub	sp, sp, #8
	volatile int status = 0b01010011;
     6fc:	e3a03053 	mov	r3, #83	; 0x53
     700:	e58d3004 	str	r3, [sp, #4]
	__asm__("msr cpsr, %[ps]" : : [ps] "r" (status));
     704:	e59d3004 	ldr	r3, [sp, #4]
     708:	e129f003 	msr	CPSR_fc, r3
}
     70c:	e28dd008 	add	sp, sp, #8
     710:	e12fff1e 	bx	lr

00000714 <config_interrupt>:
	// Configure the Distributor Control Register (ICDDCR) to send pending
	// interrupts to CPUs
	*((int *) MPCORE_GIC_DIST + ICDDCR) = 1;
}

void config_interrupt(int N, int CPU_target){
     714:	e24dd010 	sub	sp, sp, #16
	volatile int reg_offset, index, value, address;
	
	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
     718:	e1a031c0 	asr	r3, r0, #3
     71c:	e3c33003 	bic	r3, r3, #3
     720:	e58d300c 	str	r3, [sp, #12]
	index = N & 0x1F;
     724:	e200301f 	and	r3, r0, #31
     728:	e58d3008 	str	r3, [sp, #8]
	value = 0x1 << index;
     72c:	e59d3008 	ldr	r3, [sp, #8]
     730:	e3a02001 	mov	r2, #1
     734:	e1a03312 	lsl	r3, r2, r3
     738:	e58d3004 	str	r3, [sp, #4]
	address = 0xFFFED100 + reg_offset;
     73c:	e59d300c 	ldr	r3, [sp, #12]
     740:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     744:	e2433c03 	sub	r3, r3, #768	; 0x300
     748:	e58d3000 	str	r3, [sp]
	
	/* Now that we know the register address and value, set the appropriate bit */
	*(int *)address |= value;
     74c:	e59d3000 	ldr	r3, [sp]
     750:	e59d2004 	ldr	r2, [sp, #4]
     754:	e593c000 	ldr	r12, [r3]
     758:	e18c2002 	orr	r2, r12, r2
     75c:	e5832000 	str	r2, [r3]
	
	/* Configure the Interrupt Processor Targets Register (ICDIPTRn)
	* reg_offset = integer_div(N / 4) * 4
	* index = N mod 4 */
	
	reg_offset = (N & 0xFFFFFFFC);
     760:	e3c03003 	bic	r3, r0, #3
     764:	e58d300c 	str	r3, [sp, #12]
	index = N & 0x3;
     768:	e2000003 	and	r0, r0, #3
     76c:	e58d0008 	str	r0, [sp, #8]
	address = 0xFFFED800 + reg_offset + index;
     770:	e59d200c 	ldr	r2, [sp, #12]
     774:	e59d3008 	ldr	r3, [sp, #8]
     778:	e0823003 	add	r3, r2, r3
     77c:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     780:	e58d3000 	str	r3, [sp]
	/* Now that we know the register address and value, write to (only) the
	* appropriate byte */
	*(char *)address = (char)CPU_target;
     784:	e59d3000 	ldr	r3, [sp]
     788:	e5c31000 	strb	r1, [r3]
}
     78c:	e28dd010 	add	sp, sp, #16
     790:	e12fff1e 	bx	lr

00000794 <config_GIC>:
void enable_A9_interrupts(){
	volatile int status = 0b01010011;
	__asm__("msr cpsr, %[ps]" : : [ps] "r" (status));
}

void config_GIC(){	
     794:	e92d4008 	push	{r3, lr}
	config_interrupt(KEYS_IRQ, 1);
     798:	e3a00049 	mov	r0, #73	; 0x49
     79c:	e3a01001 	mov	r1, #1
     7a0:	ebffffdb 	bl	714 <config_interrupt>
	config_interrupt(AUDIO_IRQ, 1);
     7a4:	e3a0004e 	mov	r0, #78	; 0x4e
     7a8:	e3a01001 	mov	r1, #1
     7ac:	ebffffd8 	bl	714 <config_interrupt>

	// Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all
	// priorities
	*((int *) MPCORE_GIC_CPUIF + ICCPMR) = 0xFFFF;
     7b0:	e3e02a13 	mvn	r2, #77824	; 0x13000
     7b4:	e30f3fff 	movw	r3, #65535	; 0xffff
     7b8:	e5023eef 	str	r3, [r2, #-3823]	; 0xfffff111
	
	// Set CPU Interface Control Register (ICCICR). Enable signaling of
	// interrupts
	*((int *) MPCORE_GIC_CPUIF + ICCICR) = 1;
     7bc:	e3a03001 	mov	r3, #1
     7c0:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101
	
	// Configure the Distributor Control Register (ICDDCR) to send pending
	// interrupts to CPUs
	*((int *) MPCORE_GIC_DIST + ICDDCR) = 1;
     7c4:	e3e02a12 	mvn	r2, #73728	; 0x12000
     7c8:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
     7cc:	e8bd8008 	pop	{r3, pc}

000007d0 <__cs3_isr_irq>:
#include "interrupt_ID.h"
#include "address_map_arm.h"
#include "exceptions.h"

// Define the IRQ exception handler
void __attribute__((interrupt)) __cs3_isr_irq(){
     7d0:	e24ee004 	sub	lr, lr, #4
     7d4:	e92d500f 	push	{r0, r1, r2, r3, r12, lr}
     7d8:	e24dd008 	sub	sp, sp, #8
	// Read the ICCIAR from the processor interface
	volatile int address = MPCORE_GIC_CPUIF + ICCIAR;
     7dc:	e30c310c 	movw	r3, #49420	; 0xc10c
     7e0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     7e4:	e58d3004 	str	r3, [sp, #4]
	volatile int int_ID = *((int *)address);
     7e8:	e59d3004 	ldr	r3, [sp, #4]
     7ec:	e5933000 	ldr	r3, [r3]
     7f0:	e58d3000 	str	r3, [sp]
	
	if (int_ID == KEYS_IRQ)
     7f4:	e59d3000 	ldr	r3, [sp]
     7f8:	e3530049 	cmp	r3, #73	; 0x49
     7fc:	1a000001 	bne	808 <__cs3_isr_irq+0x38>
		keys_ISR();
     800:	ebffff36 	bl	4e0 <keys_ISR>
     804:	ea000005 	b	820 <__cs3_isr_irq+0x50>
	else if(int_ID == AUDIO_IRQ)
     808:	e59d3000 	ldr	r3, [sp]
     80c:	e353004e 	cmp	r3, #78	; 0x4e
     810:	1a000001 	bne	81c <__cs3_isr_irq+0x4c>
		audio_ISR();
     814:	ebffff5f 	bl	598 <audio_ISR>
     818:	ea000000 	b	820 <__cs3_isr_irq+0x50>
     81c:	eafffffe 	b	81c <__cs3_isr_irq+0x4c>
	else
		while (1);
	
	//clear the interrupt id from the GIC
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = int_ID;
     820:	e59d2000 	ldr	r2, [sp]
     824:	e3e03a13 	mvn	r3, #77824	; 0x13000
     828:	e5032eef 	str	r2, [r3, #-3823]	; 0xfffff111
}
     82c:	e28dd008 	add	sp, sp, #8
     830:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, r12, pc}^

00000834 <__cs3_reset>:

// Define the remaining exception handlers
void __attribute__((interrupt)) __cs3_reset(){
     834:	eafffffe 	b	834 <__cs3_reset>

00000838 <__cs3_isr_undef>:
	while (1);
}

void __attribute__((interrupt)) __cs3_isr_undef(){
     838:	eafffffe 	b	838 <__cs3_isr_undef>

0000083c <__cs3_isr_swi>:
	while (1);
}

void __attribute__((interrupt)) __cs3_isr_swi(){
     83c:	eafffffe 	b	83c <__cs3_isr_swi>

00000840 <__cs3_isr_pabort>:
	while (1);
}

void __attribute__((interrupt)) __cs3_isr_pabort(){
     840:	eafffffe 	b	840 <__cs3_isr_pabort>

00000844 <__cs3_isr_dabort>:
	while (1);
}

void __attribute__((interrupt)) __cs3_isr_dabort(){
     844:	eafffffe 	b	844 <__cs3_isr_dabort>

00000848 <__cs3_isr_fiq>:
	while (1);
}

void __attribute__((interrupt)) __cs3_isr_fiq(){
     848:	eafffffe 	b	848 <__cs3_isr_fiq>

0000084c <get_num>:
	
	return change_in_freq * middle_A_freq;
}

//returns the key number requested of the note and octave given
int get_num(char * note, int octave){	
     84c:	e92d4038 	push	{r3, r4, r5, lr}
     850:	e1a05000 	mov	r5, r0
     854:	e1a04001 	mov	r4, r1
	int number;
	if(!strcmp(note, "C")){
     858:	e3061620 	movw	r1, #26144	; 0x6620
     85c:	e3401000 	movt	r1, #0
     860:	eb001479 	bl	5a4c <strcmp>
     864:	e3500000 	cmp	r0, #0
     868:	0a000060 	beq	9f0 <get_num+0x1a4>
		number = 1;
	} else if(!strcmp(note, "Cs") || !strcmp(note, "Db")){
     86c:	e1a00005 	mov	r0, r5
     870:	e30615e8 	movw	r1, #26088	; 0x65e8
     874:	e3401000 	movt	r1, #0
     878:	eb001473 	bl	5a4c <strcmp>
     87c:	e3500000 	cmp	r0, #0
     880:	0a00005c 	beq	9f8 <get_num+0x1ac>
     884:	e1a00005 	mov	r0, r5
     888:	e3061624 	movw	r1, #26148	; 0x6624
     88c:	e3401000 	movt	r1, #0
     890:	eb00146d 	bl	5a4c <strcmp>
     894:	e3500000 	cmp	r0, #0
     898:	0a000058 	beq	a00 <get_num+0x1b4>
		number = 2;
	} else if(!strcmp(note, "D")){
     89c:	e1a00005 	mov	r0, r5
     8a0:	e3061628 	movw	r1, #26152	; 0x6628
     8a4:	e3401000 	movt	r1, #0
     8a8:	eb001467 	bl	5a4c <strcmp>
     8ac:	e3500000 	cmp	r0, #0
     8b0:	0a000054 	beq	a08 <get_num+0x1bc>
		number = 3;
	} else if(!strcmp(note, "Ds") || !strcmp(note, "Eb")){
     8b4:	e1a00005 	mov	r0, r5
     8b8:	e30615f8 	movw	r1, #26104	; 0x65f8
     8bc:	e3401000 	movt	r1, #0
     8c0:	eb001461 	bl	5a4c <strcmp>
     8c4:	e3500000 	cmp	r0, #0
     8c8:	0a000050 	beq	a10 <get_num+0x1c4>
     8cc:	e1a00005 	mov	r0, r5
     8d0:	e306162c 	movw	r1, #26156	; 0x662c
     8d4:	e3401000 	movt	r1, #0
     8d8:	eb00145b 	bl	5a4c <strcmp>
     8dc:	e3500000 	cmp	r0, #0
     8e0:	0a00004c 	beq	a18 <get_num+0x1cc>
		number = 4;
	} else if(!strcmp(note, "E")){
     8e4:	e1a00005 	mov	r0, r5
     8e8:	e30615ec 	movw	r1, #26092	; 0x65ec
     8ec:	e3401000 	movt	r1, #0
     8f0:	eb001455 	bl	5a4c <strcmp>
     8f4:	e3500000 	cmp	r0, #0
     8f8:	0a000048 	beq	a20 <get_num+0x1d4>
		number = 5;
	} else if(!strcmp(note, "F")){
     8fc:	e1a00005 	mov	r0, r5
     900:	e3061630 	movw	r1, #26160	; 0x6630
     904:	e3401000 	movt	r1, #0
     908:	eb00144f 	bl	5a4c <strcmp>
     90c:	e3500000 	cmp	r0, #0
     910:	0a000044 	beq	a28 <get_num+0x1dc>
		number = 6;
	} else if(!strcmp(note, "Fs") || !strcmp(note, "Gb")){
     914:	e1a00005 	mov	r0, r5
     918:	e30615fc 	movw	r1, #26108	; 0x65fc
     91c:	e3401000 	movt	r1, #0
     920:	eb001449 	bl	5a4c <strcmp>
     924:	e3500000 	cmp	r0, #0
     928:	0a000040 	beq	a30 <get_num+0x1e4>
     92c:	e1a00005 	mov	r0, r5
     930:	e3061634 	movw	r1, #26164	; 0x6634
     934:	e3401000 	movt	r1, #0
     938:	eb001443 	bl	5a4c <strcmp>
     93c:	e3500000 	cmp	r0, #0
     940:	0a00003c 	beq	a38 <get_num+0x1ec>
		number = 7;
	} else if(!strcmp(note, "G")){
     944:	e1a00005 	mov	r0, r5
     948:	e3061638 	movw	r1, #26168	; 0x6638
     94c:	e3401000 	movt	r1, #0
     950:	eb00143d 	bl	5a4c <strcmp>
     954:	e3500000 	cmp	r0, #0
     958:	0a000038 	beq	a40 <get_num+0x1f4>
		number = 8;
	} else if(!strcmp(note, "Gs") || !strcmp(note, "Ab")){
     95c:	e1a00005 	mov	r0, r5
     960:	e306163c 	movw	r1, #26172	; 0x663c
     964:	e3401000 	movt	r1, #0
     968:	eb001437 	bl	5a4c <strcmp>
     96c:	e3500000 	cmp	r0, #0
     970:	0a000034 	beq	a48 <get_num+0x1fc>
     974:	e1a00005 	mov	r0, r5
     978:	e3061640 	movw	r1, #26176	; 0x6640
     97c:	e3401000 	movt	r1, #0
     980:	eb001431 	bl	5a4c <strcmp>
     984:	e3500000 	cmp	r0, #0
     988:	0a000030 	beq	a50 <get_num+0x204>
		number = 9;
	} else if(!strcmp(note, "A")){
     98c:	e1a00005 	mov	r0, r5
     990:	e30615e4 	movw	r1, #26084	; 0x65e4
     994:	e3401000 	movt	r1, #0
     998:	eb00142b 	bl	5a4c <strcmp>
     99c:	e3500000 	cmp	r0, #0
     9a0:	0a00002c 	beq	a58 <get_num+0x20c>
		number = 10;
	} else if(!strcmp(note, "As") || !strcmp(note, "Bb")){
     9a4:	e1a00005 	mov	r0, r5
     9a8:	e3061644 	movw	r1, #26180	; 0x6644
     9ac:	e3401000 	movt	r1, #0
     9b0:	eb001425 	bl	5a4c <strcmp>
     9b4:	e3500000 	cmp	r0, #0
     9b8:	0a000028 	beq	a60 <get_num+0x214>
     9bc:	e1a00005 	mov	r0, r5
     9c0:	e3061648 	movw	r1, #26184	; 0x6648
     9c4:	e3401000 	movt	r1, #0
     9c8:	eb00141f 	bl	5a4c <strcmp>
     9cc:	e3500000 	cmp	r0, #0
     9d0:	0a000024 	beq	a68 <get_num+0x21c>
		number = 11;
	} else if(!strcmp(note, "B")){
     9d4:	e1a00005 	mov	r0, r5
     9d8:	e30615f4 	movw	r1, #26100	; 0x65f4
     9dc:	e3401000 	movt	r1, #0
     9e0:	eb001419 	bl	5a4c <strcmp>
     9e4:	e3500000 	cmp	r0, #0
     9e8:	0a000020 	beq	a70 <get_num+0x224>
     9ec:	eafffffe 	b	9ec <get_num+0x1a0>

//returns the key number requested of the note and octave given
int get_num(char * note, int octave){	
	int number;
	if(!strcmp(note, "C")){
		number = 1;
     9f0:	e3a00001 	mov	r0, #1
     9f4:	ea00001e 	b	a74 <get_num+0x228>
	} else if(!strcmp(note, "Cs") || !strcmp(note, "Db")){
		number = 2;
     9f8:	e3a00002 	mov	r0, #2
     9fc:	ea00001c 	b	a74 <get_num+0x228>
     a00:	e3a00002 	mov	r0, #2
     a04:	ea00001a 	b	a74 <get_num+0x228>
	} else if(!strcmp(note, "D")){
		number = 3;
     a08:	e3a00003 	mov	r0, #3
     a0c:	ea000018 	b	a74 <get_num+0x228>
	} else if(!strcmp(note, "Ds") || !strcmp(note, "Eb")){
		number = 4;
     a10:	e3a00004 	mov	r0, #4
     a14:	ea000016 	b	a74 <get_num+0x228>
     a18:	e3a00004 	mov	r0, #4
     a1c:	ea000014 	b	a74 <get_num+0x228>
	} else if(!strcmp(note, "E")){
		number = 5;
     a20:	e3a00005 	mov	r0, #5
     a24:	ea000012 	b	a74 <get_num+0x228>
	} else if(!strcmp(note, "F")){
		number = 6;
     a28:	e3a00006 	mov	r0, #6
     a2c:	ea000010 	b	a74 <get_num+0x228>
	} else if(!strcmp(note, "Fs") || !strcmp(note, "Gb")){
		number = 7;
     a30:	e3a00007 	mov	r0, #7
     a34:	ea00000e 	b	a74 <get_num+0x228>
     a38:	e3a00007 	mov	r0, #7
     a3c:	ea00000c 	b	a74 <get_num+0x228>
	} else if(!strcmp(note, "G")){
		number = 8;
     a40:	e3a00008 	mov	r0, #8
     a44:	ea00000a 	b	a74 <get_num+0x228>
	} else if(!strcmp(note, "Gs") || !strcmp(note, "Ab")){
		number = 9;
     a48:	e3a00009 	mov	r0, #9
     a4c:	ea000008 	b	a74 <get_num+0x228>
     a50:	e3a00009 	mov	r0, #9
     a54:	ea000006 	b	a74 <get_num+0x228>
	} else if(!strcmp(note, "A")){
		number = 10;
     a58:	e3a0000a 	mov	r0, #10
     a5c:	ea000004 	b	a74 <get_num+0x228>
	} else if(!strcmp(note, "As") || !strcmp(note, "Bb")){
		number = 11;
     a60:	e3a0000b 	mov	r0, #11
     a64:	ea000002 	b	a74 <get_num+0x228>
     a68:	e3a0000b 	mov	r0, #11
     a6c:	ea000000 	b	a74 <get_num+0x228>
	} else if(!strcmp(note, "B")){
		number = 12;
     a70:	e3a0000c 	mov	r0, #12
	} else {
		while (1);
	}
	
	return number + (octave * 12);
     a74:	e0844084 	add	r4, r4, r4, lsl #1
}
     a78:	e0800104 	add	r0, r0, r4, lsl #2
     a7c:	e8bd8038 	pop	{r3, r4, r5, pc}

00000a80 <get_frequency>:
const int sampling_frequency = 8000;
const double sampling_period = 0.000125;
const double default_amplitude = INT_MAX / 500.0;

//returns the frequency requested of the key number given
double get_frequency(char * note, int octave){
     a80:	e92d4010 	push	{r4, lr}
	int key_number = get_num(note, octave);
     a84:	ebffff70 	bl	84c <get_num>
     a88:	e1a04000 	mov	r4, r0
	
	const double middle_A_freq = 440; //Hz
	const int middle_A_num = get_num("A", 4); //number pertaining to the middle A
     a8c:	e30605e4 	movw	r0, #26084	; 0x65e4
     a90:	e3400000 	movt	r0, #0
     a94:	e3a01004 	mov	r1, #4
     a98:	ebffff6b 	bl	84c <get_num>
	
	const double semitone_mult = pow(2, (1.0/12.0)); //change in frequency when going up or down one key
	double semitone_jump = key_number - middle_A_num; //number of jumps from key requested to middle A
     a9c:	e0600004 	rsb	r0, r0, r4
     aa0:	eb00100c 	bl	4ad8 <__aeabi_i2d>
     aa4:	e1a02000 	mov	r2, r0
     aa8:	e1a03001 	mov	r3, r1
	
	double change_in_freq = pow(semitone_mult, semitone_jump);
     aac:	e3070963 	movw	r0, #31075	; 0x7963
     ab0:	e34902d9 	movt	r0, #37593	; 0x92d9
     ab4:	e30f138f 	movw	r1, #62351	; 0xf38f
     ab8:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     abc:	eb000291 	bl	1508 <pow>
	
	return change_in_freq * middle_A_freq;
     ac0:	e3a02000 	mov	r2, #0
     ac4:	e3a03902 	mov	r3, #32768	; 0x8000
     ac8:	e344307b 	movt	r3, #16507	; 0x407b
     acc:	eb001038 	bl	4bb4 <__aeabi_dmul>
}
     ad0:	e8bd8010 	pop	{r4, pc}

00000ad4 <get_note_wave>:
	struct MusicWave wave = {.waveform = wave_array, .length = number_of_samples};
	return wave;
}

//returns a dynamically allocated array representing the wave intensity of each sample for the note
struct MusicWave get_note_wave(struct MusicNote music_note, unsigned int number_of_samples){
     ad4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     ad8:	e24dd01c 	sub	sp, sp, #28
     adc:	e58d0004 	str	r0, [sp, #4]
     ae0:	e28d0018 	add	r0, sp, #24
     ae4:	e9000006 	stmdb	r0, {r1, r2}
     ae8:	e58d3008 	str	r3, [sp, #8]
     aec:	e59d4010 	ldr	r4, [sp, #16]
	//preallocate enough space for all samples
	double * wave_array = malloc(number_of_samples * sizeof(double));
     af0:	e1a07183 	lsl	r7, r3, #3
     af4:	e1a00007 	mov	r0, r7
     af8:	eb0011ea 	bl	52a8 <malloc>
     afc:	e58d000c 	str	r0, [sp, #12]
	
	//find the frequency for the given note and octave
	double frequency;
	if(!strcmp(music_note.note, "S")){ //if the note is silent, return no frequency and zero the intensity
     b00:	e1a00004 	mov	r0, r4
     b04:	e30615f0 	movw	r1, #26096	; 0x65f0
     b08:	e3401000 	movt	r1, #0
     b0c:	eb0013ce 	bl	5a4c <strcmp>
     b10:	e3500000 	cmp	r0, #0
		frequency = 0;
     b14:	03a00000 	moveq	r0, #0
     b18:	03a01000 	moveq	r1, #0
	//preallocate enough space for all samples
	double * wave_array = malloc(number_of_samples * sizeof(double));
	
	//find the frequency for the given note and octave
	double frequency;
	if(!strcmp(music_note.note, "S")){ //if the note is silent, return no frequency and zero the intensity
     b1c:	0a000003 	beq	b30 <get_note_wave+0x5c>
		frequency = 0;
	} else {
		frequency = get_frequency(music_note.note, music_note.octave);
     b20:	e1a00004 	mov	r0, r4
     b24:	e59d1014 	ldr	r1, [sp, #20]
     b28:	ebffffd4 	bl	a80 <get_frequency>
     b2c:	eaffffff 	b	b30 <get_note_wave+0x5c>
	
	//set the current time to zero at the beginning of the wave
	double current_time = 0;
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){		
     b30:	e59d2008 	ldr	r2, [sp, #8]
     b34:	e3520000 	cmp	r2, #0
     b38:	0a00001e 	beq	bb8 <get_note_wave+0xe4>
		wave_array[index] = sin(2 * pi * frequency * current_time);
     b3c:	e3022d18 	movw	r2, #11544	; 0x2d18
     b40:	e3452444 	movt	r2, #21572	; 0x5444
     b44:	e30231fb 	movw	r3, #8699	; 0x21fb
     b48:	e3443019 	movt	r3, #16409	; 0x4019
     b4c:	eb001018 	bl	4bb4 <__aeabi_dmul>
     b50:	e1a08000 	mov	r8, r0
     b54:	e1a09001 	mov	r9, r1
     b58:	e59d600c 	ldr	r6, [sp, #12]
	struct MusicWave wave = {.waveform = wave_array, .length = number_of_samples};
	return wave;
}

//returns a dynamically allocated array representing the wave intensity of each sample for the note
struct MusicWave get_note_wave(struct MusicNote music_note, unsigned int number_of_samples){
     b5c:	e0877006 	add	r7, r7, r6
	} else {
		frequency = get_frequency(music_note.note, music_note.octave);
	}
	
	//set the current time to zero at the beginning of the wave
	double current_time = 0;
     b60:	e3a04000 	mov	r4, #0
     b64:	e3a05000 	mov	r5, #0
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){		
		wave_array[index] = sin(2 * pi * frequency * current_time);
		
		current_time += sampling_period;
     b68:	e30aa9fc 	movw	r10, #43516	; 0xa9fc
     b6c:	e34da2f1 	movt	r10, #54001	; 0xd2f1
     b70:	e306b24d 	movw	r11, #25165	; 0x624d
     b74:	e343bf20 	movt	r11, #16160	; 0x3f20
	//set the current time to zero at the beginning of the wave
	double current_time = 0;
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){		
		wave_array[index] = sin(2 * pi * frequency * current_time);
     b78:	e1a00008 	mov	r0, r8
     b7c:	e1a01009 	mov	r1, r9
     b80:	e1a02004 	mov	r2, r4
     b84:	e1a03005 	mov	r3, r5
     b88:	eb001009 	bl	4bb4 <__aeabi_dmul>
     b8c:	eb00021d 	bl	1408 <sin>
     b90:	e0c600f8 	strd	r0, [r6], #8
		
		current_time += sampling_period;
     b94:	e1a00004 	mov	r0, r4
     b98:	e1a01005 	mov	r1, r5
     b9c:	e1a0200a 	mov	r2, r10
     ba0:	e1a0300b 	mov	r3, r11
     ba4:	eb000efe 	bl	47a4 <__adddf3>
     ba8:	e1a04000 	mov	r4, r0
     bac:	e1a05001 	mov	r5, r1
	
	//set the current time to zero at the beginning of the wave
	double current_time = 0;
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){		
     bb0:	e1560007 	cmp	r6, r7
     bb4:	1affffef 	bne	b78 <get_note_wave+0xa4>
		current_time += sampling_period;
	}
	
	//return the sampled wave
	struct MusicWave wave = {.waveform = wave_array, .length = number_of_samples};
	return wave;
     bb8:	e59d300c 	ldr	r3, [sp, #12]
     bbc:	e59d0004 	ldr	r0, [sp, #4]
     bc0:	e5803000 	str	r3, [r0]
     bc4:	e59d2008 	ldr	r2, [sp, #8]
     bc8:	e5802004 	str	r2, [r0, #4]
}
     bcc:	e28dd01c 	add	sp, sp, #28
     bd0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000bd4 <get_chord_wave>:
	
	return number + (octave * 12);
}

//returns a dynamically allocated array representing the wave intensity of each sample for the chord
struct MusicWave get_chord_wave(struct MusicChord music_chord){
     bd4:	e24dd008 	sub	sp, sp, #8
     bd8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     bdc:	e24dd014 	sub	sp, sp, #20
     be0:	e58d0004 	str	r0, [sp, #4]
     be4:	e28d1034 	add	r1, sp, #52	; 0x34
     be8:	e981000c 	stmib	r1, {r2, r3}
     bec:	e59d9050 	ldr	r9, [sp, #80]	; 0x50
	//find the number of samples for the duration given
	unsigned int number_of_samples = (unsigned int) floor(music_chord.duration * sampling_frequency);
     bf0:	e1cd04d0 	ldrd	r0, [sp, #64]	; 0x40
     bf4:	e3a02000 	mov	r2, #0
     bf8:	e3a03901 	mov	r3, #16384	; 0x4000
     bfc:	e34430bf 	movt	r3, #16575	; 0x40bf
     c00:	eb000feb 	bl	4bb4 <__aeabi_dmul>
     c04:	eb000199 	bl	1270 <floor>
     c08:	eb001178 	bl	51f0 <__aeabi_d2uiz>
     c0c:	e1a0a000 	mov	r10, r0
	
	//the full wave of all notes summed together
	double * wave_array = malloc(number_of_samples * sizeof(double));
     c10:	e1a07180 	lsl	r7, r0, #3
     c14:	e1a00007 	mov	r0, r7
     c18:	eb0011a2 	bl	52a8 <malloc>
     c1c:	e1a06000 	mov	r6, r0
	
	//initialize the wave array to zero
	for(unsigned int i = 0; i < number_of_samples; i++){
     c20:	e35a0000 	cmp	r10, #0
     c24:	0a000006 	beq	c44 <get_chord_wave+0x70>
     c28:	e1a01000 	mov	r1, r0
	
	return number + (octave * 12);
}

//returns a dynamically allocated array representing the wave intensity of each sample for the chord
struct MusicWave get_chord_wave(struct MusicChord music_chord){
     c2c:	e0870000 	add	r0, r7, r0
	//the full wave of all notes summed together
	double * wave_array = malloc(number_of_samples * sizeof(double));
	
	//initialize the wave array to zero
	for(unsigned int i = 0; i < number_of_samples; i++){
		wave_array[i] = 0;
     c30:	e3a02000 	mov	r2, #0
     c34:	e3a03000 	mov	r3, #0
     c38:	e0c120f8 	strd	r2, [r1], #8
	
	//the full wave of all notes summed together
	double * wave_array = malloc(number_of_samples * sizeof(double));
	
	//initialize the wave array to zero
	for(unsigned int i = 0; i < number_of_samples; i++){
     c3c:	e1510000 	cmp	r1, r0
     c40:	1afffffc 	bne	c38 <get_chord_wave+0x64>
		wave_array[i] = 0;
	}
	
	//generate the music wave for each individual note and sum together
	struct MusicWave note_wave;
	for(unsigned int i = 0; i < music_chord.num_notes; i++){
     c44:	e3590000 	cmp	r9, #0
     c48:	0a000015 	beq	ca4 <get_chord_wave+0xd0>
     c4c:	e3a08000 	mov	r8, #0
		note_wave = get_note_wave(music_chord.music_notes[i], number_of_samples);
		
		for(unsigned int j = 0; j < number_of_samples; j++){
			wave_array[j] += note_wave.waveform[j];
     c50:	e1a0b008 	mov	r11, r8
	}
	
	//generate the music wave for each individual note and sum together
	struct MusicWave note_wave;
	for(unsigned int i = 0; i < music_chord.num_notes; i++){
		note_wave = get_note_wave(music_chord.music_notes[i], number_of_samples);
     c54:	e28d0008 	add	r0, sp, #8
     c58:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
     c5c:	e0833188 	add	r3, r3, r8, lsl #3
     c60:	e8930006 	ldm	r3, {r1, r2}
     c64:	e1a0300a 	mov	r3, r10
     c68:	ebffff99 	bl	ad4 <get_note_wave>
		
		for(unsigned int j = 0; j < number_of_samples; j++){
     c6c:	e35a0000 	cmp	r10, #0
     c70:	0a000008 	beq	c98 <get_chord_wave+0xc4>
			wave_array[j] += note_wave.waveform[j];
     c74:	e59d5008 	ldr	r5, [sp, #8]
     c78:	e1a0400b 	mov	r4, r11
     c7c:	e18600d4 	ldrd	r0, [r6, r4]
     c80:	e18520d4 	ldrd	r2, [r5, r4]
     c84:	eb000ec6 	bl	47a4 <__adddf3>
     c88:	e18600f4 	strd	r0, [r6, r4]
     c8c:	e2844008 	add	r4, r4, #8
	//generate the music wave for each individual note and sum together
	struct MusicWave note_wave;
	for(unsigned int i = 0; i < music_chord.num_notes; i++){
		note_wave = get_note_wave(music_chord.music_notes[i], number_of_samples);
		
		for(unsigned int j = 0; j < number_of_samples; j++){
     c90:	e1570004 	cmp	r7, r4
     c94:	1afffff8 	bne	c7c <get_chord_wave+0xa8>
		wave_array[i] = 0;
	}
	
	//generate the music wave for each individual note and sum together
	struct MusicWave note_wave;
	for(unsigned int i = 0; i < music_chord.num_notes; i++){
     c98:	e2888001 	add	r8, r8, #1
     c9c:	e1580009 	cmp	r8, r9
     ca0:	1affffeb 	bne	c54 <get_chord_wave+0x80>
			wave_array[j] += note_wave.waveform[j];
		}
	}
	
	//increase the volume of the wave
	for(unsigned int i = 0; i < number_of_samples; i++){
     ca4:	e35a0000 	cmp	r10, #0
     ca8:	0a000010 	beq	cf0 <get_chord_wave+0x11c>
		wave_array[i] *= music_chord.intensity * default_amplitude;
     cac:	e1cd04d8 	ldrd	r0, [sp, #72]	; 0x48
     cb0:	e30e2560 	movw	r2, #58720	; 0xe560
     cb4:	e34d22d0 	movt	r2, #53968	; 0xd2d0
     cb8:	e306324d 	movw	r3, #25165	; 0x624d
     cbc:	e3443150 	movt	r3, #16720	; 0x4150
     cc0:	eb000fbb 	bl	4bb4 <__aeabi_dmul>
     cc4:	e1a04000 	mov	r4, r0
     cc8:	e1a05001 	mov	r5, r1
     ccc:	e1a08006 	mov	r8, r6
	
	return number + (octave * 12);
}

//returns a dynamically allocated array representing the wave intensity of each sample for the chord
struct MusicWave get_chord_wave(struct MusicChord music_chord){
     cd0:	e0867007 	add	r7, r6, r7
		}
	}
	
	//increase the volume of the wave
	for(unsigned int i = 0; i < number_of_samples; i++){
		wave_array[i] *= music_chord.intensity * default_amplitude;
     cd4:	e1c800d0 	ldrd	r0, [r8]
     cd8:	e1a02004 	mov	r2, r4
     cdc:	e1a03005 	mov	r3, r5
     ce0:	eb000fb3 	bl	4bb4 <__aeabi_dmul>
     ce4:	e0c800f8 	strd	r0, [r8], #8
			wave_array[j] += note_wave.waveform[j];
		}
	}
	
	//increase the volume of the wave
	for(unsigned int i = 0; i < number_of_samples; i++){
     ce8:	e1580007 	cmp	r8, r7
     cec:	1afffff8 	bne	cd4 <get_chord_wave+0x100>
		wave_array[i] *= music_chord.intensity * default_amplitude;
	}

	struct MusicWave wave = {.waveform = wave_array, .length = number_of_samples};
	return wave;
     cf0:	e59d3004 	ldr	r3, [sp, #4]
     cf4:	e5836000 	str	r6, [r3]
     cf8:	e583a004 	str	r10, [r3, #4]
}
     cfc:	e1a00003 	mov	r0, r3
     d00:	e28dd014 	add	sp, sp, #20
     d04:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     d08:	e28dd008 	add	sp, sp, #8
     d0c:	e12fff1e 	bx	lr

00000d10 <copy_wave>:
	struct MusicWave wave = {.waveform = wave_array, .length = number_of_samples};
	return wave;
}

//returns a copy of the given music wave
struct MusicWave copy_wave(struct MusicWave wave){
     d10:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     d14:	e24dd00c 	sub	sp, sp, #12
     d18:	e1a06000 	mov	r6, r0
     d1c:	e28d3008 	add	r3, sp, #8
     d20:	e9030006 	stmdb	r3, {r1, r2}
     d24:	e59d7004 	ldr	r7, [sp, #4]
	double * wave_array = malloc(wave.length * sizeof(double));
     d28:	e1a04187 	lsl	r4, r7, #3
     d2c:	e1a00004 	mov	r0, r4
     d30:	eb00115c 	bl	52a8 <malloc>
	
	for(unsigned int i = 0; i < wave.length; i++)
     d34:	e3570000 	cmp	r7, #0
     d38:	0a000006 	beq	d58 <copy_wave+0x48>
		wave_array[i] = wave.waveform[i];
     d3c:	e59d5000 	ldr	r5, [sp]
     d40:	e3a01000 	mov	r1, #0
     d44:	e18520d1 	ldrd	r2, [r5, r1]
     d48:	e18020f1 	strd	r2, [r0, r1]
     d4c:	e2811008 	add	r1, r1, #8

//returns a copy of the given music wave
struct MusicWave copy_wave(struct MusicWave wave){
	double * wave_array = malloc(wave.length * sizeof(double));
	
	for(unsigned int i = 0; i < wave.length; i++)
     d50:	e1540001 	cmp	r4, r1
     d54:	1afffffa 	bne	d44 <copy_wave+0x34>
		wave_array[i] = wave.waveform[i];
	
	struct MusicWave wave_copy = {.waveform = wave_array, .length = wave.length};
	return wave_copy;
     d58:	e5860000 	str	r0, [r6]
     d5c:	e5867004 	str	r7, [r6, #4]
     d60:	e1a00006 	mov	r0, r6
     d64:	e28dd00c 	add	sp, sp, #12
     d68:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00000d6c <initialize_stream>:

struct AudioStream audio_stream;
extern const double sampling_period;

//initializes the stream assuming the current song is correct
void initialize_stream(){
     d6c:	e92d4070 	push	{r4, r5, r6, lr}
	//allocate memory for the stream
	audio_stream.current_playback_locations = malloc(sizeof(unsigned int) * audio_stream.current_song.num_tracks);
     d70:	e30741e8 	movw	r4, #29160	; 0x71e8
     d74:	e3404000 	movt	r4, #0
     d78:	e5946018 	ldr	r6, [r4, #24]
     d7c:	e1a05106 	lsl	r5, r6, #2
     d80:	e1a00005 	mov	r0, r5
     d84:	eb001147 	bl	52a8 <malloc>
     d88:	e5840000 	str	r0, [r4]
	audio_stream.current_process_locations = malloc(sizeof(unsigned int) * audio_stream.current_song.num_tracks);
     d8c:	e1a00005 	mov	r0, r5
     d90:	eb001144 	bl	52a8 <malloc>
     d94:	e5840004 	str	r0, [r4, #4]
	
	audio_stream.queue_fronts = malloc(sizeof(struct MusicWaveNode *) * audio_stream.current_song.num_tracks);
     d98:	e1a00005 	mov	r0, r5
     d9c:	eb001141 	bl	52a8 <malloc>
     da0:	e5840008 	str	r0, [r4, #8]
	audio_stream.queue_backs = malloc(sizeof(struct MusicWaveNode *) * audio_stream.current_song.num_tracks);
     da4:	e1a00005 	mov	r0, r5
     da8:	eb00113e 	bl	52a8 <malloc>
     dac:	e584000c 	str	r0, [r4, #12]
	
	audio_stream.durations = malloc(sizeof(double) * audio_stream.current_song.num_tracks);
     db0:	e1a00186 	lsl	r0, r6, #3
     db4:	eb00113b 	bl	52a8 <malloc>
     db8:	e5840010 	str	r0, [r4, #16]
	
	//initialize all variables
	for(unsigned int i = 0; i < audio_stream.current_song.num_tracks; i++){
     dbc:	e5943018 	ldr	r3, [r4, #24]
     dc0:	e3530000 	cmp	r3, #0
     dc4:	08bd8070 	popeq	{r4, r5, r6, pc}
     dc8:	e3a01000 	mov	r1, #0
		audio_stream.current_playback_locations[i] = 0;
     dcc:	e1a00004 	mov	r0, r4
     dd0:	e1a0c001 	mov	r12, r1
		audio_stream.current_process_locations[i] = 0;
		
		audio_stream.queue_fronts[i] = NULL;
		audio_stream.queue_backs[i] = NULL;
		
		audio_stream.durations[i] = 0;
     dd4:	e3a02000 	mov	r2, #0
     dd8:	e3a03000 	mov	r3, #0
	
	audio_stream.durations = malloc(sizeof(double) * audio_stream.current_song.num_tracks);
	
	//initialize all variables
	for(unsigned int i = 0; i < audio_stream.current_song.num_tracks; i++){
		audio_stream.current_playback_locations[i] = 0;
     ddc:	e5904000 	ldr	r4, [r0]
     de0:	e784c101 	str	r12, [r4, r1, lsl #2]
		audio_stream.current_process_locations[i] = 0;
     de4:	e5904004 	ldr	r4, [r0, #4]
     de8:	e784c101 	str	r12, [r4, r1, lsl #2]
		
		audio_stream.queue_fronts[i] = NULL;
     dec:	e5904008 	ldr	r4, [r0, #8]
     df0:	e784c101 	str	r12, [r4, r1, lsl #2]
		audio_stream.queue_backs[i] = NULL;
     df4:	e590400c 	ldr	r4, [r0, #12]
     df8:	e784c101 	str	r12, [r4, r1, lsl #2]
		
		audio_stream.durations[i] = 0;
     dfc:	e5905010 	ldr	r5, [r0, #16]
     e00:	e1a04181 	lsl	r4, r1, #3
     e04:	e18520f4 	strd	r2, [r5, r4]
	audio_stream.queue_backs = malloc(sizeof(struct MusicWaveNode *) * audio_stream.current_song.num_tracks);
	
	audio_stream.durations = malloc(sizeof(double) * audio_stream.current_song.num_tracks);
	
	//initialize all variables
	for(unsigned int i = 0; i < audio_stream.current_song.num_tracks; i++){
     e08:	e2811001 	add	r1, r1, #1
     e0c:	e5904018 	ldr	r4, [r0, #24]
     e10:	e1540001 	cmp	r4, r1
     e14:	8afffff0 	bhi	ddc <initialize_stream+0x70>
     e18:	e8bd8070 	pop	{r4, r5, r6, pc}

00000e1c <advance_stream>:
		audio_stream.current_process_locations[i] = 0;
		audio_stream.durations[i] = 0;
	}
}

void advance_stream(struct MusicWaveNode ** front_node){
     e1c:	e92d4038 	push	{r3, r4, r5, lr}
     e20:	e1a04000 	mov	r4, r0
	//save a copy of the pointer to the next node
	struct MusicWaveNode * next_node = (*front_node)->next;
     e24:	e5903000 	ldr	r3, [r0]
     e28:	e5935008 	ldr	r5, [r3, #8]
	
	//free the memory from both the waveform and the node
	free((*front_node)->wave.waveform);
     e2c:	e5930000 	ldr	r0, [r3]
     e30:	eb001124 	bl	52c8 <free>
	free(*front_node);
     e34:	e5940000 	ldr	r0, [r4]
     e38:	eb001122 	bl	52c8 <free>
	
	//reattach the rest of the queue to the front
	*front_node = next_node;
     e3c:	e5845000 	str	r5, [r4]
     e40:	e8bd8038 	pop	{r3, r4, r5, pc}

00000e44 <clear_stream>:
	//increase the duration of the audio stream by the duration of the chord just processed
	audio_stream.durations[i] += current_chord.duration;
}

//clears the stream but keeps the current song the same
void clear_stream(){
     e44:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
	for(unsigned int i = 0; i < audio_stream.current_song.num_tracks; i++){
     e48:	e30731e8 	movw	r3, #29160	; 0x71e8
     e4c:	e3403000 	movt	r3, #0
     e50:	e5933018 	ldr	r3, [r3, #24]
     e54:	e3530000 	cmp	r3, #0
     e58:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, r10, pc}
     e5c:	ea000013 	b	eb0 <clear_stream+0x6c>
		//advance the stream to the end
		while(audio_stream.queue_fronts[i] != NULL)
			advance_stream(&audio_stream.queue_fronts[i]);
     e60:	ebffffed 	bl	e1c <advance_stream>

//clears the stream but keeps the current song the same
void clear_stream(){
	for(unsigned int i = 0; i < audio_stream.current_song.num_tracks; i++){
		//advance the stream to the end
		while(audio_stream.queue_fronts[i] != NULL)
     e64:	e5973008 	ldr	r3, [r7, #8]
     e68:	e0830006 	add	r0, r3, r6
     e6c:	e7933006 	ldr	r3, [r3, r6]
     e70:	e3530000 	cmp	r3, #0
     e74:	1afffff9 	bne	e60 <clear_stream+0x1c>
			advance_stream(&audio_stream.queue_fronts[i]);
		
		//set all other variables pertaining to the respective track to zero
		audio_stream.queue_backs[i] = NULL;
     e78:	e597300c 	ldr	r3, [r7, #12]
     e7c:	e783a006 	str	r10, [r3, r6]
		audio_stream.current_playback_locations[i] = 0;
     e80:	e5973000 	ldr	r3, [r7]
     e84:	e783a006 	str	r10, [r3, r6]
		audio_stream.current_process_locations[i] = 0;
     e88:	e5973004 	ldr	r3, [r7, #4]
     e8c:	e783a006 	str	r10, [r3, r6]
		audio_stream.durations[i] = 0;
     e90:	e5972010 	ldr	r2, [r7, #16]
     e94:	e1a03188 	lsl	r3, r8, #3
     e98:	e18240f3 	strd	r4, [r2, r3]
	audio_stream.durations[i] += current_chord.duration;
}

//clears the stream but keeps the current song the same
void clear_stream(){
	for(unsigned int i = 0; i < audio_stream.current_song.num_tracks; i++){
     e9c:	e2888001 	add	r8, r8, #1
     ea0:	e5973018 	ldr	r3, [r7, #24]
     ea4:	e1530008 	cmp	r3, r8
     ea8:	8a000006 	bhi	ec8 <clear_stream+0x84>
     eac:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}
     eb0:	e3a08000 	mov	r8, #0
		//advance the stream to the end
		while(audio_stream.queue_fronts[i] != NULL)
     eb4:	e30771e8 	movw	r7, #29160	; 0x71e8
     eb8:	e3407000 	movt	r7, #0
			advance_stream(&audio_stream.queue_fronts[i]);
		
		//set all other variables pertaining to the respective track to zero
		audio_stream.queue_backs[i] = NULL;
     ebc:	e1a0a008 	mov	r10, r8
		audio_stream.current_playback_locations[i] = 0;
		audio_stream.current_process_locations[i] = 0;
		audio_stream.durations[i] = 0;
     ec0:	e3a04000 	mov	r4, #0
     ec4:	e3a05000 	mov	r5, #0

//clears the stream but keeps the current song the same
void clear_stream(){
	for(unsigned int i = 0; i < audio_stream.current_song.num_tracks; i++){
		//advance the stream to the end
		while(audio_stream.queue_fronts[i] != NULL)
     ec8:	e1a06108 	lsl	r6, r8, #2
     ecc:	e5973008 	ldr	r3, [r7, #8]
     ed0:	e0830006 	add	r0, r3, r6
     ed4:	e7933108 	ldr	r3, [r3, r8, lsl #2]
     ed8:	e3530000 	cmp	r3, #0
     edc:	1affffdf 	bne	e60 <clear_stream+0x1c>
     ee0:	eaffffe4 	b	e78 <clear_stream+0x34>

00000ee4 <is_stream_valid>:
	//reattach the rest of the queue to the front
	*front_node = next_node;
}

bool is_stream_valid(){
	for(unsigned int i = 0; i < audio_stream.current_song.num_tracks; i++){
     ee4:	e30731e8 	movw	r3, #29160	; 0x71e8
     ee8:	e3403000 	movt	r3, #0
     eec:	e5930018 	ldr	r0, [r3, #24]
     ef0:	e3500000 	cmp	r0, #0
     ef4:	0a00000f 	beq	f38 <is_stream_valid+0x54>
		if(audio_stream.queue_fronts[i] == NULL) return false;
     ef8:	e30731e8 	movw	r3, #29160	; 0x71e8
     efc:	e3403000 	movt	r3, #0
     f00:	e5932008 	ldr	r2, [r3, #8]
     f04:	e5923000 	ldr	r3, [r2]
     f08:	e3530000 	cmp	r3, #0
     f0c:	0a00000b 	beq	f40 <is_stream_valid+0x5c>
	//reattach the rest of the queue to the front
	*front_node = next_node;
}

bool is_stream_valid(){
	for(unsigned int i = 0; i < audio_stream.current_song.num_tracks; i++){
     f10:	e3a03000 	mov	r3, #0
     f14:	ea000002 	b	f24 <is_stream_valid+0x40>
		if(audio_stream.queue_fronts[i] == NULL) return false;
     f18:	e5b21004 	ldr	r1, [r2, #4]!
     f1c:	e3510000 	cmp	r1, #0
     f20:	0a000008 	beq	f48 <is_stream_valid+0x64>
	//reattach the rest of the queue to the front
	*front_node = next_node;
}

bool is_stream_valid(){
	for(unsigned int i = 0; i < audio_stream.current_song.num_tracks; i++){
     f24:	e2833001 	add	r3, r3, #1
     f28:	e1530000 	cmp	r3, r0
     f2c:	1afffff9 	bne	f18 <is_stream_valid+0x34>
		if(audio_stream.queue_fronts[i] == NULL) return false;
	}
	
	return true;
     f30:	e3a00001 	mov	r0, #1
     f34:	e12fff1e 	bx	lr
     f38:	e3a00001 	mov	r0, #1
     f3c:	e12fff1e 	bx	lr
	*front_node = next_node;
}

bool is_stream_valid(){
	for(unsigned int i = 0; i < audio_stream.current_song.num_tracks; i++){
		if(audio_stream.queue_fronts[i] == NULL) return false;
     f40:	e3a00000 	mov	r0, #0
     f44:	e12fff1e 	bx	lr
     f48:	e3a00000 	mov	r0, #0
	}
	
	return true;
}
     f4c:	e12fff1e 	bx	lr

00000f50 <get_next_processed_track>:

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
     f50:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song.num_tracks; i++){
     f54:	e30731e8 	movw	r3, #29160	; 0x71e8
     f58:	e3403000 	movt	r3, #0
     f5c:	e5938018 	ldr	r8, [r3, #24]
     f60:	e3580001 	cmp	r8, #1
     f64:	9a000016 	bls	fc4 <get_next_processed_track+0x74>
		if(audio_stream.current_process_locations[i] < audio_stream.current_song.music_tracks[i].length 
			&& audio_stream.durations[i] < audio_stream.durations[shortest_duration_index]){
     f68:	e30731e8 	movw	r3, #29160	; 0x71e8
     f6c:	e3403000 	movt	r3, #0
     f70:	e593a010 	ldr	r10, [r3, #16]
     f74:	e5936004 	ldr	r6, [r3, #4]
     f78:	e5935014 	ldr	r5, [r3, #20]
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song.num_tracks; i++){
     f7c:	e3a04001 	mov	r4, #1
	return true;
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
     f80:	e3a07000 	mov	r7, #0
	for(unsigned int i = 1; i < audio_stream.current_song.num_tracks; i++){
		if(audio_stream.current_process_locations[i] < audio_stream.current_song.music_tracks[i].length 
     f84:	e5b62004 	ldr	r2, [r6, #4]!
     f88:	e5953014 	ldr	r3, [r5, #20]
     f8c:	e1520003 	cmp	r2, r3
     f90:	2a000006 	bcs	fb0 <get_next_processed_track+0x60>
	
	return true;
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
     f94:	e1a02184 	lsl	r2, r4, #3
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song.num_tracks; i++){
		if(audio_stream.current_process_locations[i] < audio_stream.current_song.music_tracks[i].length 
			&& audio_stream.durations[i] < audio_stream.durations[shortest_duration_index]){
     f98:	e1a03187 	lsl	r3, r7, #3
     f9c:	e18a00d2 	ldrd	r0, [r10, r2]
     fa0:	e18320da 	ldrd	r2, [r3, r10]
     fa4:	eb001062 	bl	5134 <__aeabi_dcmplt>
     fa8:	e3500000 	cmp	r0, #0
     fac:	11a07004 	movne	r7, r4
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song.num_tracks; i++){
     fb0:	e2844001 	add	r4, r4, #1
     fb4:	e285500c 	add	r5, r5, #12
     fb8:	e1540008 	cmp	r4, r8
     fbc:	1afffff0 	bne	f84 <get_next_processed_track+0x34>
     fc0:	ea000000 	b	fc8 <get_next_processed_track+0x78>
	return true;
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
     fc4:	e3a07000 	mov	r7, #0
			&& audio_stream.durations[i] < audio_stream.durations[shortest_duration_index]){
			shortest_duration_index = i;
		}
	}
	return shortest_duration_index;
}
     fc8:	e1a00007 	mov	r0, r7
     fcc:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}

00000fd0 <populate_stream>:
		audio_stream.durations[i] = 0;
	}
}

//processes one chord of the shortest duration track
void populate_stream(){
     fd0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     fd4:	e24dd040 	sub	sp, sp, #64	; 0x40
	unsigned int i = get_next_processed_track();
     fd8:	ebffffdc 	bl	f50 <get_next_processed_track>
     fdc:	e1a06000 	mov	r6, r0
	
	//retrieve the current track
	struct MusicTrack current_track = audio_stream.current_song.music_tracks[i];
     fe0:	e30731e8 	movw	r3, #29160	; 0x71e8
     fe4:	e3403000 	movt	r3, #0
     fe8:	e0802080 	add	r2, r0, r0, lsl #1
     fec:	e1a02102 	lsl	r2, r2, #2
     ff0:	e5931014 	ldr	r1, [r3, #20]
     ff4:	e0810002 	add	r0, r1, r2
     ff8:	e7911002 	ldr	r1, [r1, r2]
	
	//check to make sure there is more song left for the respective track
	if(audio_stream.current_process_locations[i] >= current_track.length) return;
     ffc:	e5932004 	ldr	r2, [r3, #4]
    1000:	e7923106 	ldr	r3, [r2, r6, lsl #2]
    1004:	e5902008 	ldr	r2, [r0, #8]
    1008:	e1530002 	cmp	r3, r2
    100c:	2a000035 	bcs	10e8 <populate_stream+0x118>
	
	//retrieve the current chord
	struct MusicChord current_chord = current_track.music_chords[audio_stream.current_process_locations[i]];
    1010:	e0814283 	add	r4, r1, r3, lsl #5
    1014:	e28dc020 	add	r12, sp, #32
    1018:	e1a0e004 	mov	lr, r4
    101c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    1020:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1024:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
    1028:	e88c000f 	stm	r12, {r0, r1, r2, r3}
    102c:	e1c440d8 	ldrd	r4, [r4, #8]
	
	//add a new node to the back of the respective queue
	struct MusicWaveNode * node = malloc(sizeof(struct MusicWaveNode));
    1030:	e3a0000c 	mov	r0, #12
    1034:	eb00109b 	bl	52a8 <malloc>
    1038:	e1a07000 	mov	r7, r0
	
	node->wave = get_chord_wave(current_chord);
    103c:	e1cd42f8 	strd	r4, [sp, #40]	; 0x28
    1040:	e28d8018 	add	r8, sp, #24
    1044:	e1a0c00d 	mov	r12, sp
    1048:	e28de028 	add	lr, sp, #40	; 0x28
    104c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    1050:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1054:	e89e0003 	ldm	lr, {r0, r1}
    1058:	e88c0003 	stm	r12, {r0, r1}
    105c:	e28d3020 	add	r3, sp, #32
    1060:	e893000c 	ldm	r3, {r2, r3}
    1064:	e1a00008 	mov	r0, r8
    1068:	ebfffed9 	bl	bd4 <get_chord_wave>
    106c:	e8980003 	ldm	r8, {r0, r1}
    1070:	e8870003 	stm	r7, {r0, r1}
	node->next = NULL;
    1074:	e3a03000 	mov	r3, #0
    1078:	e5873008 	str	r3, [r7, #8]
	
	//append the node to the back of the queue
	if(audio_stream.queue_backs[i] != NULL)
    107c:	e30731e8 	movw	r3, #29160	; 0x71e8
    1080:	e3403000 	movt	r3, #0
    1084:	e593300c 	ldr	r3, [r3, #12]
    1088:	e7933106 	ldr	r3, [r3, r6, lsl #2]
    108c:	e3530000 	cmp	r3, #0
		audio_stream.queue_backs[i]->next = node;
    1090:	15837008 	strne	r7, [r3, #8]
	
	audio_stream.queue_backs[i] = node;
    1094:	e30731e8 	movw	r3, #29160	; 0x71e8
    1098:	e3403000 	movt	r3, #0
    109c:	e593200c 	ldr	r2, [r3, #12]
    10a0:	e7827106 	str	r7, [r2, r6, lsl #2]
	
	//if the front of the list is null, the added node is also the front of the list
	if(audio_stream.queue_fronts[i] == NULL) audio_stream.queue_fronts[i] = node;
    10a4:	e5933008 	ldr	r3, [r3, #8]
    10a8:	e7932106 	ldr	r2, [r3, r6, lsl #2]
    10ac:	e3520000 	cmp	r2, #0
    10b0:	07837106 	streq	r7, [r3, r6, lsl #2]
	
	//increment the location to be the next chord to be processed
	audio_stream.current_process_locations[i]++;
    10b4:	e30731e8 	movw	r3, #29160	; 0x71e8
    10b8:	e3403000 	movt	r3, #0
    10bc:	e5932004 	ldr	r2, [r3, #4]
    10c0:	e7921106 	ldr	r1, [r2, r6, lsl #2]
    10c4:	e2811001 	add	r1, r1, #1
    10c8:	e7821106 	str	r1, [r2, r6, lsl #2]
	
	//increase the duration of the audio stream by the duration of the chord just processed
	audio_stream.durations[i] += current_chord.duration;
    10cc:	e1a06186 	lsl	r6, r6, #3
    10d0:	e5937010 	ldr	r7, [r3, #16]
    10d4:	e18700d6 	ldrd	r0, [r7, r6]
    10d8:	e1a02004 	mov	r2, r4
    10dc:	e1a03005 	mov	r3, r5
    10e0:	eb000daf 	bl	47a4 <__adddf3>
    10e4:	e18700f6 	strd	r0, [r7, r6]
}
    10e8:	e28dd040 	add	sp, sp, #64	; 0x40
    10ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000010f0 <get_time_left>:
	}
	return shortest_duration_index;
}

//finds the track with the most processed time and returns the duration of it
double get_time_left(){
    10f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	unsigned int longest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song.num_tracks; i++){
    10f4:	e30731e8 	movw	r3, #29160	; 0x71e8
    10f8:	e3403000 	movt	r3, #0
    10fc:	e5937018 	ldr	r7, [r3, #24]
    1100:	e3570001 	cmp	r7, #1
    1104:	9a00000f 	bls	1148 <get_time_left+0x58>
		if(audio_stream.durations[i] > audio_stream.durations[longest_duration_index]){
    1108:	e30731e8 	movw	r3, #29160	; 0x71e8
    110c:	e3403000 	movt	r3, #0
    1110:	e5938010 	ldr	r8, [r3, #16]
    1114:	e1a06008 	mov	r6, r8
}

//finds the track with the most processed time and returns the duration of it
double get_time_left(){
	unsigned int longest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song.num_tracks; i++){
    1118:	e3a04001 	mov	r4, #1
	return shortest_duration_index;
}

//finds the track with the most processed time and returns the duration of it
double get_time_left(){
	unsigned int longest_duration_index = 0;
    111c:	e3a05000 	mov	r5, #0
	for(unsigned int i = 1; i < audio_stream.current_song.num_tracks; i++){
		if(audio_stream.durations[i] > audio_stream.durations[longest_duration_index]){
    1120:	e1a03185 	lsl	r3, r5, #3
    1124:	e1e600d8 	ldrd	r0, [r6, #8]!
    1128:	e18320d8 	ldrd	r2, [r3, r8]
    112c:	eb001012 	bl	517c <__aeabi_dcmpgt>
    1130:	e3500000 	cmp	r0, #0
    1134:	11a05004 	movne	r5, r4
}

//finds the track with the most processed time and returns the duration of it
double get_time_left(){
	unsigned int longest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song.num_tracks; i++){
    1138:	e2844001 	add	r4, r4, #1
    113c:	e1540007 	cmp	r4, r7
    1140:	1afffff6 	bne	1120 <get_time_left+0x30>
    1144:	ea000000 	b	114c <get_time_left+0x5c>
	return shortest_duration_index;
}

//finds the track with the most processed time and returns the duration of it
double get_time_left(){
	unsigned int longest_duration_index = 0;
    1148:	e3a05000 	mov	r5, #0
	for(unsigned int i = 1; i < audio_stream.current_song.num_tracks; i++){
		if(audio_stream.durations[i] > audio_stream.durations[longest_duration_index]){
			longest_duration_index = i;
		}
	}
	return audio_stream.durations[longest_duration_index];
    114c:	e30731e8 	movw	r3, #29160	; 0x71e8
    1150:	e3403000 	movt	r3, #0
    1154:	e5933010 	ldr	r3, [r3, #16]
    1158:	e1a05185 	lsl	r5, r5, #3
}
    115c:	e18300d5 	ldrd	r0, [r3, r5]
    1160:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00001164 <get_sample>:

//retrieve the current sample for all tracks of the provided playback type
double get_sample(char playback_type){
	//store the sample to be returned
    1164:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1168:	e24dd00c 	sub	sp, sp, #12
    116c:	e1a07000 	mov	r7, r0
	double to_return = 0;
	
	//check each track to see if it is to be placed on the right
	for(unsigned int i = 0; i < audio_stream.current_song.num_tracks; i++){
		struct MusicTrack current_track = audio_stream.current_song.music_tracks[i];
    1170:	e30731e8 	movw	r3, #29160	; 0x71e8
    1174:	e3403000 	movt	r3, #0
    1178:	e5933018 	ldr	r3, [r3, #24]
    117c:	e3530000 	cmp	r3, #0
    1180:	0a000033 	beq	1254 <get_sample+0xf0>
    1184:	e3a06000 	mov	r6, #0
    1188:	e1a04006 	mov	r4, r6

//retrieve the current sample for all tracks of the provided playback type
double get_sample(char playback_type){
	//store the sample to be returned
	double to_return = 0;
	
    118c:	e3a02000 	mov	r2, #0
    1190:	e3a03000 	mov	r3, #0
    1194:	e1cd20f0 	strd	r2, [sp]
	//check each track to see if it is to be placed on the right
	for(unsigned int i = 0; i < audio_stream.current_song.num_tracks; i++){
		struct MusicTrack current_track = audio_stream.current_song.music_tracks[i];
		
    1198:	e30751e8 	movw	r5, #29160	; 0x71e8
    119c:	e3405000 	movt	r5, #0
			//increment the next sample location
			audio_stream.current_playback_locations[i]++;
			
			//decrement the duration of the track played
			audio_stream.durations[i] -= sampling_period;
			
    11a0:	e306b608 	movw	r11, #26120	; 0x6608
    11a4:	e340b000 	movt	r11, #0
	double to_return = 0;
	
	//check each track to see if it is to be placed on the right
	for(unsigned int i = 0; i < audio_stream.current_song.num_tracks; i++){
		struct MusicTrack current_track = audio_stream.current_song.music_tracks[i];
		
    11a8:	e5953014 	ldr	r3, [r5, #20]
    11ac:	e0833006 	add	r3, r3, r6
		if(current_track.playback_type == playback_type){
			to_return += audio_stream.queue_fronts[i]->wave.waveform[audio_stream.current_playback_locations[i]];
    11b0:	e5d33004 	ldrb	r3, [r3, #4]
    11b4:	e1530007 	cmp	r3, r7
    11b8:	1a00001f 	bne	123c <get_sample+0xd8>
			
    11bc:	e1a09104 	lsl	r9, r4, #2
    11c0:	e5958000 	ldr	r8, [r5]
    11c4:	e798a104 	ldr	r10, [r8, r4, lsl #2]
    11c8:	e5953008 	ldr	r3, [r5, #8]
    11cc:	e7933104 	ldr	r3, [r3, r4, lsl #2]
    11d0:	e5932000 	ldr	r2, [r3]
    11d4:	e1a0318a 	lsl	r3, r10, #3
    11d8:	e1cd00d0 	ldrd	r0, [sp]
    11dc:	e0833002 	add	r3, r3, r2
    11e0:	e1c320d0 	ldrd	r2, [r3]
    11e4:	eb000d6e 	bl	47a4 <__adddf3>
    11e8:	e1cd00f0 	strd	r0, [sp]
			//increment the next sample location
			audio_stream.current_playback_locations[i]++;
			
    11ec:	e28aa001 	add	r10, r10, #1
    11f0:	e788a104 	str	r10, [r8, r4, lsl #2]
			//decrement the duration of the track played
			audio_stream.durations[i] -= sampling_period;
			
    11f4:	e1a08184 	lsl	r8, r4, #3
    11f8:	e595a010 	ldr	r10, [r5, #16]
    11fc:	e18a00d8 	ldrd	r0, [r10, r8]
    1200:	e1cb20d0 	ldrd	r2, [r11]
    1204:	eb000d65 	bl	47a0 <__aeabi_dsub>
    1208:	e18a00f8 	strd	r0, [r10, r8]
			//if the current wave has reached the end, advance and reset location
			if(audio_stream.current_playback_locations[i] == audio_stream.queue_fronts[i]->wave.length){
				advance_stream(&audio_stream.queue_fronts[i]);
    120c:	e5953008 	ldr	r3, [r5, #8]
    1210:	e0830009 	add	r0, r3, r9
    1214:	e5952000 	ldr	r2, [r5]
    1218:	e7933104 	ldr	r3, [r3, r4, lsl #2]
    121c:	e7922104 	ldr	r2, [r2, r4, lsl #2]
    1220:	e5933004 	ldr	r3, [r3, #4]
    1224:	e1520003 	cmp	r2, r3
    1228:	1a000003 	bne	123c <get_sample+0xd8>
				audio_stream.current_playback_locations[i] = 0;
    122c:	ebfffefa 	bl	e1c <advance_stream>
			}
    1230:	e5953000 	ldr	r3, [r5]
    1234:	e3a02000 	mov	r2, #0
    1238:	e7832104 	str	r2, [r3, r4, lsl #2]
	//store the sample to be returned
	double to_return = 0;
	
	//check each track to see if it is to be placed on the right
	for(unsigned int i = 0; i < audio_stream.current_song.num_tracks; i++){
		struct MusicTrack current_track = audio_stream.current_song.music_tracks[i];
    123c:	e2844001 	add	r4, r4, #1
    1240:	e286600c 	add	r6, r6, #12
    1244:	e5953018 	ldr	r3, [r5, #24]
    1248:	e1530004 	cmp	r3, r4
    124c:	8affffd5 	bhi	11a8 <get_sample+0x44>
    1250:	ea000002 	b	1260 <get_sample+0xfc>

//retrieve the current sample for all tracks of the provided playback type
double get_sample(char playback_type){
	//store the sample to be returned
	double to_return = 0;
	
    1254:	e3a02000 	mov	r2, #0
    1258:	e3a03000 	mov	r3, #0
    125c:	e1cd20f0 	strd	r2, [sp]
		}
	}
	
	return to_return;	
    1260:	e1cd00d0 	ldrd	r0, [sp]
    1264:	e28dd00c 	add	sp, sp, #12
    1268:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    126c:	00000000 	andeq	r0, r0, r0

00001270 <floor>:
    1270:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    1274:	e1a08081 	lsl	r8, r1, #1
    1278:	e1a08aa8 	lsr	r8, r8, #21
    127c:	e2486fff 	sub	r6, r8, #1020	; 0x3fc
    1280:	e2466003 	sub	r6, r6, #3
    1284:	e3560013 	cmp	r6, #19
    1288:	e1a02000 	mov	r2, r0
    128c:	e1a03001 	mov	r3, r1
    1290:	e1a04000 	mov	r4, r0
    1294:	e1a05001 	mov	r5, r1
    1298:	e1a07001 	mov	r7, r1
    129c:	ca000019 	bgt	1308 <floor+0x98>
    12a0:	e3560000 	cmp	r6, #0
    12a4:	ba000034 	blt	137c <floor+0x10c>
    12a8:	e59f8150 	ldr	r8, [pc, #336]	; 1400 <floor+0x190>
    12ac:	e1a08658 	asr	r8, r8, r6
    12b0:	e008c001 	and	r12, r8, r1
    12b4:	e19cc000 	orrs	r12, r12, r0
    12b8:	0a00000e 	beq	12f8 <floor+0x88>
    12bc:	e28f3f4d 	add	r3, pc, #308	; 0x134
    12c0:	e893000c 	ldm	r3, {r2, r3}
    12c4:	eb000d36 	bl	47a4 <__adddf3>
    12c8:	e3a02000 	mov	r2, #0
    12cc:	e3a03000 	mov	r3, #0
    12d0:	eb000fa9 	bl	517c <__aeabi_dcmpgt>
    12d4:	e3500000 	cmp	r0, #0
    12d8:	0a000004 	beq	12f0 <floor+0x80>
    12dc:	e3550000 	cmp	r5, #0
    12e0:	b3a03601 	movlt	r3, #1048576	; 0x100000
    12e4:	b0855653 	addlt	r5, r5, r3, asr r6
    12e8:	e3a04000 	mov	r4, #0
    12ec:	e1c57008 	bic	r7, r5, r8
    12f0:	e1a03007 	mov	r3, r7
    12f4:	e1a02004 	mov	r2, r4
    12f8:	e1a00002 	mov	r0, r2
    12fc:	e1a01003 	mov	r1, r3
    1300:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    1304:	e12fff1e 	bx	lr
    1308:	e3560033 	cmp	r6, #51	; 0x33
    130c:	da000005 	ble	1328 <floor+0xb8>
    1310:	e3560b01 	cmp	r6, #1024	; 0x400
    1314:	1afffff7 	bne	12f8 <floor+0x88>
    1318:	eb000d21 	bl	47a4 <__adddf3>
    131c:	e1a02000 	mov	r2, r0
    1320:	e1a03001 	mov	r3, r1
    1324:	eafffff3 	b	12f8 <floor+0x88>
    1328:	e248ae41 	sub	r10, r8, #1040	; 0x410
    132c:	e24aa003 	sub	r10, r10, #3
    1330:	e3e0c000 	mvn	r12, #0
    1334:	e1a0aa3c 	lsr	r10, r12, r10
    1338:	e11a0000 	tst	r10, r0
    133c:	0affffed 	beq	12f8 <floor+0x88>
    1340:	e28f30b0 	add	r3, pc, #176	; 0xb0
    1344:	e893000c 	ldm	r3, {r2, r3}
    1348:	eb000d15 	bl	47a4 <__adddf3>
    134c:	e3a02000 	mov	r2, #0
    1350:	e3a03000 	mov	r3, #0
    1354:	eb000f88 	bl	517c <__aeabi_dcmpgt>
    1358:	e3500000 	cmp	r0, #0
    135c:	0affffe3 	beq	12f0 <floor+0x80>
    1360:	e3550000 	cmp	r5, #0
    1364:	ba000017 	blt	13c8 <floor+0x158>
    1368:	e1c4400a 	bic	r4, r4, r10
    136c:	e1a07005 	mov	r7, r5
    1370:	e1a03007 	mov	r3, r7
    1374:	e1a02004 	mov	r2, r4
    1378:	eaffffde 	b	12f8 <floor+0x88>
    137c:	e28f3074 	add	r3, pc, #116	; 0x74
    1380:	e893000c 	ldm	r3, {r2, r3}
    1384:	eb000d06 	bl	47a4 <__adddf3>
    1388:	e3a02000 	mov	r2, #0
    138c:	e3a03000 	mov	r3, #0
    1390:	eb000f79 	bl	517c <__aeabi_dcmpgt>
    1394:	e3500000 	cmp	r0, #0
    1398:	0affffd4 	beq	12f0 <floor+0x80>
    139c:	e3550000 	cmp	r5, #0
    13a0:	a3a04000 	movge	r4, #0
    13a4:	a1a07004 	movge	r7, r4
    13a8:	aaffffd0 	bge	12f0 <floor+0x80>
    13ac:	e3c73102 	bic	r3, r7, #-2147483648	; 0x80000000
    13b0:	e1833004 	orr	r3, r3, r4
    13b4:	e3530000 	cmp	r3, #0
    13b8:	e59f3044 	ldr	r3, [pc, #68]	; 1404 <floor+0x194>
    13bc:	13a04000 	movne	r4, #0
    13c0:	11a07003 	movne	r7, r3
    13c4:	eaffffc9 	b	12f0 <floor+0x80>
    13c8:	e3560014 	cmp	r6, #20
    13cc:	02855001 	addeq	r5, r5, #1
    13d0:	0affffe4 	beq	1368 <floor+0xf8>
    13d4:	e2688e43 	rsb	r8, r8, #1072	; 0x430
    13d8:	e2888003 	add	r8, r8, #3
    13dc:	e3a03001 	mov	r3, #1
    13e0:	e0843813 	add	r3, r4, r3, lsl r8
    13e4:	e1540003 	cmp	r4, r3
    13e8:	82855001 	addhi	r5, r5, #1
    13ec:	e1a04003 	mov	r4, r3
    13f0:	eaffffdc 	b	1368 <floor+0xf8>
    13f4:	e1a00000 	nop			; (mov r0, r0)
    13f8:	8800759c 	.word	0x8800759c
    13fc:	7e37e43c 	.word	0x7e37e43c
    1400:	000fffff 	.word	0x000fffff
    1404:	bff00000 	.word	0xbff00000

00001408 <sin>:
    1408:	e92d4030 	push	{r4, r5, lr}
    140c:	e59fe0ec 	ldr	lr, [pc, #236]	; 1500 <sin+0xf8>
    1410:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    1414:	e15c000e 	cmp	r12, lr
    1418:	e24dd01c 	sub	sp, sp, #28
    141c:	e1a02000 	mov	r2, r0
    1420:	e1a03001 	mov	r3, r1
    1424:	e1a04000 	mov	r4, r0
    1428:	e1a05001 	mov	r5, r1
    142c:	da000017 	ble	1490 <sin+0x88>
    1430:	e59fe0cc 	ldr	lr, [pc, #204]	; 1504 <sin+0xfc>
    1434:	e15c000e 	cmp	r12, lr
    1438:	da000003 	ble	144c <sin+0x44>
    143c:	eb000cd7 	bl	47a0 <__aeabi_dsub>
    1440:	e28dd01c 	add	sp, sp, #28
    1444:	e8bd4030 	pop	{r4, r5, lr}
    1448:	e12fff1e 	bx	lr
    144c:	e28d2008 	add	r2, sp, #8
    1450:	eb00056c 	bl	2a08 <__ieee754_rem_pio2>
    1454:	e2000003 	and	r0, r0, #3
    1458:	e3500001 	cmp	r0, #1
    145c:	0a00001a 	beq	14cc <sin+0xc4>
    1460:	e3500002 	cmp	r0, #2
    1464:	0a00000f 	beq	14a8 <sin+0xa0>
    1468:	e3500000 	cmp	r0, #0
    146c:	1a00001c 	bne	14e4 <sin+0xdc>
    1470:	e3a03001 	mov	r3, #1
    1474:	e58d3000 	str	r3, [sp]
    1478:	e28d1008 	add	r1, sp, #8
    147c:	e8910003 	ldm	r1, {r0, r1}
    1480:	e28d3010 	add	r3, sp, #16
    1484:	e893000c 	ldm	r3, {r2, r3}
    1488:	eb000b3c 	bl	4180 <__kernel_sin>
    148c:	eaffffeb 	b	1440 <sin+0x38>
    1490:	e3a03000 	mov	r3, #0
    1494:	e58d3000 	str	r3, [sp]
    1498:	e3a02000 	mov	r2, #0
    149c:	e3a03000 	mov	r3, #0
    14a0:	eb000b36 	bl	4180 <__kernel_sin>
    14a4:	eaffffe5 	b	1440 <sin+0x38>
    14a8:	e3a03001 	mov	r3, #1
    14ac:	e58d3000 	str	r3, [sp]
    14b0:	e28d1008 	add	r1, sp, #8
    14b4:	e8910003 	ldm	r1, {r0, r1}
    14b8:	e28d3010 	add	r3, sp, #16
    14bc:	e893000c 	ldm	r3, {r2, r3}
    14c0:	eb000b2e 	bl	4180 <__kernel_sin>
    14c4:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    14c8:	eaffffdc 	b	1440 <sin+0x38>
    14cc:	e28d1008 	add	r1, sp, #8
    14d0:	e8910003 	ldm	r1, {r0, r1}
    14d4:	e28d3010 	add	r3, sp, #16
    14d8:	e893000c 	ldm	r3, {r2, r3}
    14dc:	eb00076f 	bl	32a0 <__kernel_cos>
    14e0:	eaffffd6 	b	1440 <sin+0x38>
    14e4:	e28d1008 	add	r1, sp, #8
    14e8:	e8910003 	ldm	r1, {r0, r1}
    14ec:	e28d3010 	add	r3, sp, #16
    14f0:	e893000c 	ldm	r3, {r2, r3}
    14f4:	eb000769 	bl	32a0 <__kernel_cos>
    14f8:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    14fc:	eaffffcf 	b	1440 <sin+0x38>
    1500:	3fe921fb 	.word	0x3fe921fb
    1504:	7fefffff 	.word	0x7fefffff

00001508 <pow>:
    1508:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    150c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    1510:	e1a07003 	mov	r7, r3
    1514:	e1a08000 	mov	r8, r0
    1518:	e1a09001 	mov	r9, r1
    151c:	e1a06002 	mov	r6, r2
    1520:	eb000138 	bl	1a08 <__ieee754_pow>
    1524:	e59fb4bc 	ldr	r11, [pc, #1212]	; 19e8 <pow+0x4e0>
    1528:	e1db30d0 	ldrsb	r3, [r11]
    152c:	e3730001 	cmn	r3, #1
    1530:	e1a04000 	mov	r4, r0
    1534:	e1a05001 	mov	r5, r1
    1538:	0a000004 	beq	1550 <pow+0x48>
    153c:	e1a00006 	mov	r0, r6
    1540:	e1a01007 	mov	r1, r7
    1544:	eb000b9b 	bl	43b8 <__fpclassifyd>
    1548:	e3500000 	cmp	r0, #0
    154c:	1a000004 	bne	1564 <pow+0x5c>
    1550:	e1a00004 	mov	r0, r4
    1554:	e1a01005 	mov	r1, r5
    1558:	e28dd02c 	add	sp, sp, #44	; 0x2c
    155c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1560:	e12fff1e 	bx	lr
    1564:	e1a00008 	mov	r0, r8
    1568:	e1a01009 	mov	r1, r9
    156c:	eb000b91 	bl	43b8 <__fpclassifyd>
    1570:	e250a000 	subs	r10, r0, #0
    1574:	1a00001a 	bne	15e4 <pow+0xdc>
    1578:	e1a00006 	mov	r0, r6
    157c:	e1a01007 	mov	r1, r7
    1580:	e3a02000 	mov	r2, #0
    1584:	e3a03000 	mov	r3, #0
    1588:	eb000ee3 	bl	511c <__aeabi_dcmpeq>
    158c:	e3500000 	cmp	r0, #0
    1590:	0affffee 	beq	1550 <pow+0x48>
    1594:	e1db30d0 	ldrsb	r3, [r11]
    1598:	e3730001 	cmn	r3, #1
    159c:	13530002 	cmpne	r3, #2
    15a0:	e3a03001 	mov	r3, #1
    15a4:	e58d3000 	str	r3, [sp]
    15a8:	e59f343c 	ldr	r3, [pc, #1084]	; 19ec <pow+0x4e4>
    15ac:	e58d3004 	str	r3, [sp, #4]
    15b0:	e59f3438 	ldr	r3, [pc, #1080]	; 19f0 <pow+0x4e8>
    15b4:	e3a02000 	mov	r2, #0
    15b8:	e58da020 	str	r10, [sp, #32]
    15bc:	e58d8008 	str	r8, [sp, #8]
    15c0:	e58d900c 	str	r9, [sp, #12]
    15c4:	e58d6010 	str	r6, [sp, #16]
    15c8:	e58d7014 	str	r7, [sp, #20]
    15cc:	e58d2018 	str	r2, [sp, #24]
    15d0:	e58d301c 	str	r3, [sp, #28]
    15d4:	1a000025 	bne	1670 <pow+0x168>
    15d8:	e28d5018 	add	r5, sp, #24
    15dc:	e8950030 	ldm	r5, {r4, r5}
    15e0:	eaffffda 	b	1550 <pow+0x48>
    15e4:	e1a00008 	mov	r0, r8
    15e8:	e1a01009 	mov	r1, r9
    15ec:	e3a02000 	mov	r2, #0
    15f0:	e3a03000 	mov	r3, #0
    15f4:	eb000ec8 	bl	511c <__aeabi_dcmpeq>
    15f8:	e3500000 	cmp	r0, #0
    15fc:	0a000026 	beq	169c <pow+0x194>
    1600:	e1a00006 	mov	r0, r6
    1604:	e1a01007 	mov	r1, r7
    1608:	e3a02000 	mov	r2, #0
    160c:	e3a03000 	mov	r3, #0
    1610:	eb000ec1 	bl	511c <__aeabi_dcmpeq>
    1614:	e3500000 	cmp	r0, #0
    1618:	0a00004e 	beq	1758 <pow+0x250>
    161c:	e1db30d0 	ldrsb	r3, [r11]
    1620:	e3530000 	cmp	r3, #0
    1624:	e3a03001 	mov	r3, #1
    1628:	e58d3000 	str	r3, [sp]
    162c:	e59f33b8 	ldr	r3, [pc, #952]	; 19ec <pow+0x4e4>
    1630:	e58d3004 	str	r3, [sp, #4]
    1634:	e3a03000 	mov	r3, #0
    1638:	e58d3020 	str	r3, [sp, #32]
    163c:	e3a04000 	mov	r4, #0
    1640:	e3a03000 	mov	r3, #0
    1644:	e58d8008 	str	r8, [sp, #8]
    1648:	e58d900c 	str	r9, [sp, #12]
    164c:	e58d6010 	str	r6, [sp, #16]
    1650:	e58d7014 	str	r7, [sp, #20]
    1654:	e58d3018 	str	r3, [sp, #24]
    1658:	e58d401c 	str	r4, [sp, #28]
    165c:	159f338c 	ldrne	r3, [pc, #908]	; 19f0 <pow+0x4e8>
    1660:	13a02000 	movne	r2, #0
    1664:	158d2018 	strne	r2, [sp, #24]
    1668:	158d301c 	strne	r3, [sp, #28]
    166c:	1affffd9 	bne	15d8 <pow+0xd0>
    1670:	e1a0000d 	mov	r0, sp
    1674:	eb000b6a 	bl	4424 <matherr>
    1678:	e3500000 	cmp	r0, #0
    167c:	0a000058 	beq	17e4 <pow+0x2dc>
    1680:	e59d3020 	ldr	r3, [sp, #32]
    1684:	e3530000 	cmp	r3, #0
    1688:	0affffd2 	beq	15d8 <pow+0xd0>
    168c:	eb000ef4 	bl	5264 <__errno>
    1690:	e59d3020 	ldr	r3, [sp, #32]
    1694:	e5803000 	str	r3, [r0]
    1698:	eaffffce 	b	15d8 <pow+0xd0>
    169c:	e1a00004 	mov	r0, r4
    16a0:	e1a01005 	mov	r1, r5
    16a4:	eb000b3f 	bl	43a8 <finite>
    16a8:	e250a000 	subs	r10, r0, #0
    16ac:	0a000050 	beq	17f4 <pow+0x2ec>
    16b0:	e1a00004 	mov	r0, r4
    16b4:	e1a01005 	mov	r1, r5
    16b8:	e3a02000 	mov	r2, #0
    16bc:	e3a03000 	mov	r3, #0
    16c0:	eb000e95 	bl	511c <__aeabi_dcmpeq>
    16c4:	e3500000 	cmp	r0, #0
    16c8:	0affffa0 	beq	1550 <pow+0x48>
    16cc:	e1a00008 	mov	r0, r8
    16d0:	e1a01009 	mov	r1, r9
    16d4:	eb000b33 	bl	43a8 <finite>
    16d8:	e3500000 	cmp	r0, #0
    16dc:	0affff9b 	beq	1550 <pow+0x48>
    16e0:	e1a00006 	mov	r0, r6
    16e4:	e1a01007 	mov	r1, r7
    16e8:	eb000b2e 	bl	43a8 <finite>
    16ec:	e3500000 	cmp	r0, #0
    16f0:	0affff96 	beq	1550 <pow+0x48>
    16f4:	e1db30d0 	ldrsb	r3, [r11]
    16f8:	e3530002 	cmp	r3, #2
    16fc:	e3a03004 	mov	r3, #4
    1700:	e58d3000 	str	r3, [sp]
    1704:	e59f32e0 	ldr	r3, [pc, #736]	; 19ec <pow+0x4e4>
    1708:	e58d3004 	str	r3, [sp, #4]
    170c:	e3a03000 	mov	r3, #0
    1710:	e58d3020 	str	r3, [sp, #32]
    1714:	e3a04000 	mov	r4, #0
    1718:	e3a03000 	mov	r3, #0
    171c:	e58d8008 	str	r8, [sp, #8]
    1720:	e58d900c 	str	r9, [sp, #12]
    1724:	e58d6010 	str	r6, [sp, #16]
    1728:	e58d7014 	str	r7, [sp, #20]
    172c:	e58d3018 	str	r3, [sp, #24]
    1730:	e58d401c 	str	r4, [sp, #28]
    1734:	0a00005c 	beq	18ac <pow+0x3a4>
    1738:	e1a0000d 	mov	r0, sp
    173c:	eb000b38 	bl	4424 <matherr>
    1740:	e3500000 	cmp	r0, #0
    1744:	0a000058 	beq	18ac <pow+0x3a4>
    1748:	e59d3020 	ldr	r3, [sp, #32]
    174c:	e3530000 	cmp	r3, #0
    1750:	0affffa0 	beq	15d8 <pow+0xd0>
    1754:	eaffffcc 	b	168c <pow+0x184>
    1758:	e1a00006 	mov	r0, r6
    175c:	e1a01007 	mov	r1, r7
    1760:	eb000b10 	bl	43a8 <finite>
    1764:	e3500000 	cmp	r0, #0
    1768:	0affff78 	beq	1550 <pow+0x48>
    176c:	e1a00006 	mov	r0, r6
    1770:	e1a01007 	mov	r1, r7
    1774:	e3a02000 	mov	r2, #0
    1778:	e3a03000 	mov	r3, #0
    177c:	eb000e6c 	bl	5134 <__aeabi_dcmplt>
    1780:	e3500000 	cmp	r0, #0
    1784:	0affff71 	beq	1550 <pow+0x48>
    1788:	e3a02001 	mov	r2, #1
    178c:	e5db3000 	ldrb	r3, [r11]
    1790:	e58d2000 	str	r2, [sp]
    1794:	e59f2250 	ldr	r2, [pc, #592]	; 19ec <pow+0x4e4>
    1798:	e3530000 	cmp	r3, #0
    179c:	e58d2004 	str	r2, [sp, #4]
    17a0:	e3a02000 	mov	r2, #0
    17a4:	e58d2020 	str	r2, [sp, #32]
    17a8:	e58d8008 	str	r8, [sp, #8]
    17ac:	e58d900c 	str	r9, [sp, #12]
    17b0:	e58d6010 	str	r6, [sp, #16]
    17b4:	e58d7014 	str	r7, [sp, #20]
    17b8:	0a000036 	beq	1898 <pow+0x390>
    17bc:	e3530002 	cmp	r3, #2
    17c0:	e59f322c 	ldr	r3, [pc, #556]	; 19f4 <pow+0x4ec>
    17c4:	e3a02000 	mov	r2, #0
    17c8:	e58d2018 	str	r2, [sp, #24]
    17cc:	e58d301c 	str	r3, [sp, #28]
    17d0:	1a00002b 	bne	1884 <pow+0x37c>
    17d4:	eb000ea2 	bl	5264 <__errno>
    17d8:	e3a03021 	mov	r3, #33	; 0x21
    17dc:	e5803000 	str	r3, [r0]
    17e0:	eaffffd8 	b	1748 <pow+0x240>
    17e4:	eb000e9e 	bl	5264 <__errno>
    17e8:	e3a03021 	mov	r3, #33	; 0x21
    17ec:	e5803000 	str	r3, [r0]
    17f0:	eaffffa2 	b	1680 <pow+0x178>
    17f4:	e1a00008 	mov	r0, r8
    17f8:	e1a01009 	mov	r1, r9
    17fc:	eb000ae9 	bl	43a8 <finite>
    1800:	e3500000 	cmp	r0, #0
    1804:	0affffa9 	beq	16b0 <pow+0x1a8>
    1808:	e1a00006 	mov	r0, r6
    180c:	e1a01007 	mov	r1, r7
    1810:	eb000ae4 	bl	43a8 <finite>
    1814:	e3500000 	cmp	r0, #0
    1818:	0affffa4 	beq	16b0 <pow+0x1a8>
    181c:	e1a00004 	mov	r0, r4
    1820:	e1a01005 	mov	r1, r5
    1824:	eb000ae3 	bl	43b8 <__fpclassifyd>
    1828:	e3500000 	cmp	r0, #0
    182c:	1a000022 	bne	18bc <pow+0x3b4>
    1830:	e3a03001 	mov	r3, #1
    1834:	e5db4000 	ldrb	r4, [r11]
    1838:	e58d3000 	str	r3, [sp]
    183c:	e59f31a8 	ldr	r3, [pc, #424]	; 19ec <pow+0x4e4>
    1840:	e3540000 	cmp	r4, #0
    1844:	e58d3004 	str	r3, [sp, #4]
    1848:	e58d0020 	str	r0, [sp, #32]
    184c:	e58d8008 	str	r8, [sp, #8]
    1850:	e58d900c 	str	r9, [sp, #12]
    1854:	e58d6010 	str	r6, [sp, #16]
    1858:	e58d7014 	str	r7, [sp, #20]
    185c:	0a00000d 	beq	1898 <pow+0x390>
    1860:	e3a00000 	mov	r0, #0
    1864:	e3a01000 	mov	r1, #0
    1868:	e1a02000 	mov	r2, r0
    186c:	e1a03001 	mov	r3, r1
    1870:	eb000d73 	bl	4e44 <__aeabi_ddiv>
    1874:	e3540002 	cmp	r4, #2
    1878:	e58d0018 	str	r0, [sp, #24]
    187c:	e58d101c 	str	r1, [sp, #28]
    1880:	0affffd3 	beq	17d4 <pow+0x2cc>
    1884:	e1a0000d 	mov	r0, sp
    1888:	eb000ae5 	bl	4424 <matherr>
    188c:	e3500000 	cmp	r0, #0
    1890:	1affffac 	bne	1748 <pow+0x240>
    1894:	eaffffce 	b	17d4 <pow+0x2cc>
    1898:	e3a03000 	mov	r3, #0
    189c:	e3a04000 	mov	r4, #0
    18a0:	e58d3018 	str	r3, [sp, #24]
    18a4:	e58d401c 	str	r4, [sp, #28]
    18a8:	eafffff5 	b	1884 <pow+0x37c>
    18ac:	eb000e6c 	bl	5264 <__errno>
    18b0:	e3a03022 	mov	r3, #34	; 0x22
    18b4:	e5803000 	str	r3, [r0]
    18b8:	eaffffa2 	b	1748 <pow+0x240>
    18bc:	e1db20d0 	ldrsb	r2, [r11]
    18c0:	e3520000 	cmp	r2, #0
    18c4:	e3a02003 	mov	r2, #3
    18c8:	e58d2000 	str	r2, [sp]
    18cc:	e59f2118 	ldr	r2, [pc, #280]	; 19ec <pow+0x4e4>
    18d0:	e1a00008 	mov	r0, r8
    18d4:	e58d2004 	str	r2, [sp, #4]
    18d8:	e1a01009 	mov	r1, r9
    18dc:	e58da020 	str	r10, [sp, #32]
    18e0:	e58d8008 	str	r8, [sp, #8]
    18e4:	e58d900c 	str	r9, [sp, #12]
    18e8:	e58d6010 	str	r6, [sp, #16]
    18ec:	e58d7014 	str	r7, [sp, #20]
    18f0:	e3a02000 	mov	r2, #0
    18f4:	e3a03000 	mov	r3, #0
    18f8:	1a000011 	bne	1944 <pow+0x43c>
    18fc:	e59f50f4 	ldr	r5, [pc, #244]	; 19f8 <pow+0x4f0>
    1900:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    1904:	e58d4018 	str	r4, [sp, #24]
    1908:	e58d501c 	str	r5, [sp, #28]
    190c:	eb000e08 	bl	5134 <__aeabi_dcmplt>
    1910:	e3500000 	cmp	r0, #0
    1914:	1a000022 	bne	19a4 <pow+0x49c>
    1918:	e1db30d0 	ldrsb	r3, [r11]
    191c:	e3530002 	cmp	r3, #2
    1920:	0a000003 	beq	1934 <pow+0x42c>
    1924:	e1a0000d 	mov	r0, sp
    1928:	eb000abd 	bl	4424 <matherr>
    192c:	e3500000 	cmp	r0, #0
    1930:	1affff52 	bne	1680 <pow+0x178>
    1934:	eb000e4a 	bl	5264 <__errno>
    1938:	e3a03022 	mov	r3, #34	; 0x22
    193c:	e5803000 	str	r3, [r0]
    1940:	eaffff4e 	b	1680 <pow+0x178>
    1944:	e59f50b0 	ldr	r5, [pc, #176]	; 19fc <pow+0x4f4>
    1948:	e3a04000 	mov	r4, #0
    194c:	e58d4018 	str	r4, [sp, #24]
    1950:	e58d501c 	str	r5, [sp, #28]
    1954:	eb000df6 	bl	5134 <__aeabi_dcmplt>
    1958:	e3500000 	cmp	r0, #0
    195c:	0affffed 	beq	1918 <pow+0x410>
    1960:	e3a02000 	mov	r2, #0
    1964:	e59f3094 	ldr	r3, [pc, #148]	; 1a00 <pow+0x4f8>
    1968:	e1a00006 	mov	r0, r6
    196c:	e1a01007 	mov	r1, r7
    1970:	eb000c8f 	bl	4bb4 <__aeabi_dmul>
    1974:	e1a04000 	mov	r4, r0
    1978:	e1a05001 	mov	r5, r1
    197c:	eb000aae 	bl	443c <rint>
    1980:	e1a02004 	mov	r2, r4
    1984:	e1a03005 	mov	r3, r5
    1988:	eb000de3 	bl	511c <__aeabi_dcmpeq>
    198c:	e3500000 	cmp	r0, #0
    1990:	059f305c 	ldreq	r3, [pc, #92]	; 19f4 <pow+0x4ec>
    1994:	03a02000 	moveq	r2, #0
    1998:	058d2018 	streq	r2, [sp, #24]
    199c:	058d301c 	streq	r3, [sp, #28]
    19a0:	eaffffdc 	b	1918 <pow+0x410>
    19a4:	e3a02000 	mov	r2, #0
    19a8:	e59f3050 	ldr	r3, [pc, #80]	; 1a00 <pow+0x4f8>
    19ac:	e1a00006 	mov	r0, r6
    19b0:	e1a01007 	mov	r1, r7
    19b4:	eb000c7e 	bl	4bb4 <__aeabi_dmul>
    19b8:	e1a04000 	mov	r4, r0
    19bc:	e1a05001 	mov	r5, r1
    19c0:	eb000a9d 	bl	443c <rint>
    19c4:	e1a02004 	mov	r2, r4
    19c8:	e1a03005 	mov	r3, r5
    19cc:	eb000dd2 	bl	511c <__aeabi_dcmpeq>
    19d0:	e3500000 	cmp	r0, #0
    19d4:	059f3028 	ldreq	r3, [pc, #40]	; 1a04 <pow+0x4fc>
    19d8:	03a0220e 	moveq	r2, #-536870912	; 0xe0000000
    19dc:	058d2018 	streq	r2, [sp, #24]
    19e0:	058d301c 	streq	r3, [sp, #28]
    19e4:	eaffffcb 	b	1918 <pow+0x410>
    19e8:	00006978 	.word	0x00006978
    19ec:	0000664c 	.word	0x0000664c
    19f0:	3ff00000 	.word	0x3ff00000
    19f4:	fff00000 	.word	0xfff00000
    19f8:	47efffff 	.word	0x47efffff
    19fc:	7ff00000 	.word	0x7ff00000
    1a00:	3fe00000 	.word	0x3fe00000
    1a04:	c7efffff 	.word	0xc7efffff

00001a08 <__ieee754_pow>:
    1a08:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1a0c:	e1a0b003 	mov	r11, r3
    1a10:	e1a0a002 	mov	r10, r2
    1a14:	e3cb6102 	bic	r6, r11, #-2147483648	; 0x80000000
    1a18:	e1a08001 	mov	r8, r1
    1a1c:	e24dd044 	sub	sp, sp, #68	; 0x44
    1a20:	e196100a 	orrs	r1, r6, r10
    1a24:	e1a04002 	mov	r4, r2
    1a28:	e1a07000 	mov	r7, r0
    1a2c:	e1a05003 	mov	r5, r3
    1a30:	e1a0c00a 	mov	r12, r10
    1a34:	e58d8010 	str	r8, [sp, #16]
    1a38:	e1a09000 	mov	r9, r0
    1a3c:	0a000060 	beq	1bc4 <__ieee754_pow+0x1bc>
    1a40:	e59f12d0 	ldr	r1, [pc, #720]	; 1d18 <__ieee754_pow+0x310>
    1a44:	e3c80102 	bic	r0, r8, #-2147483648	; 0x80000000
    1a48:	e1500001 	cmp	r0, r1
    1a4c:	e58d0008 	str	r0, [sp, #8]
    1a50:	da00000b 	ble	1a84 <__ieee754_pow+0x7c>
    1a54:	e59d4008 	ldr	r4, [sp, #8]
    1a58:	e284a103 	add	r10, r4, #-1073741824	; 0xc0000000
    1a5c:	e28aa601 	add	r10, r10, #1048576	; 0x100000
    1a60:	e19a9009 	orrs	r9, r10, r9
    1a64:	01a0a009 	moveq	r10, r9
    1a68:	059fb2d4 	ldreq	r11, [pc, #724]	; 1d44 <__ieee754_pow+0x33c>
    1a6c:	1a000057 	bne	1bd0 <__ieee754_pow+0x1c8>
    1a70:	e1a0000a 	mov	r0, r10
    1a74:	e1a0100b 	mov	r1, r11
    1a78:	e28dd044 	add	sp, sp, #68	; 0x44
    1a7c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1a80:	e12fff1e 	bx	lr
    1a84:	13a00000 	movne	r0, #0
    1a88:	03a00001 	moveq	r0, #1
    1a8c:	e58d0018 	str	r0, [sp, #24]
    1a90:	e3570000 	cmp	r7, #0
    1a94:	03a00000 	moveq	r0, #0
    1a98:	12000001 	andne	r0, r0, #1
    1a9c:	e3500000 	cmp	r0, #0
    1aa0:	1affffeb 	bne	1a54 <__ieee754_pow+0x4c>
    1aa4:	e1560001 	cmp	r6, r1
    1aa8:	caffffe9 	bgt	1a54 <__ieee754_pow+0x4c>
    1aac:	13a01000 	movne	r1, #0
    1ab0:	03a01001 	moveq	r1, #1
    1ab4:	e58d1028 	str	r1, [sp, #40]	; 0x28
    1ab8:	e35a0000 	cmp	r10, #0
    1abc:	03a01000 	moveq	r1, #0
    1ac0:	12011001 	andne	r1, r1, #1
    1ac4:	e3510000 	cmp	r1, #0
    1ac8:	1affffe1 	bne	1a54 <__ieee754_pow+0x4c>
    1acc:	e59d0010 	ldr	r0, [sp, #16]
    1ad0:	e3500000 	cmp	r0, #0
    1ad4:	e58d8020 	str	r8, [sp, #32]
    1ad8:	e1a0400b 	mov	r4, r11
    1adc:	ba000040 	blt	1be4 <__ieee754_pow+0x1dc>
    1ae0:	e58d1030 	str	r1, [sp, #48]	; 0x30
    1ae4:	e35c0000 	cmp	r12, #0
    1ae8:	1a00000c 	bne	1b20 <__ieee754_pow+0x118>
    1aec:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    1af0:	e3530000 	cmp	r3, #0
    1af4:	1a00004e 	bne	1c34 <__ieee754_pow+0x22c>
    1af8:	e59f3244 	ldr	r3, [pc, #580]	; 1d44 <__ieee754_pow+0x33c>
    1afc:	e1560003 	cmp	r6, r3
    1b00:	0a000073 	beq	1cd4 <__ieee754_pow+0x2cc>
    1b04:	e3540101 	cmp	r4, #1073741824	; 0x40000000
    1b08:	01a00007 	moveq	r0, r7
    1b0c:	01a01008 	moveq	r1, r8
    1b10:	0a000025 	beq	1bac <__ieee754_pow+0x1a4>
    1b14:	e59f3200 	ldr	r3, [pc, #512]	; 1d1c <__ieee754_pow+0x314>
    1b18:	e1540003 	cmp	r4, r3
    1b1c:	0a0002c7 	beq	2640 <__ieee754_pow+0xc38>
    1b20:	e1a00007 	mov	r0, r7
    1b24:	e1a01008 	mov	r1, r8
    1b28:	eb000a1c 	bl	43a0 <fabs>
    1b2c:	e3590000 	cmp	r9, #0
    1b30:	1a000008 	bne	1b58 <__ieee754_pow+0x150>
    1b34:	e59d3018 	ldr	r3, [sp, #24]
    1b38:	e59d2008 	ldr	r2, [sp, #8]
    1b3c:	e3520000 	cmp	r2, #0
    1b40:	03833001 	orreq	r3, r3, #1
    1b44:	e3530000 	cmp	r3, #0
    1b48:	1a000046 	bne	1c68 <__ieee754_pow+0x260>
    1b4c:	e59f31f0 	ldr	r3, [pc, #496]	; 1d44 <__ieee754_pow+0x33c>
    1b50:	e1520003 	cmp	r2, r3
    1b54:	0a000043 	beq	1c68 <__ieee754_pow+0x260>
    1b58:	e59d2010 	ldr	r2, [sp, #16]
    1b5c:	e1a03fa2 	lsr	r3, r2, #31
    1b60:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    1b64:	e2433001 	sub	r3, r3, #1
    1b68:	e1922003 	orrs	r2, r2, r3
    1b6c:	e58d3010 	str	r3, [sp, #16]
    1b70:	0a000052 	beq	1cc0 <__ieee754_pow+0x2b8>
    1b74:	e59f31a4 	ldr	r3, [pc, #420]	; 1d20 <__ieee754_pow+0x318>
    1b78:	e1560003 	cmp	r6, r3
    1b7c:	da000071 	ble	1d48 <__ieee754_pow+0x340>
    1b80:	e2833621 	add	r3, r3, #34603008	; 0x2100000
    1b84:	e1560003 	cmp	r6, r3
    1b88:	da00030e 	ble	27c8 <__ieee754_pow+0xdc0>
    1b8c:	e59d0008 	ldr	r0, [sp, #8]
    1b90:	e2433341 	sub	r3, r3, #67108865	; 0x4000001
    1b94:	e1500003 	cmp	r0, r3
    1b98:	da0002b4 	ble	2670 <__ieee754_pow+0xc68>
    1b9c:	e3540000 	cmp	r4, #0
    1ba0:	da00002d 	ble	1c5c <__ieee754_pow+0x254>
    1ba4:	e28f1f59 	add	r1, pc, #356	; 0x164
    1ba8:	e8910003 	ldm	r1, {r0, r1}
    1bac:	e1a02000 	mov	r2, r0
    1bb0:	e1a03001 	mov	r3, r1
    1bb4:	eb000bfe 	bl	4bb4 <__aeabi_dmul>
    1bb8:	e1a0a000 	mov	r10, r0
    1bbc:	e1a0b001 	mov	r11, r1
    1bc0:	eaffffaa 	b	1a70 <__ieee754_pow+0x68>
    1bc4:	e1a0a001 	mov	r10, r1
    1bc8:	e59fb174 	ldr	r11, [pc, #372]	; 1d44 <__ieee754_pow+0x33c>
    1bcc:	eaffffa7 	b	1a70 <__ieee754_pow+0x68>
    1bd0:	e59f014c 	ldr	r0, [pc, #332]	; 1d24 <__ieee754_pow+0x31c>
    1bd4:	eb000a14 	bl	442c <nan>
    1bd8:	e1a0a000 	mov	r10, r0
    1bdc:	e1a0b001 	mov	r11, r1
    1be0:	eaffffa2 	b	1a70 <__ieee754_pow+0x68>
    1be4:	e59f313c 	ldr	r3, [pc, #316]	; 1d28 <__ieee754_pow+0x320>
    1be8:	e1560003 	cmp	r6, r3
    1bec:	ca000044 	bgt	1d04 <__ieee754_pow+0x2fc>
    1bf0:	e2433635 	sub	r3, r3, #55574528	; 0x3500000
    1bf4:	e1560003 	cmp	r6, r3
    1bf8:	daffffb8 	ble	1ae0 <__ieee754_pow+0xd8>
    1bfc:	e59f2128 	ldr	r2, [pc, #296]	; 1d2c <__ieee754_pow+0x324>
    1c00:	e1a03a46 	asr	r3, r6, #20
    1c04:	e1530002 	cmp	r3, r2
    1c08:	da00034b 	ble	293c <__ieee754_pow+0xf34>
    1c0c:	e2633e43 	rsb	r3, r3, #1072	; 0x430
    1c10:	e2832003 	add	r2, r3, #3
    1c14:	e1a0323a 	lsr	r3, r10, r2
    1c18:	e15a0213 	cmp	r10, r3, lsl r2
    1c1c:	02033001 	andeq	r3, r3, #1
    1c20:	02633002 	rsbeq	r3, r3, #2
    1c24:	058d3030 	streq	r3, [sp, #48]	; 0x30
    1c28:	13a02000 	movne	r2, #0
    1c2c:	158d2030 	strne	r2, [sp, #48]	; 0x30
    1c30:	eaffffab 	b	1ae4 <__ieee754_pow+0xdc>
    1c34:	e59d0008 	ldr	r0, [sp, #8]
    1c38:	e2803103 	add	r3, r0, #-1073741824	; 0xc0000000
    1c3c:	e2833601 	add	r3, r3, #1048576	; 0x100000
    1c40:	e1933009 	orrs	r3, r3, r9
    1c44:	0a000286 	beq	2664 <__ieee754_pow+0xc5c>
    1c48:	e59f30e0 	ldr	r3, [pc, #224]	; 1d30 <__ieee754_pow+0x328>
    1c4c:	e1500003 	cmp	r0, r3
    1c50:	da0002c4 	ble	2768 <__ieee754_pow+0xd60>
    1c54:	e3540000 	cmp	r4, #0
    1c58:	aaffff84 	bge	1a70 <__ieee754_pow+0x68>
    1c5c:	e3a0a000 	mov	r10, #0
    1c60:	e1a0b00a 	mov	r11, r10
    1c64:	eaffff81 	b	1a70 <__ieee754_pow+0x68>
    1c68:	e3540000 	cmp	r4, #0
    1c6c:	ba000321 	blt	28f8 <__ieee754_pow+0xef0>
    1c70:	e59d4020 	ldr	r4, [sp, #32]
    1c74:	e3540000 	cmp	r4, #0
    1c78:	aaffffce 	bge	1bb8 <__ieee754_pow+0x1b0>
    1c7c:	e59d4008 	ldr	r4, [sp, #8]
    1c80:	e2843103 	add	r3, r4, #-1073741824	; 0xc0000000
    1c84:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    1c88:	e2833601 	add	r3, r3, #1048576	; 0x100000
    1c8c:	e1944003 	orrs	r4, r4, r3
    1c90:	1a000335 	bne	296c <__ieee754_pow+0xf64>
    1c94:	e1a04000 	mov	r4, r0
    1c98:	e1a02000 	mov	r2, r0
    1c9c:	e1a05001 	mov	r5, r1
    1ca0:	e1a03001 	mov	r3, r1
    1ca4:	eb000abd 	bl	47a0 <__aeabi_dsub>
    1ca8:	e1a02000 	mov	r2, r0
    1cac:	e1a03001 	mov	r3, r1
    1cb0:	eb000c63 	bl	4e44 <__aeabi_ddiv>
    1cb4:	e1a0a000 	mov	r10, r0
    1cb8:	e1a0b001 	mov	r11, r1
    1cbc:	eaffff6b 	b	1a70 <__ieee754_pow+0x68>
    1cc0:	e1a00007 	mov	r0, r7
    1cc4:	e1a01008 	mov	r1, r8
    1cc8:	e1a02007 	mov	r2, r7
    1ccc:	e1a03008 	mov	r3, r8
    1cd0:	eafffff3 	b	1ca4 <__ieee754_pow+0x29c>
    1cd4:	e3540000 	cmp	r4, #0
    1cd8:	a1a0a007 	movge	r10, r7
    1cdc:	a1a0b008 	movge	r11, r8
    1ce0:	aaffff62 	bge	1a70 <__ieee754_pow+0x68>
    1ce4:	e1a02007 	mov	r2, r7
    1ce8:	e1a03008 	mov	r3, r8
    1cec:	e3a00000 	mov	r0, #0
    1cf0:	e59f104c 	ldr	r1, [pc, #76]	; 1d44 <__ieee754_pow+0x33c>
    1cf4:	eb000c52 	bl	4e44 <__aeabi_ddiv>
    1cf8:	e1a0a000 	mov	r10, r0
    1cfc:	e1a0b001 	mov	r11, r1
    1d00:	eaffff5a 	b	1a70 <__ieee754_pow+0x68>
    1d04:	e3a01002 	mov	r1, #2
    1d08:	eaffff74 	b	1ae0 <__ieee754_pow+0xd8>
    1d0c:	e1a00000 	nop			; (mov r0, r0)
    1d10:	8800759c 	.word	0x8800759c
    1d14:	7e37e43c 	.word	0x7e37e43c
    1d18:	7ff00000 	.word	0x7ff00000
    1d1c:	3fe00000 	.word	0x3fe00000
    1d20:	41e00000 	.word	0x41e00000
    1d24:	00006680 	.word	0x00006680
    1d28:	433fffff 	.word	0x433fffff
    1d2c:	00000413 	.word	0x00000413
    1d30:	3fefffff 	.word	0x3fefffff
    1d34:	43400000 	.word	0x43400000
    1d38:	0003988e 	.word	0x0003988e
    1d3c:	000bb679 	.word	0x000bb679
    1d40:	00006650 	.word	0x00006650
    1d44:	3ff00000 	.word	0x3ff00000
    1d48:	e59d4008 	ldr	r4, [sp, #8]
    1d4c:	e3540601 	cmp	r4, #1048576	; 0x100000
    1d50:	a3a02000 	movge	r2, #0
    1d54:	aa000004 	bge	1d6c <__ieee754_pow+0x364>
    1d58:	e3a02000 	mov	r2, #0
    1d5c:	e51f3030 	ldr	r3, [pc, #-48]	; 1d34 <__ieee754_pow+0x32c>
    1d60:	eb000b93 	bl	4bb4 <__aeabi_dmul>
    1d64:	e58d1008 	str	r1, [sp, #8]
    1d68:	e3e02034 	mvn	r2, #52	; 0x34
    1d6c:	e59d4008 	ldr	r4, [sp, #8]
    1d70:	e51fe040 	ldr	lr, [pc, #-64]	; 1d38 <__ieee754_pow+0x330>
    1d74:	e3c434ff 	bic	r3, r4, #-16777216	; 0xff000000
    1d78:	e1a0ca44 	asr	r12, r4, #20
    1d7c:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
    1d80:	e153000e 	cmp	r3, lr
    1d84:	e24ccfff 	sub	r12, r12, #1020	; 0x3fc
    1d88:	e24cc003 	sub	r12, r12, #3
    1d8c:	e38345ff 	orr	r4, r3, #1069547520	; 0x3fc00000
    1d90:	d3a05000 	movle	r5, #0
    1d94:	e08cc002 	add	r12, r12, r2
    1d98:	e3844603 	orr	r4, r4, #3145728	; 0x300000
    1d9c:	d1a0e005 	movle	lr, r5
    1da0:	da000007 	ble	1dc4 <__ieee754_pow+0x3bc>
    1da4:	e51f2070 	ldr	r2, [pc, #-112]	; 1d3c <__ieee754_pow+0x334>
    1da8:	e1530002 	cmp	r3, r2
    1dac:	c3a05000 	movgt	r5, #0
    1db0:	c28cc001 	addgt	r12, r12, #1
    1db4:	c2444601 	subgt	r4, r4, #1048576	; 0x100000
    1db8:	c1a0e005 	movgt	lr, r5
    1dbc:	d3a05701 	movle	r5, #262144	; 0x40000
    1dc0:	d3a0e001 	movle	lr, #1
    1dc4:	e51f108c 	ldr	r1, [pc, #-140]	; 1d40 <__ieee754_pow+0x338>
    1dc8:	e081118e 	add	r1, r1, lr, lsl #3
    1dcc:	e1a02000 	mov	r2, r0
    1dd0:	e58d1034 	str	r1, [sp, #52]	; 0x34
    1dd4:	e8910003 	ldm	r1, {r0, r1}
    1dd8:	e1a03004 	mov	r3, r4
    1ddc:	e58d0028 	str	r0, [sp, #40]	; 0x28
    1de0:	e58d102c 	str	r1, [sp, #44]	; 0x2c
    1de4:	e58d2020 	str	r2, [sp, #32]
    1de8:	e58d3024 	str	r3, [sp, #36]	; 0x24
    1dec:	e1a00002 	mov	r0, r2
    1df0:	e1a01004 	mov	r1, r4
    1df4:	e28d3028 	add	r3, sp, #40	; 0x28
    1df8:	e893000c 	ldm	r3, {r2, r3}
    1dfc:	e58dc004 	str	r12, [sp, #4]
    1e00:	eb000a66 	bl	47a0 <__aeabi_dsub>
    1e04:	e28d3028 	add	r3, sp, #40	; 0x28
    1e08:	e893000c 	ldm	r3, {r2, r3}
    1e0c:	e1a06000 	mov	r6, r0
    1e10:	e1a07001 	mov	r7, r1
    1e14:	e28d1020 	add	r1, sp, #32
    1e18:	e8910003 	ldm	r1, {r0, r1}
    1e1c:	eb000a60 	bl	47a4 <__adddf3>
    1e20:	e1a02000 	mov	r2, r0
    1e24:	e1a03001 	mov	r3, r1
    1e28:	e3a00000 	mov	r0, #0
    1e2c:	e51f10f0 	ldr	r1, [pc, #-240]	; 1d44 <__ieee754_pow+0x33c>
    1e30:	eb000c03 	bl	4e44 <__aeabi_ddiv>
    1e34:	e58d0038 	str	r0, [sp, #56]	; 0x38
    1e38:	e58d103c 	str	r1, [sp, #60]	; 0x3c
    1e3c:	e28d3038 	add	r3, sp, #56	; 0x38
    1e40:	e893000c 	ldm	r3, {r2, r3}
    1e44:	e1a00006 	mov	r0, r6
    1e48:	e1a01007 	mov	r1, r7
    1e4c:	eb000b58 	bl	4bb4 <__aeabi_dmul>
    1e50:	e58d0018 	str	r0, [sp, #24]
    1e54:	e58d101c 	str	r1, [sp, #28]
    1e58:	e28d3018 	add	r3, sp, #24
    1e5c:	e893000c 	ldm	r3, {r2, r3}
    1e60:	e1a010c4 	asr	r1, r4, #1
    1e64:	e3a04000 	mov	r4, #0
    1e68:	e58d2008 	str	r2, [sp, #8]
    1e6c:	e58d300c 	str	r3, [sp, #12]
    1e70:	e58d4008 	str	r4, [sp, #8]
    1e74:	e28d9008 	add	r9, sp, #8
    1e78:	e8990300 	ldm	r9, {r8, r9}
    1e7c:	e3811202 	orr	r1, r1, #536870912	; 0x20000000
    1e80:	e2811702 	add	r1, r1, #524288	; 0x80000
    1e84:	e0853001 	add	r3, r5, r1
    1e88:	e3a02000 	mov	r2, #0
    1e8c:	e1a00008 	mov	r0, r8
    1e90:	e1a01009 	mov	r1, r9
    1e94:	e1a04002 	mov	r4, r2
    1e98:	e1a05003 	mov	r5, r3
    1e9c:	eb000b44 	bl	4bb4 <__aeabi_dmul>
    1ea0:	e1a02000 	mov	r2, r0
    1ea4:	e1a03001 	mov	r3, r1
    1ea8:	e1a00006 	mov	r0, r6
    1eac:	e1a01007 	mov	r1, r7
    1eb0:	eb000a3a 	bl	47a0 <__aeabi_dsub>
    1eb4:	e28d3028 	add	r3, sp, #40	; 0x28
    1eb8:	e893000c 	ldm	r3, {r2, r3}
    1ebc:	e1a06000 	mov	r6, r0
    1ec0:	e1a07001 	mov	r7, r1
    1ec4:	e1a00004 	mov	r0, r4
    1ec8:	e1a01005 	mov	r1, r5
    1ecc:	eb000a33 	bl	47a0 <__aeabi_dsub>
    1ed0:	e1a02000 	mov	r2, r0
    1ed4:	e1a03001 	mov	r3, r1
    1ed8:	e28d1020 	add	r1, sp, #32
    1edc:	e8910003 	ldm	r1, {r0, r1}
    1ee0:	eb000a2e 	bl	47a0 <__aeabi_dsub>
    1ee4:	e1a02000 	mov	r2, r0
    1ee8:	e1a03001 	mov	r3, r1
    1eec:	e1a00008 	mov	r0, r8
    1ef0:	e1a01009 	mov	r1, r9
    1ef4:	eb000b2e 	bl	4bb4 <__aeabi_dmul>
    1ef8:	e1a02000 	mov	r2, r0
    1efc:	e1a03001 	mov	r3, r1
    1f00:	e1a00006 	mov	r0, r6
    1f04:	e1a01007 	mov	r1, r7
    1f08:	eb000a24 	bl	47a0 <__aeabi_dsub>
    1f0c:	e28d3038 	add	r3, sp, #56	; 0x38
    1f10:	e893000c 	ldm	r3, {r2, r3}
    1f14:	eb000b26 	bl	4bb4 <__aeabi_dmul>
    1f18:	e1a06000 	mov	r6, r0
    1f1c:	e1a07001 	mov	r7, r1
    1f20:	e28d1018 	add	r1, sp, #24
    1f24:	e8910003 	ldm	r1, {r0, r1}
    1f28:	e1a02000 	mov	r2, r0
    1f2c:	e1a03001 	mov	r3, r1
    1f30:	eb000b1f 	bl	4bb4 <__aeabi_dmul>
    1f34:	e1a02000 	mov	r2, r0
    1f38:	e1a03001 	mov	r3, r1
    1f3c:	e1a04000 	mov	r4, r0
    1f40:	e1a05001 	mov	r5, r1
    1f44:	eb000b1a 	bl	4bb4 <__aeabi_dmul>
    1f48:	e28f3e3f 	add	r3, pc, #1008	; 0x3f0
    1f4c:	e893000c 	ldm	r3, {r2, r3}
    1f50:	e58d0020 	str	r0, [sp, #32]
    1f54:	e58d1024 	str	r1, [sp, #36]	; 0x24
    1f58:	e1a00004 	mov	r0, r4
    1f5c:	e1a01005 	mov	r1, r5
    1f60:	eb000b13 	bl	4bb4 <__aeabi_dmul>
    1f64:	e28f3ff7 	add	r3, pc, #988	; 0x3dc
    1f68:	e893000c 	ldm	r3, {r2, r3}
    1f6c:	eb000a0c 	bl	47a4 <__adddf3>
    1f70:	e1a02004 	mov	r2, r4
    1f74:	e1a03005 	mov	r3, r5
    1f78:	eb000b0d 	bl	4bb4 <__aeabi_dmul>
    1f7c:	e28f3ff3 	add	r3, pc, #972	; 0x3cc
    1f80:	e893000c 	ldm	r3, {r2, r3}
    1f84:	eb000a06 	bl	47a4 <__adddf3>
    1f88:	e1a02004 	mov	r2, r4
    1f8c:	e1a03005 	mov	r3, r5
    1f90:	eb000b07 	bl	4bb4 <__aeabi_dmul>
    1f94:	e28f3fef 	add	r3, pc, #956	; 0x3bc
    1f98:	e893000c 	ldm	r3, {r2, r3}
    1f9c:	eb000a00 	bl	47a4 <__adddf3>
    1fa0:	e1a02004 	mov	r2, r4
    1fa4:	e1a03005 	mov	r3, r5
    1fa8:	eb000b01 	bl	4bb4 <__aeabi_dmul>
    1fac:	e28f3feb 	add	r3, pc, #940	; 0x3ac
    1fb0:	e893000c 	ldm	r3, {r2, r3}
    1fb4:	eb0009fa 	bl	47a4 <__adddf3>
    1fb8:	e1a02004 	mov	r2, r4
    1fbc:	e1a03005 	mov	r3, r5
    1fc0:	eb000afb 	bl	4bb4 <__aeabi_dmul>
    1fc4:	e28f3fe7 	add	r3, pc, #924	; 0x39c
    1fc8:	e893000c 	ldm	r3, {r2, r3}
    1fcc:	eb0009f4 	bl	47a4 <__adddf3>
    1fd0:	e1a02000 	mov	r2, r0
    1fd4:	e1a03001 	mov	r3, r1
    1fd8:	e28d1020 	add	r1, sp, #32
    1fdc:	e8910003 	ldm	r1, {r0, r1}
    1fe0:	eb000af3 	bl	4bb4 <__aeabi_dmul>
    1fe4:	e28d3018 	add	r3, sp, #24
    1fe8:	e893000c 	ldm	r3, {r2, r3}
    1fec:	e1a04000 	mov	r4, r0
    1ff0:	e1a05001 	mov	r5, r1
    1ff4:	e1a00008 	mov	r0, r8
    1ff8:	e1a01009 	mov	r1, r9
    1ffc:	eb0009e8 	bl	47a4 <__adddf3>
    2000:	e1a02006 	mov	r2, r6
    2004:	e1a03007 	mov	r3, r7
    2008:	eb000ae9 	bl	4bb4 <__aeabi_dmul>
    200c:	e1a02004 	mov	r2, r4
    2010:	e1a03005 	mov	r3, r5
    2014:	eb0009e2 	bl	47a4 <__adddf3>
    2018:	e1a02008 	mov	r2, r8
    201c:	e58d0020 	str	r0, [sp, #32]
    2020:	e58d1024 	str	r1, [sp, #36]	; 0x24
    2024:	e1a03009 	mov	r3, r9
    2028:	e1a00008 	mov	r0, r8
    202c:	e1a01009 	mov	r1, r9
    2030:	eb000adf 	bl	4bb4 <__aeabi_dmul>
    2034:	e3a02000 	mov	r2, #0
    2038:	e59f3348 	ldr	r3, [pc, #840]	; 2388 <__ieee754_pow+0x980>
    203c:	e58d0028 	str	r0, [sp, #40]	; 0x28
    2040:	e58d102c 	str	r1, [sp, #44]	; 0x2c
    2044:	eb0009d6 	bl	47a4 <__adddf3>
    2048:	e28d3020 	add	r3, sp, #32
    204c:	e893000c 	ldm	r3, {r2, r3}
    2050:	eb0009d3 	bl	47a4 <__adddf3>
    2054:	e59de008 	ldr	lr, [sp, #8]
    2058:	e1a05001 	mov	r5, r1
    205c:	e1a0200e 	mov	r2, lr
    2060:	e1a03005 	mov	r3, r5
    2064:	e1a00008 	mov	r0, r8
    2068:	e1a01009 	mov	r1, r9
    206c:	e1a0400e 	mov	r4, lr
    2070:	eb000acf 	bl	4bb4 <__aeabi_dmul>
    2074:	e1a02004 	mov	r2, r4
    2078:	e1a08000 	mov	r8, r0
    207c:	e1a09001 	mov	r9, r1
    2080:	e1a03005 	mov	r3, r5
    2084:	e1a00006 	mov	r0, r6
    2088:	e1a01007 	mov	r1, r7
    208c:	eb000ac8 	bl	4bb4 <__aeabi_dmul>
    2090:	e3a02000 	mov	r2, #0
    2094:	e1a06000 	mov	r6, r0
    2098:	e1a07001 	mov	r7, r1
    209c:	e1a00004 	mov	r0, r4
    20a0:	e1a01005 	mov	r1, r5
    20a4:	e59f32dc 	ldr	r3, [pc, #732]	; 2388 <__ieee754_pow+0x980>
    20a8:	eb0009bc 	bl	47a0 <__aeabi_dsub>
    20ac:	e28d3028 	add	r3, sp, #40	; 0x28
    20b0:	e893000c 	ldm	r3, {r2, r3}
    20b4:	eb0009b9 	bl	47a0 <__aeabi_dsub>
    20b8:	e1a02000 	mov	r2, r0
    20bc:	e1a03001 	mov	r3, r1
    20c0:	e28d1020 	add	r1, sp, #32
    20c4:	e8910003 	ldm	r1, {r0, r1}
    20c8:	eb0009b4 	bl	47a0 <__aeabi_dsub>
    20cc:	e28d3018 	add	r3, sp, #24
    20d0:	e893000c 	ldm	r3, {r2, r3}
    20d4:	eb000ab6 	bl	4bb4 <__aeabi_dmul>
    20d8:	e1a02000 	mov	r2, r0
    20dc:	e1a03001 	mov	r3, r1
    20e0:	e1a00006 	mov	r0, r6
    20e4:	e1a01007 	mov	r1, r7
    20e8:	eb0009ad 	bl	47a4 <__adddf3>
    20ec:	e1a06000 	mov	r6, r0
    20f0:	e1a07001 	mov	r7, r1
    20f4:	e1a02006 	mov	r2, r6
    20f8:	e1a03007 	mov	r3, r7
    20fc:	e1a00008 	mov	r0, r8
    2100:	e1a01009 	mov	r1, r9
    2104:	eb0009a6 	bl	47a4 <__adddf3>
    2108:	e59d2008 	ldr	r2, [sp, #8]
    210c:	e59f3278 	ldr	r3, [pc, #632]	; 238c <__ieee754_pow+0x984>
    2110:	e1a04002 	mov	r4, r2
    2114:	e1a00002 	mov	r0, r2
    2118:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    211c:	e1a05001 	mov	r5, r1
    2120:	eb000aa3 	bl	4bb4 <__aeabi_dmul>
    2124:	e28f3f91 	add	r3, pc, #580	; 0x244
    2128:	e893000c 	ldm	r3, {r2, r3}
    212c:	e58d0018 	str	r0, [sp, #24]
    2130:	e58d101c 	str	r1, [sp, #28]
    2134:	e1a00004 	mov	r0, r4
    2138:	e1a01005 	mov	r1, r5
    213c:	eb000a9c 	bl	4bb4 <__aeabi_dmul>
    2140:	e1a02008 	mov	r2, r8
    2144:	e58d0020 	str	r0, [sp, #32]
    2148:	e58d1024 	str	r1, [sp, #36]	; 0x24
    214c:	e1a03009 	mov	r3, r9
    2150:	e1a00004 	mov	r0, r4
    2154:	e1a01005 	mov	r1, r5
    2158:	eb000990 	bl	47a0 <__aeabi_dsub>
    215c:	e1a02000 	mov	r2, r0
    2160:	e1a03001 	mov	r3, r1
    2164:	e1a00006 	mov	r0, r6
    2168:	e1a01007 	mov	r1, r7
    216c:	eb00098b 	bl	47a0 <__aeabi_dsub>
    2170:	e28f3c02 	add	r3, pc, #512	; 0x200
    2174:	e893000c 	ldm	r3, {r2, r3}
    2178:	eb000a8d 	bl	4bb4 <__aeabi_dmul>
    217c:	e1a02000 	mov	r2, r0
    2180:	e1a03001 	mov	r3, r1
    2184:	e28d1020 	add	r1, sp, #32
    2188:	e8910003 	ldm	r1, {r0, r1}
    218c:	eb000984 	bl	47a4 <__adddf3>
    2190:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
    2194:	e2843010 	add	r3, r4, #16
    2198:	e893000c 	ldm	r3, {r2, r3}
    219c:	eb000980 	bl	47a4 <__adddf3>
    21a0:	e59dc004 	ldr	r12, [sp, #4]
    21a4:	e1a04000 	mov	r4, r0
    21a8:	e1a0000c 	mov	r0, r12
    21ac:	e1a05001 	mov	r5, r1
    21b0:	eb000a48 	bl	4ad8 <__aeabi_i2d>
    21b4:	e59de034 	ldr	lr, [sp, #52]	; 0x34
    21b8:	e28e9020 	add	r9, lr, #32
    21bc:	e8990300 	ldm	r9, {r8, r9}
    21c0:	e1a06000 	mov	r6, r0
    21c4:	e1a07001 	mov	r7, r1
    21c8:	e1a02004 	mov	r2, r4
    21cc:	e28d1018 	add	r1, sp, #24
    21d0:	e8910003 	ldm	r1, {r0, r1}
    21d4:	e1a03005 	mov	r3, r5
    21d8:	eb000971 	bl	47a4 <__adddf3>
    21dc:	e1a02008 	mov	r2, r8
    21e0:	e1a03009 	mov	r3, r9
    21e4:	eb00096e 	bl	47a4 <__adddf3>
    21e8:	e1a02006 	mov	r2, r6
    21ec:	e1a03007 	mov	r3, r7
    21f0:	eb00096b 	bl	47a4 <__adddf3>
    21f4:	e59d2008 	ldr	r2, [sp, #8]
    21f8:	e1a03007 	mov	r3, r7
    21fc:	e1a00002 	mov	r0, r2
    2200:	e1a02006 	mov	r2, r6
    2204:	e58d0008 	str	r0, [sp, #8]
    2208:	e58d100c 	str	r1, [sp, #12]
    220c:	eb000963 	bl	47a0 <__aeabi_dsub>
    2210:	e1a02008 	mov	r2, r8
    2214:	e1a03009 	mov	r3, r9
    2218:	eb000960 	bl	47a0 <__aeabi_dsub>
    221c:	e28d3018 	add	r3, sp, #24
    2220:	e893000c 	ldm	r3, {r2, r3}
    2224:	eb00095d 	bl	47a0 <__aeabi_dsub>
    2228:	e1a03001 	mov	r3, r1
    222c:	e1a02000 	mov	r2, r0
    2230:	e1a01005 	mov	r1, r5
    2234:	e1a00004 	mov	r0, r4
    2238:	eb000958 	bl	47a0 <__aeabi_dsub>
    223c:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    2240:	e2443001 	sub	r3, r4, #1
    2244:	e59d4010 	ldr	r4, [sp, #16]
    2248:	e1934004 	orrs	r4, r3, r4
    224c:	e1a08000 	mov	r8, r0
    2250:	e1a09001 	mov	r9, r1
    2254:	1a00013e 	bne	2754 <__ieee754_pow+0xd4c>
    2258:	e59f1130 	ldr	r1, [pc, #304]	; 2390 <__ieee754_pow+0x988>
    225c:	e3a00000 	mov	r0, #0
    2260:	e58d0010 	str	r0, [sp, #16]
    2264:	e58d1014 	str	r1, [sp, #20]
    2268:	e3a06000 	mov	r6, #0
    226c:	e1a02006 	mov	r2, r6
    2270:	e1a0300b 	mov	r3, r11
    2274:	e1a0000a 	mov	r0, r10
    2278:	e1a0100b 	mov	r1, r11
    227c:	eb000947 	bl	47a0 <__aeabi_dsub>
    2280:	e28d3008 	add	r3, sp, #8
    2284:	e893000c 	ldm	r3, {r2, r3}
    2288:	eb000a49 	bl	4bb4 <__aeabi_dmul>
    228c:	e1a03009 	mov	r3, r9
    2290:	e1a04000 	mov	r4, r0
    2294:	e1a05001 	mov	r5, r1
    2298:	e1a0000a 	mov	r0, r10
    229c:	e1a0100b 	mov	r1, r11
    22a0:	e1a02008 	mov	r2, r8
    22a4:	eb000a42 	bl	4bb4 <__aeabi_dmul>
    22a8:	e1a02000 	mov	r2, r0
    22ac:	e1a03001 	mov	r3, r1
    22b0:	e1a00004 	mov	r0, r4
    22b4:	e1a01005 	mov	r1, r5
    22b8:	eb000939 	bl	47a4 <__adddf3>
    22bc:	e1a0700b 	mov	r7, r11
    22c0:	e28d3008 	add	r3, sp, #8
    22c4:	e893000c 	ldm	r3, {r2, r3}
    22c8:	e1a0a000 	mov	r10, r0
    22cc:	e1a0b001 	mov	r11, r1
    22d0:	e1a00006 	mov	r0, r6
    22d4:	e1a01007 	mov	r1, r7
    22d8:	eb000a35 	bl	4bb4 <__aeabi_dmul>
    22dc:	e1a04000 	mov	r4, r0
    22e0:	e1a05001 	mov	r5, r1
    22e4:	e1a0000a 	mov	r0, r10
    22e8:	e1a0100b 	mov	r1, r11
    22ec:	e1a02004 	mov	r2, r4
    22f0:	e1a03005 	mov	r3, r5
    22f4:	eb00092a 	bl	47a4 <__adddf3>
    22f8:	e59fc094 	ldr	r12, [pc, #148]	; 2394 <__ieee754_pow+0x98c>
    22fc:	e151000c 	cmp	r1, r12
    2300:	e1a06000 	mov	r6, r0
    2304:	e1a07001 	mov	r7, r1
    2308:	e1a09001 	mov	r9, r1
    230c:	da0000da 	ble	267c <__ieee754_pow+0xc74>
    2310:	e28134bf 	add	r3, r1, #-1090519040	; 0xbf000000
    2314:	e2833607 	add	r3, r3, #7340032	; 0x700000
    2318:	e1933000 	orrs	r3, r3, r0
    231c:	1a00017b 	bne	2910 <__ieee754_pow+0xf08>
    2320:	e28f3058 	add	r3, pc, #88	; 0x58
    2324:	e893000c 	ldm	r3, {r2, r3}
    2328:	e1a0000a 	mov	r0, r10
    232c:	e1a0100b 	mov	r1, r11
    2330:	eb00091b 	bl	47a4 <__adddf3>
    2334:	e1a02004 	mov	r2, r4
    2338:	ea000018 	b	23a0 <__ieee754_pow+0x998>
    233c:	e1a00000 	nop			; (mov r0, r0)
    2340:	4a454eef 	.word	0x4a454eef
    2344:	3fca7e28 	.word	0x3fca7e28
    2348:	93c9db65 	.word	0x93c9db65
    234c:	3fcd864a 	.word	0x3fcd864a
    2350:	a91d4101 	.word	0xa91d4101
    2354:	3fd17460 	.word	0x3fd17460
    2358:	518f264d 	.word	0x518f264d
    235c:	3fd55555 	.word	0x3fd55555
    2360:	db6fabff 	.word	0xdb6fabff
    2364:	3fdb6db6 	.word	0x3fdb6db6
    2368:	33333303 	.word	0x33333303
    236c:	3fe33333 	.word	0x3fe33333
    2370:	145b01f5 	.word	0x145b01f5
    2374:	be3e2fe0 	.word	0xbe3e2fe0
    2378:	dc3a03fd 	.word	0xdc3a03fd
    237c:	3feec709 	.word	0x3feec709
    2380:	652b82fe 	.word	0x652b82fe
    2384:	3c971547 	.word	0x3c971547
    2388:	40080000 	.word	0x40080000
    238c:	3feec709 	.word	0x3feec709
    2390:	bff00000 	.word	0xbff00000
    2394:	408fffff 	.word	0x408fffff
    2398:	3fe00000 	.word	0x3fe00000
    239c:	3fe62e43 	.word	0x3fe62e43
    23a0:	e58d0008 	str	r0, [sp, #8]
    23a4:	e58d100c 	str	r1, [sp, #12]
    23a8:	e1a03005 	mov	r3, r5
    23ac:	e1a00006 	mov	r0, r6
    23b0:	e1a01007 	mov	r1, r7
    23b4:	eb0008f9 	bl	47a0 <__aeabi_dsub>
    23b8:	e1a02000 	mov	r2, r0
    23bc:	e1a03001 	mov	r3, r1
    23c0:	e28d1008 	add	r1, sp, #8
    23c4:	e8910003 	ldm	r1, {r0, r1}
    23c8:	eb000b6b 	bl	517c <__aeabi_dcmpgt>
    23cc:	e3500000 	cmp	r0, #0
    23d0:	03c78102 	biceq	r8, r7, #-2147483648	; 0x80000000
    23d4:	1a00014d 	bne	2910 <__ieee754_pow+0xf08>
    23d8:	e51f3048 	ldr	r3, [pc, #-72]	; 2398 <__ieee754_pow+0x990>
    23dc:	e1580003 	cmp	r8, r3
    23e0:	d3a0c000 	movle	r12, #0
    23e4:	d58dc008 	strle	r12, [sp, #8]
    23e8:	ca0000b5 	bgt	26c4 <__ieee754_pow+0xcbc>
    23ec:	e3a06000 	mov	r6, #0
    23f0:	e1a00006 	mov	r0, r6
    23f4:	e1a01007 	mov	r1, r7
    23f8:	e3a02000 	mov	r2, #0
    23fc:	e51f3068 	ldr	r3, [pc, #-104]	; 239c <__ieee754_pow+0x994>
    2400:	e58dc004 	str	r12, [sp, #4]
    2404:	eb0009ea 	bl	4bb4 <__aeabi_dmul>
    2408:	e1a02004 	mov	r2, r4
    240c:	e1a08000 	mov	r8, r0
    2410:	e1a09001 	mov	r9, r1
    2414:	e1a03005 	mov	r3, r5
    2418:	e1a00006 	mov	r0, r6
    241c:	e1a01007 	mov	r1, r7
    2420:	eb0008de 	bl	47a0 <__aeabi_dsub>
    2424:	e1a02000 	mov	r2, r0
    2428:	e1a03001 	mov	r3, r1
    242c:	e1a0000a 	mov	r0, r10
    2430:	e1a0100b 	mov	r1, r11
    2434:	eb0008d9 	bl	47a0 <__aeabi_dsub>
    2438:	e28f3fce 	add	r3, pc, #824	; 0x338
    243c:	e893000c 	ldm	r3, {r2, r3}
    2440:	eb0009db 	bl	4bb4 <__aeabi_dmul>
    2444:	e28f3fcd 	add	r3, pc, #820	; 0x334
    2448:	e893000c 	ldm	r3, {r2, r3}
    244c:	e1a04000 	mov	r4, r0
    2450:	e1a05001 	mov	r5, r1
    2454:	e1a00006 	mov	r0, r6
    2458:	e1a01007 	mov	r1, r7
    245c:	eb0009d4 	bl	4bb4 <__aeabi_dmul>
    2460:	e1a02000 	mov	r2, r0
    2464:	e1a03001 	mov	r3, r1
    2468:	e1a00004 	mov	r0, r4
    246c:	e1a01005 	mov	r1, r5
    2470:	eb0008cb 	bl	47a4 <__adddf3>
    2474:	e1a04000 	mov	r4, r0
    2478:	e1a05001 	mov	r5, r1
    247c:	e1a02004 	mov	r2, r4
    2480:	e1a03005 	mov	r3, r5
    2484:	e1a00008 	mov	r0, r8
    2488:	e1a01009 	mov	r1, r9
    248c:	eb0008c4 	bl	47a4 <__adddf3>
    2490:	e1a02008 	mov	r2, r8
    2494:	e1a03009 	mov	r3, r9
    2498:	e1a0a000 	mov	r10, r0
    249c:	e1a0b001 	mov	r11, r1
    24a0:	eb0008be 	bl	47a0 <__aeabi_dsub>
    24a4:	e1a02000 	mov	r2, r0
    24a8:	e1a03001 	mov	r3, r1
    24ac:	e1a00004 	mov	r0, r4
    24b0:	e1a01005 	mov	r1, r5
    24b4:	eb0008b9 	bl	47a0 <__aeabi_dsub>
    24b8:	e1a0200a 	mov	r2, r10
    24bc:	e1a08000 	mov	r8, r0
    24c0:	e1a09001 	mov	r9, r1
    24c4:	e1a0300b 	mov	r3, r11
    24c8:	e1a0000a 	mov	r0, r10
    24cc:	e1a0100b 	mov	r1, r11
    24d0:	eb0009b7 	bl	4bb4 <__aeabi_dmul>
    24d4:	e28f3fab 	add	r3, pc, #684	; 0x2ac
    24d8:	e893000c 	ldm	r3, {r2, r3}
    24dc:	e1a04000 	mov	r4, r0
    24e0:	e1a05001 	mov	r5, r1
    24e4:	eb0009b2 	bl	4bb4 <__aeabi_dmul>
    24e8:	e28f3e2a 	add	r3, pc, #672	; 0x2a0
    24ec:	e893000c 	ldm	r3, {r2, r3}
    24f0:	eb0008aa 	bl	47a0 <__aeabi_dsub>
    24f4:	e1a02004 	mov	r2, r4
    24f8:	e1a03005 	mov	r3, r5
    24fc:	eb0009ac 	bl	4bb4 <__aeabi_dmul>
    2500:	e28f3e29 	add	r3, pc, #656	; 0x290
    2504:	e893000c 	ldm	r3, {r2, r3}
    2508:	eb0008a5 	bl	47a4 <__adddf3>
    250c:	e1a02004 	mov	r2, r4
    2510:	e1a03005 	mov	r3, r5
    2514:	eb0009a6 	bl	4bb4 <__aeabi_dmul>
    2518:	e28f3d0a 	add	r3, pc, #640	; 0x280
    251c:	e893000c 	ldm	r3, {r2, r3}
    2520:	eb00089e 	bl	47a0 <__aeabi_dsub>
    2524:	e1a02004 	mov	r2, r4
    2528:	e1a03005 	mov	r3, r5
    252c:	eb0009a0 	bl	4bb4 <__aeabi_dmul>
    2530:	e28f3e27 	add	r3, pc, #624	; 0x270
    2534:	e893000c 	ldm	r3, {r2, r3}
    2538:	eb000899 	bl	47a4 <__adddf3>
    253c:	e1a02004 	mov	r2, r4
    2540:	e1a03005 	mov	r3, r5
    2544:	eb00099a 	bl	4bb4 <__aeabi_dmul>
    2548:	e1a02000 	mov	r2, r0
    254c:	e1a03001 	mov	r3, r1
    2550:	e1a0000a 	mov	r0, r10
    2554:	e1a0100b 	mov	r1, r11
    2558:	eb000890 	bl	47a0 <__aeabi_dsub>
    255c:	e1a04000 	mov	r4, r0
    2560:	e1a05001 	mov	r5, r1
    2564:	e1a02004 	mov	r2, r4
    2568:	e1a03005 	mov	r3, r5
    256c:	e1a0000a 	mov	r0, r10
    2570:	e1a0100b 	mov	r1, r11
    2574:	eb00098e 	bl	4bb4 <__aeabi_dmul>
    2578:	e3a02000 	mov	r2, #0
    257c:	e1a06000 	mov	r6, r0
    2580:	e1a07001 	mov	r7, r1
    2584:	e1a00004 	mov	r0, r4
    2588:	e1a01005 	mov	r1, r5
    258c:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    2590:	eb000882 	bl	47a0 <__aeabi_dsub>
    2594:	e1a02000 	mov	r2, r0
    2598:	e1a03001 	mov	r3, r1
    259c:	e1a00006 	mov	r0, r6
    25a0:	e1a01007 	mov	r1, r7
    25a4:	eb000a26 	bl	4e44 <__aeabi_ddiv>
    25a8:	e1a02008 	mov	r2, r8
    25ac:	e1a04000 	mov	r4, r0
    25b0:	e1a05001 	mov	r5, r1
    25b4:	e1a03009 	mov	r3, r9
    25b8:	e1a0000a 	mov	r0, r10
    25bc:	e1a0100b 	mov	r1, r11
    25c0:	eb00097b 	bl	4bb4 <__aeabi_dmul>
    25c4:	e1a02008 	mov	r2, r8
    25c8:	e1a03009 	mov	r3, r9
    25cc:	eb000874 	bl	47a4 <__adddf3>
    25d0:	e1a02000 	mov	r2, r0
    25d4:	e1a03001 	mov	r3, r1
    25d8:	e1a00004 	mov	r0, r4
    25dc:	e1a01005 	mov	r1, r5
    25e0:	eb00086e 	bl	47a0 <__aeabi_dsub>
    25e4:	e1a0200a 	mov	r2, r10
    25e8:	e1a0300b 	mov	r3, r11
    25ec:	eb00086b 	bl	47a0 <__aeabi_dsub>
    25f0:	e1a02000 	mov	r2, r0
    25f4:	e1a03001 	mov	r3, r1
    25f8:	e3a00000 	mov	r0, #0
    25fc:	e59f11bc 	ldr	r1, [pc, #444]	; 27c0 <__ieee754_pow+0xdb8>
    2600:	eb000866 	bl	47a0 <__aeabi_dsub>
    2604:	e59dc004 	ldr	r12, [sp, #4]
    2608:	e08ce001 	add	lr, r12, r1
    260c:	e35e0601 	cmp	lr, #1048576	; 0x100000
    2610:	e1a03001 	mov	r3, r1
    2614:	e1a02000 	mov	r2, r0
    2618:	e1a04000 	mov	r4, r0
    261c:	e1a05001 	mov	r5, r1
    2620:	a1a0300e 	movge	r3, lr
    2624:	ba0000e4 	blt	29bc <__ieee754_pow+0xfb4>
    2628:	e28d1010 	add	r1, sp, #16
    262c:	e8910003 	ldm	r1, {r0, r1}
    2630:	eb00095f 	bl	4bb4 <__aeabi_dmul>
    2634:	e1a0a000 	mov	r10, r0
    2638:	e1a0b001 	mov	r11, r1
    263c:	eafffd0b 	b	1a70 <__ieee754_pow+0x68>
    2640:	e59d1020 	ldr	r1, [sp, #32]
    2644:	e3510000 	cmp	r1, #0
    2648:	bafffd34 	blt	1b20 <__ieee754_pow+0x118>
    264c:	e1a00007 	mov	r0, r7
    2650:	e1a01008 	mov	r1, r8
    2654:	eb000281 	bl	3060 <__ieee754_sqrt>
    2658:	e1a0a000 	mov	r10, r0
    265c:	e1a0b001 	mov	r11, r1
    2660:	eafffd02 	b	1a70 <__ieee754_pow+0x68>
    2664:	e1a0a003 	mov	r10, r3
    2668:	e59fb150 	ldr	r11, [pc, #336]	; 27c0 <__ieee754_pow+0xdb8>
    266c:	eafffcff 	b	1a70 <__ieee754_pow+0x68>
    2670:	e3540000 	cmp	r4, #0
    2674:	aafffd78 	bge	1c5c <__ieee754_pow+0x254>
    2678:	eafffd49 	b	1ba4 <__ieee754_pow+0x19c>
    267c:	e59f312c 	ldr	r3, [pc, #300]	; 27b0 <__ieee754_pow+0xda8>
    2680:	e3c18102 	bic	r8, r1, #-2147483648	; 0x80000000
    2684:	e1580003 	cmp	r8, r3
    2688:	daffff52 	ble	23d8 <__ieee754_pow+0x9d0>
    268c:	e59f3120 	ldr	r3, [pc, #288]	; 27b4 <__ieee754_pow+0xdac>
    2690:	e0813003 	add	r3, r1, r3
    2694:	e1933000 	orrs	r3, r3, r0
    2698:	1a0000b9 	bne	2984 <__ieee754_pow+0xf7c>
    269c:	e1a02004 	mov	r2, r4
    26a0:	e1a03005 	mov	r3, r5
    26a4:	eb00083d 	bl	47a0 <__aeabi_dsub>
    26a8:	e1a02000 	mov	r2, r0
    26ac:	e1a03001 	mov	r3, r1
    26b0:	e1a0000a 	mov	r0, r10
    26b4:	e1a0100b 	mov	r1, r11
    26b8:	eb000aa3 	bl	514c <__aeabi_dcmple>
    26bc:	e3500000 	cmp	r0, #0
    26c0:	1a0000af 	bne	2984 <__ieee754_pow+0xf7c>
    26c4:	e1a03a48 	asr	r3, r8, #20
    26c8:	e2433fff 	sub	r3, r3, #1020	; 0x3fc
    26cc:	e2433002 	sub	r3, r3, #2
    26d0:	e3a01601 	mov	r1, #1048576	; 0x100000
    26d4:	e0891351 	add	r1, r9, r1, asr r3
    26d8:	e3c10102 	bic	r0, r1, #-2147483648	; 0x80000000
    26dc:	e1a00a40 	asr	r0, r0, #20
    26e0:	e240efff 	sub	lr, r0, #1020	; 0x3fc
    26e4:	e59f60cc 	ldr	r6, [pc, #204]	; 27b8 <__ieee754_pow+0xdb0>
    26e8:	e24ee003 	sub	lr, lr, #3
    26ec:	e1c13e56 	bic	r3, r1, r6, asr lr
    26f0:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    26f4:	e3c1e60f 	bic	lr, r1, #15728640	; 0xf00000
    26f8:	e2601e41 	rsb	r1, r0, #1040	; 0x410
    26fc:	e38ee601 	orr	lr, lr, #1048576	; 0x100000
    2700:	e2811003 	add	r1, r1, #3
    2704:	e1a0115e 	asr	r1, lr, r1
    2708:	e3590000 	cmp	r9, #0
    270c:	e58d1008 	str	r1, [sp, #8]
    2710:	b2611000 	rsblt	r1, r1, #0
    2714:	b58d1008 	strlt	r1, [sp, #8]
    2718:	e3a02000 	mov	r2, #0
    271c:	e1a00004 	mov	r0, r4
    2720:	e1a01005 	mov	r1, r5
    2724:	eb00081d 	bl	47a0 <__aeabi_dsub>
    2728:	e1a04000 	mov	r4, r0
    272c:	e1a05001 	mov	r5, r1
    2730:	e1a02004 	mov	r2, r4
    2734:	e1a0000a 	mov	r0, r10
    2738:	e1a0100b 	mov	r1, r11
    273c:	e1a03005 	mov	r3, r5
    2740:	eb000817 	bl	47a4 <__adddf3>
    2744:	e59d2008 	ldr	r2, [sp, #8]
    2748:	e1a07001 	mov	r7, r1
    274c:	e1a0ca02 	lsl	r12, r2, #20
    2750:	eaffff25 	b	23ec <__ieee754_pow+0x9e4>
    2754:	e59f2064 	ldr	r2, [pc, #100]	; 27c0 <__ieee754_pow+0xdb8>
    2758:	e3a01000 	mov	r1, #0
    275c:	e58d1010 	str	r1, [sp, #16]
    2760:	e58d2014 	str	r2, [sp, #20]
    2764:	eafffebf 	b	2268 <__ieee754_pow+0x860>
    2768:	e3540000 	cmp	r4, #0
    276c:	b28bb102 	addlt	r11, r11, #-2147483648	; 0x80000000
    2770:	aafffd39 	bge	1c5c <__ieee754_pow+0x254>
    2774:	eafffcbd 	b	1a70 <__ieee754_pow+0x68>
    2778:	fefa39ef 	.word	0xfefa39ef
    277c:	3fe62e42 	.word	0x3fe62e42
    2780:	0ca86c39 	.word	0x0ca86c39
    2784:	be205c61 	.word	0xbe205c61
    2788:	72bea4d0 	.word	0x72bea4d0
    278c:	3e663769 	.word	0x3e663769
    2790:	c5d26bf1 	.word	0xc5d26bf1
    2794:	3ebbbd41 	.word	0x3ebbbd41
    2798:	af25de2c 	.word	0xaf25de2c
    279c:	3f11566a 	.word	0x3f11566a
    27a0:	16bebd93 	.word	0x16bebd93
    27a4:	3f66c16c 	.word	0x3f66c16c
    27a8:	5555553e 	.word	0x5555553e
    27ac:	3fc55555 	.word	0x3fc55555
    27b0:	4090cbff 	.word	0x4090cbff
    27b4:	3f6f3400 	.word	0x3f6f3400
    27b8:	000fffff 	.word	0x000fffff
    27bc:	3feffffe 	.word	0x3feffffe
    27c0:	3ff00000 	.word	0x3ff00000
    27c4:	3ff71547 	.word	0x3ff71547
    27c8:	e51f3014 	ldr	r3, [pc, #-20]	; 27bc <__ieee754_pow+0xdb4>
    27cc:	e59d2008 	ldr	r2, [sp, #8]
    27d0:	e1520003 	cmp	r2, r3
    27d4:	daffffa5 	ble	2670 <__ieee754_pow+0xc68>
    27d8:	e51f3020 	ldr	r3, [pc, #-32]	; 27c0 <__ieee754_pow+0xdb8>
    27dc:	e59d2008 	ldr	r2, [sp, #8]
    27e0:	e1520003 	cmp	r2, r3
    27e4:	cafffcec 	bgt	1b9c <__ieee754_pow+0x194>
    27e8:	e3a02000 	mov	r2, #0
    27ec:	e51f3034 	ldr	r3, [pc, #-52]	; 27c0 <__ieee754_pow+0xdb8>
    27f0:	eb0007ea 	bl	47a0 <__aeabi_dsub>
    27f4:	e3a02206 	mov	r2, #1610612736	; 0x60000000
    27f8:	e51f303c 	ldr	r3, [pc, #-60]	; 27c4 <__ieee754_pow+0xdbc>
    27fc:	e1a04000 	mov	r4, r0
    2800:	e1a05001 	mov	r5, r1
    2804:	eb0008ea 	bl	4bb4 <__aeabi_dmul>
    2808:	e28f3d07 	add	r3, pc, #448	; 0x1c0
    280c:	e893000c 	ldm	r3, {r2, r3}
    2810:	e1a06000 	mov	r6, r0
    2814:	e1a07001 	mov	r7, r1
    2818:	e1a00004 	mov	r0, r4
    281c:	e1a01005 	mov	r1, r5
    2820:	eb0008e3 	bl	4bb4 <__aeabi_dmul>
    2824:	e1a02004 	mov	r2, r4
    2828:	e58d0008 	str	r0, [sp, #8]
    282c:	e58d100c 	str	r1, [sp, #12]
    2830:	e1a03005 	mov	r3, r5
    2834:	e1a00004 	mov	r0, r4
    2838:	e1a01005 	mov	r1, r5
    283c:	eb0008dc 	bl	4bb4 <__aeabi_dmul>
    2840:	e3a02000 	mov	r2, #0
    2844:	e1a08000 	mov	r8, r0
    2848:	e1a09001 	mov	r9, r1
    284c:	e1a00004 	mov	r0, r4
    2850:	e1a01005 	mov	r1, r5
    2854:	e59f319c 	ldr	r3, [pc, #412]	; 29f8 <__ieee754_pow+0xff0>
    2858:	eb0008d5 	bl	4bb4 <__aeabi_dmul>
    285c:	e1a02000 	mov	r2, r0
    2860:	e1a03001 	mov	r3, r1
    2864:	e28f1f5b 	add	r1, pc, #364	; 0x16c
    2868:	e8910003 	ldm	r1, {r0, r1}
    286c:	eb0007cb 	bl	47a0 <__aeabi_dsub>
    2870:	e1a02004 	mov	r2, r4
    2874:	e1a03005 	mov	r3, r5
    2878:	eb0008cd 	bl	4bb4 <__aeabi_dmul>
    287c:	e1a02000 	mov	r2, r0
    2880:	e1a03001 	mov	r3, r1
    2884:	e3a00000 	mov	r0, #0
    2888:	e59f116c 	ldr	r1, [pc, #364]	; 29fc <__ieee754_pow+0xff4>
    288c:	eb0007c3 	bl	47a0 <__aeabi_dsub>
    2890:	e1a02000 	mov	r2, r0
    2894:	e1a03001 	mov	r3, r1
    2898:	e1a00008 	mov	r0, r8
    289c:	e1a01009 	mov	r1, r9
    28a0:	eb0008c3 	bl	4bb4 <__aeabi_dmul>
    28a4:	e28f3f4d 	add	r3, pc, #308	; 0x134
    28a8:	e893000c 	ldm	r3, {r2, r3}
    28ac:	eb0008c0 	bl	4bb4 <__aeabi_dmul>
    28b0:	e1a02000 	mov	r2, r0
    28b4:	e1a03001 	mov	r3, r1
    28b8:	e28d1008 	add	r1, sp, #8
    28bc:	e8910003 	ldm	r1, {r0, r1}
    28c0:	eb0007b6 	bl	47a0 <__aeabi_dsub>
    28c4:	e1a04000 	mov	r4, r0
    28c8:	e1a05001 	mov	r5, r1
    28cc:	e1a02004 	mov	r2, r4
    28d0:	e1a03005 	mov	r3, r5
    28d4:	e1a00006 	mov	r0, r6
    28d8:	e1a01007 	mov	r1, r7
    28dc:	eb0007b0 	bl	47a4 <__adddf3>
    28e0:	e3a00000 	mov	r0, #0
    28e4:	e58d0008 	str	r0, [sp, #8]
    28e8:	e58d100c 	str	r1, [sp, #12]
    28ec:	e1a02006 	mov	r2, r6
    28f0:	e1a03007 	mov	r3, r7
    28f4:	eafffe4a 	b	2224 <__ieee754_pow+0x81c>
    28f8:	e1a02000 	mov	r2, r0
    28fc:	e1a03001 	mov	r3, r1
    2900:	e3a00000 	mov	r0, #0
    2904:	e59f10f4 	ldr	r1, [pc, #244]	; 2a00 <__ieee754_pow+0xff8>
    2908:	eb00094d 	bl	4e44 <__aeabi_ddiv>
    290c:	eafffcd7 	b	1c70 <__ieee754_pow+0x268>
    2910:	e28f30d0 	add	r3, pc, #208	; 0xd0
    2914:	e893000c 	ldm	r3, {r2, r3}
    2918:	e28d1010 	add	r1, sp, #16
    291c:	e8910003 	ldm	r1, {r0, r1}
    2920:	eb0008a3 	bl	4bb4 <__aeabi_dmul>
    2924:	e28f30bc 	add	r3, pc, #188	; 0xbc
    2928:	e893000c 	ldm	r3, {r2, r3}
    292c:	eb0008a0 	bl	4bb4 <__aeabi_dmul>
    2930:	e1a0a000 	mov	r10, r0
    2934:	e1a0b001 	mov	r11, r1
    2938:	eafffc4c 	b	1a70 <__ieee754_pow+0x68>
    293c:	e35a0000 	cmp	r10, #0
    2940:	1a00001a 	bne	29b0 <__ieee754_pow+0xfa8>
    2944:	e2633e41 	rsb	r3, r3, #1040	; 0x410
    2948:	e2832003 	add	r2, r3, #3
    294c:	e1a03256 	asr	r3, r6, r2
    2950:	e1560213 	cmp	r6, r3, lsl r2
    2954:	02033001 	andeq	r3, r3, #1
    2958:	02633002 	rsbeq	r3, r3, #2
    295c:	058d3030 	streq	r3, [sp, #48]	; 0x30
    2960:	13a03000 	movne	r3, #0
    2964:	158d3030 	strne	r3, [sp, #48]	; 0x30
    2968:	eafffc5f 	b	1aec <__ieee754_pow+0xe4>
    296c:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    2970:	e3540001 	cmp	r4, #1
    2974:	e1a0a000 	mov	r10, r0
    2978:	0281b102 	addeq	r11, r1, #-2147483648	; 0x80000000
    297c:	1afffc8e 	bne	1bbc <__ieee754_pow+0x1b4>
    2980:	eafffc3a 	b	1a70 <__ieee754_pow+0x68>
    2984:	e28f3064 	add	r3, pc, #100	; 0x64
    2988:	e893000c 	ldm	r3, {r2, r3}
    298c:	e28d1010 	add	r1, sp, #16
    2990:	e8910003 	ldm	r1, {r0, r1}
    2994:	eb000886 	bl	4bb4 <__aeabi_dmul>
    2998:	e28f3050 	add	r3, pc, #80	; 0x50
    299c:	e893000c 	ldm	r3, {r2, r3}
    29a0:	eb000883 	bl	4bb4 <__aeabi_dmul>
    29a4:	e1a0a000 	mov	r10, r0
    29a8:	e1a0b001 	mov	r11, r1
    29ac:	eafffc2f 	b	1a70 <__ieee754_pow+0x68>
    29b0:	e3a02000 	mov	r2, #0
    29b4:	e58d2030 	str	r2, [sp, #48]	; 0x30
    29b8:	eafffc58 	b	1b20 <__ieee754_pow+0x118>
    29bc:	e59d2008 	ldr	r2, [sp, #8]
    29c0:	eb000706 	bl	45e0 <scalbn>
    29c4:	e1a02000 	mov	r2, r0
    29c8:	e1a03001 	mov	r3, r1
    29cc:	eaffff15 	b	2628 <__ieee754_pow+0xc20>
    29d0:	f85ddf44 	.word	0xf85ddf44
    29d4:	3e54ae0b 	.word	0x3e54ae0b
    29d8:	55555555 	.word	0x55555555
    29dc:	3fd55555 	.word	0x3fd55555
    29e0:	652b82fe 	.word	0x652b82fe
    29e4:	3ff71547 	.word	0x3ff71547
    29e8:	8800759c 	.word	0x8800759c
    29ec:	7e37e43c 	.word	0x7e37e43c
    29f0:	c2f8f359 	.word	0xc2f8f359
    29f4:	01a56e1f 	.word	0x01a56e1f
    29f8:	3fd00000 	.word	0x3fd00000
    29fc:	3fe00000 	.word	0x3fe00000
    2a00:	3ff00000 	.word	0x3ff00000
    2a04:	e1a00000 	nop			; (mov r0, r0)

00002a08 <__ieee754_rem_pio2>:
    2a08:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2a0c:	e59fc3bc 	ldr	r12, [pc, #956]	; 2dd0 <__ieee754_rem_pio2+0x3c8>
    2a10:	e3c17102 	bic	r7, r1, #-2147483648	; 0x80000000
    2a14:	e157000c 	cmp	r7, r12
    2a18:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    2a1c:	e1a04000 	mov	r4, r0
    2a20:	e1a05001 	mov	r5, r1
    2a24:	e1a0a000 	mov	r10, r0
    2a28:	e1a0b001 	mov	r11, r1
    2a2c:	e1a08002 	mov	r8, r2
    2a30:	da00005b 	ble	2ba4 <__ieee754_rem_pio2+0x19c>
    2a34:	e59f2398 	ldr	r2, [pc, #920]	; 2dd4 <__ieee754_rem_pio2+0x3cc>
    2a38:	e1570002 	cmp	r7, r2
    2a3c:	e1a09001 	mov	r9, r1
    2a40:	ca000019 	bgt	2aac <__ieee754_rem_pio2+0xa4>
    2a44:	e3510000 	cmp	r1, #0
    2a48:	e28f3fd6 	add	r3, pc, #856	; 0x358
    2a4c:	e893000c 	ldm	r3, {r2, r3}
    2a50:	da000149 	ble	2f7c <__ieee754_rem_pio2+0x574>
    2a54:	eb000751 	bl	47a0 <__aeabi_dsub>
    2a58:	e59f3378 	ldr	r3, [pc, #888]	; 2dd8 <__ieee754_rem_pio2+0x3d0>
    2a5c:	e1570003 	cmp	r7, r3
    2a60:	e1a0a000 	mov	r10, r0
    2a64:	e1a0b001 	mov	r11, r1
    2a68:	0a00005f 	beq	2bec <__ieee754_rem_pio2+0x1e4>
    2a6c:	e28f3fcf 	add	r3, pc, #828	; 0x33c
    2a70:	e893000c 	ldm	r3, {r2, r3}
    2a74:	eb000749 	bl	47a0 <__aeabi_dsub>
    2a78:	e1a02000 	mov	r2, r0
    2a7c:	e1a03001 	mov	r3, r1
    2a80:	e8880003 	stm	r8, {r0, r1}
    2a84:	e1a0000a 	mov	r0, r10
    2a88:	e1a0100b 	mov	r1, r11
    2a8c:	eb000743 	bl	47a0 <__aeabi_dsub>
    2a90:	e28f3fc6 	add	r3, pc, #792	; 0x318
    2a94:	e893000c 	ldm	r3, {r2, r3}
    2a98:	eb000740 	bl	47a0 <__aeabi_dsub>
    2a9c:	e3a06001 	mov	r6, #1
    2aa0:	e5880008 	str	r0, [r8, #8]
    2aa4:	e588100c 	str	r1, [r8, #12]
    2aa8:	ea000043 	b	2bbc <__ieee754_rem_pio2+0x1b4>
    2aac:	e59f3328 	ldr	r3, [pc, #808]	; 2ddc <__ieee754_rem_pio2+0x3d4>
    2ab0:	e1570003 	cmp	r7, r3
    2ab4:	da000075 	ble	2c90 <__ieee754_rem_pio2+0x288>
    2ab8:	e59f3320 	ldr	r3, [pc, #800]	; 2de0 <__ieee754_rem_pio2+0x3d8>
    2abc:	e1570003 	cmp	r7, r3
    2ac0:	ca000041 	bgt	2bcc <__ieee754_rem_pio2+0x1c4>
    2ac4:	e1a0aa47 	asr	r10, r7, #20
    2ac8:	e24aae41 	sub	r10, r10, #1040	; 0x410
    2acc:	e24aa006 	sub	r10, r10, #6
    2ad0:	e0475a0a 	sub	r5, r7, r10, lsl #20
    2ad4:	e1a01005 	mov	r1, r5
    2ad8:	e1a04000 	mov	r4, r0
    2adc:	eb0009ac 	bl	5194 <__aeabi_d2iz>
    2ae0:	eb0007fc 	bl	4ad8 <__aeabi_i2d>
    2ae4:	e1a06000 	mov	r6, r0
    2ae8:	e1a07001 	mov	r7, r1
    2aec:	e1a02000 	mov	r2, r0
    2af0:	e1a03001 	mov	r3, r1
    2af4:	e1a00004 	mov	r0, r4
    2af8:	e1a01005 	mov	r1, r5
    2afc:	e58d6020 	str	r6, [sp, #32]
    2b00:	e58d7024 	str	r7, [sp, #36]	; 0x24
    2b04:	eb000725 	bl	47a0 <__aeabi_dsub>
    2b08:	e3a02000 	mov	r2, #0
    2b0c:	e59f32d0 	ldr	r3, [pc, #720]	; 2de4 <__ieee754_rem_pio2+0x3dc>
    2b10:	eb000827 	bl	4bb4 <__aeabi_dmul>
    2b14:	e1a06000 	mov	r6, r0
    2b18:	e1a07001 	mov	r7, r1
    2b1c:	eb00099c 	bl	5194 <__aeabi_d2iz>
    2b20:	eb0007ec 	bl	4ad8 <__aeabi_i2d>
    2b24:	e1a02000 	mov	r2, r0
    2b28:	e1a03001 	mov	r3, r1
    2b2c:	e1a04000 	mov	r4, r0
    2b30:	e1a05001 	mov	r5, r1
    2b34:	e1a00006 	mov	r0, r6
    2b38:	e1a01007 	mov	r1, r7
    2b3c:	e58d4028 	str	r4, [sp, #40]	; 0x28
    2b40:	e58d502c 	str	r5, [sp, #44]	; 0x2c
    2b44:	eb000715 	bl	47a0 <__aeabi_dsub>
    2b48:	e3a02000 	mov	r2, #0
    2b4c:	e59f3290 	ldr	r3, [pc, #656]	; 2de4 <__ieee754_rem_pio2+0x3dc>
    2b50:	eb000817 	bl	4bb4 <__aeabi_dmul>
    2b54:	e3a02000 	mov	r2, #0
    2b58:	e3a03000 	mov	r3, #0
    2b5c:	e58d0030 	str	r0, [sp, #48]	; 0x30
    2b60:	e58d1034 	str	r1, [sp, #52]	; 0x34
    2b64:	eb00096c 	bl	511c <__aeabi_dcmpeq>
    2b68:	e3500000 	cmp	r0, #0
    2b6c:	03a06003 	moveq	r6, #3
    2b70:	0a000032 	beq	2c40 <__ieee754_rem_pio2+0x238>
    2b74:	e28d7028 	add	r7, sp, #40	; 0x28
    2b78:	e3a06003 	mov	r6, #3
    2b7c:	e1a00004 	mov	r0, r4
    2b80:	e1a01005 	mov	r1, r5
    2b84:	e3a02000 	mov	r2, #0
    2b88:	e3a03000 	mov	r3, #0
    2b8c:	eb000962 	bl	511c <__aeabi_dcmpeq>
    2b90:	e3500000 	cmp	r0, #0
    2b94:	e2466001 	sub	r6, r6, #1
    2b98:	0a000028 	beq	2c40 <__ieee754_rem_pio2+0x238>
    2b9c:	e9370003 	ldmdb	r7!, {r0, r1}
    2ba0:	eafffff7 	b	2b84 <__ieee754_rem_pio2+0x17c>
    2ba4:	e8820030 	stm	r2, {r4, r5}
    2ba8:	e3a03000 	mov	r3, #0
    2bac:	e3a02000 	mov	r2, #0
    2bb0:	e5882008 	str	r2, [r8, #8]
    2bb4:	e588300c 	str	r3, [r8, #12]
    2bb8:	e3a06000 	mov	r6, #0
    2bbc:	e1a00006 	mov	r0, r6
    2bc0:	e28dd03c 	add	sp, sp, #60	; 0x3c
    2bc4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2bc8:	e12fff1e 	bx	lr
    2bcc:	e1a02000 	mov	r2, r0
    2bd0:	e1a03001 	mov	r3, r1
    2bd4:	eb0006f1 	bl	47a0 <__aeabi_dsub>
    2bd8:	e3a06000 	mov	r6, #0
    2bdc:	e5880008 	str	r0, [r8, #8]
    2be0:	e588100c 	str	r1, [r8, #12]
    2be4:	e8880003 	stm	r8, {r0, r1}
    2be8:	eafffff3 	b	2bbc <__ieee754_rem_pio2+0x1b4>
    2bec:	e28f3f71 	add	r3, pc, #452	; 0x1c4
    2bf0:	e893000c 	ldm	r3, {r2, r3}
    2bf4:	eb0006e9 	bl	47a0 <__aeabi_dsub>
    2bf8:	e28f3d07 	add	r3, pc, #448	; 0x1c0
    2bfc:	e893000c 	ldm	r3, {r2, r3}
    2c00:	e1a06000 	mov	r6, r0
    2c04:	e1a07001 	mov	r7, r1
    2c08:	eb0006e4 	bl	47a0 <__aeabi_dsub>
    2c0c:	e1a02000 	mov	r2, r0
    2c10:	e1a03001 	mov	r3, r1
    2c14:	e8880003 	stm	r8, {r0, r1}
    2c18:	e1a00006 	mov	r0, r6
    2c1c:	e1a01007 	mov	r1, r7
    2c20:	eb0006de 	bl	47a0 <__aeabi_dsub>
    2c24:	e28f3f65 	add	r3, pc, #404	; 0x194
    2c28:	e893000c 	ldm	r3, {r2, r3}
    2c2c:	eb0006db 	bl	47a0 <__aeabi_dsub>
    2c30:	e3a06001 	mov	r6, #1
    2c34:	e5880008 	str	r0, [r8, #8]
    2c38:	e588100c 	str	r1, [r8, #12]
    2c3c:	eaffffde 	b	2bbc <__ieee754_rem_pio2+0x1b4>
    2c40:	e3a03002 	mov	r3, #2
    2c44:	e58d3000 	str	r3, [sp]
    2c48:	e59f3198 	ldr	r3, [pc, #408]	; 2de8 <__ieee754_rem_pio2+0x3e0>
    2c4c:	e28d0020 	add	r0, sp, #32
    2c50:	e58d3004 	str	r3, [sp, #4]
    2c54:	e1a01008 	mov	r1, r8
    2c58:	e1a03006 	mov	r3, r6
    2c5c:	e1a0200a 	mov	r2, r10
    2c60:	eb000260 	bl	35e8 <__kernel_rem_pio2>
    2c64:	e3590000 	cmp	r9, #0
    2c68:	e1a06000 	mov	r6, r0
    2c6c:	aaffffd2 	bge	2bbc <__ieee754_rem_pio2+0x1b4>
    2c70:	e5982004 	ldr	r2, [r8, #4]
    2c74:	e598300c 	ldr	r3, [r8, #12]
    2c78:	e2822102 	add	r2, r2, #-2147483648	; 0x80000000
    2c7c:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
    2c80:	e5882004 	str	r2, [r8, #4]
    2c84:	e588300c 	str	r3, [r8, #12]
    2c88:	e2606000 	rsb	r6, r0, #0
    2c8c:	eaffffca 	b	2bbc <__ieee754_rem_pio2+0x1b4>
    2c90:	eb0005c2 	bl	43a0 <fabs>
    2c94:	e28f3f4b 	add	r3, pc, #300	; 0x12c
    2c98:	e893000c 	ldm	r3, {r2, r3}
    2c9c:	e1a04000 	mov	r4, r0
    2ca0:	e1a05001 	mov	r5, r1
    2ca4:	eb0007c2 	bl	4bb4 <__aeabi_dmul>
    2ca8:	e3a02000 	mov	r2, #0
    2cac:	e59f3138 	ldr	r3, [pc, #312]	; 2dec <__ieee754_rem_pio2+0x3e4>
    2cb0:	eb0006bb 	bl	47a4 <__adddf3>
    2cb4:	eb000936 	bl	5194 <__aeabi_d2iz>
    2cb8:	e1a06000 	mov	r6, r0
    2cbc:	eb000785 	bl	4ad8 <__aeabi_i2d>
    2cc0:	e28f30e0 	add	r3, pc, #224	; 0xe0
    2cc4:	e893000c 	ldm	r3, {r2, r3}
    2cc8:	e58d0010 	str	r0, [sp, #16]
    2ccc:	e58d1014 	str	r1, [sp, #20]
    2cd0:	eb0007b7 	bl	4bb4 <__aeabi_dmul>
    2cd4:	e1a02000 	mov	r2, r0
    2cd8:	e1a03001 	mov	r3, r1
    2cdc:	e1a00004 	mov	r0, r4
    2ce0:	e1a01005 	mov	r1, r5
    2ce4:	eb0006ad 	bl	47a0 <__aeabi_dsub>
    2ce8:	e28f30c0 	add	r3, pc, #192	; 0xc0
    2cec:	e893000c 	ldm	r3, {r2, r3}
    2cf0:	e1a0a000 	mov	r10, r0
    2cf4:	e1a0b001 	mov	r11, r1
    2cf8:	e28d1010 	add	r1, sp, #16
    2cfc:	e8910003 	ldm	r1, {r0, r1}
    2d00:	eb0007ab 	bl	4bb4 <__aeabi_dmul>
    2d04:	e356001f 	cmp	r6, #31
    2d08:	e58d0008 	str	r0, [sp, #8]
    2d0c:	e58d100c 	str	r1, [sp, #12]
    2d10:	e1a0000a 	mov	r0, r10
    2d14:	e1a0100b 	mov	r1, r11
    2d18:	ca000035 	bgt	2df4 <__ieee754_rem_pio2+0x3ec>
    2d1c:	e59f30cc 	ldr	r3, [pc, #204]	; 2df0 <__ieee754_rem_pio2+0x3e8>
    2d20:	e2462001 	sub	r2, r6, #1
    2d24:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    2d28:	e1530007 	cmp	r3, r7
    2d2c:	0a000030 	beq	2df4 <__ieee754_rem_pio2+0x3ec>
    2d30:	e28d3008 	add	r3, sp, #8
    2d34:	e893000c 	ldm	r3, {r2, r3}
    2d38:	eb000698 	bl	47a0 <__aeabi_dsub>
    2d3c:	e1a02000 	mov	r2, r0
    2d40:	e1a03001 	mov	r3, r1
    2d44:	e888000c 	stm	r8, {r2, r3}
    2d48:	e1a05000 	mov	r5, r0
    2d4c:	e1a04001 	mov	r4, r1
    2d50:	e1a02005 	mov	r2, r5
    2d54:	e1a03004 	mov	r3, r4
    2d58:	e1a0000a 	mov	r0, r10
    2d5c:	e1a0100b 	mov	r1, r11
    2d60:	eb00068e 	bl	47a0 <__aeabi_dsub>
    2d64:	e28d3008 	add	r3, sp, #8
    2d68:	e893000c 	ldm	r3, {r2, r3}
    2d6c:	eb00068b 	bl	47a0 <__aeabi_dsub>
    2d70:	e3590000 	cmp	r9, #0
    2d74:	e1a02000 	mov	r2, r0
    2d78:	e1a03001 	mov	r3, r1
    2d7c:	e5882008 	str	r2, [r8, #8]
    2d80:	e588300c 	str	r3, [r8, #12]
    2d84:	aaffff8c 	bge	2bbc <__ieee754_rem_pio2+0x1b4>
    2d88:	e2844102 	add	r4, r4, #-2147483648	; 0x80000000
    2d8c:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    2d90:	e5885000 	str	r5, [r8]
    2d94:	e5884004 	str	r4, [r8, #4]
    2d98:	e5880008 	str	r0, [r8, #8]
    2d9c:	e588100c 	str	r1, [r8, #12]
    2da0:	e2666000 	rsb	r6, r6, #0
    2da4:	eaffff84 	b	2bbc <__ieee754_rem_pio2+0x1b4>
    2da8:	54400000 	.word	0x54400000
    2dac:	3ff921fb 	.word	0x3ff921fb
    2db0:	1a626331 	.word	0x1a626331
    2db4:	3dd0b461 	.word	0x3dd0b461
    2db8:	1a600000 	.word	0x1a600000
    2dbc:	3dd0b461 	.word	0x3dd0b461
    2dc0:	2e037073 	.word	0x2e037073
    2dc4:	3ba3198a 	.word	0x3ba3198a
    2dc8:	6dc9c883 	.word	0x6dc9c883
    2dcc:	3fe45f30 	.word	0x3fe45f30
    2dd0:	3fe921fb 	.word	0x3fe921fb
    2dd4:	4002d97b 	.word	0x4002d97b
    2dd8:	3ff921fb 	.word	0x3ff921fb
    2ddc:	413921fb 	.word	0x413921fb
    2de0:	7fefffff 	.word	0x7fefffff
    2de4:	41700000 	.word	0x41700000
    2de8:	00006704 	.word	0x00006704
    2dec:	3fe00000 	.word	0x3fe00000
    2df0:	00006684 	.word	0x00006684
    2df4:	e28d3008 	add	r3, sp, #8
    2df8:	e893000c 	ldm	r3, {r2, r3}
    2dfc:	eb000667 	bl	47a0 <__aeabi_dsub>
    2e00:	e1a07a47 	asr	r7, r7, #20
    2e04:	e1a04001 	mov	r4, r1
    2e08:	e1a01081 	lsl	r1, r1, #1
    2e0c:	e1a05000 	mov	r5, r0
    2e10:	e0471aa1 	sub	r1, r7, r1, lsr #21
    2e14:	e1a02005 	mov	r2, r5
    2e18:	e1a03004 	mov	r3, r4
    2e1c:	e3510010 	cmp	r1, #16
    2e20:	e888000c 	stm	r8, {r2, r3}
    2e24:	daffffc9 	ble	2d50 <__ieee754_rem_pio2+0x348>
    2e28:	e28f3f82 	add	r3, pc, #520	; 0x208
    2e2c:	e893000c 	ldm	r3, {r2, r3}
    2e30:	e28d1010 	add	r1, sp, #16
    2e34:	e8910003 	ldm	r1, {r0, r1}
    2e38:	eb00075d 	bl	4bb4 <__aeabi_dmul>
    2e3c:	e1a04000 	mov	r4, r0
    2e40:	e1a05001 	mov	r5, r1
    2e44:	e1a02004 	mov	r2, r4
    2e48:	e1a03005 	mov	r3, r5
    2e4c:	e1a0000a 	mov	r0, r10
    2e50:	e1a0100b 	mov	r1, r11
    2e54:	eb000651 	bl	47a0 <__aeabi_dsub>
    2e58:	e58d0018 	str	r0, [sp, #24]
    2e5c:	e58d101c 	str	r1, [sp, #28]
    2e60:	e28d3018 	add	r3, sp, #24
    2e64:	e893000c 	ldm	r3, {r2, r3}
    2e68:	e1a0000a 	mov	r0, r10
    2e6c:	e1a0100b 	mov	r1, r11
    2e70:	eb00064a 	bl	47a0 <__aeabi_dsub>
    2e74:	e1a02004 	mov	r2, r4
    2e78:	e1a03005 	mov	r3, r5
    2e7c:	eb000647 	bl	47a0 <__aeabi_dsub>
    2e80:	e28f3f6e 	add	r3, pc, #440	; 0x1b8
    2e84:	e893000c 	ldm	r3, {r2, r3}
    2e88:	e1a04000 	mov	r4, r0
    2e8c:	e1a05001 	mov	r5, r1
    2e90:	e28d1010 	add	r1, sp, #16
    2e94:	e8910003 	ldm	r1, {r0, r1}
    2e98:	eb000745 	bl	4bb4 <__aeabi_dmul>
    2e9c:	e1a02004 	mov	r2, r4
    2ea0:	e1a03005 	mov	r3, r5
    2ea4:	eb00063d 	bl	47a0 <__aeabi_dsub>
    2ea8:	e58d0008 	str	r0, [sp, #8]
    2eac:	e58d100c 	str	r1, [sp, #12]
    2eb0:	e28d3008 	add	r3, sp, #8
    2eb4:	e893000c 	ldm	r3, {r2, r3}
    2eb8:	e28d1018 	add	r1, sp, #24
    2ebc:	e8910003 	ldm	r1, {r0, r1}
    2ec0:	eb000636 	bl	47a0 <__aeabi_dsub>
    2ec4:	e1a04001 	mov	r4, r1
    2ec8:	e1a01081 	lsl	r1, r1, #1
    2ecc:	e1a05000 	mov	r5, r0
    2ed0:	e0477aa1 	sub	r7, r7, r1, lsr #21
    2ed4:	e1a02005 	mov	r2, r5
    2ed8:	e1a03004 	mov	r3, r4
    2edc:	e3570031 	cmp	r7, #49	; 0x31
    2ee0:	e888000c 	stm	r8, {r2, r3}
    2ee4:	da00004f 	ble	3028 <__ieee754_rem_pio2+0x620>
    2ee8:	e3a0242e 	mov	r2, #771751936	; 0x2e000000
    2eec:	e59f3164 	ldr	r3, [pc, #356]	; 3058 <__ieee754_rem_pio2+0x650>
    2ef0:	e28d1010 	add	r1, sp, #16
    2ef4:	e8910003 	ldm	r1, {r0, r1}
    2ef8:	eb00072d 	bl	4bb4 <__aeabi_dmul>
    2efc:	e1a04000 	mov	r4, r0
    2f00:	e1a05001 	mov	r5, r1
    2f04:	e1a02004 	mov	r2, r4
    2f08:	e1a03005 	mov	r3, r5
    2f0c:	e28d1018 	add	r1, sp, #24
    2f10:	e8910003 	ldm	r1, {r0, r1}
    2f14:	eb000621 	bl	47a0 <__aeabi_dsub>
    2f18:	e1a0a000 	mov	r10, r0
    2f1c:	e1a0b001 	mov	r11, r1
    2f20:	e1a0200a 	mov	r2, r10
    2f24:	e1a0300b 	mov	r3, r11
    2f28:	e28d1018 	add	r1, sp, #24
    2f2c:	e8910003 	ldm	r1, {r0, r1}
    2f30:	eb00061a 	bl	47a0 <__aeabi_dsub>
    2f34:	e1a02004 	mov	r2, r4
    2f38:	e1a03005 	mov	r3, r5
    2f3c:	eb000617 	bl	47a0 <__aeabi_dsub>
    2f40:	e28f3c01 	add	r3, pc, #256	; 0x100
    2f44:	e893000c 	ldm	r3, {r2, r3}
    2f48:	e1a04000 	mov	r4, r0
    2f4c:	e1a05001 	mov	r5, r1
    2f50:	e28d1010 	add	r1, sp, #16
    2f54:	e8910003 	ldm	r1, {r0, r1}
    2f58:	eb000715 	bl	4bb4 <__aeabi_dmul>
    2f5c:	e1a02004 	mov	r2, r4
    2f60:	e1a03005 	mov	r3, r5
    2f64:	eb00060d 	bl	47a0 <__aeabi_dsub>
    2f68:	e58d0008 	str	r0, [sp, #8]
    2f6c:	e58d100c 	str	r1, [sp, #12]
    2f70:	e1a0000a 	mov	r0, r10
    2f74:	e1a0100b 	mov	r1, r11
    2f78:	eaffff6c 	b	2d30 <__ieee754_rem_pio2+0x328>
    2f7c:	eb000608 	bl	47a4 <__adddf3>
    2f80:	e59f30d4 	ldr	r3, [pc, #212]	; 305c <__ieee754_rem_pio2+0x654>
    2f84:	e1570003 	cmp	r7, r3
    2f88:	e1a0a000 	mov	r10, r0
    2f8c:	e1a0b001 	mov	r11, r1
    2f90:	0a00000f 	beq	2fd4 <__ieee754_rem_pio2+0x5cc>
    2f94:	e28f30b4 	add	r3, pc, #180	; 0xb4
    2f98:	e893000c 	ldm	r3, {r2, r3}
    2f9c:	eb000600 	bl	47a4 <__adddf3>
    2fa0:	e1a02000 	mov	r2, r0
    2fa4:	e1a03001 	mov	r3, r1
    2fa8:	e8880003 	stm	r8, {r0, r1}
    2fac:	e1a0000a 	mov	r0, r10
    2fb0:	e1a0100b 	mov	r1, r11
    2fb4:	eb0005f9 	bl	47a0 <__aeabi_dsub>
    2fb8:	e28f3090 	add	r3, pc, #144	; 0x90
    2fbc:	e893000c 	ldm	r3, {r2, r3}
    2fc0:	eb0005f7 	bl	47a4 <__adddf3>
    2fc4:	e3e06000 	mvn	r6, #0
    2fc8:	e5880008 	str	r0, [r8, #8]
    2fcc:	e588100c 	str	r1, [r8, #12]
    2fd0:	eafffef9 	b	2bbc <__ieee754_rem_pio2+0x1b4>
    2fd4:	e28f305c 	add	r3, pc, #92	; 0x5c
    2fd8:	e893000c 	ldm	r3, {r2, r3}
    2fdc:	eb0005f0 	bl	47a4 <__adddf3>
    2fe0:	e28f3058 	add	r3, pc, #88	; 0x58
    2fe4:	e893000c 	ldm	r3, {r2, r3}
    2fe8:	e1a06000 	mov	r6, r0
    2fec:	e1a07001 	mov	r7, r1
    2ff0:	eb0005eb 	bl	47a4 <__adddf3>
    2ff4:	e1a02000 	mov	r2, r0
    2ff8:	e1a03001 	mov	r3, r1
    2ffc:	e8880003 	stm	r8, {r0, r1}
    3000:	e1a00006 	mov	r0, r6
    3004:	e1a01007 	mov	r1, r7
    3008:	eb0005e4 	bl	47a0 <__aeabi_dsub>
    300c:	e28f302c 	add	r3, pc, #44	; 0x2c
    3010:	e893000c 	ldm	r3, {r2, r3}
    3014:	eb0005e2 	bl	47a4 <__adddf3>
    3018:	e3e06000 	mvn	r6, #0
    301c:	e5880008 	str	r0, [r8, #8]
    3020:	e588100c 	str	r1, [r8, #12]
    3024:	eafffee4 	b	2bbc <__ieee754_rem_pio2+0x1b4>
    3028:	e28db018 	add	r11, sp, #24
    302c:	e89b0c00 	ldm	r11, {r10, r11}
    3030:	eaffff46 	b	2d50 <__ieee754_rem_pio2+0x348>
    3034:	e1a00000 	nop			; (mov r0, r0)
    3038:	1a600000 	.word	0x1a600000
    303c:	3dd0b461 	.word	0x3dd0b461
    3040:	2e037073 	.word	0x2e037073
    3044:	3ba3198a 	.word	0x3ba3198a
    3048:	252049c1 	.word	0x252049c1
    304c:	397b839a 	.word	0x397b839a
    3050:	1a626331 	.word	0x1a626331
    3054:	3dd0b461 	.word	0x3dd0b461
    3058:	3ba3198a 	.word	0x3ba3198a
    305c:	3ff921fb 	.word	0x3ff921fb

00003060 <__ieee754_sqrt>:
    3060:	e59fc230 	ldr	r12, [pc, #560]	; 3298 <__ieee754_sqrt+0x238>
    3064:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    3068:	e59f7228 	ldr	r7, [pc, #552]	; 3298 <__ieee754_sqrt+0x238>
    306c:	e001c00c 	and	r12, r1, r12
    3070:	e15c0007 	cmp	r12, r7
    3074:	e1a04000 	mov	r4, r0
    3078:	e1a05001 	mov	r5, r1
    307c:	e1a02000 	mov	r2, r0
    3080:	e1a03001 	mov	r3, r1
    3084:	e1a06001 	mov	r6, r1
    3088:	e1a0c001 	mov	r12, r1
    308c:	e1a08000 	mov	r8, r0
    3090:	0a00006a 	beq	3240 <__ieee754_sqrt+0x1e0>
    3094:	e3510000 	cmp	r1, #0
    3098:	da000051 	ble	31e4 <__ieee754_sqrt+0x184>
    309c:	e1b02a41 	asrs	r2, r1, #20
    30a0:	0a00005a 	beq	3210 <__ieee754_sqrt+0x1b0>
    30a4:	e3cc34ff 	bic	r3, r12, #-16777216	; 0xff000000
    30a8:	e3120001 	tst	r2, #1
    30ac:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
    30b0:	e2426fff 	sub	r6, r2, #1020	; 0x3fc
    30b4:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    30b8:	01a02fa8 	lsreq	r2, r8, #31
    30bc:	01a08088 	lsleq	r8, r8, #1
    30c0:	00823083 	addeq	r3, r2, r3, lsl #1
    30c4:	e2466003 	sub	r6, r6, #3
    30c8:	e1a02fa8 	lsr	r2, r8, #31
    30cc:	e3a07000 	mov	r7, #0
    30d0:	e0823083 	add	r3, r2, r3, lsl #1
    30d4:	e1a060c6 	asr	r6, r6, #1
    30d8:	e1a02088 	lsl	r2, r8, #1
    30dc:	e3a0c016 	mov	r12, #22
    30e0:	e1a00007 	mov	r0, r7
    30e4:	e3a01602 	mov	r1, #2097152	; 0x200000
    30e8:	e0804001 	add	r4, r0, r1
    30ec:	e1540003 	cmp	r4, r3
    30f0:	e1a05fa2 	lsr	r5, r2, #31
    30f4:	d0840001 	addle	r0, r4, r1
    30f8:	d0643003 	rsble	r3, r4, r3
    30fc:	d0877001 	addle	r7, r7, r1
    3100:	e25cc001 	subs	r12, r12, #1
    3104:	e0853083 	add	r3, r5, r3, lsl #1
    3108:	e1a02082 	lsl	r2, r2, #1
    310c:	e1a010a1 	lsr	r1, r1, #1
    3110:	1afffff4 	bne	30e8 <__ieee754_sqrt+0x88>
    3114:	e3a05020 	mov	r5, #32
    3118:	e1a0800c 	mov	r8, r12
    311c:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    3120:	ea00000c 	b	3158 <__ieee754_sqrt+0xf8>
    3124:	e1a0a000 	mov	r10, r0
    3128:	e1540002 	cmp	r4, r2
    312c:	e0603003 	rsb	r3, r0, r3
    3130:	82433001 	subhi	r3, r3, #1
    3134:	e0642002 	rsb	r2, r4, r2
    3138:	e08cc001 	add	r12, r12, r1
    313c:	e1a0000a 	mov	r0, r10
    3140:	e1a04fa2 	lsr	r4, r2, #31
    3144:	e2555001 	subs	r5, r5, #1
    3148:	e0843083 	add	r3, r4, r3, lsl #1
    314c:	e1a02082 	lsl	r2, r2, #1
    3150:	e1a010a1 	lsr	r1, r1, #1
    3154:	0a00000d 	beq	3190 <__ieee754_sqrt+0x130>
    3158:	e1500003 	cmp	r0, r3
    315c:	e0814008 	add	r4, r1, r8
    3160:	ba000002 	blt	3170 <__ieee754_sqrt+0x110>
    3164:	e1540002 	cmp	r4, r2
    3168:	91530000 	cmpls	r3, r0
    316c:	1afffff3 	bne	3140 <__ieee754_sqrt+0xe0>
    3170:	e2048102 	and	r8, r4, #-2147483648	; 0x80000000
    3174:	e3580102 	cmp	r8, #-2147483648	; 0x80000000
    3178:	e0848001 	add	r8, r4, r1
    317c:	1affffe8 	bne	3124 <__ieee754_sqrt+0xc4>
    3180:	e3580000 	cmp	r8, #0
    3184:	a280a001 	addge	r10, r0, #1
    3188:	aaffffe6 	bge	3128 <__ieee754_sqrt+0xc8>
    318c:	eaffffe4 	b	3124 <__ieee754_sqrt+0xc4>
    3190:	e1923003 	orrs	r3, r2, r3
    3194:	1a00000b 	bne	31c8 <__ieee754_sqrt+0x168>
    3198:	e1a0c0ac 	lsr	r12, r12, #1
    319c:	e1a030c7 	asr	r3, r7, #1
    31a0:	e28335ff 	add	r3, r3, #1069547520	; 0x3fc00000
    31a4:	e3170001 	tst	r7, #1
    31a8:	e2833602 	add	r3, r3, #2097152	; 0x200000
    31ac:	138cc102 	orrne	r12, r12, #-2147483648	; 0x80000000
    31b0:	e0835a06 	add	r5, r3, r6, lsl #20
    31b4:	e1a0400c 	mov	r4, r12
    31b8:	e1a00004 	mov	r0, r4
    31bc:	e1a01005 	mov	r1, r5
    31c0:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    31c4:	e12fff1e 	bx	lr
    31c8:	e37c0001 	cmn	r12, #1
    31cc:	02877001 	addeq	r7, r7, #1
    31d0:	01a0c005 	moveq	r12, r5
    31d4:	0afffff0 	beq	319c <__ieee754_sqrt+0x13c>
    31d8:	e20c3001 	and	r3, r12, #1
    31dc:	e083c00c 	add	r12, r3, r12
    31e0:	eaffffec 	b	3198 <__ieee754_sqrt+0x138>
    31e4:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    31e8:	e19cc000 	orrs	r12, r12, r0
    31ec:	0afffff1 	beq	31b8 <__ieee754_sqrt+0x158>
    31f0:	e3510000 	cmp	r1, #0
    31f4:	01a02001 	moveq	r2, r1
    31f8:	1a00001d 	bne	3274 <__ieee754_sqrt+0x214>
    31fc:	e1a0c5a8 	lsr	r12, r8, #11
    3200:	e35c0000 	cmp	r12, #0
    3204:	e2422015 	sub	r2, r2, #21
    3208:	e1a08a88 	lsl	r8, r8, #21
    320c:	0afffffa 	beq	31fc <__ieee754_sqrt+0x19c>
    3210:	e21c3601 	ands	r3, r12, #1048576	; 0x100000
    3214:	1a000012 	bne	3264 <__ieee754_sqrt+0x204>
    3218:	e1a0c08c 	lsl	r12, r12, #1
    321c:	e31c0601 	tst	r12, #1048576	; 0x100000
    3220:	e2833001 	add	r3, r3, #1
    3224:	0afffffb 	beq	3218 <__ieee754_sqrt+0x1b8>
    3228:	e2631001 	rsb	r1, r3, #1
    322c:	e2630020 	rsb	r0, r3, #32
    3230:	e18cc038 	orr	r12, r12, r8, lsr r0
    3234:	e0822001 	add	r2, r2, r1
    3238:	e1a08318 	lsl	r8, r8, r3
    323c:	eaffff98 	b	30a4 <__ieee754_sqrt+0x44>
    3240:	eb00065b 	bl	4bb4 <__aeabi_dmul>
    3244:	e1a02000 	mov	r2, r0
    3248:	e1a03001 	mov	r3, r1
    324c:	e1a00004 	mov	r0, r4
    3250:	e1a01005 	mov	r1, r5
    3254:	eb000552 	bl	47a4 <__adddf3>
    3258:	e1a04000 	mov	r4, r0
    325c:	e1a05001 	mov	r5, r1
    3260:	eaffffd4 	b	31b8 <__ieee754_sqrt+0x158>
    3264:	e3a00020 	mov	r0, #32
    3268:	e3a01001 	mov	r1, #1
    326c:	e3a03000 	mov	r3, #0
    3270:	eaffffee 	b	3230 <__ieee754_sqrt+0x1d0>
    3274:	e1a02000 	mov	r2, r0
    3278:	e1a03001 	mov	r3, r1
    327c:	eb000547 	bl	47a0 <__aeabi_dsub>
    3280:	e1a02000 	mov	r2, r0
    3284:	e1a03001 	mov	r3, r1
    3288:	eb0006ed 	bl	4e44 <__aeabi_ddiv>
    328c:	e1a04000 	mov	r4, r0
    3290:	e1a05001 	mov	r5, r1
    3294:	eaffffc7 	b	31b8 <__ieee754_sqrt+0x158>
    3298:	7ff00000 	.word	0x7ff00000
    329c:	00000000 	.word	0x00000000

000032a0 <__kernel_cos>:
    32a0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    32a4:	e3c19102 	bic	r9, r1, #-2147483648	; 0x80000000
    32a8:	e35905f9 	cmp	r9, #1044381696	; 0x3e400000
    32ac:	e24dd014 	sub	sp, sp, #20
    32b0:	e1a06000 	mov	r6, r0
    32b4:	e1a07001 	mov	r7, r1
    32b8:	e1a04000 	mov	r4, r0
    32bc:	e1a05001 	mov	r5, r1
    32c0:	e1a0a002 	mov	r10, r2
    32c4:	e1a0b003 	mov	r11, r3
    32c8:	aa00004d 	bge	3404 <__kernel_cos+0x164>
    32cc:	eb0007b0 	bl	5194 <__aeabi_d2iz>
    32d0:	e3500000 	cmp	r0, #0
    32d4:	0a0000ae 	beq	3594 <__kernel_cos+0x2f4>
    32d8:	e1a02006 	mov	r2, r6
    32dc:	e1a03007 	mov	r3, r7
    32e0:	e1a00006 	mov	r0, r6
    32e4:	e1a01007 	mov	r1, r7
    32e8:	eb000631 	bl	4bb4 <__aeabi_dmul>
    32ec:	e28f3fab 	add	r3, pc, #684	; 0x2ac
    32f0:	e893000c 	ldm	r3, {r2, r3}
    32f4:	e1a04000 	mov	r4, r0
    32f8:	e1a05001 	mov	r5, r1
    32fc:	eb00062c 	bl	4bb4 <__aeabi_dmul>
    3300:	e28f3e2a 	add	r3, pc, #672	; 0x2a0
    3304:	e893000c 	ldm	r3, {r2, r3}
    3308:	eb000525 	bl	47a4 <__adddf3>
    330c:	e1a02004 	mov	r2, r4
    3310:	e1a03005 	mov	r3, r5
    3314:	eb000626 	bl	4bb4 <__aeabi_dmul>
    3318:	e28f3e29 	add	r3, pc, #656	; 0x290
    331c:	e893000c 	ldm	r3, {r2, r3}
    3320:	eb00051e 	bl	47a0 <__aeabi_dsub>
    3324:	e1a02004 	mov	r2, r4
    3328:	e1a03005 	mov	r3, r5
    332c:	eb000620 	bl	4bb4 <__aeabi_dmul>
    3330:	e28f3d0a 	add	r3, pc, #640	; 0x280
    3334:	e893000c 	ldm	r3, {r2, r3}
    3338:	eb000519 	bl	47a4 <__adddf3>
    333c:	e1a02004 	mov	r2, r4
    3340:	e1a03005 	mov	r3, r5
    3344:	eb00061a 	bl	4bb4 <__aeabi_dmul>
    3348:	e28f3e27 	add	r3, pc, #624	; 0x270
    334c:	e893000c 	ldm	r3, {r2, r3}
    3350:	eb000512 	bl	47a0 <__aeabi_dsub>
    3354:	e1a02004 	mov	r2, r4
    3358:	e1a03005 	mov	r3, r5
    335c:	eb000614 	bl	4bb4 <__aeabi_dmul>
    3360:	e28f3e26 	add	r3, pc, #608	; 0x260
    3364:	e893000c 	ldm	r3, {r2, r3}
    3368:	eb00050d 	bl	47a4 <__adddf3>
    336c:	e1a02004 	mov	r2, r4
    3370:	e1a03005 	mov	r3, r5
    3374:	eb00060e 	bl	4bb4 <__aeabi_dmul>
    3378:	e88d0003 	stm	sp, {r0, r1}
    337c:	e1a00004 	mov	r0, r4
    3380:	e1a01005 	mov	r1, r5
    3384:	e3a02000 	mov	r2, #0
    3388:	e59f3240 	ldr	r3, [pc, #576]	; 35d0 <__kernel_cos+0x330>
    338c:	eb000608 	bl	4bb4 <__aeabi_dmul>
    3390:	e89d000c 	ldm	sp, {r2, r3}
    3394:	e1a08000 	mov	r8, r0
    3398:	e1a09001 	mov	r9, r1
    339c:	e1a00004 	mov	r0, r4
    33a0:	e1a01005 	mov	r1, r5
    33a4:	eb000602 	bl	4bb4 <__aeabi_dmul>
    33a8:	e1a0200a 	mov	r2, r10
    33ac:	e1a04000 	mov	r4, r0
    33b0:	e1a05001 	mov	r5, r1
    33b4:	e1a0300b 	mov	r3, r11
    33b8:	e1a00006 	mov	r0, r6
    33bc:	e1a01007 	mov	r1, r7
    33c0:	eb0005fb 	bl	4bb4 <__aeabi_dmul>
    33c4:	e1a02000 	mov	r2, r0
    33c8:	e1a03001 	mov	r3, r1
    33cc:	e1a00004 	mov	r0, r4
    33d0:	e1a01005 	mov	r1, r5
    33d4:	eb0004f1 	bl	47a0 <__aeabi_dsub>
    33d8:	e1a02000 	mov	r2, r0
    33dc:	e1a03001 	mov	r3, r1
    33e0:	e1a00008 	mov	r0, r8
    33e4:	e1a01009 	mov	r1, r9
    33e8:	eb0004ec 	bl	47a0 <__aeabi_dsub>
    33ec:	e1a02000 	mov	r2, r0
    33f0:	e1a03001 	mov	r3, r1
    33f4:	e3a00000 	mov	r0, #0
    33f8:	e59f11d4 	ldr	r1, [pc, #468]	; 35d4 <__kernel_cos+0x334>
    33fc:	eb0004e7 	bl	47a0 <__aeabi_dsub>
    3400:	ea00005a 	b	3570 <__kernel_cos+0x2d0>
    3404:	e1a02000 	mov	r2, r0
    3408:	e1a03001 	mov	r3, r1
    340c:	eb0005e8 	bl	4bb4 <__aeabi_dmul>
    3410:	e28f3f62 	add	r3, pc, #392	; 0x188
    3414:	e893000c 	ldm	r3, {r2, r3}
    3418:	e1a04000 	mov	r4, r0
    341c:	e1a05001 	mov	r5, r1
    3420:	eb0005e3 	bl	4bb4 <__aeabi_dmul>
    3424:	e28f3f5f 	add	r3, pc, #380	; 0x17c
    3428:	e893000c 	ldm	r3, {r2, r3}
    342c:	eb0004dc 	bl	47a4 <__adddf3>
    3430:	e1a02004 	mov	r2, r4
    3434:	e1a03005 	mov	r3, r5
    3438:	eb0005dd 	bl	4bb4 <__aeabi_dmul>
    343c:	e28f3f5b 	add	r3, pc, #364	; 0x16c
    3440:	e893000c 	ldm	r3, {r2, r3}
    3444:	eb0004d5 	bl	47a0 <__aeabi_dsub>
    3448:	e1a02004 	mov	r2, r4
    344c:	e1a03005 	mov	r3, r5
    3450:	eb0005d7 	bl	4bb4 <__aeabi_dmul>
    3454:	e28f3f57 	add	r3, pc, #348	; 0x15c
    3458:	e893000c 	ldm	r3, {r2, r3}
    345c:	eb0004d0 	bl	47a4 <__adddf3>
    3460:	e1a02004 	mov	r2, r4
    3464:	e1a03005 	mov	r3, r5
    3468:	eb0005d1 	bl	4bb4 <__aeabi_dmul>
    346c:	e28f3f53 	add	r3, pc, #332	; 0x14c
    3470:	e893000c 	ldm	r3, {r2, r3}
    3474:	eb0004c9 	bl	47a0 <__aeabi_dsub>
    3478:	e1a02004 	mov	r2, r4
    347c:	e1a03005 	mov	r3, r5
    3480:	eb0005cb 	bl	4bb4 <__aeabi_dmul>
    3484:	e28f3f4f 	add	r3, pc, #316	; 0x13c
    3488:	e893000c 	ldm	r3, {r2, r3}
    348c:	eb0004c4 	bl	47a4 <__adddf3>
    3490:	e1a03005 	mov	r3, r5
    3494:	e1a02004 	mov	r2, r4
    3498:	eb0005c5 	bl	4bb4 <__aeabi_dmul>
    349c:	e59f3134 	ldr	r3, [pc, #308]	; 35d8 <__kernel_cos+0x338>
    34a0:	e1590003 	cmp	r9, r3
    34a4:	e88d0003 	stm	sp, {r0, r1}
    34a8:	daffffb3 	ble	337c <__kernel_cos+0xdc>
    34ac:	e59f3128 	ldr	r3, [pc, #296]	; 35dc <__kernel_cos+0x33c>
    34b0:	e1590003 	cmp	r9, r3
    34b4:	e3a02000 	mov	r2, #0
    34b8:	ca00002f 	bgt	357c <__kernel_cos+0x2dc>
    34bc:	e2493602 	sub	r3, r9, #2097152	; 0x200000
    34c0:	e3a02000 	mov	r2, #0
    34c4:	e3a00000 	mov	r0, #0
    34c8:	e59f1104 	ldr	r1, [pc, #260]	; 35d4 <__kernel_cos+0x334>
    34cc:	e1a08002 	mov	r8, r2
    34d0:	e1a09003 	mov	r9, r3
    34d4:	eb0004b1 	bl	47a0 <__aeabi_dsub>
    34d8:	e58d0008 	str	r0, [sp, #8]
    34dc:	e58d100c 	str	r1, [sp, #12]
    34e0:	e1a00004 	mov	r0, r4
    34e4:	e1a01005 	mov	r1, r5
    34e8:	e3a02000 	mov	r2, #0
    34ec:	e59f30dc 	ldr	r3, [pc, #220]	; 35d0 <__kernel_cos+0x330>
    34f0:	eb0005af 	bl	4bb4 <__aeabi_dmul>
    34f4:	e1a02008 	mov	r2, r8
    34f8:	e1a03009 	mov	r3, r9
    34fc:	eb0004a7 	bl	47a0 <__aeabi_dsub>
    3500:	e89d000c 	ldm	sp, {r2, r3}
    3504:	e1a08000 	mov	r8, r0
    3508:	e1a09001 	mov	r9, r1
    350c:	e1a00004 	mov	r0, r4
    3510:	e1a01005 	mov	r1, r5
    3514:	eb0005a6 	bl	4bb4 <__aeabi_dmul>
    3518:	e1a0200a 	mov	r2, r10
    351c:	e1a04000 	mov	r4, r0
    3520:	e1a05001 	mov	r5, r1
    3524:	e1a0300b 	mov	r3, r11
    3528:	e1a00006 	mov	r0, r6
    352c:	e1a01007 	mov	r1, r7
    3530:	eb00059f 	bl	4bb4 <__aeabi_dmul>
    3534:	e1a02000 	mov	r2, r0
    3538:	e1a03001 	mov	r3, r1
    353c:	e1a00004 	mov	r0, r4
    3540:	e1a01005 	mov	r1, r5
    3544:	eb000495 	bl	47a0 <__aeabi_dsub>
    3548:	e1a02000 	mov	r2, r0
    354c:	e1a03001 	mov	r3, r1
    3550:	e1a00008 	mov	r0, r8
    3554:	e1a01009 	mov	r1, r9
    3558:	eb000490 	bl	47a0 <__aeabi_dsub>
    355c:	e1a02000 	mov	r2, r0
    3560:	e1a03001 	mov	r3, r1
    3564:	e28d1008 	add	r1, sp, #8
    3568:	e8910003 	ldm	r1, {r0, r1}
    356c:	eb00048b 	bl	47a0 <__aeabi_dsub>
    3570:	e28dd014 	add	sp, sp, #20
    3574:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3578:	e12fff1e 	bx	lr
    357c:	e59f305c 	ldr	r3, [pc, #92]	; 35e0 <__kernel_cos+0x340>
    3580:	e3a08000 	mov	r8, #0
    3584:	e58d2008 	str	r2, [sp, #8]
    3588:	e58d300c 	str	r3, [sp, #12]
    358c:	e59f9050 	ldr	r9, [pc, #80]	; 35e4 <__kernel_cos+0x344>
    3590:	eaffffd2 	b	34e0 <__kernel_cos+0x240>
    3594:	e3a00000 	mov	r0, #0
    3598:	e59f1034 	ldr	r1, [pc, #52]	; 35d4 <__kernel_cos+0x334>
    359c:	eafffff3 	b	3570 <__kernel_cos+0x2d0>
    35a0:	be8838d4 	.word	0xbe8838d4
    35a4:	bda8fae9 	.word	0xbda8fae9
    35a8:	bdb4b1c4 	.word	0xbdb4b1c4
    35ac:	3e21ee9e 	.word	0x3e21ee9e
    35b0:	809c52ad 	.word	0x809c52ad
    35b4:	3e927e4f 	.word	0x3e927e4f
    35b8:	19cb1590 	.word	0x19cb1590
    35bc:	3efa01a0 	.word	0x3efa01a0
    35c0:	16c15177 	.word	0x16c15177
    35c4:	3f56c16c 	.word	0x3f56c16c
    35c8:	5555554c 	.word	0x5555554c
    35cc:	3fa55555 	.word	0x3fa55555
    35d0:	3fe00000 	.word	0x3fe00000
    35d4:	3ff00000 	.word	0x3ff00000
    35d8:	3fd33332 	.word	0x3fd33332
    35dc:	3fe90000 	.word	0x3fe90000
    35e0:	3fe70000 	.word	0x3fe70000
    35e4:	3fd20000 	.word	0x3fd20000

000035e8 <__kernel_rem_pio2>:
    35e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    35ec:	e59feb6c 	ldr	lr, [pc, #2924]	; 4160 <__kernel_rem_pio2+0xb78>
    35f0:	e242c003 	sub	r12, r2, #3
    35f4:	e0ce4e9c 	smull	r4, lr, r12, lr
    35f8:	e1a0cfcc 	asr	r12, r12, #31
    35fc:	e06cc14e 	rsb	r12, r12, lr, asr #2
    3600:	e24ddf99 	sub	sp, sp, #612	; 0x264
    3604:	e1cccfcc 	bic	r12, r12, r12, asr #31
    3608:	e58dc028 	str	r12, [sp, #40]	; 0x28
    360c:	e1a0b003 	mov	r11, r3
    3610:	e59dc288 	ldr	r12, [sp, #648]	; 0x288
    3614:	e59f3b48 	ldr	r3, [pc, #2888]	; 4164 <__kernel_rem_pio2+0xb7c>
    3618:	e793310c 	ldr	r3, [r3, r12, lsl #2]
    361c:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    3620:	e58d3020 	str	r3, [sp, #32]
    3624:	e59de020 	ldr	lr, [sp, #32]
    3628:	e1e0300c 	mvn	r3, r12
    362c:	e24b4001 	sub	r4, r11, #1
    3630:	e0833083 	add	r3, r3, r3, lsl #1
    3634:	e58d0010 	str	r0, [sp, #16]
    3638:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
    363c:	e0823183 	add	r3, r2, r3, lsl #3
    3640:	e094c00e 	adds	r12, r4, lr
    3644:	e58d400c 	str	r4, [sp, #12]
    3648:	e58d101c 	str	r1, [sp, #28]
    364c:	e58d3018 	str	r3, [sp, #24]
    3650:	e0646000 	rsb	r6, r4, r0
    3654:	4a000012 	bmi	36a4 <__kernel_rem_pio2+0xbc>
    3658:	e086c00c 	add	r12, r6, r12
    365c:	e28c4001 	add	r4, r12, #1
    3660:	e59dc28c 	ldr	r12, [sp, #652]	; 0x28c
    3664:	e28d8080 	add	r8, sp, #128	; 0x80
    3668:	e08c5106 	add	r5, r12, r6, lsl #2
    366c:	e3a07000 	mov	r7, #0
    3670:	ea000006 	b	3690 <__kernel_rem_pio2+0xa8>
    3674:	e7950007 	ldr	r0, [r5, r7]
    3678:	eb000516 	bl	4ad8 <__aeabi_i2d>
    367c:	e2866001 	add	r6, r6, #1
    3680:	e1560004 	cmp	r6, r4
    3684:	e8a80003 	stmia	r8!, {r0, r1}
    3688:	e2877004 	add	r7, r7, #4
    368c:	0a000004 	beq	36a4 <__kernel_rem_pio2+0xbc>
    3690:	e3560000 	cmp	r6, #0
    3694:	aafffff6 	bge	3674 <__kernel_rem_pio2+0x8c>
    3698:	e3a00000 	mov	r0, #0
    369c:	e3a01000 	mov	r1, #0
    36a0:	eafffff5 	b	367c <__kernel_rem_pio2+0x94>
    36a4:	e59d4020 	ldr	r4, [sp, #32]
    36a8:	e3540000 	cmp	r4, #0
    36ac:	ba000020 	blt	3734 <__kernel_rem_pio2+0x14c>
    36b0:	e59d4020 	ldr	r4, [sp, #32]
    36b4:	e28dcf72 	add	r12, sp, #456	; 0x1c8
    36b8:	e08cc184 	add	r12, r12, r4, lsl #3
    36bc:	e58dc004 	str	r12, [sp, #4]
    36c0:	e28dad07 	add	r10, sp, #448	; 0x1c0
    36c4:	e1a0800b 	mov	r8, r11
    36c8:	e59dc00c 	ldr	r12, [sp, #12]
    36cc:	e35c0000 	cmp	r12, #0
    36d0:	ba000130 	blt	3b98 <__kernel_rem_pio2+0x5b0>
    36d4:	e28de080 	add	lr, sp, #128	; 0x80
    36d8:	e59d9010 	ldr	r9, [sp, #16]
    36dc:	e08e7188 	add	r7, lr, r8, lsl #3
    36e0:	e3a04000 	mov	r4, #0
    36e4:	e3a05000 	mov	r5, #0
    36e8:	e3a06000 	mov	r6, #0
    36ec:	e937000c 	ldmdb	r7!, {r2, r3}
    36f0:	e8b90003 	ldm	r9!, {r0, r1}
    36f4:	eb00052e 	bl	4bb4 <__aeabi_dmul>
    36f8:	e1a02000 	mov	r2, r0
    36fc:	e1a03001 	mov	r3, r1
    3700:	e1a00004 	mov	r0, r4
    3704:	e1a01005 	mov	r1, r5
    3708:	eb000425 	bl	47a4 <__adddf3>
    370c:	e2866001 	add	r6, r6, #1
    3710:	e156000b 	cmp	r6, r11
    3714:	e1a04000 	mov	r4, r0
    3718:	e1a05001 	mov	r5, r1
    371c:	1afffff2 	bne	36ec <__kernel_rem_pio2+0x104>
    3720:	e8aa0030 	stmia	r10!, {r4, r5}
    3724:	e59d4004 	ldr	r4, [sp, #4]
    3728:	e15a0004 	cmp	r10, r4
    372c:	e2888001 	add	r8, r8, #1
    3730:	1affffe4 	bne	36c8 <__kernel_rem_pio2+0xe0>
    3734:	e59dc020 	ldr	r12, [sp, #32]
    3738:	e28d4030 	add	r4, sp, #48	; 0x30
    373c:	e084410c 	add	r4, r4, r12, lsl #2
    3740:	e58d402c 	str	r4, [sp, #44]	; 0x2c
    3744:	e58dc004 	str	r12, [sp, #4]
    3748:	e59d4004 	ldr	r4, [sp, #4]
    374c:	e28dce26 	add	r12, sp, #608	; 0x260
    3750:	e1a0a184 	lsl	r10, r4, #3
    3754:	e08c300a 	add	r3, r12, r10
    3758:	e3540000 	cmp	r4, #0
    375c:	e24350a0 	sub	r5, r3, #160	; 0xa0
    3760:	e8950030 	ldm	r5, {r4, r5}
    3764:	da00001f 	ble	37e8 <__kernel_rem_pio2+0x200>
    3768:	e59dc004 	ldr	r12, [sp, #4]
    376c:	e28d802c 	add	r8, sp, #44	; 0x2c
    3770:	e28ded07 	add	lr, sp, #448	; 0x1c0
    3774:	e08ea00a 	add	r10, lr, r10
    3778:	e088910c 	add	r9, r8, r12, lsl #2
    377c:	e3a02000 	mov	r2, #0
    3780:	e59f39e0 	ldr	r3, [pc, #2528]	; 4168 <__kernel_rem_pio2+0xb80>
    3784:	e1a00004 	mov	r0, r4
    3788:	e1a01005 	mov	r1, r5
    378c:	eb000508 	bl	4bb4 <__aeabi_dmul>
    3790:	eb00067f 	bl	5194 <__aeabi_d2iz>
    3794:	eb0004cf 	bl	4ad8 <__aeabi_i2d>
    3798:	e3a02000 	mov	r2, #0
    379c:	e59f39c8 	ldr	r3, [pc, #2504]	; 416c <__kernel_rem_pio2+0xb84>
    37a0:	e1a06000 	mov	r6, r0
    37a4:	e1a07001 	mov	r7, r1
    37a8:	eb000501 	bl	4bb4 <__aeabi_dmul>
    37ac:	e1a02000 	mov	r2, r0
    37b0:	e1a03001 	mov	r3, r1
    37b4:	e1a00004 	mov	r0, r4
    37b8:	e1a01005 	mov	r1, r5
    37bc:	eb0003f7 	bl	47a0 <__aeabi_dsub>
    37c0:	eb000673 	bl	5194 <__aeabi_d2iz>
    37c4:	e1a02006 	mov	r2, r6
    37c8:	e5a80004 	str	r0, [r8, #4]!
    37cc:	e1a03007 	mov	r3, r7
    37d0:	e93a0003 	ldmdb	r10!, {r0, r1}
    37d4:	eb0003f2 	bl	47a4 <__adddf3>
    37d8:	e1580009 	cmp	r8, r9
    37dc:	e1a04000 	mov	r4, r0
    37e0:	e1a05001 	mov	r5, r1
    37e4:	1affffe4 	bne	377c <__kernel_rem_pio2+0x194>
    37e8:	e59d2018 	ldr	r2, [sp, #24]
    37ec:	e1a00004 	mov	r0, r4
    37f0:	e1a01005 	mov	r1, r5
    37f4:	eb000379 	bl	45e0 <scalbn>
    37f8:	e3a02000 	mov	r2, #0
    37fc:	e3a035ff 	mov	r3, #1069547520	; 0x3fc00000
    3800:	e1a04000 	mov	r4, r0
    3804:	e1a05001 	mov	r5, r1
    3808:	eb0004e9 	bl	4bb4 <__aeabi_dmul>
    380c:	ebfff697 	bl	1270 <floor>
    3810:	e3a02000 	mov	r2, #0
    3814:	e59f3954 	ldr	r3, [pc, #2388]	; 4170 <__kernel_rem_pio2+0xb88>
    3818:	eb0004e5 	bl	4bb4 <__aeabi_dmul>
    381c:	e1a02000 	mov	r2, r0
    3820:	e1a03001 	mov	r3, r1
    3824:	e1a00004 	mov	r0, r4
    3828:	e1a01005 	mov	r1, r5
    382c:	eb0003db 	bl	47a0 <__aeabi_dsub>
    3830:	e1a04000 	mov	r4, r0
    3834:	e1a05001 	mov	r5, r1
    3838:	eb000655 	bl	5194 <__aeabi_d2iz>
    383c:	e1a08000 	mov	r8, r0
    3840:	eb0004a4 	bl	4ad8 <__aeabi_i2d>
    3844:	e1a02000 	mov	r2, r0
    3848:	e1a03001 	mov	r3, r1
    384c:	e1a00004 	mov	r0, r4
    3850:	e1a01005 	mov	r1, r5
    3854:	eb0003d1 	bl	47a0 <__aeabi_dsub>
    3858:	e59d4018 	ldr	r4, [sp, #24]
    385c:	e3540000 	cmp	r4, #0
    3860:	e1a06000 	mov	r6, r0
    3864:	e1a07001 	mov	r7, r1
    3868:	da0000ad 	ble	3b24 <__kernel_rem_pio2+0x53c>
    386c:	e59dc004 	ldr	r12, [sp, #4]
    3870:	e28dee26 	add	lr, sp, #608	; 0x260
    3874:	e24c2001 	sub	r2, r12, #1
    3878:	e08e2102 	add	r2, lr, r2, lsl #2
    387c:	e5120230 	ldr	r0, [r2, #-560]	; 0xfffffdd0
    3880:	e2643018 	rsb	r3, r4, #24
    3884:	e1a01350 	asr	r1, r0, r3
    3888:	e0403311 	sub	r3, r0, r1, lsl r3
    388c:	e2645017 	rsb	r5, r4, #23
    3890:	e1a05553 	asr	r5, r3, r5
    3894:	e5023230 	str	r3, [r2, #-560]	; 0xfffffdd0
    3898:	e0888001 	add	r8, r8, r1
    389c:	e3550000 	cmp	r5, #0
    38a0:	da000027 	ble	3944 <__kernel_rem_pio2+0x35c>
    38a4:	e59d4004 	ldr	r4, [sp, #4]
    38a8:	e3540000 	cmp	r4, #0
    38ac:	e2888001 	add	r8, r8, #1
    38b0:	da0000b6 	ble	3b90 <__kernel_rem_pio2+0x5a8>
    38b4:	e28d3030 	add	r3, sp, #48	; 0x30
    38b8:	e0830104 	add	r0, r3, r4, lsl #2
    38bc:	e3a04000 	mov	r4, #0
    38c0:	ea000005 	b	38dc <__kernel_rem_pio2+0x2f4>
    38c4:	e3520000 	cmp	r2, #0
    38c8:	12622401 	rsbne	r2, r2, #16777216	; 0x1000000
    38cc:	15032004 	strne	r2, [r3, #-4]
    38d0:	13a04001 	movne	r4, #1
    38d4:	e1530000 	cmp	r3, r0
    38d8:	0a000008 	beq	3900 <__kernel_rem_pio2+0x318>
    38dc:	e3540000 	cmp	r4, #0
    38e0:	e4932004 	ldr	r2, [r3], #4
    38e4:	0afffff6 	beq	38c4 <__kernel_rem_pio2+0x2dc>
    38e8:	e3e014ff 	mvn	r1, #-16777216	; 0xff000000
    38ec:	e0621001 	rsb	r1, r2, r1
    38f0:	e1530000 	cmp	r3, r0
    38f4:	e5031004 	str	r1, [r3, #-4]
    38f8:	e3a04001 	mov	r4, #1
    38fc:	1afffff6 	bne	38dc <__kernel_rem_pio2+0x2f4>
    3900:	e59dc018 	ldr	r12, [sp, #24]
    3904:	e35c0000 	cmp	r12, #0
    3908:	da00000b 	ble	393c <__kernel_rem_pio2+0x354>
    390c:	e35c0001 	cmp	r12, #1
    3910:	0a00008a 	beq	3b40 <__kernel_rem_pio2+0x558>
    3914:	e35c0002 	cmp	r12, #2
    3918:	1a000007 	bne	393c <__kernel_rem_pio2+0x354>
    391c:	e59dc004 	ldr	r12, [sp, #4]
    3920:	e28dee26 	add	lr, sp, #608	; 0x260
    3924:	e24c3001 	sub	r3, r12, #1
    3928:	e08e3103 	add	r3, lr, r3, lsl #2
    392c:	e5132230 	ldr	r2, [r3, #-560]	; 0xfffffdd0
    3930:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
    3934:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000
    3938:	e5032230 	str	r2, [r3, #-560]	; 0xfffffdd0
    393c:	e3550002 	cmp	r5, #2
    3940:	0a000062 	beq	3ad0 <__kernel_rem_pio2+0x4e8>
    3944:	e1a00006 	mov	r0, r6
    3948:	e1a01007 	mov	r1, r7
    394c:	e3a02000 	mov	r2, #0
    3950:	e3a03000 	mov	r3, #0
    3954:	eb0005f0 	bl	511c <__aeabi_dcmpeq>
    3958:	e3500000 	cmp	r0, #0
    395c:	0a000090 	beq	3ba4 <__kernel_rem_pio2+0x5bc>
    3960:	e59d4004 	ldr	r4, [sp, #4]
    3964:	e59dc020 	ldr	r12, [sp, #32]
    3968:	e2440001 	sub	r0, r4, #1
    396c:	e15c0000 	cmp	r12, r0
    3970:	ca000009 	bgt	399c <__kernel_rem_pio2+0x3b4>
    3974:	e28de030 	add	lr, sp, #48	; 0x30
    3978:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
    397c:	e08e3104 	add	r3, lr, r4, lsl #2
    3980:	e3a02000 	mov	r2, #0
    3984:	e5331004 	ldr	r1, [r3, #-4]!
    3988:	e153000c 	cmp	r3, r12
    398c:	e1822001 	orr	r2, r2, r1
    3990:	1afffffb 	bne	3984 <__kernel_rem_pio2+0x39c>
    3994:	e3520000 	cmp	r2, #0
    3998:	1a0001c9 	bne	40c4 <__kernel_rem_pio2+0xadc>
    399c:	e59d4020 	ldr	r4, [sp, #32]
    39a0:	e2442001 	sub	r2, r4, #1
    39a4:	e1a02102 	lsl	r2, r2, #2
    39a8:	e28dce26 	add	r12, sp, #608	; 0x260
    39ac:	e08c3002 	add	r3, r12, r2
    39b0:	e5133230 	ldr	r3, [r3, #-560]	; 0xfffffdd0
    39b4:	e3530000 	cmp	r3, #0
    39b8:	1a0001d9 	bne	4124 <__kernel_rem_pio2+0xb3c>
    39bc:	e28de030 	add	lr, sp, #48	; 0x30
    39c0:	e08e2002 	add	r2, lr, r2
    39c4:	e3a03001 	mov	r3, #1
    39c8:	e5321004 	ldr	r1, [r2, #-4]!
    39cc:	e3510000 	cmp	r1, #0
    39d0:	e2833001 	add	r3, r3, #1
    39d4:	0afffffb 	beq	39c8 <__kernel_rem_pio2+0x3e0>
    39d8:	e59d4004 	ldr	r4, [sp, #4]
    39dc:	e0843003 	add	r3, r4, r3
    39e0:	e2848001 	add	r8, r4, #1
    39e4:	e1580003 	cmp	r8, r3
    39e8:	e58d3024 	str	r3, [sp, #36]	; 0x24
    39ec:	ca000031 	bgt	3ab8 <__kernel_rem_pio2+0x4d0>
    39f0:	e59d4004 	ldr	r4, [sp, #4]
    39f4:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    39f8:	e084300c 	add	r3, r4, r12
    39fc:	e59dc28c 	ldr	r12, [sp, #652]	; 0x28c
    3a00:	e59d400c 	ldr	r4, [sp, #12]
    3a04:	e08c3103 	add	r3, r12, r3, lsl #2
    3a08:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    3a0c:	e0849008 	add	r9, r4, r8
    3a10:	e28d4d07 	add	r4, sp, #448	; 0x1c0
    3a14:	e0844188 	add	r4, r4, r8, lsl #3
    3a18:	e28cc001 	add	r12, r12, #1
    3a1c:	e28de080 	add	lr, sp, #128	; 0x80
    3a20:	e98d0018 	stmib	sp, {r3, r4}
    3a24:	e58dc014 	str	r12, [sp, #20]
    3a28:	e08e9189 	add	r9, lr, r9, lsl #3
    3a2c:	e59d4004 	ldr	r4, [sp, #4]
    3a30:	e5b40004 	ldr	r0, [r4, #4]!
    3a34:	e58d4004 	str	r4, [sp, #4]
    3a38:	eb000426 	bl	4ad8 <__aeabi_i2d>
    3a3c:	e59dc00c 	ldr	r12, [sp, #12]
    3a40:	e35c0000 	cmp	r12, #0
    3a44:	e8a90003 	stmia	r9!, {r0, r1}
    3a48:	ba00001d 	blt	3ac4 <__kernel_rem_pio2+0x4dc>
    3a4c:	e088700b 	add	r7, r8, r11
    3a50:	e28de080 	add	lr, sp, #128	; 0x80
    3a54:	e59da010 	ldr	r10, [sp, #16]
    3a58:	e08e7187 	add	r7, lr, r7, lsl #3
    3a5c:	e3a04000 	mov	r4, #0
    3a60:	e3a05000 	mov	r5, #0
    3a64:	e3a06000 	mov	r6, #0
    3a68:	e937000c 	ldmdb	r7!, {r2, r3}
    3a6c:	e8ba0003 	ldm	r10!, {r0, r1}
    3a70:	eb00044f 	bl	4bb4 <__aeabi_dmul>
    3a74:	e1a02000 	mov	r2, r0
    3a78:	e1a03001 	mov	r3, r1
    3a7c:	e1a00004 	mov	r0, r4
    3a80:	e1a01005 	mov	r1, r5
    3a84:	eb000346 	bl	47a4 <__adddf3>
    3a88:	e2866001 	add	r6, r6, #1
    3a8c:	e156000b 	cmp	r6, r11
    3a90:	e1a04000 	mov	r4, r0
    3a94:	e1a05001 	mov	r5, r1
    3a98:	1afffff2 	bne	3a68 <__kernel_rem_pio2+0x480>
    3a9c:	e59dc014 	ldr	r12, [sp, #20]
    3aa0:	e2888001 	add	r8, r8, #1
    3aa4:	e158000c 	cmp	r8, r12
    3aa8:	e59dc008 	ldr	r12, [sp, #8]
    3aac:	e8ac0030 	stmia	r12!, {r4, r5}
    3ab0:	e58dc008 	str	r12, [sp, #8]
    3ab4:	1affffdc 	bne	3a2c <__kernel_rem_pio2+0x444>
    3ab8:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    3abc:	e58dc004 	str	r12, [sp, #4]
    3ac0:	eaffff20 	b	3748 <__kernel_rem_pio2+0x160>
    3ac4:	e3a04000 	mov	r4, #0
    3ac8:	e3a05000 	mov	r5, #0
    3acc:	eafffff2 	b	3a9c <__kernel_rem_pio2+0x4b4>
    3ad0:	e1a02006 	mov	r2, r6
    3ad4:	e1a03007 	mov	r3, r7
    3ad8:	e3a00000 	mov	r0, #0
    3adc:	e59f1690 	ldr	r1, [pc, #1680]	; 4174 <__kernel_rem_pio2+0xb8c>
    3ae0:	eb00032e 	bl	47a0 <__aeabi_dsub>
    3ae4:	e3540000 	cmp	r4, #0
    3ae8:	e1a06000 	mov	r6, r0
    3aec:	e1a07001 	mov	r7, r1
    3af0:	0affff93 	beq	3944 <__kernel_rem_pio2+0x35c>
    3af4:	e59d2018 	ldr	r2, [sp, #24]
    3af8:	e3a00000 	mov	r0, #0
    3afc:	e59f1670 	ldr	r1, [pc, #1648]	; 4174 <__kernel_rem_pio2+0xb8c>
    3b00:	eb0002b6 	bl	45e0 <scalbn>
    3b04:	e1a02000 	mov	r2, r0
    3b08:	e1a03001 	mov	r3, r1
    3b0c:	e1a00006 	mov	r0, r6
    3b10:	e1a01007 	mov	r1, r7
    3b14:	eb000321 	bl	47a0 <__aeabi_dsub>
    3b18:	e1a06000 	mov	r6, r0
    3b1c:	e1a07001 	mov	r7, r1
    3b20:	eaffff87 	b	3944 <__kernel_rem_pio2+0x35c>
    3b24:	1a00000e 	bne	3b64 <__kernel_rem_pio2+0x57c>
    3b28:	e59d4004 	ldr	r4, [sp, #4]
    3b2c:	e28dce26 	add	r12, sp, #608	; 0x260
    3b30:	e08c3104 	add	r3, r12, r4, lsl #2
    3b34:	e5135234 	ldr	r5, [r3, #-564]	; 0xfffffdcc
    3b38:	e1a05bc5 	asr	r5, r5, #23
    3b3c:	eaffff56 	b	389c <__kernel_rem_pio2+0x2b4>
    3b40:	e59dc004 	ldr	r12, [sp, #4]
    3b44:	e28dee26 	add	lr, sp, #608	; 0x260
    3b48:	e24c3001 	sub	r3, r12, #1
    3b4c:	e08e3103 	add	r3, lr, r3, lsl #2
    3b50:	e5132230 	ldr	r2, [r3, #-560]	; 0xfffffdd0
    3b54:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
    3b58:	e3c22502 	bic	r2, r2, #8388608	; 0x800000
    3b5c:	e5032230 	str	r2, [r3, #-560]	; 0xfffffdd0
    3b60:	eaffff75 	b	393c <__kernel_rem_pio2+0x354>
    3b64:	e3a02000 	mov	r2, #0
    3b68:	e59f3608 	ldr	r3, [pc, #1544]	; 4178 <__kernel_rem_pio2+0xb90>
    3b6c:	eb00057c 	bl	5164 <__aeabi_dcmpge>
    3b70:	e3500000 	cmp	r0, #0
    3b74:	03a05000 	moveq	r5, #0
    3b78:	0affff71 	beq	3944 <__kernel_rem_pio2+0x35c>
    3b7c:	e59d4004 	ldr	r4, [sp, #4]
    3b80:	e3540000 	cmp	r4, #0
    3b84:	e3a05002 	mov	r5, #2
    3b88:	e2888001 	add	r8, r8, #1
    3b8c:	caffff48 	bgt	38b4 <__kernel_rem_pio2+0x2cc>
    3b90:	e3a04000 	mov	r4, #0
    3b94:	eaffff59 	b	3900 <__kernel_rem_pio2+0x318>
    3b98:	e3a04000 	mov	r4, #0
    3b9c:	e3a05000 	mov	r5, #0
    3ba0:	eafffede 	b	3720 <__kernel_rem_pio2+0x138>
    3ba4:	e59d4018 	ldr	r4, [sp, #24]
    3ba8:	e1a00006 	mov	r0, r6
    3bac:	e2642000 	rsb	r2, r4, #0
    3bb0:	e1a01007 	mov	r1, r7
    3bb4:	e58d500c 	str	r5, [sp, #12]
    3bb8:	e58d8010 	str	r8, [sp, #16]
    3bbc:	eb000287 	bl	45e0 <scalbn>
    3bc0:	e3a02000 	mov	r2, #0
    3bc4:	e59f35a0 	ldr	r3, [pc, #1440]	; 416c <__kernel_rem_pio2+0xb84>
    3bc8:	e1a04000 	mov	r4, r0
    3bcc:	e1a05001 	mov	r5, r1
    3bd0:	eb000563 	bl	5164 <__aeabi_dcmpge>
    3bd4:	e3500000 	cmp	r0, #0
    3bd8:	0a000153 	beq	412c <__kernel_rem_pio2+0xb44>
    3bdc:	e3a02000 	mov	r2, #0
    3be0:	e59f3580 	ldr	r3, [pc, #1408]	; 4168 <__kernel_rem_pio2+0xb80>
    3be4:	e1a00004 	mov	r0, r4
    3be8:	e1a01005 	mov	r1, r5
    3bec:	eb0003f0 	bl	4bb4 <__aeabi_dmul>
    3bf0:	eb000567 	bl	5194 <__aeabi_d2iz>
    3bf4:	eb0003b7 	bl	4ad8 <__aeabi_i2d>
    3bf8:	e3a02000 	mov	r2, #0
    3bfc:	e59f3568 	ldr	r3, [pc, #1384]	; 416c <__kernel_rem_pio2+0xb84>
    3c00:	e1a06000 	mov	r6, r0
    3c04:	e1a07001 	mov	r7, r1
    3c08:	eb0003e9 	bl	4bb4 <__aeabi_dmul>
    3c0c:	e1a02000 	mov	r2, r0
    3c10:	e1a03001 	mov	r3, r1
    3c14:	e1a00004 	mov	r0, r4
    3c18:	e1a01005 	mov	r1, r5
    3c1c:	eb0002df 	bl	47a0 <__aeabi_dsub>
    3c20:	eb00055b 	bl	5194 <__aeabi_d2iz>
    3c24:	e59d4004 	ldr	r4, [sp, #4]
    3c28:	e28dce26 	add	r12, sp, #608	; 0x260
    3c2c:	e08c3104 	add	r3, r12, r4, lsl #2
    3c30:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    3c34:	e1a01007 	mov	r1, r7
    3c38:	e1a00006 	mov	r0, r6
    3c3c:	eb000554 	bl	5194 <__aeabi_d2iz>
    3c40:	e2844001 	add	r4, r4, #1
    3c44:	e28dee26 	add	lr, sp, #608	; 0x260
    3c48:	e08e3104 	add	r3, lr, r4, lsl #2
    3c4c:	e58d4004 	str	r4, [sp, #4]
    3c50:	e59d4018 	ldr	r4, [sp, #24]
    3c54:	e2844018 	add	r4, r4, #24
    3c58:	e58d4018 	str	r4, [sp, #24]
    3c5c:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    3c60:	e3a00000 	mov	r0, #0
    3c64:	e59f1508 	ldr	r1, [pc, #1288]	; 4174 <__kernel_rem_pio2+0xb8c>
    3c68:	e59d2018 	ldr	r2, [sp, #24]
    3c6c:	eb00025b 	bl	45e0 <scalbn>
    3c70:	e59dc004 	ldr	r12, [sp, #4]
    3c74:	e35c0000 	cmp	r12, #0
    3c78:	e1a04000 	mov	r4, r0
    3c7c:	e1a05001 	mov	r5, r1
    3c80:	ba00003b 	blt	3d74 <__kernel_rem_pio2+0x78c>
    3c84:	e28c6001 	add	r6, r12, #1
    3c88:	e28d9d07 	add	r9, sp, #448	; 0x1c0
    3c8c:	e28de030 	add	lr, sp, #48	; 0x30
    3c90:	e08e7106 	add	r7, lr, r6, lsl #2
    3c94:	e0896186 	add	r6, r9, r6, lsl #3
    3c98:	e5370004 	ldr	r0, [r7, #-4]!
    3c9c:	eb00038d 	bl	4ad8 <__aeabi_i2d>
    3ca0:	e1a02004 	mov	r2, r4
    3ca4:	e1a03005 	mov	r3, r5
    3ca8:	eb0003c1 	bl	4bb4 <__aeabi_dmul>
    3cac:	e3a02000 	mov	r2, #0
    3cb0:	e9260003 	stmdb	r6!, {r0, r1}
    3cb4:	e59f34ac 	ldr	r3, [pc, #1196]	; 4168 <__kernel_rem_pio2+0xb80>
    3cb8:	e1a00004 	mov	r0, r4
    3cbc:	e1a01005 	mov	r1, r5
    3cc0:	eb0003bb 	bl	4bb4 <__aeabi_dmul>
    3cc4:	e1560009 	cmp	r6, r9
    3cc8:	e1a04000 	mov	r4, r0
    3ccc:	e1a05001 	mov	r5, r1
    3cd0:	1afffff0 	bne	3c98 <__kernel_rem_pio2+0x6b0>
    3cd4:	e59da004 	ldr	r10, [sp, #4]
    3cd8:	e59db020 	ldr	r11, [sp, #32]
    3cdc:	e58da008 	str	r10, [sp, #8]
    3ce0:	e3a08000 	mov	r8, #0
    3ce4:	e35b0000 	cmp	r11, #0
    3ce8:	b3a04000 	movlt	r4, #0
    3cec:	b3a05000 	movlt	r5, #0
    3cf0:	ba000015 	blt	3d4c <__kernel_rem_pio2+0x764>
    3cf4:	e59d4008 	ldr	r4, [sp, #8]
    3cf8:	e59fa47c 	ldr	r10, [pc, #1148]	; 417c <__kernel_rem_pio2+0xb94>
    3cfc:	e0897184 	add	r7, r9, r4, lsl #3
    3d00:	e3a05000 	mov	r5, #0
    3d04:	e3a04000 	mov	r4, #0
    3d08:	e3a06000 	mov	r6, #0
    3d0c:	ea000001 	b	3d18 <__kernel_rem_pio2+0x730>
    3d10:	e1560008 	cmp	r6, r8
    3d14:	ca00000c 	bgt	3d4c <__kernel_rem_pio2+0x764>
    3d18:	e8b7000c 	ldm	r7!, {r2, r3}
    3d1c:	e8ba0003 	ldm	r10!, {r0, r1}
    3d20:	eb0003a3 	bl	4bb4 <__aeabi_dmul>
    3d24:	e1a02000 	mov	r2, r0
    3d28:	e1a03001 	mov	r3, r1
    3d2c:	e1a00004 	mov	r0, r4
    3d30:	e1a01005 	mov	r1, r5
    3d34:	eb00029a 	bl	47a4 <__adddf3>
    3d38:	e2866001 	add	r6, r6, #1
    3d3c:	e15b0006 	cmp	r11, r6
    3d40:	e1a04000 	mov	r4, r0
    3d44:	e1a05001 	mov	r5, r1
    3d48:	aafffff0 	bge	3d10 <__kernel_rem_pio2+0x728>
    3d4c:	e59dc008 	ldr	r12, [sp, #8]
    3d50:	e28d0e26 	add	r0, sp, #608	; 0x260
    3d54:	e24cc001 	sub	r12, r12, #1
    3d58:	e0803188 	add	r3, r0, r8, lsl #3
    3d5c:	e37c0001 	cmn	r12, #1
    3d60:	e58dc008 	str	r12, [sp, #8]
    3d64:	e5034140 	str	r4, [r3, #-320]	; 0xfffffec0
    3d68:	e503513c 	str	r5, [r3, #-316]	; 0xfffffec4
    3d6c:	e2888001 	add	r8, r8, #1
    3d70:	1affffdb 	bne	3ce4 <__kernel_rem_pio2+0x6fc>
    3d74:	e59dc288 	ldr	r12, [sp, #648]	; 0x288
    3d78:	e35c0003 	cmp	r12, #3
    3d7c:	979ff10c 	ldrls	pc, [pc, r12, lsl #2]
    3d80:	ea000015 	b	3ddc <__kernel_rem_pio2+0x7f4>
    3d84:	00004064 	.word	0x00004064
    3d88:	00003f80 	.word	0x00003f80
    3d8c:	00003f80 	.word	0x00003f80
    3d90:	00003df0 	.word	0x00003df0
    3d94:	e59d000c 	ldr	r0, [sp, #12]
    3d98:	e3a0c000 	mov	r12, #0
    3d9c:	e3500000 	cmp	r0, #0
    3da0:	e1a0400c 	mov	r4, r12
    3da4:	0a000068 	beq	3f4c <__kernel_rem_pio2+0x964>
    3da8:	e59d2124 	ldr	r2, [sp, #292]	; 0x124
    3dac:	e59d001c 	ldr	r0, [sp, #28]
    3db0:	e59d1120 	ldr	r1, [sp, #288]	; 0x120
    3db4:	e2822102 	add	r2, r2, #-2147483648	; 0x80000000
    3db8:	e59d312c 	ldr	r3, [sp, #300]	; 0x12c
    3dbc:	e8800006 	stm	r0, {r1, r2}
    3dc0:	e59d2128 	ldr	r2, [sp, #296]	; 0x128
    3dc4:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
    3dc8:	e2844102 	add	r4, r4, #-2147483648	; 0x80000000
    3dcc:	e5802008 	str	r2, [r0, #8]
    3dd0:	e580300c 	str	r3, [r0, #12]
    3dd4:	e580c010 	str	r12, [r0, #16]
    3dd8:	e5804014 	str	r4, [r0, #20]
    3ddc:	e59d4010 	ldr	r4, [sp, #16]
    3de0:	e2040007 	and	r0, r4, #7
    3de4:	e28ddf99 	add	sp, sp, #612	; 0x264
    3de8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3dec:	e12fff1e 	bx	lr
    3df0:	e59d4004 	ldr	r4, [sp, #4]
    3df4:	e3540000 	cmp	r4, #0
    3df8:	daffffe5 	ble	3d94 <__kernel_rem_pio2+0x7ac>
    3dfc:	e59d4004 	ldr	r4, [sp, #4]
    3e00:	e28dbe12 	add	r11, sp, #288	; 0x120
    3e04:	e08ba184 	add	r10, r11, r4, lsl #3
    3e08:	e58da008 	str	r10, [sp, #8]
    3e0c:	e58da014 	str	r10, [sp, #20]
    3e10:	e93a0300 	ldmdb	r10!, {r8, r9}
    3e14:	e28a7008 	add	r7, r10, #8
    3e18:	e89700c0 	ldm	r7, {r6, r7}
    3e1c:	e1a00008 	mov	r0, r8
    3e20:	e1a02006 	mov	r2, r6
    3e24:	e1a03007 	mov	r3, r7
    3e28:	e1a01009 	mov	r1, r9
    3e2c:	eb00025c 	bl	47a4 <__adddf3>
    3e30:	e1a04000 	mov	r4, r0
    3e34:	e1a05001 	mov	r5, r1
    3e38:	e1a02004 	mov	r2, r4
    3e3c:	e1a03005 	mov	r3, r5
    3e40:	e1a00008 	mov	r0, r8
    3e44:	e1a01009 	mov	r1, r9
    3e48:	eb000254 	bl	47a0 <__aeabi_dsub>
    3e4c:	e1a02000 	mov	r2, r0
    3e50:	e1a03001 	mov	r3, r1
    3e54:	e1a00006 	mov	r0, r6
    3e58:	e1a01007 	mov	r1, r7
    3e5c:	eb000250 	bl	47a4 <__adddf3>
    3e60:	e59dc008 	ldr	r12, [sp, #8]
    3e64:	e58a0008 	str	r0, [r10, #8]
    3e68:	e58a100c 	str	r1, [r10, #12]
    3e6c:	e92c0030 	stmdb	r12!, {r4, r5}
    3e70:	e15a000b 	cmp	r10, r11
    3e74:	e58dc008 	str	r12, [sp, #8]
    3e78:	1affffe4 	bne	3e10 <__kernel_rem_pio2+0x828>
    3e7c:	e59d4004 	ldr	r4, [sp, #4]
    3e80:	e3540001 	cmp	r4, #1
    3e84:	e59da014 	ldr	r10, [sp, #20]
    3e88:	daffffc1 	ble	3d94 <__kernel_rem_pio2+0x7ac>
    3e8c:	e28bc008 	add	r12, r11, #8
    3e90:	e58dc008 	str	r12, [sp, #8]
    3e94:	e1a0c00a 	mov	r12, r10
    3e98:	e93a0300 	ldmdb	r10!, {r8, r9}
    3e9c:	e28a7008 	add	r7, r10, #8
    3ea0:	e89700c0 	ldm	r7, {r6, r7}
    3ea4:	e1a00008 	mov	r0, r8
    3ea8:	e1a02006 	mov	r2, r6
    3eac:	e1a03007 	mov	r3, r7
    3eb0:	e1a01009 	mov	r1, r9
    3eb4:	e58dc000 	str	r12, [sp]
    3eb8:	eb000239 	bl	47a4 <__adddf3>
    3ebc:	e1a04000 	mov	r4, r0
    3ec0:	e1a05001 	mov	r5, r1
    3ec4:	e1a02004 	mov	r2, r4
    3ec8:	e1a03005 	mov	r3, r5
    3ecc:	e1a00008 	mov	r0, r8
    3ed0:	e1a01009 	mov	r1, r9
    3ed4:	eb000231 	bl	47a0 <__aeabi_dsub>
    3ed8:	e1a02000 	mov	r2, r0
    3edc:	e1a03001 	mov	r3, r1
    3ee0:	e1a00006 	mov	r0, r6
    3ee4:	e1a01007 	mov	r1, r7
    3ee8:	eb00022d 	bl	47a4 <__adddf3>
    3eec:	e59de008 	ldr	lr, [sp, #8]
    3ef0:	e59dc000 	ldr	r12, [sp]
    3ef4:	e15a000e 	cmp	r10, lr
    3ef8:	e58a0008 	str	r0, [r10, #8]
    3efc:	e58a100c 	str	r1, [r10, #12]
    3f00:	e92c0030 	stmdb	r12!, {r4, r5}
    3f04:	1affffe3 	bne	3e98 <__kernel_rem_pio2+0x8b0>
    3f08:	e59d4004 	ldr	r4, [sp, #4]
    3f0c:	e3a0c000 	mov	r12, #0
    3f10:	e2845001 	add	r5, r4, #1
    3f14:	e08b5185 	add	r5, r11, r5, lsl #3
    3f18:	e1a0400c 	mov	r4, r12
    3f1c:	e28bb010 	add	r11, r11, #16
    3f20:	e1a0000c 	mov	r0, r12
    3f24:	e1a01004 	mov	r1, r4
    3f28:	e935000c 	ldmdb	r5!, {r2, r3}
    3f2c:	eb00021c 	bl	47a4 <__adddf3>
    3f30:	e155000b 	cmp	r5, r11
    3f34:	e1a0c000 	mov	r12, r0
    3f38:	e1a04001 	mov	r4, r1
    3f3c:	1afffff7 	bne	3f20 <__kernel_rem_pio2+0x938>
    3f40:	e59d000c 	ldr	r0, [sp, #12]
    3f44:	e3500000 	cmp	r0, #0
    3f48:	1affff96 	bne	3da8 <__kernel_rem_pio2+0x7c0>
    3f4c:	e1a03004 	mov	r3, r4
    3f50:	e28d1e12 	add	r1, sp, #288	; 0x120
    3f54:	e8910003 	ldm	r1, {r0, r1}
    3f58:	e59d401c 	ldr	r4, [sp, #28]
    3f5c:	e8840003 	stm	r4, {r0, r1}
    3f60:	e28d1f4a 	add	r1, sp, #296	; 0x128
    3f64:	e8910003 	ldm	r1, {r0, r1}
    3f68:	e1a0200c 	mov	r2, r12
    3f6c:	e5840008 	str	r0, [r4, #8]
    3f70:	e584100c 	str	r1, [r4, #12]
    3f74:	e5842010 	str	r2, [r4, #16]
    3f78:	e5843014 	str	r3, [r4, #20]
    3f7c:	eaffff96 	b	3ddc <__kernel_rem_pio2+0x7f4>
    3f80:	e59dc004 	ldr	r12, [sp, #4]
    3f84:	e35c0000 	cmp	r12, #0
    3f88:	b3a0e000 	movlt	lr, #0
    3f8c:	b1a0c00e 	movlt	r12, lr
    3f90:	ba00000d 	blt	3fcc <__kernel_rem_pio2+0x9e4>
    3f94:	e59dc004 	ldr	r12, [sp, #4]
    3f98:	e28d5e12 	add	r5, sp, #288	; 0x120
    3f9c:	e28c4001 	add	r4, r12, #1
    3fa0:	e3a0e000 	mov	lr, #0
    3fa4:	e0854184 	add	r4, r5, r4, lsl #3
    3fa8:	e1a0c00e 	mov	r12, lr
    3fac:	e1a0000e 	mov	r0, lr
    3fb0:	e1a0100c 	mov	r1, r12
    3fb4:	e934000c 	ldmdb	r4!, {r2, r3}
    3fb8:	eb0001f9 	bl	47a4 <__adddf3>
    3fbc:	e1540005 	cmp	r4, r5
    3fc0:	e1a0e000 	mov	lr, r0
    3fc4:	e1a0c001 	mov	r12, r1
    3fc8:	1afffff7 	bne	3fac <__kernel_rem_pio2+0x9c4>
    3fcc:	e59d400c 	ldr	r4, [sp, #12]
    3fd0:	e3540000 	cmp	r4, #0
    3fd4:	128c3102 	addne	r3, r12, #-2147483648	; 0x80000000
    3fd8:	01a0300c 	moveq	r3, r12
    3fdc:	e1a01003 	mov	r1, r3
    3fe0:	e1a0300c 	mov	r3, r12
    3fe4:	e59dc01c 	ldr	r12, [sp, #28]
    3fe8:	e1a0000e 	mov	r0, lr
    3fec:	e88c0003 	stm	r12, {r0, r1}
    3ff0:	e1a0200e 	mov	r2, lr
    3ff4:	e28d1e12 	add	r1, sp, #288	; 0x120
    3ff8:	e8910003 	ldm	r1, {r0, r1}
    3ffc:	eb0001e7 	bl	47a0 <__aeabi_dsub>
    4000:	e59d4004 	ldr	r4, [sp, #4]
    4004:	e3540000 	cmp	r4, #0
    4008:	e1a05000 	mov	r5, r0
    400c:	e1a0c001 	mov	r12, r1
    4010:	da00000a 	ble	4040 <__kernel_rem_pio2+0xa58>
    4014:	e59de004 	ldr	lr, [sp, #4]
    4018:	e28d4f4a 	add	r4, sp, #296	; 0x128
    401c:	e084618e 	add	r6, r4, lr, lsl #3
    4020:	e1a00005 	mov	r0, r5
    4024:	e1a0100c 	mov	r1, r12
    4028:	e8b4000c 	ldm	r4!, {r2, r3}
    402c:	eb0001dc 	bl	47a4 <__adddf3>
    4030:	e1540006 	cmp	r4, r6
    4034:	e1a05000 	mov	r5, r0
    4038:	e1a0c001 	mov	r12, r1
    403c:	1afffff7 	bne	4020 <__kernel_rem_pio2+0xa38>
    4040:	e59d400c 	ldr	r4, [sp, #12]
    4044:	e3540000 	cmp	r4, #0
    4048:	128cc102 	addne	r12, r12, #-2147483648	; 0x80000000
    404c:	e1a0300c 	mov	r3, r12
    4050:	e59dc01c 	ldr	r12, [sp, #28]
    4054:	e1a02005 	mov	r2, r5
    4058:	e58c2008 	str	r2, [r12, #8]
    405c:	e58c300c 	str	r3, [r12, #12]
    4060:	eaffff5d 	b	3ddc <__kernel_rem_pio2+0x7f4>
    4064:	e59d4004 	ldr	r4, [sp, #4]
    4068:	e3540000 	cmp	r4, #0
    406c:	ba000038 	blt	4154 <__kernel_rem_pio2+0xb6c>
    4070:	e2846001 	add	r6, r4, #1
    4074:	e28d5e12 	add	r5, sp, #288	; 0x120
    4078:	e3a04000 	mov	r4, #0
    407c:	e0856186 	add	r6, r5, r6, lsl #3
    4080:	e1a0c004 	mov	r12, r4
    4084:	e1a00004 	mov	r0, r4
    4088:	e1a0100c 	mov	r1, r12
    408c:	e936000c 	ldmdb	r6!, {r2, r3}
    4090:	eb0001c3 	bl	47a4 <__adddf3>
    4094:	e1560005 	cmp	r6, r5
    4098:	e1a04000 	mov	r4, r0
    409c:	e1a0c001 	mov	r12, r1
    40a0:	1afffff7 	bne	4084 <__kernel_rem_pio2+0xa9c>
    40a4:	e59d000c 	ldr	r0, [sp, #12]
    40a8:	e3500000 	cmp	r0, #0
    40ac:	e1a02004 	mov	r2, r4
    40b0:	128cc102 	addne	r12, r12, #-2147483648	; 0x80000000
    40b4:	e59d401c 	ldr	r4, [sp, #28]
    40b8:	e1a0300c 	mov	r3, r12
    40bc:	e884000c 	stm	r4, {r2, r3}
    40c0:	eaffff45 	b	3ddc <__kernel_rem_pio2+0x7f4>
    40c4:	e1a03100 	lsl	r3, r0, #2
    40c8:	e28dce26 	add	r12, sp, #608	; 0x260
    40cc:	e08c2003 	add	r2, r12, r3
    40d0:	e59d4018 	ldr	r4, [sp, #24]
    40d4:	e5122230 	ldr	r2, [r2, #-560]	; 0xfffffdd0
    40d8:	e2444018 	sub	r4, r4, #24
    40dc:	e3520000 	cmp	r2, #0
    40e0:	e58d8010 	str	r8, [sp, #16]
    40e4:	e58d500c 	str	r5, [sp, #12]
    40e8:	e58d4018 	str	r4, [sp, #24]
    40ec:	1a000016 	bne	414c <__kernel_rem_pio2+0xb64>
    40f0:	e28dc030 	add	r12, sp, #48	; 0x30
    40f4:	e58d0004 	str	r0, [sp, #4]
    40f8:	e08c3003 	add	r3, r12, r3
    40fc:	e1a02000 	mov	r2, r0
    4100:	e1a01004 	mov	r1, r4
    4104:	e5330004 	ldr	r0, [r3, #-4]!
    4108:	e3500000 	cmp	r0, #0
    410c:	e2422001 	sub	r2, r2, #1
    4110:	e2411018 	sub	r1, r1, #24
    4114:	0afffffa 	beq	4104 <__kernel_rem_pio2+0xb1c>
    4118:	e58d2004 	str	r2, [sp, #4]
    411c:	e58d1018 	str	r1, [sp, #24]
    4120:	eafffece 	b	3c60 <__kernel_rem_pio2+0x678>
    4124:	e3a03001 	mov	r3, #1
    4128:	eafffe2a 	b	39d8 <__kernel_rem_pio2+0x3f0>
    412c:	e1a00004 	mov	r0, r4
    4130:	e1a01005 	mov	r1, r5
    4134:	eb000416 	bl	5194 <__aeabi_d2iz>
    4138:	e59dc004 	ldr	r12, [sp, #4]
    413c:	e28dee26 	add	lr, sp, #608	; 0x260
    4140:	e08e310c 	add	r3, lr, r12, lsl #2
    4144:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    4148:	eafffec4 	b	3c60 <__kernel_rem_pio2+0x678>
    414c:	e58d0004 	str	r0, [sp, #4]
    4150:	eafffec2 	b	3c60 <__kernel_rem_pio2+0x678>
    4154:	e3a04000 	mov	r4, #0
    4158:	e1a0c004 	mov	r12, r4
    415c:	eaffffd0 	b	40a4 <__kernel_rem_pio2+0xabc>
    4160:	2aaaaaab 	.word	0x2aaaaaab
    4164:	00006810 	.word	0x00006810
    4168:	3e700000 	.word	0x3e700000
    416c:	41700000 	.word	0x41700000
    4170:	40200000 	.word	0x40200000
    4174:	3ff00000 	.word	0x3ff00000
    4178:	3fe00000 	.word	0x3fe00000
    417c:	00006820 	.word	0x00006820

00004180 <__kernel_sin>:
    4180:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    4184:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    4188:	e35c05f9 	cmp	r12, #1044381696	; 0x3e400000
    418c:	e24dd014 	sub	sp, sp, #20
    4190:	e1a04000 	mov	r4, r0
    4194:	e1a05001 	mov	r5, r1
    4198:	e1a06000 	mov	r6, r0
    419c:	e1a07001 	mov	r7, r1
    41a0:	e1a08002 	mov	r8, r2
    41a4:	e1a09003 	mov	r9, r3
    41a8:	aa000002 	bge	41b8 <__kernel_sin+0x38>
    41ac:	eb0003f8 	bl	5194 <__aeabi_d2iz>
    41b0:	e3500000 	cmp	r0, #0
    41b4:	0a000052 	beq	4304 <__kernel_sin+0x184>
    41b8:	e1a02004 	mov	r2, r4
    41bc:	e1a03005 	mov	r3, r5
    41c0:	e1a00004 	mov	r0, r4
    41c4:	e1a01005 	mov	r1, r5
    41c8:	eb000279 	bl	4bb4 <__aeabi_dmul>
    41cc:	e1a02004 	mov	r2, r4
    41d0:	e1a03005 	mov	r3, r5
    41d4:	e1a06000 	mov	r6, r0
    41d8:	e1a07001 	mov	r7, r1
    41dc:	eb000274 	bl	4bb4 <__aeabi_dmul>
    41e0:	e28f3d06 	add	r3, pc, #384	; 0x180
    41e4:	e893000c 	ldm	r3, {r2, r3}
    41e8:	e1a0a000 	mov	r10, r0
    41ec:	e1a0b001 	mov	r11, r1
    41f0:	e1a00006 	mov	r0, r6
    41f4:	e1a01007 	mov	r1, r7
    41f8:	eb00026d 	bl	4bb4 <__aeabi_dmul>
    41fc:	e28f3f5b 	add	r3, pc, #364	; 0x16c
    4200:	e893000c 	ldm	r3, {r2, r3}
    4204:	eb000165 	bl	47a0 <__aeabi_dsub>
    4208:	e1a02006 	mov	r2, r6
    420c:	e1a03007 	mov	r3, r7
    4210:	eb000267 	bl	4bb4 <__aeabi_dmul>
    4214:	e28f3f57 	add	r3, pc, #348	; 0x15c
    4218:	e893000c 	ldm	r3, {r2, r3}
    421c:	eb000160 	bl	47a4 <__adddf3>
    4220:	e1a02006 	mov	r2, r6
    4224:	e1a03007 	mov	r3, r7
    4228:	eb000261 	bl	4bb4 <__aeabi_dmul>
    422c:	e28f3f53 	add	r3, pc, #332	; 0x14c
    4230:	e893000c 	ldm	r3, {r2, r3}
    4234:	eb000159 	bl	47a0 <__aeabi_dsub>
    4238:	e1a02006 	mov	r2, r6
    423c:	e1a03007 	mov	r3, r7
    4240:	eb00025b 	bl	4bb4 <__aeabi_dmul>
    4244:	e28f3f4f 	add	r3, pc, #316	; 0x13c
    4248:	e893000c 	ldm	r3, {r2, r3}
    424c:	eb000154 	bl	47a4 <__adddf3>
    4250:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    4254:	e3530000 	cmp	r3, #0
    4258:	e88d0003 	stm	sp, {r0, r1}
    425c:	0a00002d 	beq	4318 <__kernel_sin+0x198>
    4260:	e3a02000 	mov	r2, #0
    4264:	e59f312c 	ldr	r3, [pc, #300]	; 4398 <__kernel_sin+0x218>
    4268:	e1a00008 	mov	r0, r8
    426c:	e1a01009 	mov	r1, r9
    4270:	eb00024f 	bl	4bb4 <__aeabi_dmul>
    4274:	e89d000c 	ldm	sp, {r2, r3}
    4278:	e58d0008 	str	r0, [sp, #8]
    427c:	e58d100c 	str	r1, [sp, #12]
    4280:	e1a0000a 	mov	r0, r10
    4284:	e1a0100b 	mov	r1, r11
    4288:	eb000249 	bl	4bb4 <__aeabi_dmul>
    428c:	e1a02000 	mov	r2, r0
    4290:	e1a03001 	mov	r3, r1
    4294:	e28d1008 	add	r1, sp, #8
    4298:	e8910003 	ldm	r1, {r0, r1}
    429c:	eb00013f 	bl	47a0 <__aeabi_dsub>
    42a0:	e1a02006 	mov	r2, r6
    42a4:	e1a03007 	mov	r3, r7
    42a8:	eb000241 	bl	4bb4 <__aeabi_dmul>
    42ac:	e1a02008 	mov	r2, r8
    42b0:	e1a03009 	mov	r3, r9
    42b4:	eb000139 	bl	47a0 <__aeabi_dsub>
    42b8:	e28f30d0 	add	r3, pc, #208	; 0xd0
    42bc:	e893000c 	ldm	r3, {r2, r3}
    42c0:	e1a06000 	mov	r6, r0
    42c4:	e1a07001 	mov	r7, r1
    42c8:	e1a0000a 	mov	r0, r10
    42cc:	e1a0100b 	mov	r1, r11
    42d0:	eb000237 	bl	4bb4 <__aeabi_dmul>
    42d4:	e1a02000 	mov	r2, r0
    42d8:	e1a03001 	mov	r3, r1
    42dc:	e1a00006 	mov	r0, r6
    42e0:	e1a01007 	mov	r1, r7
    42e4:	eb00012e 	bl	47a4 <__adddf3>
    42e8:	e1a02000 	mov	r2, r0
    42ec:	e1a03001 	mov	r3, r1
    42f0:	e1a00004 	mov	r0, r4
    42f4:	e1a01005 	mov	r1, r5
    42f8:	eb000128 	bl	47a0 <__aeabi_dsub>
    42fc:	e1a04000 	mov	r4, r0
    4300:	e1a05001 	mov	r5, r1
    4304:	e1a00004 	mov	r0, r4
    4308:	e1a01005 	mov	r1, r5
    430c:	e28dd014 	add	sp, sp, #20
    4310:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    4314:	e12fff1e 	bx	lr
    4318:	e1a02000 	mov	r2, r0
    431c:	e1a03001 	mov	r3, r1
    4320:	e1a00006 	mov	r0, r6
    4324:	e1a01007 	mov	r1, r7
    4328:	eb000221 	bl	4bb4 <__aeabi_dmul>
    432c:	e28f305c 	add	r3, pc, #92	; 0x5c
    4330:	e893000c 	ldm	r3, {r2, r3}
    4334:	eb000119 	bl	47a0 <__aeabi_dsub>
    4338:	e1a0200a 	mov	r2, r10
    433c:	e1a0300b 	mov	r3, r11
    4340:	eb00021b 	bl	4bb4 <__aeabi_dmul>
    4344:	e1a02000 	mov	r2, r0
    4348:	e1a03001 	mov	r3, r1
    434c:	e1a00004 	mov	r0, r4
    4350:	e1a01005 	mov	r1, r5
    4354:	eb000112 	bl	47a4 <__adddf3>
    4358:	e1a04000 	mov	r4, r0
    435c:	e1a05001 	mov	r5, r1
    4360:	eaffffe7 	b	4304 <__kernel_sin+0x184>
    4364:	e1a00000 	nop			; (mov r0, r0)
    4368:	5acfd57c 	.word	0x5acfd57c
    436c:	3de5d93a 	.word	0x3de5d93a
    4370:	8a2b9ceb 	.word	0x8a2b9ceb
    4374:	3e5ae5e6 	.word	0x3e5ae5e6
    4378:	57b1fe7d 	.word	0x57b1fe7d
    437c:	3ec71de3 	.word	0x3ec71de3
    4380:	19c161d5 	.word	0x19c161d5
    4384:	3f2a01a0 	.word	0x3f2a01a0
    4388:	1110f8a6 	.word	0x1110f8a6
    438c:	3f811111 	.word	0x3f811111
    4390:	55555549 	.word	0x55555549
    4394:	3fc55555 	.word	0x3fc55555
    4398:	3fe00000 	.word	0x3fe00000
    439c:	e1a00000 	nop			; (mov r0, r0)

000043a0 <fabs>:
    43a0:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    43a4:	e12fff1e 	bx	lr

000043a8 <finite>:
    43a8:	e3811102 	orr	r1, r1, #-2147483648	; 0x80000000
    43ac:	e2810601 	add	r0, r1, #1048576	; 0x100000
    43b0:	e1a00fa0 	lsr	r0, r0, #31
    43b4:	e12fff1e 	bx	lr

000043b8 <__fpclassifyd>:
    43b8:	e1902001 	orrs	r2, r0, r1
    43bc:	1a000001 	bne	43c8 <__fpclassifyd+0x10>
    43c0:	e3a00002 	mov	r0, #2
    43c4:	e12fff1e 	bx	lr
    43c8:	e2702001 	rsbs	r2, r0, #1
    43cc:	33a02000 	movcc	r2, #0
    43d0:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    43d4:	03500000 	cmpeq	r0, #0
    43d8:	0afffff8 	beq	43c0 <__fpclassifyd+0x8>
    43dc:	e3c13102 	bic	r3, r1, #-2147483648	; 0x80000000
    43e0:	e59f1034 	ldr	r1, [pc, #52]	; 441c <__fpclassifyd+0x64>
    43e4:	e2430601 	sub	r0, r3, #1048576	; 0x100000
    43e8:	e1500001 	cmp	r0, r1
    43ec:	8a000001 	bhi	43f8 <__fpclassifyd+0x40>
    43f0:	e3a00004 	mov	r0, #4
    43f4:	e12fff1e 	bx	lr
    43f8:	e3530601 	cmp	r3, #1048576	; 0x100000
    43fc:	2a000001 	bcs	4408 <__fpclassifyd+0x50>
    4400:	e3a00003 	mov	r0, #3
    4404:	e12fff1e 	bx	lr
    4408:	e59f0010 	ldr	r0, [pc, #16]	; 4420 <__fpclassifyd+0x68>
    440c:	e1530000 	cmp	r3, r0
    4410:	13a00000 	movne	r0, #0
    4414:	02020001 	andeq	r0, r2, #1
    4418:	e12fff1e 	bx	lr
    441c:	7fdfffff 	.word	0x7fdfffff
    4420:	7ff00000 	.word	0x7ff00000

00004424 <matherr>:
    4424:	e3a00000 	mov	r0, #0
    4428:	e12fff1e 	bx	lr

0000442c <nan>:
    442c:	e3a00000 	mov	r0, #0
    4430:	e59f1000 	ldr	r1, [pc]	; 4438 <nan+0xc>
    4434:	e12fff1e 	bx	lr
    4438:	7ff80000 	.word	0x7ff80000

0000443c <rint>:
    443c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    4440:	e1a07081 	lsl	r7, r1, #1
    4444:	e1a07aa7 	lsr	r7, r7, #21
    4448:	e247cfff 	sub	r12, r7, #1020	; 0x3fc
    444c:	e24cc003 	sub	r12, r12, #3
    4450:	e35c0013 	cmp	r12, #19
    4454:	e24dd00c 	sub	sp, sp, #12
    4458:	e1a02000 	mov	r2, r0
    445c:	e1a03001 	mov	r3, r1
    4460:	e1a04000 	mov	r4, r0
    4464:	e1a05001 	mov	r5, r1
    4468:	e1a06001 	mov	r6, r1
    446c:	e1a08fa1 	lsr	r8, r1, #31
    4470:	ca000026 	bgt	4510 <rint+0xd4>
    4474:	e35c0000 	cmp	r12, #0
    4478:	ba000038 	blt	4560 <rint+0x124>
    447c:	e59f1150 	ldr	r1, [pc, #336]	; 45d4 <rint+0x198>
    4480:	e1a01c51 	asr	r1, r1, r12
    4484:	e0010003 	and	r0, r1, r3
    4488:	e1900002 	orrs	r0, r0, r2
    448c:	0a00001a 	beq	44fc <rint+0xc0>
    4490:	e1a010a1 	lsr	r1, r1, #1
    4494:	e0013003 	and	r3, r1, r3
    4498:	e1934002 	orrs	r4, r3, r2
    449c:	0a000005 	beq	44b8 <rint+0x7c>
    44a0:	e1c51001 	bic	r1, r5, r1
    44a4:	e3a05701 	mov	r5, #262144	; 0x40000
    44a8:	e1815c55 	orr	r5, r1, r5, asr r12
    44ac:	e35c0013 	cmp	r12, #19
    44b0:	03a04102 	moveq	r4, #-2147483648	; 0x80000000
    44b4:	13a04000 	movne	r4, #0
    44b8:	e59f3118 	ldr	r3, [pc, #280]	; 45d8 <rint+0x19c>
    44bc:	e0838188 	add	r8, r3, r8, lsl #3
    44c0:	e8980300 	ldm	r8, {r8, r9}
    44c4:	e1a02004 	mov	r2, r4
    44c8:	e1a03005 	mov	r3, r5
    44cc:	e1a00008 	mov	r0, r8
    44d0:	e1a01009 	mov	r1, r9
    44d4:	eb0000b2 	bl	47a4 <__adddf3>
    44d8:	e88d0003 	stm	sp, {r0, r1}
    44dc:	e1a02008 	mov	r2, r8
    44e0:	e1a03009 	mov	r3, r9
    44e4:	e89d0003 	ldm	sp, {r0, r1}
    44e8:	eb0000ac 	bl	47a0 <__aeabi_dsub>
    44ec:	e1a07005 	mov	r7, r5
    44f0:	e1a06004 	mov	r6, r4
    44f4:	e1a02000 	mov	r2, r0
    44f8:	e1a03001 	mov	r3, r1
    44fc:	e1a00002 	mov	r0, r2
    4500:	e1a01003 	mov	r1, r3
    4504:	e28dd00c 	add	sp, sp, #12
    4508:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
    450c:	e12fff1e 	bx	lr
    4510:	e35c0033 	cmp	r12, #51	; 0x33
    4514:	da000005 	ble	4530 <rint+0xf4>
    4518:	e35c0b01 	cmp	r12, #1024	; 0x400
    451c:	1afffff6 	bne	44fc <rint+0xc0>
    4520:	eb00009f 	bl	47a4 <__adddf3>
    4524:	e1a02000 	mov	r2, r0
    4528:	e1a03001 	mov	r3, r1
    452c:	eafffff2 	b	44fc <rint+0xc0>
    4530:	e2477e41 	sub	r7, r7, #1040	; 0x410
    4534:	e2477003 	sub	r7, r7, #3
    4538:	e3e01000 	mvn	r1, #0
    453c:	e1a01731 	lsr	r1, r1, r7
    4540:	e1110000 	tst	r1, r0
    4544:	0affffec 	beq	44fc <rint+0xc0>
    4548:	e1a010a1 	lsr	r1, r1, #1
    454c:	e1110000 	tst	r1, r0
    4550:	11c04001 	bicne	r4, r0, r1
    4554:	13a03101 	movne	r3, #1073741824	; 0x40000000
    4558:	11844753 	orrne	r4, r4, r3, asr r7
    455c:	eaffffd5 	b	44b8 <rint+0x7c>
    4560:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    4564:	e1911000 	orrs	r1, r1, r0
    4568:	0affffe3 	beq	44fc <rint+0xc0>
    456c:	e3c314ff 	bic	r1, r3, #-16777216	; 0xff000000
    4570:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    4574:	e1814000 	orr	r4, r1, r0
    4578:	e59f0058 	ldr	r0, [pc, #88]	; 45d8 <rint+0x19c>
    457c:	e2641000 	rsb	r1, r4, #0
    4580:	e1814004 	orr	r4, r1, r4
    4584:	e0800188 	add	r0, r0, r8, lsl #3
    4588:	e1a01624 	lsr	r1, r4, #12
    458c:	e8900030 	ldm	r0, {r4, r5}
    4590:	e2011702 	and	r1, r1, #524288	; 0x80000
    4594:	e1a068a3 	lsr	r6, r3, #17
    4598:	e1813886 	orr	r3, r1, r6, lsl #17
    459c:	e1a00004 	mov	r0, r4
    45a0:	e1a01005 	mov	r1, r5
    45a4:	eb00007e 	bl	47a4 <__adddf3>
    45a8:	e88d0003 	stm	sp, {r0, r1}
    45ac:	e1a02004 	mov	r2, r4
    45b0:	e1a03005 	mov	r3, r5
    45b4:	e89d0003 	ldm	sp, {r0, r1}
    45b8:	eb000078 	bl	47a0 <__aeabi_dsub>
    45bc:	e1a05001 	mov	r5, r1
    45c0:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    45c4:	e1a04000 	mov	r4, r0
    45c8:	e1a02000 	mov	r2, r0
    45cc:	e1813f88 	orr	r3, r1, r8, lsl #31
    45d0:	eaffffc9 	b	44fc <rint+0xc0>
    45d4:	000fffff 	.word	0x000fffff
    45d8:	00006860 	.word	0x00006860
    45dc:	00000000 	.word	0x00000000

000045e0 <scalbn>:
    45e0:	e59f3170 	ldr	r3, [pc, #368]	; 4758 <scalbn+0x178>
    45e4:	e0013003 	and	r3, r1, r3
    45e8:	e1b03a43 	asrs	r3, r3, #20
    45ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    45f0:	e1a04000 	mov	r4, r0
    45f4:	e1a05001 	mov	r5, r1
    45f8:	e1a06000 	mov	r6, r0
    45fc:	e1a07001 	mov	r7, r1
    4600:	e1a08002 	mov	r8, r2
    4604:	1a000011 	bne	4650 <scalbn+0x70>
    4608:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    460c:	e19cc000 	orrs	r12, r12, r0
    4610:	0a00001d 	beq	468c <scalbn+0xac>
    4614:	e59f3140 	ldr	r3, [pc, #320]	; 475c <scalbn+0x17c>
    4618:	e3a02000 	mov	r2, #0
    461c:	eb000164 	bl	4bb4 <__aeabi_dmul>
    4620:	e59f3138 	ldr	r3, [pc, #312]	; 4760 <scalbn+0x180>
    4624:	e1580003 	cmp	r8, r3
    4628:	e1a04000 	mov	r4, r0
    462c:	e1a05001 	mov	r5, r1
    4630:	e1a06000 	mov	r6, r0
    4634:	e1a07001 	mov	r7, r1
    4638:	ba000021 	blt	46c4 <scalbn+0xe4>
    463c:	e59f3114 	ldr	r3, [pc, #276]	; 4758 <scalbn+0x178>
    4640:	e0013003 	and	r3, r1, r3
    4644:	e1a03a43 	asr	r3, r3, #20
    4648:	e2433036 	sub	r3, r3, #54	; 0x36
    464c:	ea000003 	b	4660 <scalbn+0x80>
    4650:	e59f210c 	ldr	r2, [pc, #268]	; 4764 <scalbn+0x184>
    4654:	e1530002 	cmp	r3, r2
    4658:	11a01001 	movne	r1, r1
    465c:	0a000027 	beq	4700 <scalbn+0x120>
    4660:	e59f2100 	ldr	r2, [pc, #256]	; 4768 <scalbn+0x188>
    4664:	e0833008 	add	r3, r3, r8
    4668:	e1530002 	cmp	r3, r2
    466c:	c1a02004 	movgt	r2, r4
    4670:	c1a03005 	movgt	r3, r5
    4674:	ca000018 	bgt	46dc <scalbn+0xfc>
    4678:	e3530000 	cmp	r3, #0
    467c:	da000006 	ble	469c <scalbn+0xbc>
    4680:	e3c1147f 	bic	r1, r1, #2130706432	; 0x7f000000
    4684:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    4688:	e1815a03 	orr	r5, r1, r3, lsl #20
    468c:	e1a00004 	mov	r0, r4
    4690:	e1a01005 	mov	r1, r5
    4694:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    4698:	e12fff1e 	bx	lr
    469c:	e3730035 	cmn	r3, #53	; 0x35
    46a0:	aa00001c 	bge	4718 <scalbn+0x138>
    46a4:	e59f30c0 	ldr	r3, [pc, #192]	; 476c <scalbn+0x18c>
    46a8:	e1580003 	cmp	r8, r3
    46ac:	e1a02004 	mov	r2, r4
    46b0:	e1a03005 	mov	r3, r5
    46b4:	ca000008 	bgt	46dc <scalbn+0xfc>
    46b8:	e28f1088 	add	r1, pc, #136	; 0x88
    46bc:	e8910003 	ldm	r1, {r0, r1}
    46c0:	eb00002c 	bl	4778 <copysign>
    46c4:	e28f307c 	add	r3, pc, #124	; 0x7c
    46c8:	e893000c 	ldm	r3, {r2, r3}
    46cc:	eb000138 	bl	4bb4 <__aeabi_dmul>
    46d0:	e1a04000 	mov	r4, r0
    46d4:	e1a05001 	mov	r5, r1
    46d8:	eaffffeb 	b	468c <scalbn+0xac>
    46dc:	e28f106c 	add	r1, pc, #108	; 0x6c
    46e0:	e8910003 	ldm	r1, {r0, r1}
    46e4:	eb000023 	bl	4778 <copysign>
    46e8:	e28f3060 	add	r3, pc, #96	; 0x60
    46ec:	e893000c 	ldm	r3, {r2, r3}
    46f0:	eb00012f 	bl	4bb4 <__aeabi_dmul>
    46f4:	e1a04000 	mov	r4, r0
    46f8:	e1a05001 	mov	r5, r1
    46fc:	eaffffe2 	b	468c <scalbn+0xac>
    4700:	e1a03005 	mov	r3, r5
    4704:	e1a02000 	mov	r2, r0
    4708:	eb000025 	bl	47a4 <__adddf3>
    470c:	e1a04000 	mov	r4, r0
    4710:	e1a05001 	mov	r5, r1
    4714:	eaffffdc 	b	468c <scalbn+0xac>
    4718:	e3c1147f 	bic	r1, r1, #2130706432	; 0x7f000000
    471c:	e2833036 	add	r3, r3, #54	; 0x36
    4720:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    4724:	e1815a03 	orr	r5, r1, r3, lsl #20
    4728:	e1a00004 	mov	r0, r4
    472c:	e1a01005 	mov	r1, r5
    4730:	e3a02000 	mov	r2, #0
    4734:	e59f3034 	ldr	r3, [pc, #52]	; 4770 <scalbn+0x190>
    4738:	eb00011d 	bl	4bb4 <__aeabi_dmul>
    473c:	e1a04000 	mov	r4, r0
    4740:	e1a05001 	mov	r5, r1
    4744:	eaffffd0 	b	468c <scalbn+0xac>
    4748:	c2f8f359 	.word	0xc2f8f359
    474c:	01a56e1f 	.word	0x01a56e1f
    4750:	8800759c 	.word	0x8800759c
    4754:	7e37e43c 	.word	0x7e37e43c
    4758:	7ff00000 	.word	0x7ff00000
    475c:	43500000 	.word	0x43500000
    4760:	ffff3cb0 	.word	0xffff3cb0
    4764:	000007ff 	.word	0x000007ff
    4768:	000007fe 	.word	0x000007fe
    476c:	0000c350 	.word	0x0000c350
    4770:	3c900000 	.word	0x3c900000
    4774:	e1a00000 	nop			; (mov r0, r0)

00004778 <copysign>:
    4778:	e2033102 	and	r3, r3, #-2147483648	; 0x80000000
    477c:	e3c12102 	bic	r2, r1, #-2147483648	; 0x80000000
    4780:	e92d0030 	push	{r4, r5}
    4784:	e1a05001 	mov	r5, r1
    4788:	e1a04000 	mov	r4, r0
    478c:	e1831002 	orr	r1, r3, r2
    4790:	e8bd0030 	pop	{r4, r5}
    4794:	e12fff1e 	bx	lr

00004798 <__aeabi_drsub>:
    4798:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    479c:	ea000000 	b	47a4 <__adddf3>

000047a0 <__aeabi_dsub>:
    47a0:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

000047a4 <__adddf3>:
    47a4:	e92d4030 	push	{r4, r5, lr}
    47a8:	e1a04081 	lsl	r4, r1, #1
    47ac:	e1a05083 	lsl	r5, r3, #1
    47b0:	e1340005 	teq	r4, r5
    47b4:	01300002 	teqeq	r0, r2
    47b8:	1194c000 	orrsne	r12, r4, r0
    47bc:	1195c002 	orrsne	r12, r5, r2
    47c0:	11f0cac4 	mvnsne	r12, r4, asr #21
    47c4:	11f0cac5 	mvnsne	r12, r5, asr #21
    47c8:	0a00008c 	beq	4a00 <__adddf3+0x25c>
    47cc:	e1a04aa4 	lsr	r4, r4, #21
    47d0:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    47d4:	b2655000 	rsblt	r5, r5, #0
    47d8:	da000006 	ble	47f8 <__adddf3+0x54>
    47dc:	e0844005 	add	r4, r4, r5
    47e0:	e0202002 	eor	r2, r0, r2
    47e4:	e0213003 	eor	r3, r1, r3
    47e8:	e0220000 	eor	r0, r2, r0
    47ec:	e0231001 	eor	r1, r3, r1
    47f0:	e0202002 	eor	r2, r0, r2
    47f4:	e0213003 	eor	r3, r1, r3
    47f8:	e3550036 	cmp	r5, #54	; 0x36
    47fc:	88bd4030 	pophi	{r4, r5, lr}
    4800:	812fff1e 	bxhi	lr
    4804:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    4808:	e1a01601 	lsl	r1, r1, #12
    480c:	e3a0c601 	mov	r12, #1048576	; 0x100000
    4810:	e18c1621 	orr	r1, r12, r1, lsr #12
    4814:	0a000001 	beq	4820 <__adddf3+0x7c>
    4818:	e2700000 	rsbs	r0, r0, #0
    481c:	e2e11000 	rsc	r1, r1, #0
    4820:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    4824:	e1a03603 	lsl	r3, r3, #12
    4828:	e18c3623 	orr	r3, r12, r3, lsr #12
    482c:	0a000001 	beq	4838 <__adddf3+0x94>
    4830:	e2722000 	rsbs	r2, r2, #0
    4834:	e2e33000 	rsc	r3, r3, #0
    4838:	e1340005 	teq	r4, r5
    483c:	0a000069 	beq	49e8 <__adddf3+0x244>
    4840:	e2444001 	sub	r4, r4, #1
    4844:	e275e020 	rsbs	lr, r5, #32
    4848:	ba000005 	blt	4864 <__adddf3+0xc0>
    484c:	e1a0ce12 	lsl	r12, r2, lr
    4850:	e0900532 	adds	r0, r0, r2, lsr r5
    4854:	e2a11000 	adc	r1, r1, #0
    4858:	e0900e13 	adds	r0, r0, r3, lsl lr
    485c:	e0b11553 	adcs	r1, r1, r3, asr r5
    4860:	ea000006 	b	4880 <__adddf3+0xdc>
    4864:	e2455020 	sub	r5, r5, #32
    4868:	e28ee020 	add	lr, lr, #32
    486c:	e3520001 	cmp	r2, #1
    4870:	e1a0ce13 	lsl	r12, r3, lr
    4874:	238cc002 	orrcs	r12, r12, #2
    4878:	e0900553 	adds	r0, r0, r3, asr r5
    487c:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    4880:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    4884:	5a000002 	bpl	4894 <__adddf3+0xf0>
    4888:	e27cc000 	rsbs	r12, r12, #0
    488c:	e2f00000 	rscs	r0, r0, #0
    4890:	e2e11000 	rsc	r1, r1, #0
    4894:	e3510601 	cmp	r1, #1048576	; 0x100000
    4898:	3a00000f 	bcc	48dc <__adddf3+0x138>
    489c:	e3510602 	cmp	r1, #2097152	; 0x200000
    48a0:	3a000006 	bcc	48c0 <__adddf3+0x11c>
    48a4:	e1b010a1 	lsrs	r1, r1, #1
    48a8:	e1b00060 	rrxs	r0, r0
    48ac:	e1a0c06c 	rrx	r12, r12
    48b0:	e2844001 	add	r4, r4, #1
    48b4:	e1a02a84 	lsl	r2, r4, #21
    48b8:	e3720501 	cmn	r2, #4194304	; 0x400000
    48bc:	2a00006b 	bcs	4a70 <__adddf3+0x2cc>
    48c0:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    48c4:	01b0c0a0 	lsrseq	r12, r0, #1
    48c8:	e2b00000 	adcs	r0, r0, #0
    48cc:	e0a11a04 	adc	r1, r1, r4, lsl #20
    48d0:	e1811005 	orr	r1, r1, r5
    48d4:	e8bd4030 	pop	{r4, r5, lr}
    48d8:	e12fff1e 	bx	lr
    48dc:	e1b0c08c 	lsls	r12, r12, #1
    48e0:	e0b00000 	adcs	r0, r0, r0
    48e4:	e0a11001 	adc	r1, r1, r1
    48e8:	e3110601 	tst	r1, #1048576	; 0x100000
    48ec:	e2444001 	sub	r4, r4, #1
    48f0:	1afffff2 	bne	48c0 <__adddf3+0x11c>
    48f4:	e3310000 	teq	r1, #0
    48f8:	13a03014 	movne	r3, #20
    48fc:	03a03034 	moveq	r3, #52	; 0x34
    4900:	01a01000 	moveq	r1, r0
    4904:	03a00000 	moveq	r0, #0
    4908:	e1a02001 	mov	r2, r1
    490c:	e3520801 	cmp	r2, #65536	; 0x10000
    4910:	21a02822 	lsrcs	r2, r2, #16
    4914:	22433010 	subcs	r3, r3, #16
    4918:	e3520c01 	cmp	r2, #256	; 0x100
    491c:	21a02422 	lsrcs	r2, r2, #8
    4920:	22433008 	subcs	r3, r3, #8
    4924:	e3520010 	cmp	r2, #16
    4928:	21a02222 	lsrcs	r2, r2, #4
    492c:	22433004 	subcs	r3, r3, #4
    4930:	e3520004 	cmp	r2, #4
    4934:	22433002 	subcs	r3, r3, #2
    4938:	304330a2 	subcc	r3, r3, r2, lsr #1
    493c:	e04331a2 	sub	r3, r3, r2, lsr #3
    4940:	e2532020 	subs	r2, r3, #32
    4944:	aa000007 	bge	4968 <__adddf3+0x1c4>
    4948:	e292200c 	adds	r2, r2, #12
    494c:	da000004 	ble	4964 <__adddf3+0x1c0>
    4950:	e282c014 	add	r12, r2, #20
    4954:	e262200c 	rsb	r2, r2, #12
    4958:	e1a00c11 	lsl	r0, r1, r12
    495c:	e1a01231 	lsr	r1, r1, r2
    4960:	ea000004 	b	4978 <__adddf3+0x1d4>
    4964:	e2822014 	add	r2, r2, #20
    4968:	d262c020 	rsble	r12, r2, #32
    496c:	e1a01211 	lsl	r1, r1, r2
    4970:	d1811c30 	orrle	r1, r1, r0, lsr r12
    4974:	d1a00210 	lslle	r0, r0, r2
    4978:	e0544003 	subs	r4, r4, r3
    497c:	a0811a04 	addge	r1, r1, r4, lsl #20
    4980:	a1811005 	orrge	r1, r1, r5
    4984:	a8bd4030 	popge	{r4, r5, lr}
    4988:	a12fff1e 	bxge	lr
    498c:	e1e04004 	mvn	r4, r4
    4990:	e254401f 	subs	r4, r4, #31
    4994:	aa00000f 	bge	49d8 <__adddf3+0x234>
    4998:	e294400c 	adds	r4, r4, #12
    499c:	ca000006 	bgt	49bc <__adddf3+0x218>
    49a0:	e2844014 	add	r4, r4, #20
    49a4:	e2642020 	rsb	r2, r4, #32
    49a8:	e1a00430 	lsr	r0, r0, r4
    49ac:	e1800211 	orr	r0, r0, r1, lsl r2
    49b0:	e1851431 	orr	r1, r5, r1, lsr r4
    49b4:	e8bd4030 	pop	{r4, r5, lr}
    49b8:	e12fff1e 	bx	lr
    49bc:	e264400c 	rsb	r4, r4, #12
    49c0:	e2642020 	rsb	r2, r4, #32
    49c4:	e1a00230 	lsr	r0, r0, r2
    49c8:	e1800411 	orr	r0, r0, r1, lsl r4
    49cc:	e1a01005 	mov	r1, r5
    49d0:	e8bd4030 	pop	{r4, r5, lr}
    49d4:	e12fff1e 	bx	lr
    49d8:	e1a00431 	lsr	r0, r1, r4
    49dc:	e1a01005 	mov	r1, r5
    49e0:	e8bd4030 	pop	{r4, r5, lr}
    49e4:	e12fff1e 	bx	lr
    49e8:	e3340000 	teq	r4, #0
    49ec:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    49f0:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    49f4:	02844001 	addeq	r4, r4, #1
    49f8:	12455001 	subne	r5, r5, #1
    49fc:	eaffff8f 	b	4840 <__adddf3+0x9c>
    4a00:	e1f0cac4 	mvns	r12, r4, asr #21
    4a04:	11f0cac5 	mvnsne	r12, r5, asr #21
    4a08:	0a00001d 	beq	4a84 <__adddf3+0x2e0>
    4a0c:	e1340005 	teq	r4, r5
    4a10:	01300002 	teqeq	r0, r2
    4a14:	0a000004 	beq	4a2c <__adddf3+0x288>
    4a18:	e194c000 	orrs	r12, r4, r0
    4a1c:	01a01003 	moveq	r1, r3
    4a20:	01a00002 	moveq	r0, r2
    4a24:	e8bd4030 	pop	{r4, r5, lr}
    4a28:	e12fff1e 	bx	lr
    4a2c:	e1310003 	teq	r1, r3
    4a30:	13a01000 	movne	r1, #0
    4a34:	13a00000 	movne	r0, #0
    4a38:	18bd4030 	popne	{r4, r5, lr}
    4a3c:	112fff1e 	bxne	lr
    4a40:	e1b0caa4 	lsrs	r12, r4, #21
    4a44:	1a000004 	bne	4a5c <__adddf3+0x2b8>
    4a48:	e1b00080 	lsls	r0, r0, #1
    4a4c:	e0b11001 	adcs	r1, r1, r1
    4a50:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    4a54:	e8bd4030 	pop	{r4, r5, lr}
    4a58:	e12fff1e 	bx	lr
    4a5c:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    4a60:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    4a64:	38bd4030 	popcc	{r4, r5, lr}
    4a68:	312fff1e 	bxcc	lr
    4a6c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    4a70:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    4a74:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    4a78:	e3a00000 	mov	r0, #0
    4a7c:	e8bd4030 	pop	{r4, r5, lr}
    4a80:	e12fff1e 	bx	lr
    4a84:	e1f0cac4 	mvns	r12, r4, asr #21
    4a88:	11a01003 	movne	r1, r3
    4a8c:	11a00002 	movne	r0, r2
    4a90:	01f0cac5 	mvnseq	r12, r5, asr #21
    4a94:	11a03001 	movne	r3, r1
    4a98:	11a02000 	movne	r2, r0
    4a9c:	e1904601 	orrs	r4, r0, r1, lsl #12
    4aa0:	01925603 	orrseq	r5, r2, r3, lsl #12
    4aa4:	01310003 	teqeq	r1, r3
    4aa8:	13811702 	orrne	r1, r1, #524288	; 0x80000
    4aac:	e8bd4030 	pop	{r4, r5, lr}
    4ab0:	e12fff1e 	bx	lr

00004ab4 <__aeabi_ui2d>:
    4ab4:	e3300000 	teq	r0, #0
    4ab8:	03a01000 	moveq	r1, #0
    4abc:	012fff1e 	bxeq	lr
    4ac0:	e92d4030 	push	{r4, r5, lr}
    4ac4:	e3a04b01 	mov	r4, #1024	; 0x400
    4ac8:	e2844032 	add	r4, r4, #50	; 0x32
    4acc:	e3a05000 	mov	r5, #0
    4ad0:	e3a01000 	mov	r1, #0
    4ad4:	eaffff86 	b	48f4 <__adddf3+0x150>

00004ad8 <__aeabi_i2d>:
    4ad8:	e3300000 	teq	r0, #0
    4adc:	03a01000 	moveq	r1, #0
    4ae0:	012fff1e 	bxeq	lr
    4ae4:	e92d4030 	push	{r4, r5, lr}
    4ae8:	e3a04b01 	mov	r4, #1024	; 0x400
    4aec:	e2844032 	add	r4, r4, #50	; 0x32
    4af0:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    4af4:	42600000 	rsbmi	r0, r0, #0
    4af8:	e3a01000 	mov	r1, #0
    4afc:	eaffff7c 	b	48f4 <__adddf3+0x150>

00004b00 <__aeabi_f2d>:
    4b00:	e1b02080 	lsls	r2, r0, #1
    4b04:	e1a011c2 	asr	r1, r2, #3
    4b08:	e1a01061 	rrx	r1, r1
    4b0c:	e1a00e02 	lsl	r0, r2, #28
    4b10:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    4b14:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    4b18:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    4b1c:	112fff1e 	bxne	lr
    4b20:	e3320000 	teq	r2, #0
    4b24:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    4b28:	012fff1e 	bxeq	lr
    4b2c:	e92d4030 	push	{r4, r5, lr}
    4b30:	e3a04d0e 	mov	r4, #896	; 0x380
    4b34:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    4b38:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    4b3c:	eaffff6c 	b	48f4 <__adddf3+0x150>

00004b40 <__aeabi_ul2d>:
    4b40:	e1902001 	orrs	r2, r0, r1
    4b44:	012fff1e 	bxeq	lr
    4b48:	e92d4030 	push	{r4, r5, lr}
    4b4c:	e3a05000 	mov	r5, #0
    4b50:	ea000006 	b	4b70 <__aeabi_l2d+0x1c>

00004b54 <__aeabi_l2d>:
    4b54:	e1902001 	orrs	r2, r0, r1
    4b58:	012fff1e 	bxeq	lr
    4b5c:	e92d4030 	push	{r4, r5, lr}
    4b60:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    4b64:	5a000001 	bpl	4b70 <__aeabi_l2d+0x1c>
    4b68:	e2700000 	rsbs	r0, r0, #0
    4b6c:	e2e11000 	rsc	r1, r1, #0
    4b70:	e3a04b01 	mov	r4, #1024	; 0x400
    4b74:	e2844032 	add	r4, r4, #50	; 0x32
    4b78:	e1b0cb21 	lsrs	r12, r1, #22
    4b7c:	0affff44 	beq	4894 <__adddf3+0xf0>
    4b80:	e3a02003 	mov	r2, #3
    4b84:	e1b0c1ac 	lsrs	r12, r12, #3
    4b88:	12822003 	addne	r2, r2, #3
    4b8c:	e1b0c1ac 	lsrs	r12, r12, #3
    4b90:	12822003 	addne	r2, r2, #3
    4b94:	e08221ac 	add	r2, r2, r12, lsr #3
    4b98:	e2623020 	rsb	r3, r2, #32
    4b9c:	e1a0c310 	lsl	r12, r0, r3
    4ba0:	e1a00230 	lsr	r0, r0, r2
    4ba4:	e1800311 	orr	r0, r0, r1, lsl r3
    4ba8:	e1a01231 	lsr	r1, r1, r2
    4bac:	e0844002 	add	r4, r4, r2
    4bb0:	eaffff37 	b	4894 <__adddf3+0xf0>

00004bb4 <__aeabi_dmul>:
    4bb4:	e92d4070 	push	{r4, r5, r6, lr}
    4bb8:	e3a0c0ff 	mov	r12, #255	; 0xff
    4bbc:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    4bc0:	e01c4a21 	ands	r4, r12, r1, lsr #20
    4bc4:	101c5a23 	andsne	r5, r12, r3, lsr #20
    4bc8:	1134000c 	teqne	r4, r12
    4bcc:	1135000c 	teqne	r5, r12
    4bd0:	0b000075 	bleq	4dac <__aeabi_dmul+0x1f8>
    4bd4:	e0844005 	add	r4, r4, r5
    4bd8:	e0216003 	eor	r6, r1, r3
    4bdc:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    4be0:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    4be4:	e1905601 	orrs	r5, r0, r1, lsl #12
    4be8:	11925603 	orrsne	r5, r2, r3, lsl #12
    4bec:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    4bf0:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    4bf4:	0a00001d 	beq	4c70 <__aeabi_dmul+0xbc>
    4bf8:	e08ec290 	umull	r12, lr, r0, r2
    4bfc:	e3a05000 	mov	r5, #0
    4c00:	e0a5e291 	umlal	lr, r5, r1, r2
    4c04:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    4c08:	e0a5e390 	umlal	lr, r5, r0, r3
    4c0c:	e3a06000 	mov	r6, #0
    4c10:	e0a65391 	umlal	r5, r6, r1, r3
    4c14:	e33c0000 	teq	r12, #0
    4c18:	138ee001 	orrne	lr, lr, #1
    4c1c:	e24440ff 	sub	r4, r4, #255	; 0xff
    4c20:	e3560c02 	cmp	r6, #512	; 0x200
    4c24:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    4c28:	2a000002 	bcs	4c38 <__aeabi_dmul+0x84>
    4c2c:	e1b0e08e 	lsls	lr, lr, #1
    4c30:	e0b55005 	adcs	r5, r5, r5
    4c34:	e0a66006 	adc	r6, r6, r6
    4c38:	e1821586 	orr	r1, r2, r6, lsl #11
    4c3c:	e1811aa5 	orr	r1, r1, r5, lsr #21
    4c40:	e1a00585 	lsl	r0, r5, #11
    4c44:	e1800aae 	orr	r0, r0, lr, lsr #21
    4c48:	e1a0e58e 	lsl	lr, lr, #11
    4c4c:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    4c50:	835c0c07 	cmphi	r12, #1792	; 0x700
    4c54:	8a000011 	bhi	4ca0 <__aeabi_dmul+0xec>
    4c58:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    4c5c:	01b0e0a0 	lsrseq	lr, r0, #1
    4c60:	e2b00000 	adcs	r0, r0, #0
    4c64:	e0a11a04 	adc	r1, r1, r4, lsl #20
    4c68:	e8bd4070 	pop	{r4, r5, r6, lr}
    4c6c:	e12fff1e 	bx	lr
    4c70:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    4c74:	e1861001 	orr	r1, r6, r1
    4c78:	e1800002 	orr	r0, r0, r2
    4c7c:	e0211003 	eor	r1, r1, r3
    4c80:	e05440ac 	subs	r4, r4, r12, lsr #1
    4c84:	c074500c 	rsbsgt	r5, r4, r12
    4c88:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    4c8c:	c8bd4070 	popgt	{r4, r5, r6, lr}
    4c90:	c12fff1e 	bxgt	lr
    4c94:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    4c98:	e3a0e000 	mov	lr, #0
    4c9c:	e2544001 	subs	r4, r4, #1
    4ca0:	ca00005d 	bgt	4e1c <__aeabi_dmul+0x268>
    4ca4:	e3740036 	cmn	r4, #54	; 0x36
    4ca8:	d3a00000 	movle	r0, #0
    4cac:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    4cb0:	d8bd4070 	pople	{r4, r5, r6, lr}
    4cb4:	d12fff1e 	bxle	lr
    4cb8:	e2644000 	rsb	r4, r4, #0
    4cbc:	e2544020 	subs	r4, r4, #32
    4cc0:	aa00001a 	bge	4d30 <__aeabi_dmul+0x17c>
    4cc4:	e294400c 	adds	r4, r4, #12
    4cc8:	ca00000c 	bgt	4d00 <__aeabi_dmul+0x14c>
    4ccc:	e2844014 	add	r4, r4, #20
    4cd0:	e2645020 	rsb	r5, r4, #32
    4cd4:	e1a03510 	lsl	r3, r0, r5
    4cd8:	e1a00430 	lsr	r0, r0, r4
    4cdc:	e1800511 	orr	r0, r0, r1, lsl r5
    4ce0:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    4ce4:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    4ce8:	e0900fa3 	adds	r0, r0, r3, lsr #31
    4cec:	e0a21431 	adc	r1, r2, r1, lsr r4
    4cf0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    4cf4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    4cf8:	e8bd4070 	pop	{r4, r5, r6, lr}
    4cfc:	e12fff1e 	bx	lr
    4d00:	e264400c 	rsb	r4, r4, #12
    4d04:	e2645020 	rsb	r5, r4, #32
    4d08:	e1a03410 	lsl	r3, r0, r4
    4d0c:	e1a00530 	lsr	r0, r0, r5
    4d10:	e1800411 	orr	r0, r0, r1, lsl r4
    4d14:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    4d18:	e0900fa3 	adds	r0, r0, r3, lsr #31
    4d1c:	e2a11000 	adc	r1, r1, #0
    4d20:	e19ee083 	orrs	lr, lr, r3, lsl #1
    4d24:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    4d28:	e8bd4070 	pop	{r4, r5, r6, lr}
    4d2c:	e12fff1e 	bx	lr
    4d30:	e2645020 	rsb	r5, r4, #32
    4d34:	e18ee510 	orr	lr, lr, r0, lsl r5
    4d38:	e1a03430 	lsr	r3, r0, r4
    4d3c:	e1833511 	orr	r3, r3, r1, lsl r5
    4d40:	e1a00431 	lsr	r0, r1, r4
    4d44:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    4d48:	e1c00431 	bic	r0, r0, r1, lsr r4
    4d4c:	e0800fa3 	add	r0, r0, r3, lsr #31
    4d50:	e19ee083 	orrs	lr, lr, r3, lsl #1
    4d54:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    4d58:	e8bd4070 	pop	{r4, r5, r6, lr}
    4d5c:	e12fff1e 	bx	lr
    4d60:	e3340000 	teq	r4, #0
    4d64:	1a000008 	bne	4d8c <__aeabi_dmul+0x1d8>
    4d68:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    4d6c:	e1b00080 	lsls	r0, r0, #1
    4d70:	e0a11001 	adc	r1, r1, r1
    4d74:	e3110601 	tst	r1, #1048576	; 0x100000
    4d78:	02444001 	subeq	r4, r4, #1
    4d7c:	0afffffa 	beq	4d6c <__aeabi_dmul+0x1b8>
    4d80:	e1811006 	orr	r1, r1, r6
    4d84:	e3350000 	teq	r5, #0
    4d88:	112fff1e 	bxne	lr
    4d8c:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    4d90:	e1b02082 	lsls	r2, r2, #1
    4d94:	e0a33003 	adc	r3, r3, r3
    4d98:	e3130601 	tst	r3, #1048576	; 0x100000
    4d9c:	02455001 	subeq	r5, r5, #1
    4da0:	0afffffa 	beq	4d90 <__aeabi_dmul+0x1dc>
    4da4:	e1833006 	orr	r3, r3, r6
    4da8:	e12fff1e 	bx	lr
    4dac:	e134000c 	teq	r4, r12
    4db0:	e00c5a23 	and	r5, r12, r3, lsr #20
    4db4:	1135000c 	teqne	r5, r12
    4db8:	0a000007 	beq	4ddc <__aeabi_dmul+0x228>
    4dbc:	e1906081 	orrs	r6, r0, r1, lsl #1
    4dc0:	11926083 	orrsne	r6, r2, r3, lsl #1
    4dc4:	1affffe5 	bne	4d60 <__aeabi_dmul+0x1ac>
    4dc8:	e0211003 	eor	r1, r1, r3
    4dcc:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    4dd0:	e3a00000 	mov	r0, #0
    4dd4:	e8bd4070 	pop	{r4, r5, r6, lr}
    4dd8:	e12fff1e 	bx	lr
    4ddc:	e1906081 	orrs	r6, r0, r1, lsl #1
    4de0:	01a00002 	moveq	r0, r2
    4de4:	01a01003 	moveq	r1, r3
    4de8:	11926083 	orrsne	r6, r2, r3, lsl #1
    4dec:	0a000010 	beq	4e34 <__aeabi_dmul+0x280>
    4df0:	e134000c 	teq	r4, r12
    4df4:	1a000001 	bne	4e00 <__aeabi_dmul+0x24c>
    4df8:	e1906601 	orrs	r6, r0, r1, lsl #12
    4dfc:	1a00000c 	bne	4e34 <__aeabi_dmul+0x280>
    4e00:	e135000c 	teq	r5, r12
    4e04:	1a000003 	bne	4e18 <__aeabi_dmul+0x264>
    4e08:	e1926603 	orrs	r6, r2, r3, lsl #12
    4e0c:	11a00002 	movne	r0, r2
    4e10:	11a01003 	movne	r1, r3
    4e14:	1a000006 	bne	4e34 <__aeabi_dmul+0x280>
    4e18:	e0211003 	eor	r1, r1, r3
    4e1c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    4e20:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    4e24:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    4e28:	e3a00000 	mov	r0, #0
    4e2c:	e8bd4070 	pop	{r4, r5, r6, lr}
    4e30:	e12fff1e 	bx	lr
    4e34:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    4e38:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    4e3c:	e8bd4070 	pop	{r4, r5, r6, lr}
    4e40:	e12fff1e 	bx	lr

00004e44 <__aeabi_ddiv>:
    4e44:	e92d4070 	push	{r4, r5, r6, lr}
    4e48:	e3a0c0ff 	mov	r12, #255	; 0xff
    4e4c:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    4e50:	e01c4a21 	ands	r4, r12, r1, lsr #20
    4e54:	101c5a23 	andsne	r5, r12, r3, lsr #20
    4e58:	1134000c 	teqne	r4, r12
    4e5c:	1135000c 	teqne	r5, r12
    4e60:	0b00005e 	bleq	4fe0 <__aeabi_ddiv+0x19c>
    4e64:	e0444005 	sub	r4, r4, r5
    4e68:	e021e003 	eor	lr, r1, r3
    4e6c:	e1925603 	orrs	r5, r2, r3, lsl #12
    4e70:	e1a01601 	lsl	r1, r1, #12
    4e74:	0a00004c 	beq	4fac <__aeabi_ddiv+0x168>
    4e78:	e1a03603 	lsl	r3, r3, #12
    4e7c:	e3a05201 	mov	r5, #268435456	; 0x10000000
    4e80:	e1853223 	orr	r3, r5, r3, lsr #4
    4e84:	e1833c22 	orr	r3, r3, r2, lsr #24
    4e88:	e1a02402 	lsl	r2, r2, #8
    4e8c:	e1855221 	orr	r5, r5, r1, lsr #4
    4e90:	e1855c20 	orr	r5, r5, r0, lsr #24
    4e94:	e1a06400 	lsl	r6, r0, #8
    4e98:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    4e9c:	e1550003 	cmp	r5, r3
    4ea0:	01560002 	cmpeq	r6, r2
    4ea4:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    4ea8:	e2844c03 	add	r4, r4, #768	; 0x300
    4eac:	2a000001 	bcs	4eb8 <__aeabi_ddiv+0x74>
    4eb0:	e1b030a3 	lsrs	r3, r3, #1
    4eb4:	e1a02062 	rrx	r2, r2
    4eb8:	e0566002 	subs	r6, r6, r2
    4ebc:	e0c55003 	sbc	r5, r5, r3
    4ec0:	e1b030a3 	lsrs	r3, r3, #1
    4ec4:	e1a02062 	rrx	r2, r2
    4ec8:	e3a00601 	mov	r0, #1048576	; 0x100000
    4ecc:	e3a0c702 	mov	r12, #524288	; 0x80000
    4ed0:	e056e002 	subs	lr, r6, r2
    4ed4:	e0d5e003 	sbcs	lr, r5, r3
    4ed8:	20466002 	subcs	r6, r6, r2
    4edc:	21a0500e 	movcs	r5, lr
    4ee0:	2180000c 	orrcs	r0, r0, r12
    4ee4:	e1b030a3 	lsrs	r3, r3, #1
    4ee8:	e1a02062 	rrx	r2, r2
    4eec:	e056e002 	subs	lr, r6, r2
    4ef0:	e0d5e003 	sbcs	lr, r5, r3
    4ef4:	20466002 	subcs	r6, r6, r2
    4ef8:	21a0500e 	movcs	r5, lr
    4efc:	218000ac 	orrcs	r0, r0, r12, lsr #1
    4f00:	e1b030a3 	lsrs	r3, r3, #1
    4f04:	e1a02062 	rrx	r2, r2
    4f08:	e056e002 	subs	lr, r6, r2
    4f0c:	e0d5e003 	sbcs	lr, r5, r3
    4f10:	20466002 	subcs	r6, r6, r2
    4f14:	21a0500e 	movcs	r5, lr
    4f18:	2180012c 	orrcs	r0, r0, r12, lsr #2
    4f1c:	e1b030a3 	lsrs	r3, r3, #1
    4f20:	e1a02062 	rrx	r2, r2
    4f24:	e056e002 	subs	lr, r6, r2
    4f28:	e0d5e003 	sbcs	lr, r5, r3
    4f2c:	20466002 	subcs	r6, r6, r2
    4f30:	21a0500e 	movcs	r5, lr
    4f34:	218001ac 	orrcs	r0, r0, r12, lsr #3
    4f38:	e195e006 	orrs	lr, r5, r6
    4f3c:	0a00000d 	beq	4f78 <__aeabi_ddiv+0x134>
    4f40:	e1a05205 	lsl	r5, r5, #4
    4f44:	e1855e26 	orr	r5, r5, r6, lsr #28
    4f48:	e1a06206 	lsl	r6, r6, #4
    4f4c:	e1a03183 	lsl	r3, r3, #3
    4f50:	e1833ea2 	orr	r3, r3, r2, lsr #29
    4f54:	e1a02182 	lsl	r2, r2, #3
    4f58:	e1b0c22c 	lsrs	r12, r12, #4
    4f5c:	1affffdb 	bne	4ed0 <__aeabi_ddiv+0x8c>
    4f60:	e3110601 	tst	r1, #1048576	; 0x100000
    4f64:	1a000006 	bne	4f84 <__aeabi_ddiv+0x140>
    4f68:	e1811000 	orr	r1, r1, r0
    4f6c:	e3a00000 	mov	r0, #0
    4f70:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    4f74:	eaffffd5 	b	4ed0 <__aeabi_ddiv+0x8c>
    4f78:	e3110601 	tst	r1, #1048576	; 0x100000
    4f7c:	01811000 	orreq	r1, r1, r0
    4f80:	03a00000 	moveq	r0, #0
    4f84:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    4f88:	835c0c07 	cmphi	r12, #1792	; 0x700
    4f8c:	8affff43 	bhi	4ca0 <__aeabi_dmul+0xec>
    4f90:	e055c003 	subs	r12, r5, r3
    4f94:	0056c002 	subseq	r12, r6, r2
    4f98:	01b0c0a0 	lsrseq	r12, r0, #1
    4f9c:	e2b00000 	adcs	r0, r0, #0
    4fa0:	e0a11a04 	adc	r1, r1, r4, lsl #20
    4fa4:	e8bd4070 	pop	{r4, r5, r6, lr}
    4fa8:	e12fff1e 	bx	lr
    4fac:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    4fb0:	e18e1621 	orr	r1, lr, r1, lsr #12
    4fb4:	e09440ac 	adds	r4, r4, r12, lsr #1
    4fb8:	c074500c 	rsbsgt	r5, r4, r12
    4fbc:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    4fc0:	c8bd4070 	popgt	{r4, r5, r6, lr}
    4fc4:	c12fff1e 	bxgt	lr
    4fc8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    4fcc:	e3a0e000 	mov	lr, #0
    4fd0:	e2544001 	subs	r4, r4, #1
    4fd4:	eaffff31 	b	4ca0 <__aeabi_dmul+0xec>
    4fd8:	e185e006 	orr	lr, r5, r6
    4fdc:	eaffff2f 	b	4ca0 <__aeabi_dmul+0xec>
    4fe0:	e00c5a23 	and	r5, r12, r3, lsr #20
    4fe4:	e134000c 	teq	r4, r12
    4fe8:	0135000c 	teqeq	r5, r12
    4fec:	0affff90 	beq	4e34 <__aeabi_dmul+0x280>
    4ff0:	e134000c 	teq	r4, r12
    4ff4:	1a000006 	bne	5014 <__aeabi_ddiv+0x1d0>
    4ff8:	e1904601 	orrs	r4, r0, r1, lsl #12
    4ffc:	1affff8c 	bne	4e34 <__aeabi_dmul+0x280>
    5000:	e135000c 	teq	r5, r12
    5004:	1affff83 	bne	4e18 <__aeabi_dmul+0x264>
    5008:	e1a00002 	mov	r0, r2
    500c:	e1a01003 	mov	r1, r3
    5010:	eaffff87 	b	4e34 <__aeabi_dmul+0x280>
    5014:	e135000c 	teq	r5, r12
    5018:	1a000004 	bne	5030 <__aeabi_ddiv+0x1ec>
    501c:	e1925603 	orrs	r5, r2, r3, lsl #12
    5020:	0affff68 	beq	4dc8 <__aeabi_dmul+0x214>
    5024:	e1a00002 	mov	r0, r2
    5028:	e1a01003 	mov	r1, r3
    502c:	eaffff80 	b	4e34 <__aeabi_dmul+0x280>
    5030:	e1906081 	orrs	r6, r0, r1, lsl #1
    5034:	11926083 	orrsne	r6, r2, r3, lsl #1
    5038:	1affff48 	bne	4d60 <__aeabi_dmul+0x1ac>
    503c:	e1904081 	orrs	r4, r0, r1, lsl #1
    5040:	1affff74 	bne	4e18 <__aeabi_dmul+0x264>
    5044:	e1925083 	orrs	r5, r2, r3, lsl #1
    5048:	1affff5e 	bne	4dc8 <__aeabi_dmul+0x214>
    504c:	eaffff78 	b	4e34 <__aeabi_dmul+0x280>

00005050 <__gedf2>:
    5050:	e3e0c000 	mvn	r12, #0
    5054:	ea000002 	b	5064 <__cmpdf2+0x4>

00005058 <__ledf2>:
    5058:	e3a0c001 	mov	r12, #1
    505c:	ea000000 	b	5064 <__cmpdf2+0x4>

00005060 <__cmpdf2>:
    5060:	e3a0c001 	mov	r12, #1
    5064:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    5068:	e1a0c081 	lsl	r12, r1, #1
    506c:	e1f0cacc 	mvns	r12, r12, asr #21
    5070:	e1a0c083 	lsl	r12, r3, #1
    5074:	11f0cacc 	mvnsne	r12, r12, asr #21
    5078:	0a00000e 	beq	50b8 <__cmpdf2+0x58>
    507c:	e28dd004 	add	sp, sp, #4
    5080:	e190c081 	orrs	r12, r0, r1, lsl #1
    5084:	0192c083 	orrseq	r12, r2, r3, lsl #1
    5088:	11310003 	teqne	r1, r3
    508c:	01300002 	teqeq	r0, r2
    5090:	03a00000 	moveq	r0, #0
    5094:	012fff1e 	bxeq	lr
    5098:	e3700000 	cmn	r0, #0
    509c:	e1310003 	teq	r1, r3
    50a0:	51510003 	cmppl	r1, r3
    50a4:	01500002 	cmpeq	r0, r2
    50a8:	21a00fc3 	asrcs	r0, r3, #31
    50ac:	31e00fc3 	mvncc	r0, r3, asr #31
    50b0:	e3800001 	orr	r0, r0, #1
    50b4:	e12fff1e 	bx	lr
    50b8:	e1a0c081 	lsl	r12, r1, #1
    50bc:	e1f0cacc 	mvns	r12, r12, asr #21
    50c0:	1a000001 	bne	50cc <__cmpdf2+0x6c>
    50c4:	e190c601 	orrs	r12, r0, r1, lsl #12
    50c8:	1a000004 	bne	50e0 <__cmpdf2+0x80>
    50cc:	e1a0c083 	lsl	r12, r3, #1
    50d0:	e1f0cacc 	mvns	r12, r12, asr #21
    50d4:	1affffe8 	bne	507c <__cmpdf2+0x1c>
    50d8:	e192c603 	orrs	r12, r2, r3, lsl #12
    50dc:	0affffe6 	beq	507c <__cmpdf2+0x1c>
    50e0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    50e4:	e12fff1e 	bx	lr

000050e8 <__aeabi_cdrcmple>:
    50e8:	e1a0c000 	mov	r12, r0
    50ec:	e1a00002 	mov	r0, r2
    50f0:	e1a0200c 	mov	r2, r12
    50f4:	e1a0c001 	mov	r12, r1
    50f8:	e1a01003 	mov	r1, r3
    50fc:	e1a0300c 	mov	r3, r12
    5100:	eaffffff 	b	5104 <__aeabi_cdcmpeq>

00005104 <__aeabi_cdcmpeq>:
    5104:	e92d4001 	push	{r0, lr}
    5108:	ebffffd4 	bl	5060 <__cmpdf2>
    510c:	e3500000 	cmp	r0, #0
    5110:	43700000 	cmnmi	r0, #0
    5114:	e8bd4001 	pop	{r0, lr}
    5118:	e12fff1e 	bx	lr

0000511c <__aeabi_dcmpeq>:
    511c:	e52de008 	str	lr, [sp, #-8]!
    5120:	ebfffff7 	bl	5104 <__aeabi_cdcmpeq>
    5124:	03a00001 	moveq	r0, #1
    5128:	13a00000 	movne	r0, #0
    512c:	e49de008 	ldr	lr, [sp], #8
    5130:	e12fff1e 	bx	lr

00005134 <__aeabi_dcmplt>:
    5134:	e52de008 	str	lr, [sp, #-8]!
    5138:	ebfffff1 	bl	5104 <__aeabi_cdcmpeq>
    513c:	33a00001 	movcc	r0, #1
    5140:	23a00000 	movcs	r0, #0
    5144:	e49de008 	ldr	lr, [sp], #8
    5148:	e12fff1e 	bx	lr

0000514c <__aeabi_dcmple>:
    514c:	e52de008 	str	lr, [sp, #-8]!
    5150:	ebffffeb 	bl	5104 <__aeabi_cdcmpeq>
    5154:	93a00001 	movls	r0, #1
    5158:	83a00000 	movhi	r0, #0
    515c:	e49de008 	ldr	lr, [sp], #8
    5160:	e12fff1e 	bx	lr

00005164 <__aeabi_dcmpge>:
    5164:	e52de008 	str	lr, [sp, #-8]!
    5168:	ebffffde 	bl	50e8 <__aeabi_cdrcmple>
    516c:	93a00001 	movls	r0, #1
    5170:	83a00000 	movhi	r0, #0
    5174:	e49de008 	ldr	lr, [sp], #8
    5178:	e12fff1e 	bx	lr

0000517c <__aeabi_dcmpgt>:
    517c:	e52de008 	str	lr, [sp, #-8]!
    5180:	ebffffd8 	bl	50e8 <__aeabi_cdrcmple>
    5184:	33a00001 	movcc	r0, #1
    5188:	23a00000 	movcs	r0, #0
    518c:	e49de008 	ldr	lr, [sp], #8
    5190:	e12fff1e 	bx	lr

00005194 <__aeabi_d2iz>:
    5194:	e1a02081 	lsl	r2, r1, #1
    5198:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    519c:	2a00000c 	bcs	51d4 <__aeabi_d2iz+0x40>
    51a0:	5a000009 	bpl	51cc <__aeabi_d2iz+0x38>
    51a4:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    51a8:	e0532ac2 	subs	r2, r3, r2, asr #21
    51ac:	9a00000a 	bls	51dc <__aeabi_d2iz+0x48>
    51b0:	e1a03581 	lsl	r3, r1, #11
    51b4:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    51b8:	e1833aa0 	orr	r3, r3, r0, lsr #21
    51bc:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    51c0:	e1a00233 	lsr	r0, r3, r2
    51c4:	12600000 	rsbne	r0, r0, #0
    51c8:	e12fff1e 	bx	lr
    51cc:	e3a00000 	mov	r0, #0
    51d0:	e12fff1e 	bx	lr
    51d4:	e1900601 	orrs	r0, r0, r1, lsl #12
    51d8:	1a000002 	bne	51e8 <__aeabi_d2iz+0x54>
    51dc:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    51e0:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    51e4:	e12fff1e 	bx	lr
    51e8:	e3a00000 	mov	r0, #0
    51ec:	e12fff1e 	bx	lr

000051f0 <__aeabi_d2uiz>:
    51f0:	e1b02081 	lsls	r2, r1, #1
    51f4:	2a00000a 	bcs	5224 <__aeabi_d2uiz+0x34>
    51f8:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    51fc:	2a00000a 	bcs	522c <__aeabi_d2uiz+0x3c>
    5200:	5a000007 	bpl	5224 <__aeabi_d2uiz+0x34>
    5204:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    5208:	e0532ac2 	subs	r2, r3, r2, asr #21
    520c:	4a000008 	bmi	5234 <__aeabi_d2uiz+0x44>
    5210:	e1a03581 	lsl	r3, r1, #11
    5214:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    5218:	e1833aa0 	orr	r3, r3, r0, lsr #21
    521c:	e1a00233 	lsr	r0, r3, r2
    5220:	e12fff1e 	bx	lr
    5224:	e3a00000 	mov	r0, #0
    5228:	e12fff1e 	bx	lr
    522c:	e1900601 	orrs	r0, r0, r1, lsl #12
    5230:	1a000001 	bne	523c <__aeabi_d2uiz+0x4c>
    5234:	e3e00000 	mvn	r0, #0
    5238:	e12fff1e 	bx	lr
    523c:	e3a00000 	mov	r0, #0
    5240:	e12fff1e 	bx	lr

00005244 <atexit>:
    5244:	e1a01000 	mov	r1, r0
    5248:	e3a00000 	mov	r0, #0
    524c:	e92d4008 	push	{r3, lr}
    5250:	e1a02000 	mov	r2, r0
    5254:	e1a03000 	mov	r3, r0
    5258:	eb000287 	bl	5c7c <__register_exitproc>
    525c:	e8bd4008 	pop	{r3, lr}
    5260:	e12fff1e 	bx	lr

00005264 <__errno>:
    5264:	e59f3004 	ldr	r3, [pc, #4]	; 5270 <__errno+0xc>
    5268:	e5930000 	ldr	r0, [r3]
    526c:	e12fff1e 	bx	lr
    5270:	00006980 	.word	0x00006980

00005274 <exit>:
    5274:	e92d4008 	push	{r3, lr}
    5278:	e3a01000 	mov	r1, #0
    527c:	e1a04000 	mov	r4, r0
    5280:	eb0002ba 	bl	5d70 <__call_exitprocs>
    5284:	e59f3018 	ldr	r3, [pc, #24]	; 52a4 <exit+0x30>
    5288:	e5930000 	ldr	r0, [r3]
    528c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    5290:	e3530000 	cmp	r3, #0
    5294:	11a0e00f 	movne	lr, pc
    5298:	112fff13 	bxne	r3
    529c:	e1a00004 	mov	r0, r4
    52a0:	eb00047f 	bl	64a4 <_exit>
    52a4:	00006870 	.word	0x00006870

000052a8 <malloc>:
    52a8:	e92d4008 	push	{r3, lr}
    52ac:	e59f3010 	ldr	r3, [pc, #16]	; 52c4 <malloc+0x1c>
    52b0:	e1a01000 	mov	r1, r0
    52b4:	e5930000 	ldr	r0, [r3]
    52b8:	eb00000a 	bl	52e8 <_malloc_r>
    52bc:	e8bd4008 	pop	{r3, lr}
    52c0:	e12fff1e 	bx	lr
    52c4:	00006980 	.word	0x00006980

000052c8 <free>:
    52c8:	e92d4008 	push	{r3, lr}
    52cc:	e59f3010 	ldr	r3, [pc, #16]	; 52e4 <free+0x1c>
    52d0:	e1a01000 	mov	r1, r0
    52d4:	e5930000 	ldr	r0, [r3]
    52d8:	eb00035c 	bl	6050 <_free_r>
    52dc:	e8bd4008 	pop	{r3, lr}
    52e0:	e12fff1e 	bx	lr
    52e4:	00006980 	.word	0x00006980

000052e8 <_malloc_r>:
    52e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    52ec:	e281500b 	add	r5, r1, #11
    52f0:	e3550016 	cmp	r5, #22
    52f4:	83c55007 	bichi	r5, r5, #7
    52f8:	81a03fa5 	lsrhi	r3, r5, #31
    52fc:	93a03000 	movls	r3, #0
    5300:	93a05010 	movls	r5, #16
    5304:	e1550001 	cmp	r5, r1
    5308:	21a01003 	movcs	r1, r3
    530c:	33831001 	orrcc	r1, r3, #1
    5310:	e3510000 	cmp	r1, #0
    5314:	13a0300c 	movne	r3, #12
    5318:	e24dd00c 	sub	sp, sp, #12
    531c:	e1a06000 	mov	r6, r0
    5320:	15803000 	strne	r3, [r0]
    5324:	13a04000 	movne	r4, #0
    5328:	1a000015 	bne	5384 <_malloc_r+0x9c>
    532c:	eb0001b4 	bl	5a04 <__malloc_lock>
    5330:	e3550f7e 	cmp	r5, #504	; 0x1f8
    5334:	2a000016 	bcs	5394 <_malloc_r+0xac>
    5338:	e59f76b8 	ldr	r7, [pc, #1720]	; 59f8 <_malloc_r+0x710>
    533c:	e1a0e1a5 	lsr	lr, r5, #3
    5340:	e087318e 	add	r3, r7, lr, lsl #3
    5344:	e593400c 	ldr	r4, [r3, #12]
    5348:	e1540003 	cmp	r4, r3
    534c:	0a00014b 	beq	5880 <_malloc_r+0x598>
    5350:	e5943004 	ldr	r3, [r4, #4]
    5354:	e3c33003 	bic	r3, r3, #3
    5358:	e0843003 	add	r3, r4, r3
    535c:	e5930004 	ldr	r0, [r3, #4]
    5360:	e2841008 	add	r1, r4, #8
    5364:	e8910006 	ldm	r1, {r1, r2}
    5368:	e3800001 	orr	r0, r0, #1
    536c:	e5830004 	str	r0, [r3, #4]
    5370:	e581200c 	str	r2, [r1, #12]
    5374:	e5821008 	str	r1, [r2, #8]
    5378:	e1a00006 	mov	r0, r6
    537c:	eb0001a1 	bl	5a08 <__malloc_unlock>
    5380:	e2844008 	add	r4, r4, #8
    5384:	e1a00004 	mov	r0, r4
    5388:	e28dd00c 	add	sp, sp, #12
    538c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    5390:	e12fff1e 	bx	lr
    5394:	e1b0e4a5 	lsrs	lr, r5, #9
    5398:	01a0e1a5 	lsreq	lr, r5, #3
    539c:	01a0108e 	lsleq	r1, lr, #1
    53a0:	1a000061 	bne	552c <_malloc_r+0x244>
    53a4:	e59f764c 	ldr	r7, [pc, #1612]	; 59f8 <_malloc_r+0x710>
    53a8:	e0871101 	add	r1, r7, r1, lsl #2
    53ac:	e591400c 	ldr	r4, [r1, #12]
    53b0:	e1510004 	cmp	r1, r4
    53b4:	1a000005 	bne	53d0 <_malloc_r+0xe8>
    53b8:	ea00000a 	b	53e8 <_malloc_r+0x100>
    53bc:	e3530000 	cmp	r3, #0
    53c0:	aa0000d7 	bge	5724 <_malloc_r+0x43c>
    53c4:	e594400c 	ldr	r4, [r4, #12]
    53c8:	e1510004 	cmp	r1, r4
    53cc:	0a000005 	beq	53e8 <_malloc_r+0x100>
    53d0:	e5942004 	ldr	r2, [r4, #4]
    53d4:	e3c22003 	bic	r2, r2, #3
    53d8:	e0653002 	rsb	r3, r5, r2
    53dc:	e353000f 	cmp	r3, #15
    53e0:	dafffff5 	ble	53bc <_malloc_r+0xd4>
    53e4:	e24ee001 	sub	lr, lr, #1
    53e8:	e28ee001 	add	lr, lr, #1
    53ec:	e59f3604 	ldr	r3, [pc, #1540]	; 59f8 <_malloc_r+0x710>
    53f0:	e5974010 	ldr	r4, [r7, #16]
    53f4:	e2838008 	add	r8, r3, #8
    53f8:	e1540008 	cmp	r4, r8
    53fc:	05931004 	ldreq	r1, [r3, #4]
    5400:	0a000016 	beq	5460 <_malloc_r+0x178>
    5404:	e5942004 	ldr	r2, [r4, #4]
    5408:	e3c22003 	bic	r2, r2, #3
    540c:	e0651002 	rsb	r1, r5, r2
    5410:	e351000f 	cmp	r1, #15
    5414:	ca0000f7 	bgt	57f8 <_malloc_r+0x510>
    5418:	e3510000 	cmp	r1, #0
    541c:	e5838014 	str	r8, [r3, #20]
    5420:	e5838010 	str	r8, [r3, #16]
    5424:	aa000046 	bge	5544 <_malloc_r+0x25c>
    5428:	e3520c02 	cmp	r2, #512	; 0x200
    542c:	2a0000d2 	bcs	577c <_malloc_r+0x494>
    5430:	e5930004 	ldr	r0, [r3, #4]
    5434:	e1a021a2 	lsr	r2, r2, #3
    5438:	e1a01142 	asr	r1, r2, #2
    543c:	e3a0c001 	mov	r12, #1
    5440:	e180111c 	orr	r1, r0, r12, lsl r1
    5444:	e0832182 	add	r2, r3, r2, lsl #3
    5448:	e5920008 	ldr	r0, [r2, #8]
    544c:	e584200c 	str	r2, [r4, #12]
    5450:	e5840008 	str	r0, [r4, #8]
    5454:	e5831004 	str	r1, [r3, #4]
    5458:	e5824008 	str	r4, [r2, #8]
    545c:	e580400c 	str	r4, [r0, #12]
    5460:	e1a0014e 	asr	r0, lr, #2
    5464:	e3a03001 	mov	r3, #1
    5468:	e1a00013 	lsl	r0, r3, r0
    546c:	e1500001 	cmp	r0, r1
    5470:	8a00003b 	bhi	5564 <_malloc_r+0x27c>
    5474:	e1110000 	tst	r1, r0
    5478:	1a000008 	bne	54a0 <_malloc_r+0x1b8>
    547c:	e1a00310 	lsl	r0, r0, r3
    5480:	e3cee003 	bic	lr, lr, #3
    5484:	e1110000 	tst	r1, r0
    5488:	e28ee004 	add	lr, lr, #4
    548c:	1a000003 	bne	54a0 <_malloc_r+0x1b8>
    5490:	e1a00080 	lsl	r0, r0, #1
    5494:	e1110000 	tst	r1, r0
    5498:	e28ee004 	add	lr, lr, #4
    549c:	0afffffb 	beq	5490 <_malloc_r+0x1a8>
    54a0:	e087a18e 	add	r10, r7, lr, lsl #3
    54a4:	e1a0c00a 	mov	r12, r10
    54a8:	e1a0400e 	mov	r4, lr
    54ac:	e59c300c 	ldr	r3, [r12, #12]
    54b0:	e15c0003 	cmp	r12, r3
    54b4:	1a000005 	bne	54d0 <_malloc_r+0x1e8>
    54b8:	ea0000db 	b	582c <_malloc_r+0x544>
    54bc:	e3520000 	cmp	r2, #0
    54c0:	aa0000f4 	bge	5898 <_malloc_r+0x5b0>
    54c4:	e593300c 	ldr	r3, [r3, #12]
    54c8:	e15c0003 	cmp	r12, r3
    54cc:	0a0000d6 	beq	582c <_malloc_r+0x544>
    54d0:	e5931004 	ldr	r1, [r3, #4]
    54d4:	e3c11003 	bic	r1, r1, #3
    54d8:	e0652001 	rsb	r2, r5, r1
    54dc:	e352000f 	cmp	r2, #15
    54e0:	dafffff5 	ble	54bc <_malloc_r+0x1d4>
    54e4:	e1a04003 	mov	r4, r3
    54e8:	e593000c 	ldr	r0, [r3, #12]
    54ec:	e5b4c008 	ldr	r12, [r4, #8]!
    54f0:	e0831005 	add	r1, r3, r5
    54f4:	e382e001 	orr	lr, r2, #1
    54f8:	e3855001 	orr	r5, r5, #1
    54fc:	e58c000c 	str	r0, [r12, #12]
    5500:	e580c008 	str	r12, [r0, #8]
    5504:	e5835004 	str	r5, [r3, #4]
    5508:	e5871014 	str	r1, [r7, #20]
    550c:	e5871010 	str	r1, [r7, #16]
    5510:	e581800c 	str	r8, [r1, #12]
    5514:	e5818008 	str	r8, [r1, #8]
    5518:	e581e004 	str	lr, [r1, #4]
    551c:	e7812002 	str	r2, [r1, r2]
    5520:	e1a00006 	mov	r0, r6
    5524:	eb000137 	bl	5a08 <__malloc_unlock>
    5528:	eaffff95 	b	5384 <_malloc_r+0x9c>
    552c:	e35e0004 	cmp	lr, #4
    5530:	8a000087 	bhi	5754 <_malloc_r+0x46c>
    5534:	e1a0e325 	lsr	lr, r5, #6
    5538:	e28ee038 	add	lr, lr, #56	; 0x38
    553c:	e1a0108e 	lsl	r1, lr, #1
    5540:	eaffff97 	b	53a4 <_malloc_r+0xbc>
    5544:	e0842002 	add	r2, r4, r2
    5548:	e5923004 	ldr	r3, [r2, #4]
    554c:	e3833001 	orr	r3, r3, #1
    5550:	e5823004 	str	r3, [r2, #4]
    5554:	e1a00006 	mov	r0, r6
    5558:	eb00012a 	bl	5a08 <__malloc_unlock>
    555c:	e2844008 	add	r4, r4, #8
    5560:	eaffff87 	b	5384 <_malloc_r+0x9c>
    5564:	e5974008 	ldr	r4, [r7, #8]
    5568:	e594a004 	ldr	r10, [r4, #4]
    556c:	e3caa003 	bic	r10, r10, #3
    5570:	e155000a 	cmp	r5, r10
    5574:	8a000002 	bhi	5584 <_malloc_r+0x29c>
    5578:	e065300a 	rsb	r3, r5, r10
    557c:	e353000f 	cmp	r3, #15
    5580:	ca00005d 	bgt	56fc <_malloc_r+0x414>
    5584:	e59f9470 	ldr	r9, [pc, #1136]	; 59fc <_malloc_r+0x714>
    5588:	e5973408 	ldr	r3, [r7, #1032]	; 0x408
    558c:	e599b000 	ldr	r11, [r9]
    5590:	e3730001 	cmn	r3, #1
    5594:	e085b00b 	add	r11, r5, r11
    5598:	128bba01 	addne	r11, r11, #4096	; 0x1000
    559c:	128bb00f 	addne	r11, r11, #15
    55a0:	13cbbeff 	bicne	r11, r11, #4080	; 0xff0
    55a4:	028bb010 	addeq	r11, r11, #16
    55a8:	13cbb00f 	bicne	r11, r11, #15
    55ac:	e084200a 	add	r2, r4, r10
    55b0:	e1a00006 	mov	r0, r6
    55b4:	e1a0100b 	mov	r1, r11
    55b8:	e58d2004 	str	r2, [sp, #4]
    55bc:	eb000112 	bl	5a0c <_sbrk_r>
    55c0:	e3700001 	cmn	r0, #1
    55c4:	e1a08000 	mov	r8, r0
    55c8:	e59d2004 	ldr	r2, [sp, #4]
    55cc:	0a0000e2 	beq	595c <_malloc_r+0x674>
    55d0:	e1520000 	cmp	r2, r0
    55d4:	8a0000bf 	bhi	58d8 <_malloc_r+0x5f0>
    55d8:	e5993004 	ldr	r3, [r9, #4]
    55dc:	e1520008 	cmp	r2, r8
    55e0:	e08b3003 	add	r3, r11, r3
    55e4:	e5893004 	str	r3, [r9, #4]
    55e8:	0a0000df 	beq	596c <_malloc_r+0x684>
    55ec:	e5971408 	ldr	r1, [r7, #1032]	; 0x408
    55f0:	e3710001 	cmn	r1, #1
    55f4:	10622008 	rsbne	r2, r2, r8
    55f8:	059f33f8 	ldreq	r3, [pc, #1016]	; 59f8 <_malloc_r+0x710>
    55fc:	10833002 	addne	r3, r3, r2
    5600:	05838408 	streq	r8, [r3, #1032]	; 0x408
    5604:	15893004 	strne	r3, [r9, #4]
    5608:	e2183007 	ands	r3, r8, #7
    560c:	12632008 	rsbne	r2, r3, #8
    5610:	10888002 	addne	r8, r8, r2
    5614:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
    5618:	12832008 	addne	r2, r3, #8
    561c:	e088300b 	add	r3, r8, r11
    5620:	03a02a01 	moveq	r2, #4096	; 0x1000
    5624:	e1a03a03 	lsl	r3, r3, #20
    5628:	e042ba23 	sub	r11, r2, r3, lsr #20
    562c:	e1a0100b 	mov	r1, r11
    5630:	e1a00006 	mov	r0, r6
    5634:	eb0000f4 	bl	5a0c <_sbrk_r>
    5638:	e3700001 	cmn	r0, #1
    563c:	10682000 	rsbne	r2, r8, r0
    5640:	e5993004 	ldr	r3, [r9, #4]
    5644:	108b2002 	addne	r2, r11, r2
    5648:	03a0b000 	moveq	r11, #0
    564c:	13822001 	orrne	r2, r2, #1
    5650:	03a02001 	moveq	r2, #1
    5654:	e08b3003 	add	r3, r11, r3
    5658:	e1540007 	cmp	r4, r7
    565c:	e5893004 	str	r3, [r9, #4]
    5660:	e5878008 	str	r8, [r7, #8]
    5664:	e5882004 	str	r2, [r8, #4]
    5668:	0a00000d 	beq	56a4 <_malloc_r+0x3bc>
    566c:	e35a000f 	cmp	r10, #15
    5670:	9a0000ac 	bls	5928 <_malloc_r+0x640>
    5674:	e594c004 	ldr	r12, [r4, #4]
    5678:	e24a200c 	sub	r2, r10, #12
    567c:	e3c22007 	bic	r2, r2, #7
    5680:	e20cc001 	and	r12, r12, #1
    5684:	e0841002 	add	r1, r4, r2
    5688:	e3a00005 	mov	r0, #5
    568c:	e182c00c 	orr	r12, r2, r12
    5690:	e352000f 	cmp	r2, #15
    5694:	e584c004 	str	r12, [r4, #4]
    5698:	e5810004 	str	r0, [r1, #4]
    569c:	e5810008 	str	r0, [r1, #8]
    56a0:	8a0000b8 	bhi	5988 <_malloc_r+0x6a0>
    56a4:	e599202c 	ldr	r2, [r9, #44]	; 0x2c
    56a8:	e1530002 	cmp	r3, r2
    56ac:	859f2348 	ldrhi	r2, [pc, #840]	; 59fc <_malloc_r+0x714>
    56b0:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
    56b4:	e5992030 	ldr	r2, [r9, #48]	; 0x30
    56b8:	e5974008 	ldr	r4, [r7, #8]
    56bc:	e1530002 	cmp	r3, r2
    56c0:	95943004 	ldrls	r3, [r4, #4]
    56c4:	85942004 	ldrhi	r2, [r4, #4]
    56c8:	859f132c 	ldrhi	r1, [pc, #812]	; 59fc <_malloc_r+0x714>
    56cc:	93c33003 	bicls	r3, r3, #3
    56d0:	85813030 	strhi	r3, [r1, #48]	; 0x30
    56d4:	83c23003 	bichi	r3, r2, #3
    56d8:	e1550003 	cmp	r5, r3
    56dc:	e0653003 	rsb	r3, r5, r3
    56e0:	8a000001 	bhi	56ec <_malloc_r+0x404>
    56e4:	e353000f 	cmp	r3, #15
    56e8:	ca000003 	bgt	56fc <_malloc_r+0x414>
    56ec:	e1a00006 	mov	r0, r6
    56f0:	eb0000c4 	bl	5a08 <__malloc_unlock>
    56f4:	e3a04000 	mov	r4, #0
    56f8:	eaffff21 	b	5384 <_malloc_r+0x9c>
    56fc:	e0842005 	add	r2, r4, r5
    5700:	e3833001 	orr	r3, r3, #1
    5704:	e3855001 	orr	r5, r5, #1
    5708:	e5845004 	str	r5, [r4, #4]
    570c:	e1a00006 	mov	r0, r6
    5710:	e5823004 	str	r3, [r2, #4]
    5714:	e5872008 	str	r2, [r7, #8]
    5718:	e2844008 	add	r4, r4, #8
    571c:	eb0000b9 	bl	5a08 <__malloc_unlock>
    5720:	eaffff17 	b	5384 <_malloc_r+0x9c>
    5724:	e0842002 	add	r2, r4, r2
    5728:	e5920004 	ldr	r0, [r2, #4]
    572c:	e2841008 	add	r1, r4, #8
    5730:	e891000a 	ldm	r1, {r1, r3}
    5734:	e3800001 	orr	r0, r0, #1
    5738:	e5820004 	str	r0, [r2, #4]
    573c:	e581300c 	str	r3, [r1, #12]
    5740:	e5831008 	str	r1, [r3, #8]
    5744:	e1a00006 	mov	r0, r6
    5748:	eb0000ae 	bl	5a08 <__malloc_unlock>
    574c:	e2844008 	add	r4, r4, #8
    5750:	eaffff0b 	b	5384 <_malloc_r+0x9c>
    5754:	e35e0014 	cmp	lr, #20
    5758:	928ee05b 	addls	lr, lr, #91	; 0x5b
    575c:	91a0108e 	lslls	r1, lr, #1
    5760:	9affff0f 	bls	53a4 <_malloc_r+0xbc>
    5764:	e35e0054 	cmp	lr, #84	; 0x54
    5768:	8a000061 	bhi	58f4 <_malloc_r+0x60c>
    576c:	e1a0e625 	lsr	lr, r5, #12
    5770:	e28ee06e 	add	lr, lr, #110	; 0x6e
    5774:	e1a0108e 	lsl	r1, lr, #1
    5778:	eaffff09 	b	53a4 <_malloc_r+0xbc>
    577c:	e1a034a2 	lsr	r3, r2, #9
    5780:	e3530004 	cmp	r3, #4
    5784:	9a00004f 	bls	58c8 <_malloc_r+0x5e0>
    5788:	e3530014 	cmp	r3, #20
    578c:	9283a05b 	addls	r10, r3, #91	; 0x5b
    5790:	91a0008a 	lslls	r0, r10, #1
    5794:	9a000004 	bls	57ac <_malloc_r+0x4c4>
    5798:	e3530054 	cmp	r3, #84	; 0x54
    579c:	8a00007f 	bhi	59a0 <_malloc_r+0x6b8>
    57a0:	e1a0a622 	lsr	r10, r2, #12
    57a4:	e28aa06e 	add	r10, r10, #110	; 0x6e
    57a8:	e1a0008a 	lsl	r0, r10, #1
    57ac:	e0870100 	add	r0, r7, r0, lsl #2
    57b0:	e5903008 	ldr	r3, [r0, #8]
    57b4:	e1530000 	cmp	r3, r0
    57b8:	e59fc238 	ldr	r12, [pc, #568]	; 59f8 <_malloc_r+0x710>
    57bc:	0a000052 	beq	590c <_malloc_r+0x624>
    57c0:	e5931004 	ldr	r1, [r3, #4]
    57c4:	e3c11003 	bic	r1, r1, #3
    57c8:	e1520001 	cmp	r2, r1
    57cc:	2a000002 	bcs	57dc <_malloc_r+0x4f4>
    57d0:	e5933008 	ldr	r3, [r3, #8]
    57d4:	e1500003 	cmp	r0, r3
    57d8:	1afffff8 	bne	57c0 <_malloc_r+0x4d8>
    57dc:	e593200c 	ldr	r2, [r3, #12]
    57e0:	e5971004 	ldr	r1, [r7, #4]
    57e4:	e584200c 	str	r2, [r4, #12]
    57e8:	e5843008 	str	r3, [r4, #8]
    57ec:	e583400c 	str	r4, [r3, #12]
    57f0:	e5824008 	str	r4, [r2, #8]
    57f4:	eaffff19 	b	5460 <_malloc_r+0x178>
    57f8:	e0842005 	add	r2, r4, r5
    57fc:	e3810001 	orr	r0, r1, #1
    5800:	e3855001 	orr	r5, r5, #1
    5804:	e5845004 	str	r5, [r4, #4]
    5808:	e5832014 	str	r2, [r3, #20]
    580c:	e5832010 	str	r2, [r3, #16]
    5810:	e582800c 	str	r8, [r2, #12]
    5814:	e9820101 	stmib	r2, {r0, r8}
    5818:	e7821001 	str	r1, [r2, r1]
    581c:	e1a00006 	mov	r0, r6
    5820:	eb000078 	bl	5a08 <__malloc_unlock>
    5824:	e2844008 	add	r4, r4, #8
    5828:	eafffed5 	b	5384 <_malloc_r+0x9c>
    582c:	e2844001 	add	r4, r4, #1
    5830:	e3140003 	tst	r4, #3
    5834:	e28cc008 	add	r12, r12, #8
    5838:	1affff1b 	bne	54ac <_malloc_r+0x1c4>
    583c:	e31e0003 	tst	lr, #3
    5840:	e24a3008 	sub	r3, r10, #8
    5844:	0a000062 	beq	59d4 <_malloc_r+0x6ec>
    5848:	e59aa000 	ldr	r10, [r10]
    584c:	e15a0003 	cmp	r10, r3
    5850:	e24ee001 	sub	lr, lr, #1
    5854:	0afffff8 	beq	583c <_malloc_r+0x554>
    5858:	e5973004 	ldr	r3, [r7, #4]
    585c:	e1a00080 	lsl	r0, r0, #1
    5860:	e1500003 	cmp	r0, r3
    5864:	8affff3e 	bhi	5564 <_malloc_r+0x27c>
    5868:	e3500000 	cmp	r0, #0
    586c:	0affff3c 	beq	5564 <_malloc_r+0x27c>
    5870:	e1130000 	tst	r3, r0
    5874:	0a00005a 	beq	59e4 <_malloc_r+0x6fc>
    5878:	e1a0e004 	mov	lr, r4
    587c:	eaffff07 	b	54a0 <_malloc_r+0x1b8>
    5880:	e2843008 	add	r3, r4, #8
    5884:	e5944014 	ldr	r4, [r4, #20]
    5888:	e1530004 	cmp	r3, r4
    588c:	028ee002 	addeq	lr, lr, #2
    5890:	0afffed5 	beq	53ec <_malloc_r+0x104>
    5894:	eafffead 	b	5350 <_malloc_r+0x68>
    5898:	e0831001 	add	r1, r3, r1
    589c:	e5910004 	ldr	r0, [r1, #4]
    58a0:	e1a04003 	mov	r4, r3
    58a4:	e5b42008 	ldr	r2, [r4, #8]!
    58a8:	e593300c 	ldr	r3, [r3, #12]
    58ac:	e3800001 	orr	r0, r0, #1
    58b0:	e5810004 	str	r0, [r1, #4]
    58b4:	e582300c 	str	r3, [r2, #12]
    58b8:	e5832008 	str	r2, [r3, #8]
    58bc:	e1a00006 	mov	r0, r6
    58c0:	eb000050 	bl	5a08 <__malloc_unlock>
    58c4:	eafffeae 	b	5384 <_malloc_r+0x9c>
    58c8:	e1a0a322 	lsr	r10, r2, #6
    58cc:	e28aa038 	add	r10, r10, #56	; 0x38
    58d0:	e1a0008a 	lsl	r0, r10, #1
    58d4:	eaffffb4 	b	57ac <_malloc_r+0x4c4>
    58d8:	e1540007 	cmp	r4, r7
    58dc:	0affff3d 	beq	55d8 <_malloc_r+0x2f0>
    58e0:	e59f3110 	ldr	r3, [pc, #272]	; 59f8 <_malloc_r+0x710>
    58e4:	e5934008 	ldr	r4, [r3, #8]
    58e8:	e5943004 	ldr	r3, [r4, #4]
    58ec:	e3c33003 	bic	r3, r3, #3
    58f0:	eaffff78 	b	56d8 <_malloc_r+0x3f0>
    58f4:	e35e0f55 	cmp	lr, #340	; 0x154
    58f8:	8a00000f 	bhi	593c <_malloc_r+0x654>
    58fc:	e1a0e7a5 	lsr	lr, r5, #15
    5900:	e28ee077 	add	lr, lr, #119	; 0x77
    5904:	e1a0108e 	lsl	r1, lr, #1
    5908:	eafffea5 	b	53a4 <_malloc_r+0xbc>
    590c:	e59c2004 	ldr	r2, [r12, #4]
    5910:	e1a0a14a 	asr	r10, r10, #2
    5914:	e3a01001 	mov	r1, #1
    5918:	e1821a11 	orr	r1, r2, r1, lsl r10
    591c:	e1a02003 	mov	r2, r3
    5920:	e58c1004 	str	r1, [r12, #4]
    5924:	eaffffae 	b	57e4 <_malloc_r+0x4fc>
    5928:	e3a03001 	mov	r3, #1
    592c:	e5883004 	str	r3, [r8, #4]
    5930:	e1a04008 	mov	r4, r8
    5934:	e3a03000 	mov	r3, #0
    5938:	eaffff66 	b	56d8 <_malloc_r+0x3f0>
    593c:	e59f30bc 	ldr	r3, [pc, #188]	; 5a00 <_malloc_r+0x718>
    5940:	e15e0003 	cmp	lr, r3
    5944:	91a0e925 	lsrls	lr, r5, #18
    5948:	928ee07c 	addls	lr, lr, #124	; 0x7c
    594c:	91a0108e 	lslls	r1, lr, #1
    5950:	83a010fc 	movhi	r1, #252	; 0xfc
    5954:	83a0e07e 	movhi	lr, #126	; 0x7e
    5958:	eafffe91 	b	53a4 <_malloc_r+0xbc>
    595c:	e5974008 	ldr	r4, [r7, #8]
    5960:	e5943004 	ldr	r3, [r4, #4]
    5964:	e3c33003 	bic	r3, r3, #3
    5968:	eaffff5a 	b	56d8 <_malloc_r+0x3f0>
    596c:	e1b01a02 	lsls	r1, r2, #20
    5970:	1affff1d 	bne	55ec <_malloc_r+0x304>
    5974:	e5972008 	ldr	r2, [r7, #8]
    5978:	e08b100a 	add	r1, r11, r10
    597c:	e3811001 	orr	r1, r1, #1
    5980:	e5821004 	str	r1, [r2, #4]
    5984:	eaffff46 	b	56a4 <_malloc_r+0x3bc>
    5988:	e1a00006 	mov	r0, r6
    598c:	e2841008 	add	r1, r4, #8
    5990:	eb0001ae 	bl	6050 <_free_r>
    5994:	e59f3060 	ldr	r3, [pc, #96]	; 59fc <_malloc_r+0x714>
    5998:	e5933004 	ldr	r3, [r3, #4]
    599c:	eaffff40 	b	56a4 <_malloc_r+0x3bc>
    59a0:	e3530f55 	cmp	r3, #340	; 0x154
    59a4:	91a0a7a2 	lsrls	r10, r2, #15
    59a8:	928aa077 	addls	r10, r10, #119	; 0x77
    59ac:	91a0008a 	lslls	r0, r10, #1
    59b0:	9affff7d 	bls	57ac <_malloc_r+0x4c4>
    59b4:	e59f1044 	ldr	r1, [pc, #68]	; 5a00 <_malloc_r+0x718>
    59b8:	e1530001 	cmp	r3, r1
    59bc:	91a0a922 	lsrls	r10, r2, #18
    59c0:	928aa07c 	addls	r10, r10, #124	; 0x7c
    59c4:	91a0008a 	lslls	r0, r10, #1
    59c8:	83a000fc 	movhi	r0, #252	; 0xfc
    59cc:	83a0a07e 	movhi	r10, #126	; 0x7e
    59d0:	eaffff75 	b	57ac <_malloc_r+0x4c4>
    59d4:	e5973004 	ldr	r3, [r7, #4]
    59d8:	e1c33000 	bic	r3, r3, r0
    59dc:	e5873004 	str	r3, [r7, #4]
    59e0:	eaffff9d 	b	585c <_malloc_r+0x574>
    59e4:	e1a00080 	lsl	r0, r0, #1
    59e8:	e1130000 	tst	r3, r0
    59ec:	e2844004 	add	r4, r4, #4
    59f0:	1affffa0 	bne	5878 <_malloc_r+0x590>
    59f4:	eafffffa 	b	59e4 <_malloc_r+0x6fc>
    59f8:	00006db0 	.word	0x00006db0
    59fc:	00007204 	.word	0x00007204
    5a00:	00000554 	.word	0x00000554

00005a04 <__malloc_lock>:
    5a04:	e12fff1e 	bx	lr

00005a08 <__malloc_unlock>:
    5a08:	e12fff1e 	bx	lr

00005a0c <_sbrk_r>:
    5a0c:	e92d4038 	push	{r3, r4, r5, lr}
    5a10:	e59f4030 	ldr	r4, [pc, #48]	; 5a48 <_sbrk_r+0x3c>
    5a14:	e3a03000 	mov	r3, #0
    5a18:	e1a05000 	mov	r5, r0
    5a1c:	e1a00001 	mov	r0, r1
    5a20:	e5843000 	str	r3, [r4]
    5a24:	eb0002a4 	bl	64bc <_sbrk>
    5a28:	e3700001 	cmn	r0, #1
    5a2c:	0a000001 	beq	5a38 <_sbrk_r+0x2c>
    5a30:	e8bd4038 	pop	{r3, r4, r5, lr}
    5a34:	e12fff1e 	bx	lr
    5a38:	e5943000 	ldr	r3, [r4]
    5a3c:	e3530000 	cmp	r3, #0
    5a40:	15853000 	strne	r3, [r5]
    5a44:	eafffff9 	b	5a30 <_sbrk_r+0x24>
    5a48:	00007238 	.word	0x00007238

00005a4c <strcmp>:
    5a4c:	e0202001 	eor	r2, r0, r1
    5a50:	e3120003 	tst	r2, #3
    5a54:	1a000021 	bne	5ae0 <strcmp_unaligned>
    5a58:	e2102003 	ands	r2, r0, #3
    5a5c:	e3c00003 	bic	r0, r0, #3
    5a60:	e3c11003 	bic	r1, r1, #3
    5a64:	e490c004 	ldr	r12, [r0], #4
    5a68:	04913004 	ldreq	r3, [r1], #4
    5a6c:	0a000006 	beq	5a8c <strcmp+0x40>
    5a70:	e2222003 	eor	r2, r2, #3
    5a74:	e1a02182 	lsl	r2, r2, #3
    5a78:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
    5a7c:	e1a02233 	lsr	r2, r3, r2
    5a80:	e4913004 	ldr	r3, [r1], #4
    5a84:	e18cc002 	orr	r12, r12, r2
    5a88:	e1833002 	orr	r3, r3, r2
    5a8c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    5a90:	e3a04001 	mov	r4, #1
    5a94:	e1844404 	orr	r4, r4, r4, lsl #8
    5a98:	e1844804 	orr	r4, r4, r4, lsl #16
    5a9c:	e04c2004 	sub	r2, r12, r4
    5aa0:	e15c0003 	cmp	r12, r3
    5aa4:	01c2200c 	biceq	r2, r2, r12
    5aa8:	01120384 	tsteq	r2, r4, lsl #7
    5aac:	0490c004 	ldreq	r12, [r0], #4
    5ab0:	04913004 	ldreq	r3, [r1], #4
    5ab4:	0afffff8 	beq	5a9c <strcmp+0x50>
    5ab8:	e1a00c0c 	lsl	r0, r12, #24
    5abc:	e1a0c42c 	lsr	r12, r12, #8
    5ac0:	e3500001 	cmp	r0, #1
    5ac4:	21500c03 	cmpcs	r0, r3, lsl #24
    5ac8:	01a03423 	lsreq	r3, r3, #8
    5acc:	0afffff9 	beq	5ab8 <strcmp+0x6c>
    5ad0:	e20330ff 	and	r3, r3, #255	; 0xff
    5ad4:	e0630c20 	rsb	r0, r3, r0, lsr #24
    5ad8:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    5adc:	e12fff1e 	bx	lr

00005ae0 <strcmp_unaligned>:
    5ae0:	e3100003 	tst	r0, #3
    5ae4:	0a000006 	beq	5b04 <strcmp_unaligned+0x24>
    5ae8:	e4d02001 	ldrb	r2, [r0], #1
    5aec:	e4d13001 	ldrb	r3, [r1], #1
    5af0:	e3520001 	cmp	r2, #1
    5af4:	21520003 	cmpcs	r2, r3
    5af8:	0afffff8 	beq	5ae0 <strcmp_unaligned>
    5afc:	e0420003 	sub	r0, r2, r3
    5b00:	e12fff1e 	bx	lr
    5b04:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)
    5b08:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    5b0c:	e3a02001 	mov	r2, #1
    5b10:	e1822402 	orr	r2, r2, r2, lsl #8
    5b14:	e1822802 	orr	r2, r2, r2, lsl #16
    5b18:	e201c003 	and	r12, r1, #3
    5b1c:	e3c11003 	bic	r1, r1, #3
    5b20:	e4904004 	ldr	r4, [r0], #4
    5b24:	e4915004 	ldr	r5, [r1], #4
    5b28:	e35c0002 	cmp	r12, #2
    5b2c:	0a000017 	beq	5b90 <strcmp_unaligned+0xb0>
    5b30:	8a00002d 	bhi	5bec <strcmp_unaligned+0x10c>
    5b34:	e3c4c4ff 	bic	r12, r4, #-16777216	; 0xff000000
    5b38:	e15c0425 	cmp	r12, r5, lsr #8
    5b3c:	e0443002 	sub	r3, r4, r2
    5b40:	e1c33004 	bic	r3, r3, r4
    5b44:	1a000007 	bne	5b68 <strcmp_unaligned+0x88>
    5b48:	e0133382 	ands	r3, r3, r2, lsl #7
    5b4c:	04915004 	ldreq	r5, [r1], #4
    5b50:	1a000006 	bne	5b70 <strcmp_unaligned+0x90>
    5b54:	e02cc004 	eor	r12, r12, r4
    5b58:	e15c0c05 	cmp	r12, r5, lsl #24
    5b5c:	1a000008 	bne	5b84 <strcmp_unaligned+0xa4>
    5b60:	e4904004 	ldr	r4, [r0], #4
    5b64:	eafffff2 	b	5b34 <strcmp_unaligned+0x54>
    5b68:	e1a05425 	lsr	r5, r5, #8
    5b6c:	ea000037 	b	5c50 <strcmp_unaligned+0x170>
    5b70:	e3d334ff 	bics	r3, r3, #-16777216	; 0xff000000
    5b74:	1a000031 	bne	5c40 <strcmp_unaligned+0x160>
    5b78:	e5d15000 	ldrb	r5, [r1]
    5b7c:	e1a0cc24 	lsr	r12, r4, #24
    5b80:	ea000032 	b	5c50 <strcmp_unaligned+0x170>
    5b84:	e1a0cc24 	lsr	r12, r4, #24
    5b88:	e20550ff 	and	r5, r5, #255	; 0xff
    5b8c:	ea00002f 	b	5c50 <strcmp_unaligned+0x170>
    5b90:	e1a0c804 	lsl	r12, r4, #16
    5b94:	e0443002 	sub	r3, r4, r2
    5b98:	e1a0c82c 	lsr	r12, r12, #16
    5b9c:	e1c33004 	bic	r3, r3, r4
    5ba0:	e15c0825 	cmp	r12, r5, lsr #16
    5ba4:	1a00000e 	bne	5be4 <strcmp_unaligned+0x104>
    5ba8:	e0133382 	ands	r3, r3, r2, lsl #7
    5bac:	04915004 	ldreq	r5, [r1], #4
    5bb0:	1a000004 	bne	5bc8 <strcmp_unaligned+0xe8>
    5bb4:	e02cc004 	eor	r12, r12, r4
    5bb8:	e15c0805 	cmp	r12, r5, lsl #16
    5bbc:	1a000006 	bne	5bdc <strcmp_unaligned+0xfc>
    5bc0:	e4904004 	ldr	r4, [r0], #4
    5bc4:	eafffff1 	b	5b90 <strcmp_unaligned+0xb0>
    5bc8:	e1b03803 	lsls	r3, r3, #16
    5bcc:	1a00001b 	bne	5c40 <strcmp_unaligned+0x160>
    5bd0:	e1d150b0 	ldrh	r5, [r1]
    5bd4:	e1a0c824 	lsr	r12, r4, #16
    5bd8:	ea00001c 	b	5c50 <strcmp_unaligned+0x170>
    5bdc:	e1a05805 	lsl	r5, r5, #16
    5be0:	e1a0c824 	lsr	r12, r4, #16
    5be4:	e1a05825 	lsr	r5, r5, #16
    5be8:	ea000018 	b	5c50 <strcmp_unaligned+0x170>
    5bec:	e204c0ff 	and	r12, r4, #255	; 0xff
    5bf0:	e15c0c25 	cmp	r12, r5, lsr #24
    5bf4:	e0443002 	sub	r3, r4, r2
    5bf8:	e1c33004 	bic	r3, r3, r4
    5bfc:	1a000007 	bne	5c20 <strcmp_unaligned+0x140>
    5c00:	e0133382 	ands	r3, r3, r2, lsl #7
    5c04:	04915004 	ldreq	r5, [r1], #4
    5c08:	1a000006 	bne	5c28 <strcmp_unaligned+0x148>
    5c0c:	e02cc004 	eor	r12, r12, r4
    5c10:	e15c0405 	cmp	r12, r5, lsl #8
    5c14:	1a000006 	bne	5c34 <strcmp_unaligned+0x154>
    5c18:	e4904004 	ldr	r4, [r0], #4
    5c1c:	eafffff2 	b	5bec <strcmp_unaligned+0x10c>
    5c20:	e1a05c25 	lsr	r5, r5, #24
    5c24:	ea000009 	b	5c50 <strcmp_unaligned+0x170>
    5c28:	e31400ff 	tst	r4, #255	; 0xff
    5c2c:	0a000003 	beq	5c40 <strcmp_unaligned+0x160>
    5c30:	e4915004 	ldr	r5, [r1], #4
    5c34:	e1a0c424 	lsr	r12, r4, #8
    5c38:	e3c554ff 	bic	r5, r5, #-16777216	; 0xff000000
    5c3c:	ea000003 	b	5c50 <strcmp_unaligned+0x170>
    5c40:	e3a00000 	mov	r0, #0
    5c44:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    5c48:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    5c4c:	e12fff1e 	bx	lr
    5c50:	e20c20ff 	and	r2, r12, #255	; 0xff
    5c54:	e20500ff 	and	r0, r5, #255	; 0xff
    5c58:	e3500001 	cmp	r0, #1
    5c5c:	21500002 	cmpcs	r0, r2
    5c60:	01a0c42c 	lsreq	r12, r12, #8
    5c64:	01a05425 	lsreq	r5, r5, #8
    5c68:	0afffff8 	beq	5c50 <strcmp_unaligned+0x170>
    5c6c:	e0420000 	sub	r0, r2, r0
    5c70:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    5c74:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    5c78:	e12fff1e 	bx	lr

00005c7c <__register_exitproc>:
    5c7c:	e59fc0e4 	ldr	r12, [pc, #228]	; 5d68 <__register_exitproc+0xec>
    5c80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    5c84:	e59c4000 	ldr	r4, [r12]
    5c88:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    5c8c:	e35c0000 	cmp	r12, #0
    5c90:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    5c94:	e59c5004 	ldr	r5, [r12, #4]
    5c98:	0584c148 	streq	r12, [r4, #328]	; 0x148
    5c9c:	e355001f 	cmp	r5, #31
    5ca0:	e24dd010 	sub	sp, sp, #16
    5ca4:	e1a06000 	mov	r6, r0
    5ca8:	da000015 	ble	5d04 <__register_exitproc+0x88>
    5cac:	e59f00b8 	ldr	r0, [pc, #184]	; 5d6c <__register_exitproc+0xf0>
    5cb0:	e3500000 	cmp	r0, #0
    5cb4:	1a000001 	bne	5cc0 <__register_exitproc+0x44>
    5cb8:	e3e00000 	mvn	r0, #0
    5cbc:	ea000018 	b	5d24 <__register_exitproc+0xa8>
    5cc0:	e3a00e19 	mov	r0, #400	; 0x190
    5cc4:	e58d100c 	str	r1, [sp, #12]
    5cc8:	e58d2008 	str	r2, [sp, #8]
    5ccc:	e58d3004 	str	r3, [sp, #4]
    5cd0:	ebfffd74 	bl	52a8 <malloc>
    5cd4:	e250c000 	subs	r12, r0, #0
    5cd8:	e59d100c 	ldr	r1, [sp, #12]
    5cdc:	e59d2008 	ldr	r2, [sp, #8]
    5ce0:	e59d3004 	ldr	r3, [sp, #4]
    5ce4:	0afffff3 	beq	5cb8 <__register_exitproc+0x3c>
    5ce8:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    5cec:	e3a00000 	mov	r0, #0
    5cf0:	e58c0004 	str	r0, [r12, #4]
    5cf4:	e58c5000 	str	r5, [r12]
    5cf8:	e584c148 	str	r12, [r4, #328]	; 0x148
    5cfc:	e58c0188 	str	r0, [r12, #392]	; 0x188
    5d00:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    5d04:	e3560000 	cmp	r6, #0
    5d08:	e59c4004 	ldr	r4, [r12, #4]
    5d0c:	1a000007 	bne	5d30 <__register_exitproc+0xb4>
    5d10:	e2843002 	add	r3, r4, #2
    5d14:	e2844001 	add	r4, r4, #1
    5d18:	e78c1103 	str	r1, [r12, r3, lsl #2]
    5d1c:	e58c4004 	str	r4, [r12, #4]
    5d20:	e3a00000 	mov	r0, #0
    5d24:	e28dd010 	add	sp, sp, #16
    5d28:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    5d2c:	e12fff1e 	bx	lr
    5d30:	e3a00001 	mov	r0, #1
    5d34:	e1a00410 	lsl	r0, r0, r4
    5d38:	e08c8104 	add	r8, r12, r4, lsl #2
    5d3c:	e3560002 	cmp	r6, #2
    5d40:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    5d44:	e5883108 	str	r3, [r8, #264]	; 0x108
    5d48:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    5d4c:	e1877000 	orr	r7, r7, r0
    5d50:	01830000 	orreq	r0, r3, r0
    5d54:	e1a05008 	mov	r5, r8
    5d58:	e5882088 	str	r2, [r8, #136]	; 0x88
    5d5c:	e58c7188 	str	r7, [r12, #392]	; 0x188
    5d60:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    5d64:	eaffffe9 	b	5d10 <__register_exitproc+0x94>
    5d68:	00006870 	.word	0x00006870
    5d6c:	000052a8 	.word	0x000052a8

00005d70 <__call_exitprocs>:
    5d70:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    5d74:	e59f3168 	ldr	r3, [pc, #360]	; 5ee4 <__call_exitprocs+0x174>
    5d78:	e5933000 	ldr	r3, [r3]
    5d7c:	e24dd014 	sub	sp, sp, #20
    5d80:	e58d3004 	str	r3, [sp, #4]
    5d84:	e2833f52 	add	r3, r3, #328	; 0x148
    5d88:	e58d0008 	str	r0, [sp, #8]
    5d8c:	e58d300c 	str	r3, [sp, #12]
    5d90:	e1a07001 	mov	r7, r1
    5d94:	e3a08001 	mov	r8, #1
    5d98:	e59d3004 	ldr	r3, [sp, #4]
    5d9c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    5da0:	e3560000 	cmp	r6, #0
    5da4:	e59db00c 	ldr	r11, [sp, #12]
    5da8:	0a000033 	beq	5e7c <__call_exitprocs+0x10c>
    5dac:	e5965004 	ldr	r5, [r6, #4]
    5db0:	e2554001 	subs	r4, r5, #1
    5db4:	5286a088 	addpl	r10, r6, #136	; 0x88
    5db8:	5285501f 	addpl	r5, r5, #31
    5dbc:	508a5105 	addpl	r5, r10, r5, lsl #2
    5dc0:	5a000007 	bpl	5de4 <__call_exitprocs+0x74>
    5dc4:	ea000029 	b	5e70 <__call_exitprocs+0x100>
    5dc8:	e5953000 	ldr	r3, [r5]
    5dcc:	e1530007 	cmp	r3, r7
    5dd0:	0a000005 	beq	5dec <__call_exitprocs+0x7c>
    5dd4:	e2444001 	sub	r4, r4, #1
    5dd8:	e3740001 	cmn	r4, #1
    5ddc:	e2455004 	sub	r5, r5, #4
    5de0:	0a000022 	beq	5e70 <__call_exitprocs+0x100>
    5de4:	e3570000 	cmp	r7, #0
    5de8:	1afffff6 	bne	5dc8 <__call_exitprocs+0x58>
    5dec:	e5963004 	ldr	r3, [r6, #4]
    5df0:	e06a2005 	rsb	r2, r10, r5
    5df4:	e2433001 	sub	r3, r3, #1
    5df8:	e0862002 	add	r2, r6, r2
    5dfc:	e1530004 	cmp	r3, r4
    5e00:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    5e04:	13a01000 	movne	r1, #0
    5e08:	05864004 	streq	r4, [r6, #4]
    5e0c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    5e10:	e3530000 	cmp	r3, #0
    5e14:	0affffee 	beq	5dd4 <__call_exitprocs+0x64>
    5e18:	e1a02418 	lsl	r2, r8, r4
    5e1c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    5e20:	e1120001 	tst	r2, r1
    5e24:	e5969004 	ldr	r9, [r6, #4]
    5e28:	0a000016 	beq	5e88 <__call_exitprocs+0x118>
    5e2c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    5e30:	e1120001 	tst	r2, r1
    5e34:	1a000016 	bne	5e94 <__call_exitprocs+0x124>
    5e38:	e59d0008 	ldr	r0, [sp, #8]
    5e3c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    5e40:	e1a0e00f 	mov	lr, pc
    5e44:	e12fff13 	bx	r3
    5e48:	e5963004 	ldr	r3, [r6, #4]
    5e4c:	e1530009 	cmp	r3, r9
    5e50:	1affffd0 	bne	5d98 <__call_exitprocs+0x28>
    5e54:	e59b3000 	ldr	r3, [r11]
    5e58:	e1530006 	cmp	r3, r6
    5e5c:	1affffcd 	bne	5d98 <__call_exitprocs+0x28>
    5e60:	e2444001 	sub	r4, r4, #1
    5e64:	e3740001 	cmn	r4, #1
    5e68:	e2455004 	sub	r5, r5, #4
    5e6c:	1affffdc 	bne	5de4 <__call_exitprocs+0x74>
    5e70:	e59f1070 	ldr	r1, [pc, #112]	; 5ee8 <__call_exitprocs+0x178>
    5e74:	e3510000 	cmp	r1, #0
    5e78:	1a000009 	bne	5ea4 <__call_exitprocs+0x134>
    5e7c:	e28dd014 	add	sp, sp, #20
    5e80:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    5e84:	e12fff1e 	bx	lr
    5e88:	e1a0e00f 	mov	lr, pc
    5e8c:	e12fff13 	bx	r3
    5e90:	eaffffec 	b	5e48 <__call_exitprocs+0xd8>
    5e94:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    5e98:	e1a0e00f 	mov	lr, pc
    5e9c:	e12fff13 	bx	r3
    5ea0:	eaffffe8 	b	5e48 <__call_exitprocs+0xd8>
    5ea4:	e5963004 	ldr	r3, [r6, #4]
    5ea8:	e3530000 	cmp	r3, #0
    5eac:	e5963000 	ldr	r3, [r6]
    5eb0:	1a000008 	bne	5ed8 <__call_exitprocs+0x168>
    5eb4:	e3530000 	cmp	r3, #0
    5eb8:	0a000006 	beq	5ed8 <__call_exitprocs+0x168>
    5ebc:	e1a00006 	mov	r0, r6
    5ec0:	e58b3000 	str	r3, [r11]
    5ec4:	ebfffcff 	bl	52c8 <free>
    5ec8:	e59b6000 	ldr	r6, [r11]
    5ecc:	e3560000 	cmp	r6, #0
    5ed0:	1affffb5 	bne	5dac <__call_exitprocs+0x3c>
    5ed4:	eaffffe8 	b	5e7c <__call_exitprocs+0x10c>
    5ed8:	e1a0b006 	mov	r11, r6
    5edc:	e1a06003 	mov	r6, r3
    5ee0:	eafffff9 	b	5ecc <__call_exitprocs+0x15c>
    5ee4:	00006870 	.word	0x00006870
    5ee8:	000052c8 	.word	0x000052c8

00005eec <register_fini>:
    5eec:	e92d4008 	push	{r3, lr}
    5ef0:	e59f3010 	ldr	r3, [pc, #16]	; 5f08 <register_fini+0x1c>
    5ef4:	e3530000 	cmp	r3, #0
    5ef8:	159f000c 	ldrne	r0, [pc, #12]	; 5f0c <register_fini+0x20>
    5efc:	1bfffcd0 	blne	5244 <atexit>
    5f00:	e8bd4008 	pop	{r3, lr}
    5f04:	e12fff1e 	bx	lr
    5f08:	00006894 	.word	0x00006894
    5f0c:	00005f10 	.word	0x00005f10

00005f10 <__libc_fini_array>:
    5f10:	e92d4038 	push	{r3, r4, r5, lr}
    5f14:	e59f5030 	ldr	r5, [pc, #48]	; 5f4c <__libc_fini_array+0x3c>
    5f18:	e59f4030 	ldr	r4, [pc, #48]	; 5f50 <__libc_fini_array+0x40>
    5f1c:	e0654004 	rsb	r4, r5, r4
    5f20:	e1b04144 	asrs	r4, r4, #2
    5f24:	10855104 	addne	r5, r5, r4, lsl #2
    5f28:	0a000004 	beq	5f40 <__libc_fini_array+0x30>
    5f2c:	e5353004 	ldr	r3, [r5, #-4]!
    5f30:	e1a0e00f 	mov	lr, pc
    5f34:	e12fff13 	bx	r3
    5f38:	e2544001 	subs	r4, r4, #1
    5f3c:	1afffffa 	bne	5f2c <__libc_fini_array+0x1c>
    5f40:	eb000253 	bl	6894 <__libc_fini>
    5f44:	e8bd4038 	pop	{r3, r4, r5, lr}
    5f48:	e12fff1e 	bx	lr
    5f4c:	000068ac 	.word	0x000068ac
    5f50:	000068b0 	.word	0x000068b0

00005f54 <_malloc_trim_r>:
    5f54:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    5f58:	e59f50e4 	ldr	r5, [pc, #228]	; 6044 <_malloc_trim_r+0xf0>
    5f5c:	e1a07001 	mov	r7, r1
    5f60:	e1a04000 	mov	r4, r0
    5f64:	ebfffea6 	bl	5a04 <__malloc_lock>
    5f68:	e5953008 	ldr	r3, [r5, #8]
    5f6c:	e5936004 	ldr	r6, [r3, #4]
    5f70:	e3c66003 	bic	r6, r6, #3
    5f74:	e2863efe 	add	r3, r6, #4064	; 0xfe0
    5f78:	e283300f 	add	r3, r3, #15
    5f7c:	e0677003 	rsb	r7, r7, r3
    5f80:	e1a07627 	lsr	r7, r7, #12
    5f84:	e2477001 	sub	r7, r7, #1
    5f88:	e1a07607 	lsl	r7, r7, #12
    5f8c:	e3570a01 	cmp	r7, #4096	; 0x1000
    5f90:	ba000006 	blt	5fb0 <_malloc_trim_r+0x5c>
    5f94:	e1a00004 	mov	r0, r4
    5f98:	e3a01000 	mov	r1, #0
    5f9c:	ebfffe9a 	bl	5a0c <_sbrk_r>
    5fa0:	e5953008 	ldr	r3, [r5, #8]
    5fa4:	e0833006 	add	r3, r3, r6
    5fa8:	e1500003 	cmp	r0, r3
    5fac:	0a000004 	beq	5fc4 <_malloc_trim_r+0x70>
    5fb0:	e1a00004 	mov	r0, r4
    5fb4:	ebfffe93 	bl	5a08 <__malloc_unlock>
    5fb8:	e3a00000 	mov	r0, #0
    5fbc:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    5fc0:	e12fff1e 	bx	lr
    5fc4:	e1a00004 	mov	r0, r4
    5fc8:	e2671000 	rsb	r1, r7, #0
    5fcc:	ebfffe8e 	bl	5a0c <_sbrk_r>
    5fd0:	e3700001 	cmn	r0, #1
    5fd4:	0a00000b 	beq	6008 <_malloc_trim_r+0xb4>
    5fd8:	e59f3068 	ldr	r3, [pc, #104]	; 6048 <_malloc_trim_r+0xf4>
    5fdc:	e5952008 	ldr	r2, [r5, #8]
    5fe0:	e5931000 	ldr	r1, [r3]
    5fe4:	e0676006 	rsb	r6, r7, r6
    5fe8:	e3866001 	orr	r6, r6, #1
    5fec:	e0677001 	rsb	r7, r7, r1
    5ff0:	e1a00004 	mov	r0, r4
    5ff4:	e5826004 	str	r6, [r2, #4]
    5ff8:	e5837000 	str	r7, [r3]
    5ffc:	ebfffe81 	bl	5a08 <__malloc_unlock>
    6000:	e3a00001 	mov	r0, #1
    6004:	eaffffec 	b	5fbc <_malloc_trim_r+0x68>
    6008:	e1a00004 	mov	r0, r4
    600c:	e3a01000 	mov	r1, #0
    6010:	ebfffe7d 	bl	5a0c <_sbrk_r>
    6014:	e5953008 	ldr	r3, [r5, #8]
    6018:	e0632000 	rsb	r2, r3, r0
    601c:	e352000f 	cmp	r2, #15
    6020:	daffffe2 	ble	5fb0 <_malloc_trim_r+0x5c>
    6024:	e59f1020 	ldr	r1, [pc, #32]	; 604c <_malloc_trim_r+0xf8>
    6028:	e5911000 	ldr	r1, [r1]
    602c:	e0610000 	rsb	r0, r1, r0
    6030:	e59f1010 	ldr	r1, [pc, #16]	; 6048 <_malloc_trim_r+0xf4>
    6034:	e3822001 	orr	r2, r2, #1
    6038:	e5810000 	str	r0, [r1]
    603c:	e5832004 	str	r2, [r3, #4]
    6040:	eaffffda 	b	5fb0 <_malloc_trim_r+0x5c>
    6044:	00006db0 	.word	0x00006db0
    6048:	00007208 	.word	0x00007208
    604c:	000071b8 	.word	0x000071b8

00006050 <_free_r>:
    6050:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    6054:	e2514000 	subs	r4, r1, #0
    6058:	e1a06000 	mov	r6, r0
    605c:	0a000046 	beq	617c <_free_r+0x12c>
    6060:	ebfffe67 	bl	5a04 <__malloc_lock>
    6064:	e514e004 	ldr	lr, [r4, #-4]
    6068:	e59f1238 	ldr	r1, [pc, #568]	; 62a8 <_free_r+0x258>
    606c:	e244c008 	sub	r12, r4, #8
    6070:	e3ce3001 	bic	r3, lr, #1
    6074:	e08c2003 	add	r2, r12, r3
    6078:	e5910008 	ldr	r0, [r1, #8]
    607c:	e5925004 	ldr	r5, [r2, #4]
    6080:	e1500002 	cmp	r0, r2
    6084:	e3c55003 	bic	r5, r5, #3
    6088:	0a00004a 	beq	61b8 <_free_r+0x168>
    608c:	e21ee001 	ands	lr, lr, #1
    6090:	e5825004 	str	r5, [r2, #4]
    6094:	13a0e000 	movne	lr, #0
    6098:	1a000009 	bne	60c4 <_free_r+0x74>
    609c:	e5144008 	ldr	r4, [r4, #-8]
    60a0:	e064c00c 	rsb	r12, r4, r12
    60a4:	e59c0008 	ldr	r0, [r12, #8]
    60a8:	e2817008 	add	r7, r1, #8
    60ac:	e1500007 	cmp	r0, r7
    60b0:	e0833004 	add	r3, r3, r4
    60b4:	159c400c 	ldrne	r4, [r12, #12]
    60b8:	1580400c 	strne	r4, [r0, #12]
    60bc:	15840008 	strne	r0, [r4, #8]
    60c0:	03a0e001 	moveq	lr, #1
    60c4:	e0820005 	add	r0, r2, r5
    60c8:	e5900004 	ldr	r0, [r0, #4]
    60cc:	e3100001 	tst	r0, #1
    60d0:	1a000009 	bne	60fc <_free_r+0xac>
    60d4:	e35e0000 	cmp	lr, #0
    60d8:	e5920008 	ldr	r0, [r2, #8]
    60dc:	e0833005 	add	r3, r3, r5
    60e0:	1a000002 	bne	60f0 <_free_r+0xa0>
    60e4:	e59f41c0 	ldr	r4, [pc, #448]	; 62ac <_free_r+0x25c>
    60e8:	e1500004 	cmp	r0, r4
    60ec:	0a000047 	beq	6210 <_free_r+0x1c0>
    60f0:	e592200c 	ldr	r2, [r2, #12]
    60f4:	e580200c 	str	r2, [r0, #12]
    60f8:	e5820008 	str	r0, [r2, #8]
    60fc:	e3832001 	orr	r2, r3, #1
    6100:	e35e0000 	cmp	lr, #0
    6104:	e58c2004 	str	r2, [r12, #4]
    6108:	e78c3003 	str	r3, [r12, r3]
    610c:	1a000018 	bne	6174 <_free_r+0x124>
    6110:	e3530c02 	cmp	r3, #512	; 0x200
    6114:	3a00001a 	bcc	6184 <_free_r+0x134>
    6118:	e1a024a3 	lsr	r2, r3, #9
    611c:	e3520004 	cmp	r2, #4
    6120:	8a000042 	bhi	6230 <_free_r+0x1e0>
    6124:	e1a0e323 	lsr	lr, r3, #6
    6128:	e28ee038 	add	lr, lr, #56	; 0x38
    612c:	e1a0008e 	lsl	r0, lr, #1
    6130:	e0810100 	add	r0, r1, r0, lsl #2
    6134:	e5902008 	ldr	r2, [r0, #8]
    6138:	e1520000 	cmp	r2, r0
    613c:	e59f1164 	ldr	r1, [pc, #356]	; 62a8 <_free_r+0x258>
    6140:	0a000044 	beq	6258 <_free_r+0x208>
    6144:	e5921004 	ldr	r1, [r2, #4]
    6148:	e3c11003 	bic	r1, r1, #3
    614c:	e1530001 	cmp	r3, r1
    6150:	2a000002 	bcs	6160 <_free_r+0x110>
    6154:	e5922008 	ldr	r2, [r2, #8]
    6158:	e1500002 	cmp	r0, r2
    615c:	1afffff8 	bne	6144 <_free_r+0xf4>
    6160:	e592300c 	ldr	r3, [r2, #12]
    6164:	e58c300c 	str	r3, [r12, #12]
    6168:	e58c2008 	str	r2, [r12, #8]
    616c:	e582c00c 	str	r12, [r2, #12]
    6170:	e583c008 	str	r12, [r3, #8]
    6174:	e1a00006 	mov	r0, r6
    6178:	ebfffe22 	bl	5a08 <__malloc_unlock>
    617c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    6180:	e12fff1e 	bx	lr
    6184:	e5912004 	ldr	r2, [r1, #4]
    6188:	e1a031a3 	lsr	r3, r3, #3
    618c:	e1a00143 	asr	r0, r3, #2
    6190:	e3a0e001 	mov	lr, #1
    6194:	e182001e 	orr	r0, r2, lr, lsl r0
    6198:	e0813183 	add	r3, r1, r3, lsl #3
    619c:	e5932008 	ldr	r2, [r3, #8]
    61a0:	e58c300c 	str	r3, [r12, #12]
    61a4:	e58c2008 	str	r2, [r12, #8]
    61a8:	e5810004 	str	r0, [r1, #4]
    61ac:	e583c008 	str	r12, [r3, #8]
    61b0:	e582c00c 	str	r12, [r2, #12]
    61b4:	eaffffee 	b	6174 <_free_r+0x124>
    61b8:	e31e0001 	tst	lr, #1
    61bc:	e0853003 	add	r3, r5, r3
    61c0:	1a000006 	bne	61e0 <_free_r+0x190>
    61c4:	e5142008 	ldr	r2, [r4, #-8]
    61c8:	e062c00c 	rsb	r12, r2, r12
    61cc:	e59c000c 	ldr	r0, [r12, #12]
    61d0:	e59ce008 	ldr	lr, [r12, #8]
    61d4:	e58e000c 	str	r0, [lr, #12]
    61d8:	e580e008 	str	lr, [r0, #8]
    61dc:	e0833002 	add	r3, r3, r2
    61e0:	e59f20c8 	ldr	r2, [pc, #200]	; 62b0 <_free_r+0x260>
    61e4:	e5920000 	ldr	r0, [r2]
    61e8:	e3832001 	orr	r2, r3, #1
    61ec:	e1530000 	cmp	r3, r0
    61f0:	e58c2004 	str	r2, [r12, #4]
    61f4:	e581c008 	str	r12, [r1, #8]
    61f8:	3affffdd 	bcc	6174 <_free_r+0x124>
    61fc:	e59f30b0 	ldr	r3, [pc, #176]	; 62b4 <_free_r+0x264>
    6200:	e1a00006 	mov	r0, r6
    6204:	e5931000 	ldr	r1, [r3]
    6208:	ebffff51 	bl	5f54 <_malloc_trim_r>
    620c:	eaffffd8 	b	6174 <_free_r+0x124>
    6210:	e3832001 	orr	r2, r3, #1
    6214:	e581c014 	str	r12, [r1, #20]
    6218:	e581c010 	str	r12, [r1, #16]
    621c:	e58c000c 	str	r0, [r12, #12]
    6220:	e58c0008 	str	r0, [r12, #8]
    6224:	e58c2004 	str	r2, [r12, #4]
    6228:	e78c3003 	str	r3, [r12, r3]
    622c:	eaffffd0 	b	6174 <_free_r+0x124>
    6230:	e3520014 	cmp	r2, #20
    6234:	9282e05b 	addls	lr, r2, #91	; 0x5b
    6238:	91a0008e 	lslls	r0, lr, #1
    623c:	9affffbb 	bls	6130 <_free_r+0xe0>
    6240:	e3520054 	cmp	r2, #84	; 0x54
    6244:	8a00000a 	bhi	6274 <_free_r+0x224>
    6248:	e1a0e623 	lsr	lr, r3, #12
    624c:	e28ee06e 	add	lr, lr, #110	; 0x6e
    6250:	e1a0008e 	lsl	r0, lr, #1
    6254:	eaffffb5 	b	6130 <_free_r+0xe0>
    6258:	e5913004 	ldr	r3, [r1, #4]
    625c:	e1a0e14e 	asr	lr, lr, #2
    6260:	e3a00001 	mov	r0, #1
    6264:	e1830e10 	orr	r0, r3, r0, lsl lr
    6268:	e1a03002 	mov	r3, r2
    626c:	e5810004 	str	r0, [r1, #4]
    6270:	eaffffbb 	b	6164 <_free_r+0x114>
    6274:	e3520f55 	cmp	r2, #340	; 0x154
    6278:	91a0e7a3 	lsrls	lr, r3, #15
    627c:	928ee077 	addls	lr, lr, #119	; 0x77
    6280:	91a0008e 	lslls	r0, lr, #1
    6284:	9affffa9 	bls	6130 <_free_r+0xe0>
    6288:	e59f0028 	ldr	r0, [pc, #40]	; 62b8 <_free_r+0x268>
    628c:	e1520000 	cmp	r2, r0
    6290:	91a0e923 	lsrls	lr, r3, #18
    6294:	928ee07c 	addls	lr, lr, #124	; 0x7c
    6298:	91a0008e 	lslls	r0, lr, #1
    629c:	83a000fc 	movhi	r0, #252	; 0xfc
    62a0:	83a0e07e 	movhi	lr, #126	; 0x7e
    62a4:	eaffffa1 	b	6130 <_free_r+0xe0>
    62a8:	00006db0 	.word	0x00006db0
    62ac:	00006db8 	.word	0x00006db8
    62b0:	000071bc 	.word	0x000071bc
    62b4:	00007204 	.word	0x00007204
    62b8:	00000554 	.word	0x00000554

000062bc <cleanup_glue>:
    62bc:	e92d4038 	push	{r3, r4, r5, lr}
    62c0:	e1a04001 	mov	r4, r1
    62c4:	e5911000 	ldr	r1, [r1]
    62c8:	e3510000 	cmp	r1, #0
    62cc:	e1a05000 	mov	r5, r0
    62d0:	1bfffff9 	blne	62bc <cleanup_glue>
    62d4:	e1a00005 	mov	r0, r5
    62d8:	e1a01004 	mov	r1, r4
    62dc:	ebffff5b 	bl	6050 <_free_r>
    62e0:	e8bd4038 	pop	{r3, r4, r5, lr}
    62e4:	e12fff1e 	bx	lr

000062e8 <_reclaim_reent>:
    62e8:	e59f30f0 	ldr	r3, [pc, #240]	; 63e0 <_reclaim_reent+0xf8>
    62ec:	e5933000 	ldr	r3, [r3]
    62f0:	e1500003 	cmp	r0, r3
    62f4:	e92d4070 	push	{r4, r5, r6, lr}
    62f8:	e1a05000 	mov	r5, r0
    62fc:	0a00002b 	beq	63b0 <_reclaim_reent+0xc8>
    6300:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    6304:	e3520000 	cmp	r2, #0
    6308:	0a000011 	beq	6354 <_reclaim_reent+0x6c>
    630c:	e3a03000 	mov	r3, #0
    6310:	e1a06003 	mov	r6, r3
    6314:	e7921103 	ldr	r1, [r2, r3, lsl #2]
    6318:	e3510000 	cmp	r1, #0
    631c:	0a000005 	beq	6338 <_reclaim_reent+0x50>
    6320:	e5914000 	ldr	r4, [r1]
    6324:	e1a00005 	mov	r0, r5
    6328:	ebffff48 	bl	6050 <_free_r>
    632c:	e2541000 	subs	r1, r4, #0
    6330:	1afffffa 	bne	6320 <_reclaim_reent+0x38>
    6334:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    6338:	e2866001 	add	r6, r6, #1
    633c:	e3560020 	cmp	r6, #32
    6340:	e1a03006 	mov	r3, r6
    6344:	1afffff2 	bne	6314 <_reclaim_reent+0x2c>
    6348:	e1a00005 	mov	r0, r5
    634c:	e1a01002 	mov	r1, r2
    6350:	ebffff3e 	bl	6050 <_free_r>
    6354:	e5951040 	ldr	r1, [r5, #64]	; 0x40
    6358:	e3510000 	cmp	r1, #0
    635c:	11a00005 	movne	r0, r5
    6360:	1bffff3a 	blne	6050 <_free_r>
    6364:	e5951148 	ldr	r1, [r5, #328]	; 0x148
    6368:	e3510000 	cmp	r1, #0
    636c:	0a000008 	beq	6394 <_reclaim_reent+0xac>
    6370:	e2856f53 	add	r6, r5, #332	; 0x14c
    6374:	e1510006 	cmp	r1, r6
    6378:	0a000005 	beq	6394 <_reclaim_reent+0xac>
    637c:	e5914000 	ldr	r4, [r1]
    6380:	e1a00005 	mov	r0, r5
    6384:	ebffff31 	bl	6050 <_free_r>
    6388:	e1560004 	cmp	r6, r4
    638c:	e1a01004 	mov	r1, r4
    6390:	1afffff9 	bne	637c <_reclaim_reent+0x94>
    6394:	e5951054 	ldr	r1, [r5, #84]	; 0x54
    6398:	e3510000 	cmp	r1, #0
    639c:	11a00005 	movne	r0, r5
    63a0:	1bffff2a 	blne	6050 <_free_r>
    63a4:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    63a8:	e3530000 	cmp	r3, #0
    63ac:	1a000001 	bne	63b8 <_reclaim_reent+0xd0>
    63b0:	e8bd4070 	pop	{r4, r5, r6, lr}
    63b4:	e12fff1e 	bx	lr
    63b8:	e1a00005 	mov	r0, r5
    63bc:	e595c03c 	ldr	r12, [r5, #60]	; 0x3c
    63c0:	e1a0e00f 	mov	lr, pc
    63c4:	e12fff1c 	bx	r12
    63c8:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
    63cc:	e3510000 	cmp	r1, #0
    63d0:	0afffff6 	beq	63b0 <_reclaim_reent+0xc8>
    63d4:	e1a00005 	mov	r0, r5
    63d8:	e8bd4070 	pop	{r4, r5, r6, lr}
    63dc:	eaffffb6 	b	62bc <cleanup_glue>
    63e0:	00006980 	.word	0x00006980

000063e4 <_wrapup_reent>:
    63e4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    63e8:	e2507000 	subs	r7, r0, #0
    63ec:	059f3060 	ldreq	r3, [pc, #96]	; 6454 <_wrapup_reent+0x70>
    63f0:	05937000 	ldreq	r7, [r3]
    63f4:	e5976148 	ldr	r6, [r7, #328]	; 0x148
    63f8:	e3560000 	cmp	r6, #0
    63fc:	0a00000d 	beq	6438 <_wrapup_reent+0x54>
    6400:	e5965004 	ldr	r5, [r6, #4]
    6404:	e2554001 	subs	r4, r5, #1
    6408:	52855002 	addpl	r5, r5, #2
    640c:	50865105 	addpl	r5, r6, r5, lsl #2
    6410:	4a000005 	bmi	642c <_wrapup_reent+0x48>
    6414:	e5353004 	ldr	r3, [r5, #-4]!
    6418:	e2444001 	sub	r4, r4, #1
    641c:	e1a0e00f 	mov	lr, pc
    6420:	e12fff13 	bx	r3
    6424:	e3740001 	cmn	r4, #1
    6428:	1afffff9 	bne	6414 <_wrapup_reent+0x30>
    642c:	e5966000 	ldr	r6, [r6]
    6430:	e3560000 	cmp	r6, #0
    6434:	1afffff1 	bne	6400 <_wrapup_reent+0x1c>
    6438:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
    643c:	e3530000 	cmp	r3, #0
    6440:	11a00007 	movne	r0, r7
    6444:	11a0e00f 	movne	lr, pc
    6448:	112fff13 	bxne	r3
    644c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    6450:	e12fff1e 	bx	lr
    6454:	00006980 	.word	0x00006980

00006458 <__cs3_premain>:
    6458:	e92d4008 	push	{r3, lr}
    645c:	eb000033 	bl	6530 <__libc_init_array>
    6460:	e59f3030 	ldr	r3, [pc, #48]	; 6498 <__cs3_premain+0x40>
    6464:	e3530000 	cmp	r3, #0
    6468:	15930000 	ldrne	r0, [r3]
    646c:	01a00003 	moveq	r0, r3
    6470:	e59f3024 	ldr	r3, [pc, #36]	; 649c <__cs3_premain+0x44>
    6474:	e3530000 	cmp	r3, #0
    6478:	15931000 	ldrne	r1, [r3]
    647c:	01a01003 	moveq	r1, r3
    6480:	e3a02000 	mov	r2, #0
    6484:	ebffe7c1 	bl	390 <main>
    6488:	e59f3010 	ldr	r3, [pc, #16]	; 64a0 <__cs3_premain+0x48>
    648c:	e3530000 	cmp	r3, #0
    6490:	1bfffb77 	blne	5274 <exit>
    6494:	eafffffe 	b	6494 <__cs3_premain+0x3c>
	...
    64a0:	00005274 	.word	0x00005274

000064a4 <_exit>:
    64a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    64a8:	e3a00018 	mov	r0, #24
    64ac:	e59f1004 	ldr	r1, [pc, #4]	; 64b8 <_exit+0x14>
    64b0:	ef123456 	svc	0x00123456
    64b4:	eafffffe 	b	64b4 <_exit+0x10>
    64b8:	00020026 	.word	0x00020026

000064bc <_sbrk>:
    64bc:	e92d4008 	push	{r3, lr}
    64c0:	e59f305c 	ldr	r3, [pc, #92]	; 6524 <_sbrk+0x68>
    64c4:	e59f105c 	ldr	r1, [pc, #92]	; 6528 <_sbrk+0x6c>
    64c8:	e5932000 	ldr	r2, [r3]
    64cc:	e5913000 	ldr	r3, [r1]
    64d0:	e3520000 	cmp	r2, #0
    64d4:	e0830000 	add	r0, r3, r0
    64d8:	0a000002 	beq	64e8 <_sbrk+0x2c>
    64dc:	e0602002 	rsb	r2, r0, r2
    64e0:	e3520000 	cmp	r2, #0
    64e4:	ba000009 	blt	6510 <_sbrk+0x54>
    64e8:	e04d2003 	sub	r2, sp, r3
    64ec:	e3520000 	cmp	r2, #0
    64f0:	ba000002 	blt	6500 <_sbrk+0x44>
    64f4:	e04d2000 	sub	r2, sp, r0
    64f8:	e35200ff 	cmp	r2, #255	; 0xff
    64fc:	da000003 	ble	6510 <_sbrk+0x54>
    6500:	e5810000 	str	r0, [r1]
    6504:	e1a00003 	mov	r0, r3
    6508:	e8bd4008 	pop	{r3, lr}
    650c:	e12fff1e 	bx	lr
    6510:	ebfffb53 	bl	5264 <__errno>
    6514:	e3a0300c 	mov	r3, #12
    6518:	e5803000 	str	r3, [r0]
    651c:	e3e03000 	mvn	r3, #0
    6520:	eafffff7 	b	6504 <_sbrk+0x48>
    6524:	000071c0 	.word	0x000071c0
    6528:	000071c4 	.word	0x000071c4

0000652c <__cs3_isr_interrupt>:
    652c:	eafffffe 	b	652c <__cs3_isr_interrupt>

00006530 <__libc_init_array>:
    6530:	e92d4070 	push	{r4, r5, r6, lr}
    6534:	e59f506c 	ldr	r5, [pc, #108]	; 65a8 <__libc_init_array+0x78>
    6538:	e59f606c 	ldr	r6, [pc, #108]	; 65ac <__libc_init_array+0x7c>
    653c:	e0656006 	rsb	r6, r5, r6
    6540:	e1b06146 	asrs	r6, r6, #2
    6544:	12455004 	subne	r5, r5, #4
    6548:	13a04000 	movne	r4, #0
    654c:	0a000005 	beq	6568 <__libc_init_array+0x38>
    6550:	e5b53004 	ldr	r3, [r5, #4]!
    6554:	e2844001 	add	r4, r4, #1
    6558:	e1a0e00f 	mov	lr, pc
    655c:	e12fff13 	bx	r3
    6560:	e1560004 	cmp	r6, r4
    6564:	1afffff9 	bne	6550 <__libc_init_array+0x20>
    6568:	e59f5040 	ldr	r5, [pc, #64]	; 65b0 <__libc_init_array+0x80>
    656c:	e59f6040 	ldr	r6, [pc, #64]	; 65b4 <__libc_init_array+0x84>
    6570:	e0656006 	rsb	r6, r5, r6
    6574:	eb0000be 	bl	6874 <_init>
    6578:	e1b06146 	asrs	r6, r6, #2
    657c:	12455004 	subne	r5, r5, #4
    6580:	13a04000 	movne	r4, #0
    6584:	0a000005 	beq	65a0 <__libc_init_array+0x70>
    6588:	e5b53004 	ldr	r3, [r5, #4]!
    658c:	e2844001 	add	r4, r4, #1
    6590:	e1a0e00f 	mov	lr, pc
    6594:	e12fff13 	bx	r3
    6598:	e1560004 	cmp	r6, r4
    659c:	1afffff9 	bne	6588 <__libc_init_array+0x58>
    65a0:	e8bd4070 	pop	{r4, r5, r6, lr}
    65a4:	e12fff1e 	bx	lr
    65a8:	0000688c 	.word	0x0000688c
    65ac:	0000688c 	.word	0x0000688c
    65b0:	0000688c 	.word	0x0000688c
    65b4:	00006894 	.word	0x00006894

Disassembly of section .rodata:

000065c0 <seg7_codes>:
    65c0:	4f5b063f 077d6d66 7c77677f 71795e39     ?.[Ofm}..gw|9^yq

000065d0 <test_song>:
    65d0:	000068d4 00000001                       .h......

000065d8 <min_volume>:
    65d8:	00000001                                ....

000065dc <max_volume>:
    65dc:	00000014                                ....

000065e0 <error_code>:
    65e0:	00000040 00000041 00007343 00000045     @...A...Cs..E...
    65f0:	00000053 00000042 00007344 00007346     S...B...Ds..Fs..

00006600 <default_amplitude>:
    6600:	d2d0e560 4150624d                       `...MbPA

00006608 <sampling_period>:
    6608:	d2f1a9fc 3f20624d                       ....Mb ?

00006610 <sampling_frequency>:
    6610:	00001f40 00000000                       @.......

00006618 <pi>:
    6618:	54442d18 400921fb 00000043 00006244     .-DT.!.@C...Db..
    6628:	00000044 00006245 00000046 00006247     D...Eb..F...Gb..
    6638:	00000047 00007347 00006241 00007341     G...Gs..Ab..As..
    6648:	00006242 00776f70                       Bb..pow.

00006650 <bp>:
    6650:	00000000 3ff00000 00000000 3ff80000     .......?.......?

00006660 <dp_l>:
	...
    6668:	43cfd006 3e4cfdeb                       ...C..L>

00006670 <dp_h>:
	...
    6678:	40000000 3fe2b803 00000000              ...@...?....

00006684 <npio2_hw>:
    6684:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
    6694:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
    66a4:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
    66b4:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
    66c4:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
    66d4:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
    66e4:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
    66f4:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00006704 <two_over_pi>:
    6704:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
    6714:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
    6724:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
    6734:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
    6744:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
    6754:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
    6764:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
    6774:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
    6784:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
    6794:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
    67a4:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
    67b4:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
    67c4:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
    67d4:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
    67e4:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
    67f4:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
    6804:	0060e27b 00c08c6b 00000000              {.`.k.......

00006810 <init_jk>:
    6810:	00000002 00000003 00000004 00000006     ................

00006820 <PIo2>:
    6820:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
    6830:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
    6840:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
    6850:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

00006860 <TWO52>:
    6860:	00000000 43300000 00000000 c3300000     ......0C......0.

00006870 <_global_impure_ptr>:
    6870:	00006988                                .i..

00006874 <_init>:
    6874:	e1a0c00d 	mov	r12, sp
    6878:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    687c:	e24cb004 	sub	r11, r12, #4
    6880:	e24bd028 	sub	sp, r11, #40	; 0x28
    6884:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    6888:	e12fff1e 	bx	lr

0000688c <__init_array_start>:
    688c:	00005eec 	.word	0x00005eec

00006890 <__frame_dummy_init_array_entry>:
    6890:	00000208                                ....

00006894 <__libc_fini>:
    6894:	e1a0c00d 	mov	r12, sp
    6898:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    689c:	e24cb004 	sub	r11, r12, #4
    68a0:	e24bd028 	sub	sp, r11, #40	; 0x28
    68a4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    68a8:	e12fff1e 	bx	lr

000068ac <__fini_array_start>:
    68ac:	000001c4 	.word	0x000001c4

000068b0 <__cs3_regions>:
    68b0:	00000000 	.word	0x00000000
    68b4:	00000040 	.word	0x00000040
    68b8:	00000040 	.word	0x00000040
    68bc:	00007188 	.word	0x00007188
    68c0:	00000078 	.word	0x00000078

000068c4 <__cs3_regions_end>:
    68c4:	00000000 	.word	0x00000000
