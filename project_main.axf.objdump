
C:/Users/David/Documents/GitHub/happy-birthday-project/project_main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	30 09 00 00 34 09 00 00 38 09 00 00 3c 09 00 00     0...4...8...<...
  30:	40 09 00 00 8c 69 00 00 cc 08 00 00 44 09 00 00     @....i......D...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb0019f7 	bl	68b8 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00006d64 	.word	0x00006d64

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	0002c538 	.word	0x0002c538

00000124 <__cs3_heap_start_ptr>:
     124:	00031a78 	.word	0x00031a78

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	0002c540 	.word	0x0002c540
     170:	0002c543 	.word	0x0002c543
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	0002c540 	.word	0x0002c540
     1bc:	0002c540 	.word	0x0002c540
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	0002c540 	.word	0x0002c540
     200:	00000000 	.word	0x00000000
     204:	00006a18 	.word	0x00006a18

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00006a18 	.word	0x00006a18
     250:	0002c544 	.word	0x0002c544
     254:	00006d68 	.word	0x00006d68
     258:	00000000 	.word	0x00000000

0000025c <num_to_seg7_hex>:
	 
const char error_code = 0b01000000;

short int num_to_seg7_hex(unsigned int num){
	//make sure that the number does not exceed 0xFF
	if(num > 0xFF) return error_code | (error_code << 8);
     25c:	e35000ff 	cmp	r0, #255	; 0xff
	//extract the digits from the num given
	int first_hexdigit = num & 0xF;
	int second_hexdigit = num >> 4;
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     260:	93063a20 	movwls	r3, #27168	; 0x6a20
     264:	93403000 	movtls	r3, #0
     268:	97d32220 	ldrbls	r2, [r3, r0, lsr #4]
short int num_to_seg7_hex(unsigned int num){
	//make sure that the number does not exceed 0xFF
	if(num > 0xFF) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num & 0xF;
     26c:	9200000f 	andls	r0, r0, #15
	int second_hexdigit = num >> 4;
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     270:	97d33000 	ldrbls	r3, [r3, r0]
	
	return to_return;
     274:	91830402 	orrls	r0, r3, r2, lsl #8
	 
const char error_code = 0b01000000;

short int num_to_seg7_hex(unsigned int num){
	//make sure that the number does not exceed 0xFF
	if(num > 0xFF) return error_code | (error_code << 8);
     278:	83040040 	movwhi	r0, #16448	; 0x4040
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
	
	return to_return;
}
     27c:	e6bf0070 	sxth	r0, r0
     280:	e12fff1e 	bx	lr

00000284 <num_to_seg7_dec>:

short int num_to_seg7_dec(unsigned int num){
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
     284:	e3500063 	cmp	r0, #99	; 0x63
     288:	83040040 	movwhi	r0, #16448	; 0x4040
     28c:	8a00000b 	bhi	2c0 <num_to_seg7_dec+0x3c>
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     290:	e3063a20 	movw	r3, #27168	; 0x6a20
     294:	e3403000 	movt	r3, #0
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
     298:	e30c1ccd 	movw	r1, #52429	; 0xcccd
     29c:	e34c1ccc 	movt	r1, #52428	; 0xcccc
     2a0:	e0812091 	umull	r2, r1, r1, r0
     2a4:	e1a021a1 	lsr	r2, r1, #3
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     2a8:	e7d311a1 	ldrb	r1, [r3, r1, lsr #3]
short int num_to_seg7_dec(unsigned int num){
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
     2ac:	e0822102 	add	r2, r2, r2, lsl #2
     2b0:	e0400082 	sub	r0, r0, r2, lsl #1
	int second_hexdigit = num / 10;
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     2b4:	e7d33000 	ldrb	r3, [r3, r0]
	
	return to_return;
     2b8:	e1830401 	orr	r0, r3, r1, lsl #8
     2bc:	eaffffff 	b	2c0 <num_to_seg7_dec+0x3c>
     2c0:	e6bf0070 	sxth	r0, r0
     2c4:	e12fff1e 	bx	lr

000002c8 <display_status>:
	}
	
	return 0;
}

void display_status(){
     2c8:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
	
	//store all ledr displays
	int to_display_on_ledr = 0;
	
	//display if the stream has been fully populated
	if (is_stream_fully_processed()) 
     2cc:	eb000412 	bl	131c <is_stream_fully_processed>
	volatile int * ledr_base = (int*) LEDR_BASE;
	volatile int * hex3_hex0_base = (int*) HEX3_HEX0_BASE;
	volatile int * hex5_hex4_base = (int*) HEX5_HEX4_BASE;
	
	//store all ledr displays
	int to_display_on_ledr = 0;
     2d0:	e3500000 	cmp	r0, #0
     2d4:	13a06002 	movne	r6, #2
     2d8:	03a06000 	moveq	r6, #0
	//display if the stream has been fully populated
	if (is_stream_fully_processed()) 
		to_display_on_ledr = 0x2;
	
	//display if the stream is currently valid
	if (is_stream_valid())
     2dc:	eb0003f2 	bl	12ac <is_stream_valid>
     2e0:	e3500000 	cmp	r0, #0
		to_display_on_ledr = to_display_on_ledr | 0x1;
     2e4:	13866001 	orrne	r6, r6, #1
	
	//display if the audio output overflowed
	if(status_flags.volume_clipped){
     2e8:	e30c3560 	movw	r3, #50528	; 0xc560
     2ec:	e3403002 	movt	r3, #2
     2f0:	e5d33003 	ldrb	r3, [r3, #3]
     2f4:	e3530000 	cmp	r3, #0
		to_display_on_ledr = to_display_on_ledr | 0x200;
     2f8:	13866c02 	orrne	r6, r6, #512	; 0x200
	}
	
	//display if frequency overflow has occurred
	if(status_flags.frequency_overflow){
     2fc:	e30c3560 	movw	r3, #50528	; 0xc560
     300:	e3403002 	movt	r3, #2
     304:	e5d33004 	ldrb	r3, [r3, #4]
     308:	e3530000 	cmp	r3, #0
		to_display_on_ledr = to_display_on_ledr | 0x100;
     30c:	13866c01 	orrne	r6, r6, #256	; 0x100
	//store all hex displays
	int to_display_on_hex3_hex0 = 0;
	int to_display_on_hex5_hex4 = 0;
	
	//display the current volume on the hexes
	to_display_on_hex3_hex0 = num_to_seg7_dec(volume);
     310:	e3063d70 	movw	r3, #28016	; 0x6d70
     314:	e3403000 	movt	r3, #0
     318:	e5930000 	ldr	r0, [r3]
     31c:	ebffffd8 	bl	284 <num_to_seg7_dec>
     320:	e1a0a000 	mov	r10, r0
	
	//display the current length on the hexes as well
	double time_left = get_time_left();
     324:	eb000486 	bl	1544 <get_time_left>
     328:	e1a04000 	mov	r4, r0
     32c:	e1a05001 	mov	r5, r1
	to_display_on_hex3_hex0 = to_display_on_hex3_hex0 | (num_to_seg7_dec(((int) (time_left * 100)) % 100) << 16);
     330:	e3a02000 	mov	r2, #0
     334:	e3a03000 	mov	r3, #0
     338:	e3443059 	movt	r3, #16473	; 0x4059
     33c:	eb001334 	bl	5014 <__aeabi_dmul>
     340:	eb0014ab 	bl	55f4 <__aeabi_d2iz>
     344:	e1a03000 	mov	r3, r0
     348:	e308751f 	movw	r7, #34079	; 0x851f
     34c:	e34571eb 	movt	r7, #20971	; 0x51eb
     350:	e0c02097 	smull	r2, r0, r7, r0
     354:	e1a02fc3 	asr	r2, r3, #31
     358:	e06202c0 	rsb	r0, r2, r0, asr #5
     35c:	e3a08064 	mov	r8, #100	; 0x64
     360:	e0603098 	mls	r0, r8, r0, r3
     364:	ebffffc6 	bl	284 <num_to_seg7_dec>
     368:	e18aa800 	orr	r10, r10, r0, lsl #16
	to_display_on_hex5_hex4 = num_to_seg7_dec(((int) time_left) % 100);
     36c:	e1a00004 	mov	r0, r4
     370:	e1a01005 	mov	r1, r5
     374:	eb00149e 	bl	55f4 <__aeabi_d2iz>
     378:	e0c73097 	smull	r3, r7, r7, r0
     37c:	e1a03fc0 	asr	r3, r0, #31
     380:	e06372c7 	rsb	r7, r3, r7, asr #5
     384:	e0600798 	mls	r0, r8, r7, r0
     388:	ebffffbd 	bl	284 <num_to_seg7_dec>
	
	//display on hex and ledr
	*ledr_base = to_display_on_ledr;
     38c:	e3a03000 	mov	r3, #0
     390:	e34f3f20 	movt	r3, #65312	; 0xff20
     394:	e5836000 	str	r6, [r3]
	*hex3_hex0_base = to_display_on_hex3_hex0;
     398:	e583a020 	str	r10, [r3, #32]
	*hex5_hex4_base = to_display_on_hex5_hex4;
     39c:	e5830030 	str	r0, [r3, #48]	; 0x30
     3a0:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}

000003a4 <main>:
struct StatusFlags status_flags = {.clear_queue = false, .change_song = false, .is_playing = false, .volume_clipped = false, .frequency_overflow = false};
const unsigned int max_volume = 10, min_volume = 0, default_volume = 5;
const double volume_sensitivity = 1.5;
unsigned int volume = 5;

int main(){
     3a4:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
	volatile int * sw_base = (int*) SW_BASE;
	
	//configure the interrupts and hardware components
	set_A9_IRQ_stack();
     3a8:	eb00010a 	bl	7d8 <set_A9_IRQ_stack>
	config_GIC();
     3ac:	eb000137 	bl	890 <config_GIC>
	config_audio();
     3b0:	eb0000fc 	bl	7a8 <config_audio>
	config_keys();
     3b4:	eb000102 	bl	7c4 <config_keys>
					
	//initialize the audio stream
	audio_stream.current_song = song_list;
     3b8:	e3013a28 	movw	r3, #6696	; 0x1a28
     3bc:	e3403003 	movt	r3, #3
     3c0:	e59f207c 	ldr	r2, [pc, #124]	; 444 <main+0xa0>
     3c4:	e5832014 	str	r2, [r3, #20]
	initialize_stream();
     3c8:	eb000343 	bl	10dc <initialize_stream>
	
	//enable interrupts once all setup is finished
	enable_A9_interrupts();
     3cc:	eb000108 	bl	7f4 <enable_A9_interrupts>
	while(1){
		//continue to populate the audio_stream
		populate_stream();
		
		//clear the audio_stream if requested
		if(status_flags.clear_queue || status_flags.change_song){
     3d0:	e30c4560 	movw	r4, #50528	; 0xc560
     3d4:	e3404002 	movt	r4, #2
			clear_stream();
			
			//reset the flag so that clearing does not happen again
			status_flags.clear_queue = false;
     3d8:	e3a05000 	mov	r5, #0
		}
		
		//change current song if requested
		if(status_flags.change_song){
			//use the first four switches to pick song
			unsigned int song_offset = (*sw_base) & 0xF;
     3dc:	e1a07005 	mov	r7, r5
     3e0:	e34f7f20 	movt	r7, #65312	; 0xff20
		
			//deconstructs the current stream
			deconstruct_stream();
			
			//changes the song based on switches
			audio_stream.current_song = song_list + song_offset;
     3e4:	e3016a28 	movw	r6, #6696	; 0x1a28
     3e8:	e3406003 	movt	r6, #3
     3ec:	e59f8050 	ldr	r8, [pc, #80]	; 444 <main+0xa0>
	enable_A9_interrupts();
	
	//main loop
	while(1){
		//continue to populate the audio_stream
		populate_stream();
     3f0:	eb00040c 	bl	1428 <populate_stream>
		
		//clear the audio_stream if requested
		if(status_flags.clear_queue || status_flags.change_song){
     3f4:	e5d43000 	ldrb	r3, [r4]
     3f8:	e3530000 	cmp	r3, #0
     3fc:	1a000002 	bne	40c <main+0x68>
     400:	e5d43001 	ldrb	r3, [r4, #1]
     404:	e3530000 	cmp	r3, #0
     408:	0a00000b 	beq	43c <main+0x98>
			clear_stream();
     40c:	eb00037c 	bl	1204 <clear_stream>
			
			//reset the flag so that clearing does not happen again
			status_flags.clear_queue = false;
     410:	e5c45000 	strb	r5, [r4]
		}
		
		//change current song if requested
		if(status_flags.change_song){
     414:	e5d43001 	ldrb	r3, [r4, #1]
     418:	e3530000 	cmp	r3, #0
     41c:	0a000006 	beq	43c <main+0x98>
			//use the first four switches to pick song
			unsigned int song_offset = (*sw_base) & 0xF;
     420:	e597a040 	ldr	r10, [r7, #64]	; 0x40
		
			//deconstructs the current stream
			deconstruct_stream();
     424:	eb00035e 	bl	11a4 <deconstruct_stream>
		}
		
		//change current song if requested
		if(status_flags.change_song){
			//use the first four switches to pick song
			unsigned int song_offset = (*sw_base) & 0xF;
     428:	e20aa00f 	and	r10, r10, #15
		
			//deconstructs the current stream
			deconstruct_stream();
			
			//changes the song based on switches
			audio_stream.current_song = song_list + song_offset;
     42c:	e088a18a 	add	r10, r8, r10, lsl #3
     430:	e586a014 	str	r10, [r6, #20]
		
			//re-initializes the stream
			initialize_stream();
     434:	eb000328 	bl	10dc <initialize_stream>
		
			//reset the flag so that changing the song does not happen again
			status_flags.change_song = false;
     438:	e5c45001 	strb	r5, [r4, #1]
		}
		
		//display status on leds and hexes
		display_status();
     43c:	ebffffa1 	bl	2c8 <display_status>
	}
     440:	eaffffea 	b	3f0 <main+0x4c>
     444:	00006a30 	.word	0x00006a30

00000448 <stop_audio_playback>:
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     448:	e5903000 	ldr	r3, [r0]
     44c:	e3530000 	cmp	r3, #0
     450:	0a000006 	beq	470 <stop_audio_playback+0x28>
		//write nothing to the audio fifo (merely to clear the interrupt)
		*audio_fifo = 0;
     454:	e3a02000 	mov	r2, #0
     458:	e5812000 	str	r2, [r1]
		
		//advance the number of samples
		*num_samples = *num_samples - 1;
     45c:	e5903000 	ldr	r3, [r0]
     460:	e2433001 	sub	r3, r3, #1
     464:	e5803000 	str	r3, [r0]
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     468:	e3530000 	cmp	r3, #0
     46c:	1afffff9 	bne	458 <stop_audio_playback+0x10>
		*num_samples = *num_samples - 1;
	}
	
	//turn off interrupts
	volatile int * audio_base = (int*) AUDIO_BASE;
	*audio_base = 0b0000;
     470:	e3033fff 	movw	r3, #16383	; 0x3fff
     474:	e34f3f20 	movt	r3, #65312	; 0xff20
     478:	e3a02000 	mov	r2, #0
     47c:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
	
	//set the status flags
	status_flags.is_playing = false;
     480:	e30c3560 	movw	r3, #50528	; 0xc560
     484:	e3403002 	movt	r3, #2
     488:	e5c32002 	strb	r2, [r3, #2]
     48c:	e12fff1e 	bx	lr

00000490 <stop_all_audio_playback>:
	*ledr_base = to_display_on_ledr;
	*hex3_hex0_base = to_display_on_hex3_hex0;
	*hex5_hex4_base = to_display_on_hex5_hex4;
}

void stop_all_audio_playback(){
     490:	e92d4010 	push	{r4, lr}
     494:	e24dd008 	sub	sp, sp, #8
	volatile int * audio_base = (int *) AUDIO_BASE;
	
	unsigned int fifo_space = *(audio_base + 1);
     498:	e3033fff 	movw	r3, #16383	; 0x3fff
     49c:	e34f3f20 	movt	r3, #65312	; 0xff20
     4a0:	e5134fbb 	ldr	r4, [r3, #-4027]	; 0xfffff045
	
	//stop audio playback for the right
	unsigned int num_samples_right = (unsigned int) ((fifo_space >> 16) & 0xFF);
     4a4:	e7e73854 	ubfx	r3, r4, #16, #8
     4a8:	e28d0008 	add	r0, sp, #8
     4ac:	e5203004 	str	r3, [r0, #-4]!
	stop_audio_playback(&num_samples_right, audio_base + 3);
     4b0:	e303104c 	movw	r1, #12364	; 0x304c
     4b4:	e34f1f20 	movt	r1, #65312	; 0xff20
     4b8:	ebffffe2 	bl	448 <stop_audio_playback>
	
	//stop audio playback for the left
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
     4bc:	e1a04c24 	lsr	r4, r4, #24
     4c0:	e28d0008 	add	r0, sp, #8
     4c4:	e5204008 	str	r4, [r0, #-8]!
	stop_audio_playback(&num_samples_left, audio_base + 2);
     4c8:	e1a0000d 	mov	r0, sp
     4cc:	e3031048 	movw	r1, #12360	; 0x3048
     4d0:	e34f1f20 	movt	r1, #65312	; 0xff20
     4d4:	ebffffdb 	bl	448 <stop_audio_playback>
}
     4d8:	e28dd008 	add	sp, sp, #8
     4dc:	e8bd8010 	pop	{r4, pc}

000004e0 <start_audio_playback>:
	
	//set the status flags
	status_flags.is_playing = false;
}

void start_audio_playback(){
     4e0:	e92d4008 	push	{r3, lr}
	//check to see if the stream is valid
	if(!is_stream_valid()) return;
     4e4:	eb000370 	bl	12ac <is_stream_valid>
     4e8:	e3500000 	cmp	r0, #0
     4ec:	08bd8008 	popeq	{r3, pc}
	
	//turn on interrupts
	volatile int * audio_base = (int*) AUDIO_BASE;
	*audio_base = 0b0010;
     4f0:	e3033fff 	movw	r3, #16383	; 0x3fff
     4f4:	e34f3f20 	movt	r3, #65312	; 0xff20
     4f8:	e3a02002 	mov	r2, #2
     4fc:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
	
	//set the playing flag
	status_flags.is_playing = true;
     500:	e30c3560 	movw	r3, #50528	; 0xc560
     504:	e3403002 	movt	r3, #2
     508:	e3a02001 	mov	r2, #1
     50c:	e5c32002 	strb	r2, [r3, #2]
     510:	e8bd8008 	pop	{r3, pc}

00000514 <keys_ISR>:
}

void keys_ISR(){
     514:	e92d4010 	push	{r4, lr}
	volatile int * key_base = (int*) KEY_BASE;
	
	//read the reset the edgecapture bits
	int edgecapture = *(key_base + 3);
     518:	e3a03000 	mov	r3, #0
     51c:	e34f3f20 	movt	r3, #65312	; 0xff20
     520:	e593405c 	ldr	r4, [r3, #92]	; 0x5c
	*(key_base + 3) = edgecapture;
     524:	e583405c 	str	r4, [r3, #92]	; 0x5c
	
	//play selected song with key press 0
	if(edgecapture & 0b0001){		
     528:	e3140001 	tst	r4, #1
     52c:	0a000007 	beq	550 <keys_ISR+0x3c>
		if(status_flags.is_playing){
     530:	e30c3560 	movw	r3, #50528	; 0xc560
     534:	e3403002 	movt	r3, #2
     538:	e5d33002 	ldrb	r3, [r3, #2]
     53c:	e3530000 	cmp	r3, #0
     540:	0a000001 	beq	54c <keys_ISR+0x38>
			stop_all_audio_playback();
     544:	ebffffd1 	bl	490 <stop_all_audio_playback>
     548:	ea000000 	b	550 <keys_ISR+0x3c>
		} else {
			start_audio_playback();
     54c:	ebffffe3 	bl	4e0 <start_audio_playback>
		}
	}
	
	//change song to selected on switches and clear current queue if key press 1
	if(edgecapture & 0b0010){
     550:	e3140002 	tst	r4, #2
     554:	0a000007 	beq	578 <keys_ISR+0x64>
		status_flags.change_song = true;
     558:	e30c3560 	movw	r3, #50528	; 0xc560
     55c:	e3403002 	movt	r3, #2
     560:	e3a02001 	mov	r2, #1
     564:	e5c32001 	strb	r2, [r3, #1]
		
		//stop playing if there is a song currently playing
		if(status_flags.is_playing){
     568:	e5d33002 	ldrb	r3, [r3, #2]
     56c:	e3530000 	cmp	r3, #0
     570:	0a000000 	beq	578 <keys_ISR+0x64>
			stop_all_audio_playback();
     574:	ebffffc5 	bl	490 <stop_all_audio_playback>
		}
	}
	
	//increase volume if key press 2
	if(edgecapture & 0b0100){
     578:	e3140004 	tst	r4, #4
     57c:	0a000007 	beq	5a0 <keys_ISR+0x8c>
		if(volume < max_volume) volume++;
     580:	e3063d70 	movw	r3, #28016	; 0x6d70
     584:	e3403000 	movt	r3, #0
     588:	e5933000 	ldr	r3, [r3]
     58c:	e3530009 	cmp	r3, #9
     590:	93062d70 	movwls	r2, #28016	; 0x6d70
     594:	93402000 	movtls	r2, #0
     598:	92833001 	addls	r3, r3, #1
     59c:	95823000 	strls	r3, [r2]
	}
	
	//decrease volume if key press 3
	if(edgecapture & 0b1000){
     5a0:	e3140008 	tst	r4, #8
     5a4:	08bd8010 	popeq	{r4, pc}
		if(volume > min_volume) volume--;
     5a8:	e3063d70 	movw	r3, #28016	; 0x6d70
     5ac:	e3403000 	movt	r3, #0
     5b0:	e5933000 	ldr	r3, [r3]
     5b4:	e3530000 	cmp	r3, #0
     5b8:	13062d70 	movwne	r2, #28016	; 0x6d70
     5bc:	13402000 	movtne	r2, #0
     5c0:	12433001 	subne	r3, r3, #1
     5c4:	15823000 	strne	r3, [r2]
     5c8:	e8bd8010 	pop	{r4, pc}

000005cc <audio_ISR>:
	}
}

void audio_ISR(){
     5cc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     5d0:	e24dd014 	sub	sp, sp, #20
	//catch if there is nothing to write to the audio queue
	if(!is_stream_valid()) while (1);
     5d4:	eb000334 	bl	12ac <is_stream_valid>
     5d8:	e3500000 	cmp	r0, #0
     5dc:	1a000000 	bne	5e4 <audio_ISR+0x18>
     5e0:	eafffffe 	b	5e0 <audio_ISR+0x14>
	
	volatile int * audio_base = (int *) AUDIO_BASE;
	volatile int * audio_right = audio_base + 3;
	volatile int * audio_left = audio_base + 2;
	
	unsigned int fifo_space = *(audio_base + 1);
     5e4:	e3033fff 	movw	r3, #16383	; 0x3fff
     5e8:	e34f3f20 	movt	r3, #65312	; 0xff20
     5ec:	e5134fbb 	ldr	r4, [r3, #-4027]	; 0xfffff045
		
	//check the change in amplitude of the waves
	double amplitude_modulation = pow(volume_sensitivity, ((double) volume) - ((double) default_volume));
     5f0:	e3063d70 	movw	r3, #28016	; 0x6d70
     5f4:	e3403000 	movt	r3, #0
     5f8:	e5930000 	ldr	r0, [r3]
     5fc:	eb001244 	bl	4f14 <__aeabi_ui2d>
     600:	e3a02000 	mov	r2, #0
     604:	e3a03000 	mov	r3, #0
     608:	e3443014 	movt	r3, #16404	; 0x4014
     60c:	eb00117b 	bl	4c00 <__aeabi_dsub>
     610:	e1a02000 	mov	r2, r0
     614:	e1a03001 	mov	r3, r1
     618:	e3a00000 	mov	r0, #0
     61c:	e3a01000 	mov	r1, #0
     620:	e3431ff8 	movt	r1, #16376	; 0x3ff8
     624:	eb0004cf 	bl	1968 <pow>
     628:	e1a0a000 	mov	r10, r0
     62c:	e1a0b001 	mov	r11, r1
		
	//check the right and left write availability
	unsigned int num_samples_right = (unsigned int) ((fifo_space >> 16) & 0xFF);
     630:	e7e77854 	ubfx	r7, r4, #16, #8
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
     634:	e1a06c24 	lsr	r6, r4, #24
			if(abs(sample_right) > INT_MAX / amplitude_modulation){
				status_flags.volume_clipped = true;
			}
			
			//retrieve and write a sample to the right
			*audio_right = (int) (sample_right * amplitude_modulation);
     638:	e3039fff 	movw	r9, #16383	; 0x3fff
     63c:	e34f9f20 	movt	r9, #65312	; 0xff20
		
		if(num_samples_right > 0){
			//check for overflow
			double sample_right = get_sample(PLAYBACK_STEREO_R) + sample_mono;
			if(abs(sample_right) > INT_MAX / amplitude_modulation){
				status_flags.volume_clipped = true;
     640:	e30c8560 	movw	r8, #50528	; 0xc560
     644:	e3408002 	movt	r8, #2
	double amplitude_modulation = pow(volume_sensitivity, ((double) volume) - ((double) default_volume));
		
	//check the right and left write availability
	unsigned int num_samples_right = (unsigned int) ((fifo_space >> 16) & 0xFF);
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	while(num_samples_right > 0 || num_samples_left > 0){
     648:	ea000052 	b	798 <audio_ISR+0x1cc>
		double sample_mono = get_sample(PLAYBACK_MONO);
     64c:	e3a00000 	mov	r0, #0
     650:	eb0003d9 	bl	15bc <get_sample>
     654:	e1a04000 	mov	r4, r0
     658:	e1a05001 	mov	r5, r1
		
		if(num_samples_right > 0){
     65c:	e3570000 	cmp	r7, #0
     660:	0a00001f 	beq	6e4 <audio_ISR+0x118>
			//check for overflow
			double sample_right = get_sample(PLAYBACK_STEREO_R) + sample_mono;
     664:	e3a00001 	mov	r0, #1
     668:	eb0003d3 	bl	15bc <get_sample>
     66c:	e1a02004 	mov	r2, r4
     670:	e1a03005 	mov	r3, r5
     674:	eb001162 	bl	4c04 <__adddf3>
     678:	e1cd00f0 	strd	r0, [sp]
			if(abs(sample_right) > INT_MAX / amplitude_modulation){
     67c:	eb0013dc 	bl	55f4 <__aeabi_d2iz>
     680:	e3500000 	cmp	r0, #0
     684:	b2600000 	rsblt	r0, r0, #0
     688:	eb00122a 	bl	4f38 <__aeabi_i2d>
     68c:	e1cd00f8 	strd	r0, [sp, #8]
     690:	e3a00000 	mov	r0, #0
     694:	e34f0fc0 	movt	r0, #65472	; 0xffc0
     698:	e30f1fff 	movw	r1, #65535	; 0xffff
     69c:	e34411df 	movt	r1, #16863	; 0x41df
     6a0:	e1a0200a 	mov	r2, r10
     6a4:	e1a0300b 	mov	r3, r11
     6a8:	eb0012fd 	bl	52a4 <__aeabi_ddiv>
     6ac:	e1a02000 	mov	r2, r0
     6b0:	e1a03001 	mov	r3, r1
     6b4:	e1cd00d8 	ldrd	r0, [sp, #8]
     6b8:	eb0013c7 	bl	55dc <__aeabi_dcmpgt>
     6bc:	e3500000 	cmp	r0, #0
				status_flags.volume_clipped = true;
     6c0:	13a03001 	movne	r3, #1
     6c4:	15c83003 	strbne	r3, [r8, #3]
			}
			
			//retrieve and write a sample to the right
			*audio_right = (int) (sample_right * amplitude_modulation);
     6c8:	e1cd00d0 	ldrd	r0, [sp]
     6cc:	e1a0200a 	mov	r2, r10
     6d0:	e1a0300b 	mov	r3, r11
     6d4:	eb00124e 	bl	5014 <__aeabi_dmul>
     6d8:	eb0013c5 	bl	55f4 <__aeabi_d2iz>
     6dc:	e5090fb3 	str	r0, [r9, #-4019]	; 0xfffff04d
			
			//decrement the number of samples required
			num_samples_right--;
     6e0:	e2477001 	sub	r7, r7, #1
		}
		
		if(num_samples_left > 0){
     6e4:	e3560000 	cmp	r6, #0
     6e8:	0a000021 	beq	774 <audio_ISR+0x1a8>
			//check for overflow
			double sample_left = get_sample(PLAYBACK_STEREO_L) + sample_mono;
     6ec:	e3a00002 	mov	r0, #2
     6f0:	eb0003b1 	bl	15bc <get_sample>
     6f4:	e1a02004 	mov	r2, r4
     6f8:	e1a03005 	mov	r3, r5
     6fc:	eb001140 	bl	4c04 <__adddf3>
     700:	e1cd00f0 	strd	r0, [sp]
			if(abs(sample_left) > INT_MAX / amplitude_modulation){
     704:	eb0013ba 	bl	55f4 <__aeabi_d2iz>
     708:	e3500000 	cmp	r0, #0
     70c:	b2600000 	rsblt	r0, r0, #0
     710:	eb001208 	bl	4f38 <__aeabi_i2d>
     714:	e1a04000 	mov	r4, r0
     718:	e1a05001 	mov	r5, r1
     71c:	e3a00000 	mov	r0, #0
     720:	e34f0fc0 	movt	r0, #65472	; 0xffc0
     724:	e30f1fff 	movw	r1, #65535	; 0xffff
     728:	e34411df 	movt	r1, #16863	; 0x41df
     72c:	e1a0200a 	mov	r2, r10
     730:	e1a0300b 	mov	r3, r11
     734:	eb0012da 	bl	52a4 <__aeabi_ddiv>
     738:	e1a02000 	mov	r2, r0
     73c:	e1a03001 	mov	r3, r1
     740:	e1a00004 	mov	r0, r4
     744:	e1a01005 	mov	r1, r5
     748:	eb0013a3 	bl	55dc <__aeabi_dcmpgt>
     74c:	e3500000 	cmp	r0, #0
				status_flags.volume_clipped = true;
     750:	13a03001 	movne	r3, #1
     754:	15c83003 	strbne	r3, [r8, #3]
			}
			
			//retrieve and write a sample to the left
			*audio_left = (int) (sample_left * amplitude_modulation);
     758:	e1cd00d0 	ldrd	r0, [sp]
     75c:	e1a0200a 	mov	r2, r10
     760:	e1a0300b 	mov	r3, r11
     764:	eb00122a 	bl	5014 <__aeabi_dmul>
     768:	eb0013a1 	bl	55f4 <__aeabi_d2iz>
     76c:	e5090fb7 	str	r0, [r9, #-4023]	; 0xfffff049
			
			//decrement the number of samples required
			num_samples_left--;
     770:	e2466001 	sub	r6, r6, #1
		}
		
		//check if the audio stream is still valid
		if(!is_stream_valid()){
     774:	eb0002cc 	bl	12ac <is_stream_valid>
     778:	e3500000 	cmp	r0, #0
     77c:	1a000005 	bne	798 <audio_ISR+0x1cc>
			stop_all_audio_playback();
     780:	ebffff42 	bl	490 <stop_all_audio_playback>
			status_flags.clear_queue = true;
     784:	e30c3560 	movw	r3, #50528	; 0xc560
     788:	e3403002 	movt	r3, #2
     78c:	e3a02001 	mov	r2, #1
     790:	e5c32000 	strb	r2, [r3]
			break;
     794:	ea000001 	b	7a0 <audio_ISR+0x1d4>
	double amplitude_modulation = pow(volume_sensitivity, ((double) volume) - ((double) default_volume));
		
	//check the right and left write availability
	unsigned int num_samples_right = (unsigned int) ((fifo_space >> 16) & 0xFF);
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	while(num_samples_right > 0 || num_samples_left > 0){
     798:	e1963007 	orrs	r3, r6, r7
     79c:	1affffaa 	bne	64c <audio_ISR+0x80>
			stop_all_audio_playback();
			status_flags.clear_queue = true;
			break;
		}
	}
     7a0:	e28dd014 	add	sp, sp, #20
     7a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000007a8 <config_audio>:
void config_audio(){
	volatile int * audio_base = (int*) AUDIO_BASE;
	
	//set the control bits to clear both write and read queue in the audio controller
	int control = 0b1100;
	*audio_base = control;
     7a8:	e3033fff 	movw	r3, #16383	; 0x3fff
     7ac:	e34f3f20 	movt	r3, #65312	; 0xff20
     7b0:	e3a0200c 	mov	r2, #12
     7b4:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
	
	//unset the control bits to clear and set the correct interrupt bit in the audio controller
	control = 0b0000;
	*audio_base = control;
     7b8:	e3a02000 	mov	r2, #0
     7bc:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
     7c0:	e12fff1e 	bx	lr

000007c4 <config_keys>:
void config_keys(){
	volatile int * key_base = (int*) KEY_BASE;
	
	//turn on interrupts for all the keys
	int interrupt_mask = 0b1111;
	*(key_base + 2) = interrupt_mask;
     7c4:	e3a03000 	mov	r3, #0
     7c8:	e34f3f20 	movt	r3, #65312	; 0xff20
     7cc:	e3a0200f 	mov	r2, #15
     7d0:	e5832058 	str	r2, [r3, #88]	; 0x58
     7d4:	e12fff1e 	bx	lr

000007d8 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack(){
	register int stack __asm__ ("r2");
	register int mode __asm__ ("r3");
	
	stack = 0xFFFFFFFF - 7; //top of A9 on-chip memory, aligned to 8 bytes
     7d8:	e3e02007 	mvn	r2, #7
	
	/* change processor to IRQ mode with interrupts disabled */
	mode = 0b11010010;
     7dc:	e3a030d2 	mov	r3, #210	; 0xd2
	__asm__("msr cpsr, %[ps]" : : [ps] "r" (mode));
     7e0:	e129f003 	msr	CPSR_fc, r3
	/* set banked stack pointer */
	__asm__("mov sp, %[ps]" : : [ps] "r" (stack));
     7e4:	e1a0d002 	mov	sp, r2
	
	/* go back to SVC mode before executing subroutine return! */
	mode = 0b11010011;
     7e8:	e3a030d3 	mov	r3, #211	; 0xd3
	__asm__("msr cpsr, %[ps]" : : [ps] "r" (mode));
     7ec:	e129f003 	msr	CPSR_fc, r3
     7f0:	e12fff1e 	bx	lr

000007f4 <enable_A9_interrupts>:
}

void enable_A9_interrupts(){
     7f4:	e24dd008 	sub	sp, sp, #8
	volatile int status = 0b01010011;
     7f8:	e3a03053 	mov	r3, #83	; 0x53
     7fc:	e58d3004 	str	r3, [sp, #4]
	__asm__("msr cpsr, %[ps]" : : [ps] "r" (status));
     800:	e59d3004 	ldr	r3, [sp, #4]
     804:	e129f003 	msr	CPSR_fc, r3
}
     808:	e28dd008 	add	sp, sp, #8
     80c:	e12fff1e 	bx	lr

00000810 <config_interrupt>:
	// Configure the Distributor Control Register (ICDDCR) to send pending
	// interrupts to CPUs
	*((int *) MPCORE_GIC_DIST + ICDDCR) = 1;
}

void config_interrupt(int N, int CPU_target){
     810:	e24dd010 	sub	sp, sp, #16
	volatile int reg_offset, index, value, address;
	
	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
     814:	e1a031c0 	asr	r3, r0, #3
     818:	e3c33003 	bic	r3, r3, #3
     81c:	e58d300c 	str	r3, [sp, #12]
	index = N & 0x1F;
     820:	e200301f 	and	r3, r0, #31
     824:	e58d3008 	str	r3, [sp, #8]
	value = 0x1 << index;
     828:	e59d3008 	ldr	r3, [sp, #8]
     82c:	e3a02001 	mov	r2, #1
     830:	e1a03312 	lsl	r3, r2, r3
     834:	e58d3004 	str	r3, [sp, #4]
	address = 0xFFFED100 + reg_offset;
     838:	e59d300c 	ldr	r3, [sp, #12]
     83c:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     840:	e2433c03 	sub	r3, r3, #768	; 0x300
     844:	e58d3000 	str	r3, [sp]
	
	/* Now that we know the register address and value, set the appropriate bit */
	*(int *)address |= value;
     848:	e59d3000 	ldr	r3, [sp]
     84c:	e59d2004 	ldr	r2, [sp, #4]
     850:	e593c000 	ldr	r12, [r3]
     854:	e18c2002 	orr	r2, r12, r2
     858:	e5832000 	str	r2, [r3]
	
	/* Configure the Interrupt Processor Targets Register (ICDIPTRn)
	* reg_offset = integer_div(N / 4) * 4
	* index = N mod 4 */
	
	reg_offset = (N & 0xFFFFFFFC);
     85c:	e3c03003 	bic	r3, r0, #3
     860:	e58d300c 	str	r3, [sp, #12]
	index = N & 0x3;
     864:	e2000003 	and	r0, r0, #3
     868:	e58d0008 	str	r0, [sp, #8]
	address = 0xFFFED800 + reg_offset + index;
     86c:	e59d200c 	ldr	r2, [sp, #12]
     870:	e59d3008 	ldr	r3, [sp, #8]
     874:	e0823003 	add	r3, r2, r3
     878:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     87c:	e58d3000 	str	r3, [sp]
	/* Now that we know the register address and value, write to (only) the
	* appropriate byte */
	*(char *)address = (char)CPU_target;
     880:	e59d3000 	ldr	r3, [sp]
     884:	e5c31000 	strb	r1, [r3]
}
     888:	e28dd010 	add	sp, sp, #16
     88c:	e12fff1e 	bx	lr

00000890 <config_GIC>:
void enable_A9_interrupts(){
	volatile int status = 0b01010011;
	__asm__("msr cpsr, %[ps]" : : [ps] "r" (status));
}

void config_GIC(){	
     890:	e92d4008 	push	{r3, lr}
	config_interrupt(KEYS_IRQ, 1);
     894:	e3a00049 	mov	r0, #73	; 0x49
     898:	e3a01001 	mov	r1, #1
     89c:	ebffffdb 	bl	810 <config_interrupt>
	config_interrupt(AUDIO_IRQ, 1);
     8a0:	e3a0004e 	mov	r0, #78	; 0x4e
     8a4:	e3a01001 	mov	r1, #1
     8a8:	ebffffd8 	bl	810 <config_interrupt>

	// Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all
	// priorities
	*((int *) MPCORE_GIC_CPUIF + ICCPMR) = 0xFFFF;
     8ac:	e3e02a13 	mvn	r2, #77824	; 0x13000
     8b0:	e30f3fff 	movw	r3, #65535	; 0xffff
     8b4:	e5023eef 	str	r3, [r2, #-3823]	; 0xfffff111
	
	// Set CPU Interface Control Register (ICCICR). Enable signaling of
	// interrupts
	*((int *) MPCORE_GIC_CPUIF + ICCICR) = 1;
     8b8:	e3a03001 	mov	r3, #1
     8bc:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101
	
	// Configure the Distributor Control Register (ICDDCR) to send pending
	// interrupts to CPUs
	*((int *) MPCORE_GIC_DIST + ICDDCR) = 1;
     8c0:	e3e02a12 	mvn	r2, #73728	; 0x12000
     8c4:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
     8c8:	e8bd8008 	pop	{r3, pc}

000008cc <__cs3_isr_irq>:
#include "interrupt_ID.h"
#include "address_map_arm.h"
#include "exceptions.h"

// Define the IRQ exception handler
void __attribute__((interrupt)) __cs3_isr_irq(){
     8cc:	e24ee004 	sub	lr, lr, #4
     8d0:	e92d500f 	push	{r0, r1, r2, r3, r12, lr}
     8d4:	e24dd008 	sub	sp, sp, #8
	// Read the ICCIAR from the processor interface
	volatile int address = MPCORE_GIC_CPUIF + ICCIAR;
     8d8:	e30c310c 	movw	r3, #49420	; 0xc10c
     8dc:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     8e0:	e58d3004 	str	r3, [sp, #4]
	volatile int int_ID = *((int *)address);
     8e4:	e59d3004 	ldr	r3, [sp, #4]
     8e8:	e5933000 	ldr	r3, [r3]
     8ec:	e58d3000 	str	r3, [sp]
	
	if (int_ID == KEYS_IRQ)
     8f0:	e59d3000 	ldr	r3, [sp]
     8f4:	e3530049 	cmp	r3, #73	; 0x49
     8f8:	1a000001 	bne	904 <__cs3_isr_irq+0x38>
		keys_ISR();
     8fc:	ebffff04 	bl	514 <keys_ISR>
     900:	ea000005 	b	91c <__cs3_isr_irq+0x50>
	else if(int_ID == AUDIO_IRQ)
     904:	e59d3000 	ldr	r3, [sp]
     908:	e353004e 	cmp	r3, #78	; 0x4e
     90c:	1a000001 	bne	918 <__cs3_isr_irq+0x4c>
		audio_ISR();
     910:	ebffff2d 	bl	5cc <audio_ISR>
     914:	ea000000 	b	91c <__cs3_isr_irq+0x50>
     918:	eafffffe 	b	918 <__cs3_isr_irq+0x4c>
	else
		while (1);
	
	//clear the interrupt id from the GIC
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = int_ID;
     91c:	e59d2000 	ldr	r2, [sp]
     920:	e3e03a13 	mvn	r3, #77824	; 0x13000
     924:	e5032eef 	str	r2, [r3, #-3823]	; 0xfffff111
}
     928:	e28dd008 	add	sp, sp, #8
     92c:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, r12, pc}^

00000930 <__cs3_reset>:

// Define the remaining exception handlers
void __attribute__((interrupt)) __cs3_reset(){
     930:	eafffffe 	b	930 <__cs3_reset>

00000934 <__cs3_isr_undef>:
	while (1);
}

void __attribute__((interrupt)) __cs3_isr_undef(){
     934:	eafffffe 	b	934 <__cs3_isr_undef>

00000938 <__cs3_isr_swi>:
	while (1);
}

void __attribute__((interrupt)) __cs3_isr_swi(){
     938:	eafffffe 	b	938 <__cs3_isr_swi>

0000093c <__cs3_isr_pabort>:
	while (1);
}

void __attribute__((interrupt)) __cs3_isr_pabort(){
     93c:	eafffffe 	b	93c <__cs3_isr_pabort>

00000940 <__cs3_isr_dabort>:
	while (1);
}

void __attribute__((interrupt)) __cs3_isr_dabort(){
     940:	eafffffe 	b	940 <__cs3_isr_dabort>

00000944 <__cs3_isr_fiq>:
	while (1);
}

void __attribute__((interrupt)) __cs3_isr_fiq(){
     944:	eafffffe 	b	944 <__cs3_isr_fiq>

00000948 <get_num>:
	
	return change_in_freq * middle_A_freq;
}

//returns the key number requested of the note and octave given
int get_num(char * note, int octave){	
     948:	e92d4038 	push	{r3, r4, r5, lr}
     94c:	e1a05000 	mov	r5, r0
     950:	e1a04001 	mov	r4, r1
	int number;
	if(!strcmp(note, "C")){
     954:	e3061a80 	movw	r1, #27264	; 0x6a80
     958:	e3401000 	movt	r1, #0
     95c:	eb001552 	bl	5eac <strcmp>
     960:	e3500000 	cmp	r0, #0
     964:	0a000060 	beq	aec <get_num+0x1a4>
		number = 0;
	} else if(!strcmp(note, "Cs") || !strcmp(note, "Db")){
     968:	e1a00005 	mov	r0, r5
     96c:	e3061a64 	movw	r1, #27236	; 0x6a64
     970:	e3401000 	movt	r1, #0
     974:	eb00154c 	bl	5eac <strcmp>
     978:	e3500000 	cmp	r0, #0
     97c:	0a00005c 	beq	af4 <get_num+0x1ac>
     980:	e1a00005 	mov	r0, r5
     984:	e3061ad0 	movw	r1, #27344	; 0x6ad0
     988:	e3401000 	movt	r1, #0
     98c:	eb001546 	bl	5eac <strcmp>
     990:	e3500000 	cmp	r0, #0
     994:	0a000058 	beq	afc <get_num+0x1b4>
		number = 1;
	} else if(!strcmp(note, "D")){
     998:	e1a00005 	mov	r0, r5
     99c:	e3061a84 	movw	r1, #27268	; 0x6a84
     9a0:	e3401000 	movt	r1, #0
     9a4:	eb001540 	bl	5eac <strcmp>
     9a8:	e3500000 	cmp	r0, #0
     9ac:	0a000054 	beq	b04 <get_num+0x1bc>
		number = 2;
	} else if(!strcmp(note, "Ds") || !strcmp(note, "Eb")){
     9b0:	e1a00005 	mov	r0, r5
     9b4:	e3061a74 	movw	r1, #27252	; 0x6a74
     9b8:	e3401000 	movt	r1, #0
     9bc:	eb00153a 	bl	5eac <strcmp>
     9c0:	e3500000 	cmp	r0, #0
     9c4:	0a000050 	beq	b0c <get_num+0x1c4>
     9c8:	e1a00005 	mov	r0, r5
     9cc:	e3061ad4 	movw	r1, #27348	; 0x6ad4
     9d0:	e3401000 	movt	r1, #0
     9d4:	eb001534 	bl	5eac <strcmp>
     9d8:	e3500000 	cmp	r0, #0
     9dc:	0a00004c 	beq	b14 <get_num+0x1cc>
		number = 3;
	} else if(!strcmp(note, "E")){
     9e0:	e1a00005 	mov	r0, r5
     9e4:	e3061a68 	movw	r1, #27240	; 0x6a68
     9e8:	e3401000 	movt	r1, #0
     9ec:	eb00152e 	bl	5eac <strcmp>
     9f0:	e3500000 	cmp	r0, #0
     9f4:	0a000048 	beq	b1c <get_num+0x1d4>
		number = 4;
	} else if(!strcmp(note, "F")){
     9f8:	e1a00005 	mov	r0, r5
     9fc:	e3061a88 	movw	r1, #27272	; 0x6a88
     a00:	e3401000 	movt	r1, #0
     a04:	eb001528 	bl	5eac <strcmp>
     a08:	e3500000 	cmp	r0, #0
     a0c:	0a000044 	beq	b24 <get_num+0x1dc>
		number = 5;
	} else if(!strcmp(note, "Fs") || !strcmp(note, "Gb")){
     a10:	e1a00005 	mov	r0, r5
     a14:	e3061a78 	movw	r1, #27256	; 0x6a78
     a18:	e3401000 	movt	r1, #0
     a1c:	eb001522 	bl	5eac <strcmp>
     a20:	e3500000 	cmp	r0, #0
     a24:	0a000040 	beq	b2c <get_num+0x1e4>
     a28:	e1a00005 	mov	r0, r5
     a2c:	e3061ad8 	movw	r1, #27352	; 0x6ad8
     a30:	e3401000 	movt	r1, #0
     a34:	eb00151c 	bl	5eac <strcmp>
     a38:	e3500000 	cmp	r0, #0
     a3c:	0a00003c 	beq	b34 <get_num+0x1ec>
		number = 6;
	} else if(!strcmp(note, "G")){
     a40:	e1a00005 	mov	r0, r5
     a44:	e3061a7c 	movw	r1, #27260	; 0x6a7c
     a48:	e3401000 	movt	r1, #0
     a4c:	eb001516 	bl	5eac <strcmp>
     a50:	e3500000 	cmp	r0, #0
     a54:	0a000038 	beq	b3c <get_num+0x1f4>
		number = 7;
	} else if(!strcmp(note, "Gs") || !strcmp(note, "Ab")){
     a58:	e1a00005 	mov	r0, r5
     a5c:	e3061adc 	movw	r1, #27356	; 0x6adc
     a60:	e3401000 	movt	r1, #0
     a64:	eb001510 	bl	5eac <strcmp>
     a68:	e3500000 	cmp	r0, #0
     a6c:	0a000034 	beq	b44 <get_num+0x1fc>
     a70:	e1a00005 	mov	r0, r5
     a74:	e3061ae0 	movw	r1, #27360	; 0x6ae0
     a78:	e3401000 	movt	r1, #0
     a7c:	eb00150a 	bl	5eac <strcmp>
     a80:	e3500000 	cmp	r0, #0
     a84:	0a000030 	beq	b4c <get_num+0x204>
		number = 8;
	} else if(!strcmp(note, "A")){
     a88:	e1a00005 	mov	r0, r5
     a8c:	e3061a60 	movw	r1, #27232	; 0x6a60
     a90:	e3401000 	movt	r1, #0
     a94:	eb001504 	bl	5eac <strcmp>
     a98:	e3500000 	cmp	r0, #0
     a9c:	0a00002c 	beq	b54 <get_num+0x20c>
		number = 9;
	} else if(!strcmp(note, "As") || !strcmp(note, "Bb")){
     aa0:	e1a00005 	mov	r0, r5
     aa4:	e3061a8c 	movw	r1, #27276	; 0x6a8c
     aa8:	e3401000 	movt	r1, #0
     aac:	eb0014fe 	bl	5eac <strcmp>
     ab0:	e3500000 	cmp	r0, #0
     ab4:	0a000028 	beq	b5c <get_num+0x214>
     ab8:	e1a00005 	mov	r0, r5
     abc:	e3061ae4 	movw	r1, #27364	; 0x6ae4
     ac0:	e3401000 	movt	r1, #0
     ac4:	eb0014f8 	bl	5eac <strcmp>
     ac8:	e3500000 	cmp	r0, #0
     acc:	0a000024 	beq	b64 <get_num+0x21c>
		number = 10;
	} else if(!strcmp(note, "B")){
     ad0:	e1a00005 	mov	r0, r5
     ad4:	e3061a70 	movw	r1, #27248	; 0x6a70
     ad8:	e3401000 	movt	r1, #0
     adc:	eb0014f2 	bl	5eac <strcmp>
     ae0:	e3500000 	cmp	r0, #0
     ae4:	0a000020 	beq	b6c <get_num+0x224>
     ae8:	eafffffe 	b	ae8 <get_num+0x1a0>

//returns the key number requested of the note and octave given
int get_num(char * note, int octave){	
	int number;
	if(!strcmp(note, "C")){
		number = 0;
     aec:	e3a00000 	mov	r0, #0
     af0:	ea00001e 	b	b70 <get_num+0x228>
	} else if(!strcmp(note, "Cs") || !strcmp(note, "Db")){
		number = 1;
     af4:	e3a00001 	mov	r0, #1
     af8:	ea00001c 	b	b70 <get_num+0x228>
     afc:	e3a00001 	mov	r0, #1
     b00:	ea00001a 	b	b70 <get_num+0x228>
	} else if(!strcmp(note, "D")){
		number = 2;
     b04:	e3a00002 	mov	r0, #2
     b08:	ea000018 	b	b70 <get_num+0x228>
	} else if(!strcmp(note, "Ds") || !strcmp(note, "Eb")){
		number = 3;
     b0c:	e3a00003 	mov	r0, #3
     b10:	ea000016 	b	b70 <get_num+0x228>
     b14:	e3a00003 	mov	r0, #3
     b18:	ea000014 	b	b70 <get_num+0x228>
	} else if(!strcmp(note, "E")){
		number = 4;
     b1c:	e3a00004 	mov	r0, #4
     b20:	ea000012 	b	b70 <get_num+0x228>
	} else if(!strcmp(note, "F")){
		number = 5;
     b24:	e3a00005 	mov	r0, #5
     b28:	ea000010 	b	b70 <get_num+0x228>
	} else if(!strcmp(note, "Fs") || !strcmp(note, "Gb")){
		number = 6;
     b2c:	e3a00006 	mov	r0, #6
     b30:	ea00000e 	b	b70 <get_num+0x228>
     b34:	e3a00006 	mov	r0, #6
     b38:	ea00000c 	b	b70 <get_num+0x228>
	} else if(!strcmp(note, "G")){
		number = 7;
     b3c:	e3a00007 	mov	r0, #7
     b40:	ea00000a 	b	b70 <get_num+0x228>
	} else if(!strcmp(note, "Gs") || !strcmp(note, "Ab")){
		number = 8;
     b44:	e3a00008 	mov	r0, #8
     b48:	ea000008 	b	b70 <get_num+0x228>
     b4c:	e3a00008 	mov	r0, #8
     b50:	ea000006 	b	b70 <get_num+0x228>
	} else if(!strcmp(note, "A")){
		number = 9;
     b54:	e3a00009 	mov	r0, #9
     b58:	ea000004 	b	b70 <get_num+0x228>
	} else if(!strcmp(note, "As") || !strcmp(note, "Bb")){
		number = 10;
     b5c:	e3a0000a 	mov	r0, #10
     b60:	ea000002 	b	b70 <get_num+0x228>
     b64:	e3a0000a 	mov	r0, #10
     b68:	ea000000 	b	b70 <get_num+0x228>
	} else if(!strcmp(note, "B")){
		number = 11;
     b6c:	e3a0000b 	mov	r0, #11
	} else {
		while (1);
	}
	
	return number + (octave * 12);
     b70:	e0844084 	add	r4, r4, r4, lsl #1
}
     b74:	e0800104 	add	r0, r0, r4, lsl #2
     b78:	e8bd8038 	pop	{r3, r4, r5, pc}

00000b7c <get_frequency>:
const double harmonic_intensities[] = {1, 0.5, 0.25};

extern struct StatusFlags status_flags;

//returns the frequency requested of the key number given
double get_frequency(char * note, int octave){
     b7c:	e92d4010 	push	{r4, lr}
	int key_number = get_num(note, octave);
     b80:	ebffff70 	bl	948 <get_num>
     b84:	e1a04000 	mov	r4, r0
	
	const double middle_A_freq = 440; //Hz
	const int middle_A_num = get_num("A", 4); //number pertaining to the middle A
     b88:	e3060a60 	movw	r0, #27232	; 0x6a60
     b8c:	e3400000 	movt	r0, #0
     b90:	e3a01004 	mov	r1, #4
     b94:	ebffff6b 	bl	948 <get_num>
	
	const double semitone_mult = pow(2, (1.0/12.0)); //change in frequency when going up or down one key
	double semitone_jump = key_number - middle_A_num; //number of jumps from key requested to middle A
     b98:	e0600004 	rsb	r0, r0, r4
     b9c:	eb0010e5 	bl	4f38 <__aeabi_i2d>
     ba0:	e1a02000 	mov	r2, r0
     ba4:	e1a03001 	mov	r3, r1
	
	double change_in_freq = pow(semitone_mult, semitone_jump);
     ba8:	e3070963 	movw	r0, #31075	; 0x7963
     bac:	e34902d9 	movt	r0, #37593	; 0x92d9
     bb0:	e30f138f 	movw	r1, #62351	; 0xf38f
     bb4:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     bb8:	eb00036a 	bl	1968 <pow>
	
	return change_in_freq * middle_A_freq;
     bbc:	e3a02000 	mov	r2, #0
     bc0:	e3a03902 	mov	r3, #32768	; 0x8000
     bc4:	e344307b 	movt	r3, #16507	; 0x407b
     bc8:	eb001111 	bl	5014 <__aeabi_dmul>
}
     bcc:	e8bd8010 	pop	{r4, pc}

00000bd0 <get_note_wave>:
	struct MusicWave wave = {.waveform = wave_array, .length = number_of_samples};
	return wave;
}

//returns a dynamically allocated array representing the wave intensity of each sample for the note
struct MusicWave get_note_wave(struct MusicNote music_note){
     bd0:	e24dd008 	sub	sp, sp, #8
     bd4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     bd8:	e24dd04c 	sub	sp, sp, #76	; 0x4c
     bdc:	e58d0034 	str	r0, [sp, #52]	; 0x34
     be0:	e28d106c 	add	r1, sp, #108	; 0x6c
     be4:	e981000c 	stmib	r1, {r2, r3}
     be8:	e59d4070 	ldr	r4, [sp, #112]	; 0x70
     bec:	e59d8090 	ldr	r8, [sp, #144]	; 0x90
	//find the number of samples for the duration given
	unsigned int number_of_samples = (unsigned int) floor(music_note.duration * sampling_frequency);
     bf0:	e1cd07d8 	ldrd	r0, [sp, #120]	; 0x78
     bf4:	e3a02000 	mov	r2, #0
     bf8:	e3a03901 	mov	r3, #16384	; 0x4000
     bfc:	e34430bf 	movt	r3, #16575	; 0x40bf
     c00:	eb001103 	bl	5014 <__aeabi_dmul>
     c04:	eb0002b1 	bl	16d0 <floor>
     c08:	eb001290 	bl	5650 <__aeabi_d2uiz>
     c0c:	e58d0010 	str	r0, [sp, #16]
	
	//preallocate enough space for all samples
	double * wave_array = malloc(number_of_samples * sizeof(double));
     c10:	e1a00180 	lsl	r0, r0, #3
     c14:	eb0012bb 	bl	5708 <malloc>
     c18:	e58d003c 	str	r0, [sp, #60]	; 0x3c
	
	//find the frequency for the given note and octave
	double frequency;
	if(!strcmp(music_note.note, "S")){ //if the note is silent, return no frequency and zero the intensity
     c1c:	e1a00004 	mov	r0, r4
     c20:	e3061a6c 	movw	r1, #27244	; 0x6a6c
     c24:	e3401000 	movt	r1, #0
     c28:	eb00149f 	bl	5eac <strcmp>
     c2c:	e3500000 	cmp	r0, #0
		frequency = 0;
     c30:	03a06000 	moveq	r6, #0
     c34:	03a07000 	moveq	r7, #0
	//preallocate enough space for all samples
	double * wave_array = malloc(number_of_samples * sizeof(double));
	
	//find the frequency for the given note and octave
	double frequency;
	if(!strcmp(music_note.note, "S")){ //if the note is silent, return no frequency and zero the intensity
     c38:	0a00000d 	beq	c74 <get_note_wave+0xa4>
		frequency = 0;
	} else {
		frequency = get_frequency(music_note.note, music_note.octave);
     c3c:	e1a00004 	mov	r0, r4
     c40:	e59d1074 	ldr	r1, [sp, #116]	; 0x74
     c44:	ebffffcc 	bl	b7c <get_frequency>
     c48:	e1a06000 	mov	r6, r0
     c4c:	e1a07001 	mov	r7, r1
		
		//check for fundamental frequency overflow
		if(frequency > MAX_FREQUENCY)
     c50:	e3a02000 	mov	r2, #0
     c54:	e3a03b13 	mov	r3, #19456	; 0x4c00
     c58:	e34430ad 	movt	r3, #16557	; 0x40ad
     c5c:	eb00125e 	bl	55dc <__aeabi_dcmpgt>
     c60:	e3500000 	cmp	r0, #0
			status_flags.frequency_overflow = true;
     c64:	130c3560 	movwne	r3, #50528	; 0xc560
     c68:	13403002 	movtne	r3, #2
     c6c:	13a02001 	movne	r2, #1
     c70:	15c32004 	strbne	r2, [r3, #4]
	
	//set the current time to zero at the beginning of the wave
	double current_time = 0;
	
	//find the index of the start of each stage in the adsr envelope
	unsigned int delay_start = (unsigned int) floor(music_note.adsr_envelope[0] * number_of_samples);
     c74:	e59d0010 	ldr	r0, [sp, #16]
     c78:	eb0010a5 	bl	4f14 <__aeabi_ui2d>
     c7c:	e1a04000 	mov	r4, r0
     c80:	e1a05001 	mov	r5, r1
     c84:	e1c820d0 	ldrd	r2, [r8]
     c88:	eb0010e1 	bl	5014 <__aeabi_dmul>
     c8c:	eb00028f 	bl	16d0 <floor>
     c90:	eb00126e 	bl	5650 <__aeabi_d2uiz>
     c94:	e58d0014 	str	r0, [sp, #20]
	unsigned int sustain_start = (unsigned int) floor(delay_start + music_note.adsr_envelope[1] * number_of_samples);
     c98:	eb00109d 	bl	4f14 <__aeabi_ui2d>
     c9c:	e1cd02f0 	strd	r0, [sp, #32]
     ca0:	e1a00004 	mov	r0, r4
     ca4:	e1a01005 	mov	r1, r5
     ca8:	e1c820d8 	ldrd	r2, [r8, #8]
     cac:	eb0010d8 	bl	5014 <__aeabi_dmul>
     cb0:	e1a02000 	mov	r2, r0
     cb4:	e1a03001 	mov	r3, r1
     cb8:	e1cd02d0 	ldrd	r0, [sp, #32]
     cbc:	eb000fd0 	bl	4c04 <__adddf3>
     cc0:	eb000282 	bl	16d0 <floor>
     cc4:	eb001261 	bl	5650 <__aeabi_d2uiz>
     cc8:	e58d0030 	str	r0, [sp, #48]	; 0x30
	unsigned int release_start = (unsigned int) floor(sustain_start + music_note.adsr_envelope[2] * number_of_samples);
     ccc:	eb001090 	bl	4f14 <__aeabi_ui2d>
     cd0:	e1a0a000 	mov	r10, r0
     cd4:	e1a0b001 	mov	r11, r1
     cd8:	e1a00004 	mov	r0, r4
     cdc:	e1a01005 	mov	r1, r5
     ce0:	e1c821d0 	ldrd	r2, [r8, #16]
     ce4:	eb0010ca 	bl	5014 <__aeabi_dmul>
     ce8:	e1a02000 	mov	r2, r0
     cec:	e1a03001 	mov	r3, r1
     cf0:	e1a0000a 	mov	r0, r10
     cf4:	e1a0100b 	mov	r1, r11
     cf8:	eb000fc1 	bl	4c04 <__adddf3>
     cfc:	eb000273 	bl	16d0 <floor>
     d00:	eb001252 	bl	5650 <__aeabi_d2uiz>
     d04:	e58d0038 	str	r0, [sp, #56]	; 0x38
	
	//the volumes of each part of the envelope
	double peak_volume = music_note.peak_intensity * default_amplitude;
     d08:	e1cd08d0 	ldrd	r0, [sp, #128]	; 0x80
     d0c:	e3a02103 	mov	r2, #-1073741824	; 0xc0000000
     d10:	e306324d 	movw	r3, #25165	; 0x624d
     d14:	e3443150 	movt	r3, #16720	; 0x4150
     d18:	eb0010bd 	bl	5014 <__aeabi_dmul>
     d1c:	e1cd01f8 	strd	r0, [sp, #24]
	double sustain_volume = music_note.sustain_intensity * default_amplitude;
     d20:	e1cd08d8 	ldrd	r0, [sp, #136]	; 0x88
     d24:	e3a02103 	mov	r2, #-1073741824	; 0xc0000000
     d28:	e306324d 	movw	r3, #25165	; 0x624d
     d2c:	e3443150 	movt	r3, #16720	; 0x4150
     d30:	eb0010b7 	bl	5014 <__aeabi_dmul>
     d34:	e1cd02f8 	strd	r0, [sp, #40]	; 0x28
	double sample_volume;
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){
     d38:	e59d2010 	ldr	r2, [sp, #16]
     d3c:	e3520000 	cmp	r2, #0
     d40:	0a000092 	beq	f90 <get_note_wave+0x3c0>
     d44:	e59da03c 	ldr	r10, [sp, #60]	; 0x3c
     d48:	e3a09000 	mov	r9, #0
		if(frequency > MAX_FREQUENCY)
			status_flags.frequency_overflow = true;
	}
	
	//set the current time to zero at the beginning of the wave
	double current_time = 0;
     d4c:	e3a02000 	mov	r2, #0
     d50:	e3a03000 	mov	r3, #0
     d54:	e1cd20f0 	strd	r2, [sp]
		
		//add each wanted harmonic of the note given
		for(unsigned int harmonic = 1; harmonic <= num_harmonics; harmonic++){
			//check for frequency overflow
			if(frequency * harmonic < MAX_FREQUENCY)
				wave_array[index] += harmonic_intensities[harmonic - 1] * sin(harmonic * 2 * pi * frequency * current_time);
     d58:	e306ba90 	movw	r11, #27280	; 0x6a90
     d5c:	e340b000 	movt	r11, #0
			} else if (index < sustain_start){ //part of delay
				sample_volume = peak_volume - (((peak_volume - sustain_volume) / (sustain_start - delay_start)) * (index - delay_start));
			} else if (index < release_start){ //part of sustain
				sample_volume = sustain_volume;
			} else { //part of release
				sample_volume = sustain_volume - ((sustain_volume / (number_of_samples - release_start)) * (index - release_start));
     d60:	e59d3010 	ldr	r3, [sp, #16]
     d64:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
     d68:	e0613003 	rsb	r3, r1, r3
     d6c:	e58d3044 	str	r3, [sp, #68]	; 0x44
		if(wave_array[index] != 0){
			//check which stage the sample is part of
			if(index < delay_start){ //part of attack
				sample_volume = (peak_volume / delay_start) * index;
			} else if (index < sustain_start){ //part of delay
				sample_volume = peak_volume - (((peak_volume - sustain_volume) / (sustain_start - delay_start)) * (index - delay_start));
     d70:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
     d74:	e59d3014 	ldr	r3, [sp, #20]
     d78:	e0632002 	rsb	r2, r3, r2
     d7c:	e58d2040 	str	r2, [sp, #64]	; 0x40
	double sustain_volume = music_note.sustain_intensity * default_amplitude;
	double sample_volume;
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){
		wave_array[index] = 0;
     d80:	e3a02000 	mov	r2, #0
     d84:	e3a03000 	mov	r3, #0
     d88:	e0ca20f8 	strd	r2, [r10], #8
     d8c:	e3a05000 	mov	r5, #0
		
		//add each wanted harmonic of the note given
		for(unsigned int harmonic = 1; harmonic <= num_harmonics; harmonic++){
     d90:	e3a02000 	mov	r2, #0
     d94:	e3a03000 	mov	r3, #0
     d98:	e3433ff0 	movt	r3, #16368	; 0x3ff0
     d9c:	e3a04001 	mov	r4, #1
			//check for frequency overflow
			if(frequency * harmonic < MAX_FREQUENCY)
     da0:	e1a00006 	mov	r0, r6
     da4:	e1a01007 	mov	r1, r7
     da8:	eb001099 	bl	5014 <__aeabi_dmul>
     dac:	e3a02000 	mov	r2, #0
     db0:	e3a03b13 	mov	r3, #19456	; 0x4c00
     db4:	e34430ad 	movt	r3, #16557	; 0x40ad
     db8:	eb0011f5 	bl	5594 <__aeabi_dcmplt>
     dbc:	e3500000 	cmp	r0, #0
     dc0:	0a000013 	beq	e14 <get_note_wave+0x244>
				wave_array[index] += harmonic_intensities[harmonic - 1] * sin(harmonic * 2 * pi * frequency * current_time);
     dc4:	e1a00084 	lsl	r0, r4, #1
     dc8:	eb001051 	bl	4f14 <__aeabi_ui2d>
     dcc:	e3022d18 	movw	r2, #11544	; 0x2d18
     dd0:	e3452444 	movt	r2, #21572	; 0x5444
     dd4:	e30231fb 	movw	r3, #8699	; 0x21fb
     dd8:	e3443009 	movt	r3, #16393	; 0x4009
     ddc:	eb00108c 	bl	5014 <__aeabi_dmul>
     de0:	e1a02006 	mov	r2, r6
     de4:	e1a03007 	mov	r3, r7
     de8:	eb001089 	bl	5014 <__aeabi_dmul>
     dec:	e1cd20d0 	ldrd	r2, [sp]
     df0:	eb001087 	bl	5014 <__aeabi_dmul>
     df4:	eb00029b 	bl	1868 <sin>
     df8:	e18520db 	ldrd	r2, [r5, r11]
     dfc:	eb001084 	bl	5014 <__aeabi_dmul>
     e00:	e1a02000 	mov	r2, r0
     e04:	e1a03001 	mov	r3, r1
     e08:	e14a00d8 	ldrd	r0, [r10, #-8]
     e0c:	eb000f7c 	bl	4c04 <__adddf3>
     e10:	e14a00f8 	strd	r0, [r10, #-8]
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){
		wave_array[index] = 0;
		
		//add each wanted harmonic of the note given
		for(unsigned int harmonic = 1; harmonic <= num_harmonics; harmonic++){
     e14:	e2844001 	add	r4, r4, #1
     e18:	e1a00004 	mov	r0, r4
     e1c:	eb00103c 	bl	4f14 <__aeabi_ui2d>
     e20:	e1a02000 	mov	r2, r0
     e24:	e1a03001 	mov	r3, r1
     e28:	e2855008 	add	r5, r5, #8
     e2c:	e3540004 	cmp	r4, #4
     e30:	1affffda 	bne	da0 <get_note_wave+0x1d0>
	struct MusicWave wave = {.waveform = wave_array, .length = number_of_samples};
	return wave;
}

//returns a dynamically allocated array representing the wave intensity of each sample for the note
struct MusicWave get_note_wave(struct MusicNote music_note){
     e34:	e1a0800a 	mov	r8, r10
			if(frequency * harmonic < MAX_FREQUENCY)
				wave_array[index] += harmonic_intensities[harmonic - 1] * sin(harmonic * 2 * pi * frequency * current_time);
		}
		
		//apply an adsr envelope
		if(wave_array[index] != 0){
     e38:	e14a40d8 	ldrd	r4, [r10, #-8]
     e3c:	e1a00004 	mov	r0, r4
     e40:	e1a01005 	mov	r1, r5
     e44:	e3a02000 	mov	r2, #0
     e48:	e3a03000 	mov	r3, #0
     e4c:	eb0011ca 	bl	557c <__aeabi_dcmpeq>
     e50:	e3500000 	cmp	r0, #0
     e54:	1a000042 	bne	f64 <get_note_wave+0x394>
			//check which stage the sample is part of
			if(index < delay_start){ //part of attack
     e58:	e59d3014 	ldr	r3, [sp, #20]
     e5c:	e1530009 	cmp	r3, r9
     e60:	9a00000a 	bls	e90 <get_note_wave+0x2c0>
				sample_volume = (peak_volume / delay_start) * index;
     e64:	e1cd01d8 	ldrd	r0, [sp, #24]
     e68:	e1cd22d0 	ldrd	r2, [sp, #32]
     e6c:	eb00110c 	bl	52a4 <__aeabi_ddiv>
     e70:	e1cd00f8 	strd	r0, [sp, #8]
     e74:	e1a00009 	mov	r0, r9
     e78:	eb001025 	bl	4f14 <__aeabi_ui2d>
     e7c:	e1a02000 	mov	r2, r0
     e80:	e1a03001 	mov	r3, r1
     e84:	e1cd00d8 	ldrd	r0, [sp, #8]
     e88:	eb001061 	bl	5014 <__aeabi_dmul>
     e8c:	ea000030 	b	f54 <get_note_wave+0x384>
			} else if (index < sustain_start){ //part of delay
     e90:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
     e94:	e1510009 	cmp	r1, r9
     e98:	9a000016 	bls	ef8 <get_note_wave+0x328>
				sample_volume = peak_volume - (((peak_volume - sustain_volume) / (sustain_start - delay_start)) * (index - delay_start));
     e9c:	e1cd01d8 	ldrd	r0, [sp, #24]
     ea0:	e1cd22d8 	ldrd	r2, [sp, #40]	; 0x28
     ea4:	eb000f55 	bl	4c00 <__aeabi_dsub>
     ea8:	e1cd00f8 	strd	r0, [sp, #8]
     eac:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
     eb0:	eb001017 	bl	4f14 <__aeabi_ui2d>
     eb4:	e1a02000 	mov	r2, r0
     eb8:	e1a03001 	mov	r3, r1
     ebc:	e1cd00d8 	ldrd	r0, [sp, #8]
     ec0:	eb0010f7 	bl	52a4 <__aeabi_ddiv>
     ec4:	e1cd00f8 	strd	r0, [sp, #8]
     ec8:	e59d2014 	ldr	r2, [sp, #20]
     ecc:	e0620009 	rsb	r0, r2, r9
     ed0:	eb00100f 	bl	4f14 <__aeabi_ui2d>
     ed4:	e1a02000 	mov	r2, r0
     ed8:	e1a03001 	mov	r3, r1
     edc:	e1cd00d8 	ldrd	r0, [sp, #8]
     ee0:	eb00104b 	bl	5014 <__aeabi_dmul>
     ee4:	e1a02000 	mov	r2, r0
     ee8:	e1a03001 	mov	r3, r1
     eec:	e1cd01d8 	ldrd	r0, [sp, #24]
     ef0:	eb000f42 	bl	4c00 <__aeabi_dsub>
     ef4:	ea000016 	b	f54 <get_note_wave+0x384>
			} else if (index < release_start){ //part of sustain
     ef8:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
     efc:	e1530009 	cmp	r3, r9
     f00:	8a000012 	bhi	f50 <get_note_wave+0x380>
				sample_volume = sustain_volume;
			} else { //part of release
				sample_volume = sustain_volume - ((sustain_volume / (number_of_samples - release_start)) * (index - release_start));
     f04:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
     f08:	eb001001 	bl	4f14 <__aeabi_ui2d>
     f0c:	e1a02000 	mov	r2, r0
     f10:	e1a03001 	mov	r3, r1
     f14:	e1cd02d8 	ldrd	r0, [sp, #40]	; 0x28
     f18:	eb0010e1 	bl	52a4 <__aeabi_ddiv>
     f1c:	e1cd00f8 	strd	r0, [sp, #8]
     f20:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
     f24:	e0610009 	rsb	r0, r1, r9
     f28:	eb000ff9 	bl	4f14 <__aeabi_ui2d>
     f2c:	e1a02000 	mov	r2, r0
     f30:	e1a03001 	mov	r3, r1
     f34:	e1cd00d8 	ldrd	r0, [sp, #8]
     f38:	eb001035 	bl	5014 <__aeabi_dmul>
     f3c:	e1a02000 	mov	r2, r0
     f40:	e1a03001 	mov	r3, r1
     f44:	e1cd02d8 	ldrd	r0, [sp, #40]	; 0x28
     f48:	eb000f2c 	bl	4c00 <__aeabi_dsub>
     f4c:	ea000000 	b	f54 <get_note_wave+0x384>
			if(index < delay_start){ //part of attack
				sample_volume = (peak_volume / delay_start) * index;
			} else if (index < sustain_start){ //part of delay
				sample_volume = peak_volume - (((peak_volume - sustain_volume) / (sustain_start - delay_start)) * (index - delay_start));
			} else if (index < release_start){ //part of sustain
				sample_volume = sustain_volume;
     f50:	e1cd02d8 	ldrd	r0, [sp, #40]	; 0x28
			} else { //part of release
				sample_volume = sustain_volume - ((sustain_volume / (number_of_samples - release_start)) * (index - release_start));
			}
			
			wave_array[index] *= sample_volume;
     f54:	e1a02004 	mov	r2, r4
     f58:	e1a03005 	mov	r3, r5
     f5c:	eb00102c 	bl	5014 <__aeabi_dmul>
     f60:	e14800f8 	strd	r0, [r8, #-8]
		}
		
		//increment the current time
		current_time += sampling_period;
     f64:	e1cd00d0 	ldrd	r0, [sp]
     f68:	e30a29fc 	movw	r2, #43516	; 0xa9fc
     f6c:	e34d22f1 	movt	r2, #54001	; 0xd2f1
     f70:	e306324d 	movw	r3, #25165	; 0x624d
     f74:	e3433f20 	movt	r3, #16160	; 0x3f20
     f78:	eb000f21 	bl	4c04 <__adddf3>
     f7c:	e1cd00f0 	strd	r0, [sp]
	double peak_volume = music_note.peak_intensity * default_amplitude;
	double sustain_volume = music_note.sustain_intensity * default_amplitude;
	double sample_volume;
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){
     f80:	e2899001 	add	r9, r9, #1
     f84:	e59d2010 	ldr	r2, [sp, #16]
     f88:	e1590002 	cmp	r9, r2
     f8c:	1affff7b 	bne	d80 <get_note_wave+0x1b0>
		current_time += sampling_period;
	}
	
	//return the sampled wave
	struct MusicWave wave = {.waveform = wave_array, .length = number_of_samples};
	return wave;
     f90:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
     f94:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
     f98:	e5813000 	str	r3, [r1]
     f9c:	e59d2010 	ldr	r2, [sp, #16]
     fa0:	e5812004 	str	r2, [r1, #4]
     fa4:	e1a00001 	mov	r0, r1
     fa8:	e28dd04c 	add	sp, sp, #76	; 0x4c
     fac:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     fb0:	e28dd008 	add	sp, sp, #8
     fb4:	e12fff1e 	bx	lr

00000fb8 <get_chord_wave>:
	
	return number + (octave * 12);
}

//returns a dynamically allocated array representing the wave intensity of each sample for the chord
struct MusicWave get_chord_wave(struct MusicChord music_chord){
     fb8:	e24dd008 	sub	sp, sp, #8
     fbc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     fc0:	e24dd034 	sub	sp, sp, #52	; 0x34
     fc4:	e58d0024 	str	r0, [sp, #36]	; 0x24
     fc8:	e28d1054 	add	r1, sp, #84	; 0x54
     fcc:	e981000c 	stmib	r1, {r2, r3}
     fd0:	e59d9068 	ldr	r9, [sp, #104]	; 0x68
	//find the number of samples for the duration given
	unsigned int number_of_samples = (unsigned int) floor(music_chord.duration * sampling_frequency);
     fd4:	e1cd06d0 	ldrd	r0, [sp, #96]	; 0x60
     fd8:	e3a02000 	mov	r2, #0
     fdc:	e3a03901 	mov	r3, #16384	; 0x4000
     fe0:	e34430bf 	movt	r3, #16575	; 0x40bf
     fe4:	eb00100a 	bl	5014 <__aeabi_dmul>
     fe8:	eb0001b8 	bl	16d0 <floor>
     fec:	eb001197 	bl	5650 <__aeabi_d2uiz>
     ff0:	e58d0020 	str	r0, [sp, #32]
	
	//the full wave of all notes summed together
	double * wave_array = malloc(number_of_samples * sizeof(double));
     ff4:	e1a04180 	lsl	r4, r0, #3
     ff8:	e1a00004 	mov	r0, r4
     ffc:	eb0011c1 	bl	5708 <malloc>
    1000:	e1a05000 	mov	r5, r0
	
	//initialize the wave array to zero
	for(unsigned int i = 0; i < number_of_samples; i++){
    1004:	e59d2020 	ldr	r2, [sp, #32]
    1008:	e3520000 	cmp	r2, #0
    100c:	0a000006 	beq	102c <get_chord_wave+0x74>
    1010:	e1a01000 	mov	r1, r0
	
	return number + (octave * 12);
}

//returns a dynamically allocated array representing the wave intensity of each sample for the chord
struct MusicWave get_chord_wave(struct MusicChord music_chord){
    1014:	e0840000 	add	r0, r4, r0
	//the full wave of all notes summed together
	double * wave_array = malloc(number_of_samples * sizeof(double));
	
	//initialize the wave array to zero
	for(unsigned int i = 0; i < number_of_samples; i++){
		wave_array[i] = 0;
    1018:	e3a02000 	mov	r2, #0
    101c:	e3a03000 	mov	r3, #0
    1020:	e0c120f8 	strd	r2, [r1], #8
	
	//the full wave of all notes summed together
	double * wave_array = malloc(number_of_samples * sizeof(double));
	
	//initialize the wave array to zero
	for(unsigned int i = 0; i < number_of_samples; i++){
    1024:	e1510000 	cmp	r1, r0
    1028:	1afffffc 	bne	1020 <get_chord_wave+0x68>
		wave_array[i] = 0;
	}
	
	//generate the music wave for each individual note and sum together
	struct MusicWave note_wave;
	for(unsigned int i = 0; i < music_chord.num_notes; i++){
    102c:	e3590000 	cmp	r9, #0
    1030:	0a000020 	beq	10b8 <get_chord_wave+0x100>
    1034:	e3a08000 	mov	r8, #0
    1038:	e1a0a008 	mov	r10, r8
	
	return number + (octave * 12);
}

//returns a dynamically allocated array representing the wave intensity of each sample for the chord
struct MusicWave get_chord_wave(struct MusicChord music_chord){
    103c:	e1a0b008 	mov	r11, r8
	}
	
	//generate the music wave for each individual note and sum together
	struct MusicWave note_wave;
	for(unsigned int i = 0; i < music_chord.num_notes; i++){
		note_wave = get_note_wave(music_chord.music_notes[i]);
    1040:	e59d4058 	ldr	r4, [sp, #88]	; 0x58
    1044:	e0844008 	add	r4, r4, r8
    1048:	e1a0c00d 	mov	r12, sp
    104c:	e284e008 	add	lr, r4, #8
    1050:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    1054:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1058:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
    105c:	e88c000f 	stm	r12, {r0, r1, r2, r3}
    1060:	e894000c 	ldm	r4, {r2, r3}
    1064:	e28d0028 	add	r0, sp, #40	; 0x28
    1068:	ebfffed8 	bl	bd0 <get_note_wave>
    106c:	e59d702c 	ldr	r7, [sp, #44]	; 0x2c
    1070:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
		
		for(unsigned int j = 0; j < note_wave.length; j++){
    1074:	e3570000 	cmp	r7, #0
    1078:	0a000008 	beq	10a0 <get_chord_wave+0xe8>
	
	return number + (octave * 12);
}

//returns a dynamically allocated array representing the wave intensity of each sample for the chord
struct MusicWave get_chord_wave(struct MusicChord music_chord){
    107c:	e1a07187 	lsl	r7, r7, #3
    1080:	e1a0400b 	mov	r4, r11
	struct MusicWave note_wave;
	for(unsigned int i = 0; i < music_chord.num_notes; i++){
		note_wave = get_note_wave(music_chord.music_notes[i]);
		
		for(unsigned int j = 0; j < note_wave.length; j++){
			wave_array[j] += note_wave.waveform[j];
    1084:	e18500d4 	ldrd	r0, [r5, r4]
    1088:	e18620d4 	ldrd	r2, [r6, r4]
    108c:	eb000edc 	bl	4c04 <__adddf3>
    1090:	e18500f4 	strd	r0, [r5, r4]
    1094:	e2844008 	add	r4, r4, #8
	//generate the music wave for each individual note and sum together
	struct MusicWave note_wave;
	for(unsigned int i = 0; i < music_chord.num_notes; i++){
		note_wave = get_note_wave(music_chord.music_notes[i]);
		
		for(unsigned int j = 0; j < note_wave.length; j++){
    1098:	e1540007 	cmp	r4, r7
    109c:	1afffff8 	bne	1084 <get_chord_wave+0xcc>
			wave_array[j] += note_wave.waveform[j];
		}
		
		free(note_wave.waveform);
    10a0:	e1a00006 	mov	r0, r6
    10a4:	eb00119f 	bl	5728 <free>
		wave_array[i] = 0;
	}
	
	//generate the music wave for each individual note and sum together
	struct MusicWave note_wave;
	for(unsigned int i = 0; i < music_chord.num_notes; i++){
    10a8:	e28aa001 	add	r10, r10, #1
    10ac:	e2888028 	add	r8, r8, #40	; 0x28
    10b0:	e15a0009 	cmp	r10, r9
    10b4:	1affffe1 	bne	1040 <get_chord_wave+0x88>
		
		free(note_wave.waveform);
	}

	struct MusicWave wave = {.waveform = wave_array, .length = number_of_samples};
	return wave;
    10b8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    10bc:	e5835000 	str	r5, [r3]
    10c0:	e59d1020 	ldr	r1, [sp, #32]
    10c4:	e5831004 	str	r1, [r3, #4]
}
    10c8:	e1a00003 	mov	r0, r3
    10cc:	e28dd034 	add	sp, sp, #52	; 0x34
    10d0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    10d4:	e28dd008 	add	sp, sp, #8
    10d8:	e12fff1e 	bx	lr

000010dc <initialize_stream>:

struct AudioStream audio_stream;
extern const double sampling_period;

//initializes the stream assuming the current song is correct
void initialize_stream(){
    10dc:	e92d4070 	push	{r4, r5, r6, lr}
	//allocate memory for the stream
	audio_stream.current_playback_locations = malloc(sizeof(unsigned int) * audio_stream.current_song->num_tracks);
    10e0:	e3014a28 	movw	r4, #6696	; 0x1a28
    10e4:	e3404003 	movt	r4, #3
    10e8:	e5945014 	ldr	r5, [r4, #20]
    10ec:	e5956004 	ldr	r6, [r5, #4]
    10f0:	e1a06106 	lsl	r6, r6, #2
    10f4:	e1a00006 	mov	r0, r6
    10f8:	eb001182 	bl	5708 <malloc>
    10fc:	e5840000 	str	r0, [r4]
	audio_stream.current_process_locations = malloc(sizeof(unsigned int) * audio_stream.current_song->num_tracks);
    1100:	e1a00006 	mov	r0, r6
    1104:	eb00117f 	bl	5708 <malloc>
    1108:	e5840004 	str	r0, [r4, #4]
	
	audio_stream.queue_fronts = malloc(sizeof(struct MusicWaveNode *) * audio_stream.current_song->num_tracks);
    110c:	e5950004 	ldr	r0, [r5, #4]
    1110:	e1a00100 	lsl	r0, r0, #2
    1114:	eb00117b 	bl	5708 <malloc>
    1118:	e5840008 	str	r0, [r4, #8]
	audio_stream.queue_backs = malloc(sizeof(struct MusicWaveNode *) * audio_stream.current_song->num_tracks);
    111c:	e5950004 	ldr	r0, [r5, #4]
    1120:	e1a00100 	lsl	r0, r0, #2
    1124:	eb001177 	bl	5708 <malloc>
    1128:	e584000c 	str	r0, [r4, #12]
	
	audio_stream.durations = malloc(sizeof(double) * audio_stream.current_song->num_tracks);
    112c:	e5950004 	ldr	r0, [r5, #4]
    1130:	e1a00180 	lsl	r0, r0, #3
    1134:	eb001173 	bl	5708 <malloc>
    1138:	e5840010 	str	r0, [r4, #16]
	
	//initialize all variables
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    113c:	e5943014 	ldr	r3, [r4, #20]
    1140:	e5933004 	ldr	r3, [r3, #4]
    1144:	e3530000 	cmp	r3, #0
    1148:	08bd8070 	popeq	{r4, r5, r6, pc}
    114c:	e3a01000 	mov	r1, #0
		audio_stream.current_playback_locations[i] = 0;
    1150:	e1a00004 	mov	r0, r4
    1154:	e1a0c001 	mov	r12, r1
		audio_stream.current_process_locations[i] = 0;
		
		audio_stream.queue_fronts[i] = NULL;
		audio_stream.queue_backs[i] = NULL;
		
		audio_stream.durations[i] = 0;
    1158:	e3a02000 	mov	r2, #0
    115c:	e3a03000 	mov	r3, #0
	
	audio_stream.durations = malloc(sizeof(double) * audio_stream.current_song->num_tracks);
	
	//initialize all variables
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		audio_stream.current_playback_locations[i] = 0;
    1160:	e5904000 	ldr	r4, [r0]
    1164:	e784c101 	str	r12, [r4, r1, lsl #2]
		audio_stream.current_process_locations[i] = 0;
    1168:	e5904004 	ldr	r4, [r0, #4]
    116c:	e784c101 	str	r12, [r4, r1, lsl #2]
		
		audio_stream.queue_fronts[i] = NULL;
    1170:	e5904008 	ldr	r4, [r0, #8]
    1174:	e784c101 	str	r12, [r4, r1, lsl #2]
		audio_stream.queue_backs[i] = NULL;
    1178:	e590400c 	ldr	r4, [r0, #12]
    117c:	e784c101 	str	r12, [r4, r1, lsl #2]
		
		audio_stream.durations[i] = 0;
    1180:	e5905010 	ldr	r5, [r0, #16]
    1184:	e1a04181 	lsl	r4, r1, #3
    1188:	e18520f4 	strd	r2, [r5, r4]
	audio_stream.queue_backs = malloc(sizeof(struct MusicWaveNode *) * audio_stream.current_song->num_tracks);
	
	audio_stream.durations = malloc(sizeof(double) * audio_stream.current_song->num_tracks);
	
	//initialize all variables
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    118c:	e2811001 	add	r1, r1, #1
    1190:	e5904014 	ldr	r4, [r0, #20]
    1194:	e5944004 	ldr	r4, [r4, #4]
    1198:	e1540001 	cmp	r4, r1
    119c:	8affffef 	bhi	1160 <initialize_stream+0x84>
    11a0:	e8bd8070 	pop	{r4, r5, r6, pc}

000011a4 <deconstruct_stream>:
		audio_stream.durations[i] = 0;
	}
}

//deconstructs the stream and frees all memory allocated
void deconstruct_stream(){
    11a4:	e92d4010 	push	{r4, lr}
	//assumes all queues have been cleared already
	free(audio_stream.current_playback_locations);
    11a8:	e3014a28 	movw	r4, #6696	; 0x1a28
    11ac:	e3404003 	movt	r4, #3
    11b0:	e5940000 	ldr	r0, [r4]
    11b4:	eb00115b 	bl	5728 <free>
	free(audio_stream.current_process_locations);
    11b8:	e5940004 	ldr	r0, [r4, #4]
    11bc:	eb001159 	bl	5728 <free>
	free(audio_stream.queue_fronts);
    11c0:	e5940008 	ldr	r0, [r4, #8]
    11c4:	eb001157 	bl	5728 <free>
	free(audio_stream.queue_backs);
    11c8:	e594000c 	ldr	r0, [r4, #12]
    11cc:	eb001155 	bl	5728 <free>
	free(audio_stream.durations);
    11d0:	e5940010 	ldr	r0, [r4, #16]
    11d4:	eb001153 	bl	5728 <free>
    11d8:	e8bd8010 	pop	{r4, pc}

000011dc <advance_stream>:
		audio_stream.current_process_locations[i] = 0;
		audio_stream.durations[i] = 0;
	}
}

void advance_stream(struct MusicWaveNode ** front_node){
    11dc:	e92d4038 	push	{r3, r4, r5, lr}
    11e0:	e1a04000 	mov	r4, r0
	//save a copy of the pointer to the next node
	struct MusicWaveNode * next_node = (*front_node)->next;
    11e4:	e5903000 	ldr	r3, [r0]
    11e8:	e5935008 	ldr	r5, [r3, #8]
	
	//free the memory from both the waveform and the node
	free((*front_node)->wave.waveform);
    11ec:	e5930000 	ldr	r0, [r3]
    11f0:	eb00114c 	bl	5728 <free>
	free(*front_node);
    11f4:	e5940000 	ldr	r0, [r4]
    11f8:	eb00114a 	bl	5728 <free>
	
	//reattach the rest of the queue to the front
	*front_node = next_node;
    11fc:	e5845000 	str	r5, [r4]
    1200:	e8bd8038 	pop	{r3, r4, r5, pc}

00001204 <clear_stream>:
	//increase the duration of the audio stream by the duration of the chord just processed
	audio_stream.durations[i] += current_chord.duration;
}

//clears the stream but keeps the current song the same
void clear_stream(){
    1204:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    1208:	e3013a28 	movw	r3, #6696	; 0x1a28
    120c:	e3403003 	movt	r3, #3
    1210:	e5933014 	ldr	r3, [r3, #20]
    1214:	e5933004 	ldr	r3, [r3, #4]
    1218:	e3530000 	cmp	r3, #0
    121c:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, r10, pc}
    1220:	ea000014 	b	1278 <clear_stream+0x74>
		//advance the stream to the end
		while(audio_stream.queue_fronts[i] != NULL)
			advance_stream(&audio_stream.queue_fronts[i]);
    1224:	ebffffec 	bl	11dc <advance_stream>

//clears the stream but keeps the current song the same
void clear_stream(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		//advance the stream to the end
		while(audio_stream.queue_fronts[i] != NULL)
    1228:	e5973008 	ldr	r3, [r7, #8]
    122c:	e0830006 	add	r0, r3, r6
    1230:	e7933006 	ldr	r3, [r3, r6]
    1234:	e3530000 	cmp	r3, #0
    1238:	1afffff9 	bne	1224 <clear_stream+0x20>
			advance_stream(&audio_stream.queue_fronts[i]);
		
		//set all other variables pertaining to the respective track to zero
		audio_stream.queue_backs[i] = NULL;
    123c:	e597300c 	ldr	r3, [r7, #12]
    1240:	e783a006 	str	r10, [r3, r6]
		audio_stream.current_playback_locations[i] = 0;
    1244:	e5973000 	ldr	r3, [r7]
    1248:	e783a006 	str	r10, [r3, r6]
		audio_stream.current_process_locations[i] = 0;
    124c:	e5973004 	ldr	r3, [r7, #4]
    1250:	e783a006 	str	r10, [r3, r6]
		audio_stream.durations[i] = 0;
    1254:	e5972010 	ldr	r2, [r7, #16]
    1258:	e1a03188 	lsl	r3, r8, #3
    125c:	e18240f3 	strd	r4, [r2, r3]
	audio_stream.durations[i] += current_chord.duration;
}

//clears the stream but keeps the current song the same
void clear_stream(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    1260:	e2888001 	add	r8, r8, #1
    1264:	e5973014 	ldr	r3, [r7, #20]
    1268:	e5933004 	ldr	r3, [r3, #4]
    126c:	e1530008 	cmp	r3, r8
    1270:	8a000006 	bhi	1290 <clear_stream+0x8c>
    1274:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}
    1278:	e3a08000 	mov	r8, #0
		//advance the stream to the end
		while(audio_stream.queue_fronts[i] != NULL)
    127c:	e3017a28 	movw	r7, #6696	; 0x1a28
    1280:	e3407003 	movt	r7, #3
			advance_stream(&audio_stream.queue_fronts[i]);
		
		//set all other variables pertaining to the respective track to zero
		audio_stream.queue_backs[i] = NULL;
    1284:	e1a0a008 	mov	r10, r8
		audio_stream.current_playback_locations[i] = 0;
		audio_stream.current_process_locations[i] = 0;
		audio_stream.durations[i] = 0;
    1288:	e3a04000 	mov	r4, #0
    128c:	e3a05000 	mov	r5, #0

//clears the stream but keeps the current song the same
void clear_stream(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		//advance the stream to the end
		while(audio_stream.queue_fronts[i] != NULL)
    1290:	e1a06108 	lsl	r6, r8, #2
    1294:	e5973008 	ldr	r3, [r7, #8]
    1298:	e0830006 	add	r0, r3, r6
    129c:	e7933108 	ldr	r3, [r3, r8, lsl #2]
    12a0:	e3530000 	cmp	r3, #0
    12a4:	1affffde 	bne	1224 <clear_stream+0x20>
    12a8:	eaffffe3 	b	123c <clear_stream+0x38>

000012ac <is_stream_valid>:
	//reattach the rest of the queue to the front
	*front_node = next_node;
}

bool is_stream_valid(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    12ac:	e3013a28 	movw	r3, #6696	; 0x1a28
    12b0:	e3403003 	movt	r3, #3
    12b4:	e5933014 	ldr	r3, [r3, #20]
    12b8:	e5930004 	ldr	r0, [r3, #4]
    12bc:	e3500000 	cmp	r0, #0
    12c0:	0a00000f 	beq	1304 <is_stream_valid+0x58>
		if(audio_stream.queue_fronts[i] == NULL) return false;
    12c4:	e3013a28 	movw	r3, #6696	; 0x1a28
    12c8:	e3403003 	movt	r3, #3
    12cc:	e5932008 	ldr	r2, [r3, #8]
    12d0:	e5923000 	ldr	r3, [r2]
    12d4:	e3530000 	cmp	r3, #0
    12d8:	0a00000b 	beq	130c <is_stream_valid+0x60>
	//reattach the rest of the queue to the front
	*front_node = next_node;
}

bool is_stream_valid(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    12dc:	e3a03000 	mov	r3, #0
    12e0:	ea000002 	b	12f0 <is_stream_valid+0x44>
		if(audio_stream.queue_fronts[i] == NULL) return false;
    12e4:	e5b21004 	ldr	r1, [r2, #4]!
    12e8:	e3510000 	cmp	r1, #0
    12ec:	0a000008 	beq	1314 <is_stream_valid+0x68>
	//reattach the rest of the queue to the front
	*front_node = next_node;
}

bool is_stream_valid(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    12f0:	e2833001 	add	r3, r3, #1
    12f4:	e1530000 	cmp	r3, r0
    12f8:	1afffff9 	bne	12e4 <is_stream_valid+0x38>
		if(audio_stream.queue_fronts[i] == NULL) return false;
	}
	
	return true;
    12fc:	e3a00001 	mov	r0, #1
    1300:	e12fff1e 	bx	lr
    1304:	e3a00001 	mov	r0, #1
    1308:	e12fff1e 	bx	lr
	*front_node = next_node;
}

bool is_stream_valid(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		if(audio_stream.queue_fronts[i] == NULL) return false;
    130c:	e3a00000 	mov	r0, #0
    1310:	e12fff1e 	bx	lr
    1314:	e3a00000 	mov	r0, #0
	}
	
	return true;
}
    1318:	e12fff1e 	bx	lr

0000131c <is_stream_fully_processed>:

bool is_stream_fully_processed(){
    131c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    1320:	e3013a28 	movw	r3, #6696	; 0x1a28
    1324:	e3403003 	movt	r3, #3
    1328:	e5932014 	ldr	r2, [r3, #20]
    132c:	e5924004 	ldr	r4, [r2, #4]
    1330:	e3540000 	cmp	r4, #0
    1334:	0a000013 	beq	1388 <is_stream_fully_processed+0x6c>
		if(audio_stream.current_process_locations[i] < audio_stream.current_song->music_tracks[i].length)
    1338:	e3013a28 	movw	r3, #6696	; 0x1a28
    133c:	e3403003 	movt	r3, #3
    1340:	e5931004 	ldr	r1, [r3, #4]
    1344:	e5922000 	ldr	r2, [r2]
    1348:	e5910000 	ldr	r0, [r1]
    134c:	e5923008 	ldr	r3, [r2, #8]
    1350:	e1500003 	cmp	r0, r3
    1354:	3a00000d 	bcc	1390 <is_stream_fully_processed+0x74>
	
	return true;
}

bool is_stream_fully_processed(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    1358:	e3a03000 	mov	r3, #0
    135c:	ea000004 	b	1374 <is_stream_fully_processed+0x58>
		if(audio_stream.current_process_locations[i] < audio_stream.current_song->music_tracks[i].length)
    1360:	e5b1c004 	ldr	r12, [r1, #4]!
    1364:	e282200c 	add	r2, r2, #12
    1368:	e5920008 	ldr	r0, [r2, #8]
    136c:	e15c0000 	cmp	r12, r0
    1370:	3a000008 	bcc	1398 <is_stream_fully_processed+0x7c>
	
	return true;
}

bool is_stream_fully_processed(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    1374:	e2833001 	add	r3, r3, #1
    1378:	e1530004 	cmp	r3, r4
    137c:	1afffff7 	bne	1360 <is_stream_fully_processed+0x44>
		if(audio_stream.current_process_locations[i] < audio_stream.current_song->music_tracks[i].length)
			return false;
	}
	
	return true;
    1380:	e3a00001 	mov	r0, #1
    1384:	ea000004 	b	139c <is_stream_fully_processed+0x80>
    1388:	e3a00001 	mov	r0, #1
    138c:	ea000002 	b	139c <is_stream_fully_processed+0x80>
}

bool is_stream_fully_processed(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		if(audio_stream.current_process_locations[i] < audio_stream.current_song->music_tracks[i].length)
			return false;
    1390:	e3a00000 	mov	r0, #0
    1394:	ea000000 	b	139c <is_stream_fully_processed+0x80>
    1398:	e3a00000 	mov	r0, #0
	}
	
	return true;
}
    139c:	e8bd0010 	ldmfd	sp!, {r4}
    13a0:	e12fff1e 	bx	lr

000013a4 <get_next_processed_track>:

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
    13a4:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
    13a8:	e3013a28 	movw	r3, #6696	; 0x1a28
    13ac:	e3403003 	movt	r3, #3
    13b0:	e5932014 	ldr	r2, [r3, #20]
    13b4:	e5928004 	ldr	r8, [r2, #4]
    13b8:	e3580001 	cmp	r8, #1
    13bc:	9a000016 	bls	141c <get_next_processed_track+0x78>
		if(audio_stream.current_process_locations[i] < audio_stream.current_song->music_tracks[i].length 
			&& audio_stream.durations[i] < audio_stream.durations[shortest_duration_index]){
    13c0:	e3013a28 	movw	r3, #6696	; 0x1a28
    13c4:	e3403003 	movt	r3, #3
    13c8:	e593a010 	ldr	r10, [r3, #16]
    13cc:	e5936004 	ldr	r6, [r3, #4]
    13d0:	e5925000 	ldr	r5, [r2]
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
    13d4:	e3a04001 	mov	r4, #1
	return true;
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
    13d8:	e3a07000 	mov	r7, #0
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(audio_stream.current_process_locations[i] < audio_stream.current_song->music_tracks[i].length 
    13dc:	e5b62004 	ldr	r2, [r6, #4]!
    13e0:	e5953014 	ldr	r3, [r5, #20]
    13e4:	e1520003 	cmp	r2, r3
    13e8:	2a000006 	bcs	1408 <get_next_processed_track+0x64>
	
	return true;
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
    13ec:	e1a02184 	lsl	r2, r4, #3
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(audio_stream.current_process_locations[i] < audio_stream.current_song->music_tracks[i].length 
			&& audio_stream.durations[i] < audio_stream.durations[shortest_duration_index]){
    13f0:	e1a03187 	lsl	r3, r7, #3
    13f4:	e18a00d2 	ldrd	r0, [r10, r2]
    13f8:	e18320da 	ldrd	r2, [r3, r10]
    13fc:	eb001064 	bl	5594 <__aeabi_dcmplt>
    1400:	e3500000 	cmp	r0, #0
    1404:	11a07004 	movne	r7, r4
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
    1408:	e2844001 	add	r4, r4, #1
    140c:	e285500c 	add	r5, r5, #12
    1410:	e1540008 	cmp	r4, r8
    1414:	1afffff0 	bne	13dc <get_next_processed_track+0x38>
    1418:	ea000000 	b	1420 <get_next_processed_track+0x7c>
	return true;
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
    141c:	e3a07000 	mov	r7, #0
			&& audio_stream.durations[i] < audio_stream.durations[shortest_duration_index]){
			shortest_duration_index = i;
		}
	}
	return shortest_duration_index;
}
    1420:	e1a00007 	mov	r0, r7
    1424:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}

00001428 <populate_stream>:
	free(audio_stream.queue_backs);
	free(audio_stream.durations);
}

//processes one chord of the shortest duration track
void populate_stream(){
    1428:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    142c:	e24dd030 	sub	sp, sp, #48	; 0x30
	unsigned int i = get_next_processed_track();
    1430:	ebffffdb 	bl	13a4 <get_next_processed_track>
    1434:	e1a06000 	mov	r6, r0
	
	//retrieve the current track
	struct MusicTrack current_track = audio_stream.current_song->music_tracks[i];
    1438:	e3013a28 	movw	r3, #6696	; 0x1a28
    143c:	e3403003 	movt	r3, #3
    1440:	e5931014 	ldr	r1, [r3, #20]
    1444:	e0802080 	add	r2, r0, r0, lsl #1
    1448:	e1a02102 	lsl	r2, r2, #2
    144c:	e5911000 	ldr	r1, [r1]
    1450:	e0810002 	add	r0, r1, r2
    1454:	e7911002 	ldr	r1, [r1, r2]
	
	//check to make sure there is more song left for the respective track
	if(audio_stream.current_process_locations[i] >= current_track.length) return;
    1458:	e5932004 	ldr	r2, [r3, #4]
    145c:	e7923106 	ldr	r3, [r2, r6, lsl #2]
    1460:	e5902008 	ldr	r2, [r0, #8]
    1464:	e1530002 	cmp	r3, r2
    1468:	2a000033 	bcs	153c <populate_stream+0x114>
	
	//retrieve the current chord
	struct MusicChord current_chord = current_track.music_chords[audio_stream.current_process_locations[i]];
    146c:	e0833083 	add	r3, r3, r3, lsl #1
    1470:	e0814183 	add	r4, r1, r3, lsl #3
    1474:	e28dc018 	add	r12, sp, #24
    1478:	e1a0e004 	mov	lr, r4
    147c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    1480:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1484:	e89e0003 	ldm	lr, {r0, r1}
    1488:	e88c0003 	stm	r12, {r0, r1}
    148c:	e1c440d8 	ldrd	r4, [r4, #8]
	
	//add a new node to the back of the respective queue
	struct MusicWaveNode * node = malloc(sizeof(struct MusicWaveNode));
    1490:	e3a0000c 	mov	r0, #12
    1494:	eb00109b 	bl	5708 <malloc>
    1498:	e1a07000 	mov	r7, r0
	
	node->wave = get_chord_wave(current_chord);
    149c:	e1cd42f0 	strd	r4, [sp, #32]
    14a0:	e28d8010 	add	r8, sp, #16
    14a4:	e28dc030 	add	r12, sp, #48	; 0x30
    14a8:	e91c000f 	ldmdb	r12, {r0, r1, r2, r3}
    14ac:	e88d000f 	stm	sp, {r0, r1, r2, r3}
    14b0:	e28d3018 	add	r3, sp, #24
    14b4:	e893000c 	ldm	r3, {r2, r3}
    14b8:	e1a00008 	mov	r0, r8
    14bc:	ebfffebd 	bl	fb8 <get_chord_wave>
    14c0:	e8980003 	ldm	r8, {r0, r1}
    14c4:	e8870003 	stm	r7, {r0, r1}
	node->next = NULL;
    14c8:	e3a03000 	mov	r3, #0
    14cc:	e5873008 	str	r3, [r7, #8]
	
	//append the node to the back of the queue
	if(audio_stream.queue_backs[i] != NULL)
    14d0:	e3013a28 	movw	r3, #6696	; 0x1a28
    14d4:	e3403003 	movt	r3, #3
    14d8:	e593300c 	ldr	r3, [r3, #12]
    14dc:	e7933106 	ldr	r3, [r3, r6, lsl #2]
    14e0:	e3530000 	cmp	r3, #0
		audio_stream.queue_backs[i]->next = node;
    14e4:	15837008 	strne	r7, [r3, #8]
	
	audio_stream.queue_backs[i] = node;
    14e8:	e3013a28 	movw	r3, #6696	; 0x1a28
    14ec:	e3403003 	movt	r3, #3
    14f0:	e593200c 	ldr	r2, [r3, #12]
    14f4:	e7827106 	str	r7, [r2, r6, lsl #2]
	
	//if the front of the list is null, the added node is also the front of the list
	if(audio_stream.queue_fronts[i] == NULL) audio_stream.queue_fronts[i] = node;
    14f8:	e5933008 	ldr	r3, [r3, #8]
    14fc:	e7932106 	ldr	r2, [r3, r6, lsl #2]
    1500:	e3520000 	cmp	r2, #0
    1504:	07837106 	streq	r7, [r3, r6, lsl #2]
	
	//increment the location to be the next chord to be processed
	audio_stream.current_process_locations[i]++;
    1508:	e3013a28 	movw	r3, #6696	; 0x1a28
    150c:	e3403003 	movt	r3, #3
    1510:	e5932004 	ldr	r2, [r3, #4]
    1514:	e7921106 	ldr	r1, [r2, r6, lsl #2]
    1518:	e2811001 	add	r1, r1, #1
    151c:	e7821106 	str	r1, [r2, r6, lsl #2]
	
	//increase the duration of the audio stream by the duration of the chord just processed
	audio_stream.durations[i] += current_chord.duration;
    1520:	e1a06186 	lsl	r6, r6, #3
    1524:	e5937010 	ldr	r7, [r3, #16]
    1528:	e18700d6 	ldrd	r0, [r7, r6]
    152c:	e1a02004 	mov	r2, r4
    1530:	e1a03005 	mov	r3, r5
    1534:	eb000db2 	bl	4c04 <__adddf3>
    1538:	e18700f6 	strd	r0, [r7, r6]
}
    153c:	e28dd030 	add	sp, sp, #48	; 0x30
    1540:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00001544 <get_time_left>:
	}
	return shortest_duration_index;
}

//finds the track with the most processed time and returns the duration of it
double get_time_left(){
    1544:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	unsigned int longest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
    1548:	e3013a28 	movw	r3, #6696	; 0x1a28
    154c:	e3403003 	movt	r3, #3
    1550:	e5933014 	ldr	r3, [r3, #20]
    1554:	e5937004 	ldr	r7, [r3, #4]
    1558:	e3570001 	cmp	r7, #1
    155c:	9a00000f 	bls	15a0 <get_time_left+0x5c>
		if(audio_stream.durations[i] > audio_stream.durations[longest_duration_index]){
    1560:	e3013a28 	movw	r3, #6696	; 0x1a28
    1564:	e3403003 	movt	r3, #3
    1568:	e5938010 	ldr	r8, [r3, #16]
    156c:	e1a06008 	mov	r6, r8
}

//finds the track with the most processed time and returns the duration of it
double get_time_left(){
	unsigned int longest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
    1570:	e3a04001 	mov	r4, #1
	return shortest_duration_index;
}

//finds the track with the most processed time and returns the duration of it
double get_time_left(){
	unsigned int longest_duration_index = 0;
    1574:	e3a05000 	mov	r5, #0
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(audio_stream.durations[i] > audio_stream.durations[longest_duration_index]){
    1578:	e1a03185 	lsl	r3, r5, #3
    157c:	e1e600d8 	ldrd	r0, [r6, #8]!
    1580:	e18320d8 	ldrd	r2, [r3, r8]
    1584:	eb001014 	bl	55dc <__aeabi_dcmpgt>
    1588:	e3500000 	cmp	r0, #0
    158c:	11a05004 	movne	r5, r4
}

//finds the track with the most processed time and returns the duration of it
double get_time_left(){
	unsigned int longest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
    1590:	e2844001 	add	r4, r4, #1
    1594:	e1540007 	cmp	r4, r7
    1598:	1afffff6 	bne	1578 <get_time_left+0x34>
    159c:	ea000000 	b	15a4 <get_time_left+0x60>
	return shortest_duration_index;
}

//finds the track with the most processed time and returns the duration of it
double get_time_left(){
	unsigned int longest_duration_index = 0;
    15a0:	e3a05000 	mov	r5, #0
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(audio_stream.durations[i] > audio_stream.durations[longest_duration_index]){
			longest_duration_index = i;
		}
	}
	return audio_stream.durations[longest_duration_index];
    15a4:	e3013a28 	movw	r3, #6696	; 0x1a28
    15a8:	e3403003 	movt	r3, #3
    15ac:	e5933010 	ldr	r3, [r3, #16]
    15b0:	e1a05185 	lsl	r5, r5, #3
}
    15b4:	e18300d5 	ldrd	r0, [r3, r5]
    15b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000015bc <get_sample>:

//retrieve the current sample for all tracks of the provided playback type
double get_sample(char playback_type){
    15bc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    15c0:	e24dd00c 	sub	sp, sp, #12
    15c4:	e1a07000 	mov	r7, r0
	//store the sample to be returned
	double to_return = 0;
	
	//check each track to see if it is to be placed on the right
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    15c8:	e3013a28 	movw	r3, #6696	; 0x1a28
    15cc:	e3403003 	movt	r3, #3
    15d0:	e5933014 	ldr	r3, [r3, #20]
    15d4:	e5932004 	ldr	r2, [r3, #4]
    15d8:	e3520000 	cmp	r2, #0
    15dc:	0a000034 	beq	16b4 <get_sample+0xf8>
    15e0:	e3a05000 	mov	r5, #0
    15e4:	e1a04005 	mov	r4, r5
}

//retrieve the current sample for all tracks of the provided playback type
double get_sample(char playback_type){
	//store the sample to be returned
	double to_return = 0;
    15e8:	e3a00000 	mov	r0, #0
    15ec:	e3a01000 	mov	r1, #0
    15f0:	e1cd00f0 	strd	r0, [sp]
	//check each track to see if it is to be placed on the right
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		struct MusicTrack current_track = audio_stream.current_song->music_tracks[i];
		
		if(current_track.playback_type == playback_type){
			to_return += audio_stream.queue_fronts[i]->wave.waveform[audio_stream.current_playback_locations[i]];
    15f4:	e3016a28 	movw	r6, #6696	; 0x1a28
    15f8:	e3406003 	movt	r6, #3
			
			//increment the next sample location
			audio_stream.current_playback_locations[i]++;
			
			//decrement the duration of the track played
			audio_stream.durations[i] -= sampling_period;
    15fc:	e306bab8 	movw	r11, #27320	; 0x6ab8
    1600:	e340b000 	movt	r11, #0
	//store the sample to be returned
	double to_return = 0;
	
	//check each track to see if it is to be placed on the right
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		struct MusicTrack current_track = audio_stream.current_song->music_tracks[i];
    1604:	e5933000 	ldr	r3, [r3]
    1608:	e0833005 	add	r3, r3, r5
		
		if(current_track.playback_type == playback_type){
    160c:	e5d33004 	ldrb	r3, [r3, #4]
    1610:	e1530007 	cmp	r3, r7
    1614:	1a00001f 	bne	1698 <get_sample+0xdc>
			to_return += audio_stream.queue_fronts[i]->wave.waveform[audio_stream.current_playback_locations[i]];
    1618:	e1a09104 	lsl	r9, r4, #2
    161c:	e5968000 	ldr	r8, [r6]
    1620:	e798a104 	ldr	r10, [r8, r4, lsl #2]
    1624:	e5963008 	ldr	r3, [r6, #8]
    1628:	e7933104 	ldr	r3, [r3, r4, lsl #2]
    162c:	e5932000 	ldr	r2, [r3]
    1630:	e1a0318a 	lsl	r3, r10, #3
    1634:	e1cd00d0 	ldrd	r0, [sp]
    1638:	e0833002 	add	r3, r3, r2
    163c:	e1c320d0 	ldrd	r2, [r3]
    1640:	eb000d6f 	bl	4c04 <__adddf3>
    1644:	e1cd00f0 	strd	r0, [sp]
			
			//increment the next sample location
			audio_stream.current_playback_locations[i]++;
    1648:	e28aa001 	add	r10, r10, #1
    164c:	e788a104 	str	r10, [r8, r4, lsl #2]
			
			//decrement the duration of the track played
			audio_stream.durations[i] -= sampling_period;
    1650:	e1a08184 	lsl	r8, r4, #3
    1654:	e596a010 	ldr	r10, [r6, #16]
    1658:	e18a00d8 	ldrd	r0, [r10, r8]
    165c:	e1cb20d0 	ldrd	r2, [r11]
    1660:	eb000d66 	bl	4c00 <__aeabi_dsub>
    1664:	e18a00f8 	strd	r0, [r10, r8]
			
			//if the current wave has reached the end, advance and reset location
			if(audio_stream.current_playback_locations[i] == audio_stream.queue_fronts[i]->wave.length){
    1668:	e5963008 	ldr	r3, [r6, #8]
    166c:	e0830009 	add	r0, r3, r9
    1670:	e5962000 	ldr	r2, [r6]
    1674:	e7933104 	ldr	r3, [r3, r4, lsl #2]
    1678:	e7922104 	ldr	r2, [r2, r4, lsl #2]
    167c:	e5933004 	ldr	r3, [r3, #4]
    1680:	e1520003 	cmp	r2, r3
    1684:	1a000003 	bne	1698 <get_sample+0xdc>
				advance_stream(&audio_stream.queue_fronts[i]);
    1688:	ebfffed3 	bl	11dc <advance_stream>
				audio_stream.current_playback_locations[i] = 0;
    168c:	e5963000 	ldr	r3, [r6]
    1690:	e3a01000 	mov	r1, #0
    1694:	e7831104 	str	r1, [r3, r4, lsl #2]
double get_sample(char playback_type){
	//store the sample to be returned
	double to_return = 0;
	
	//check each track to see if it is to be placed on the right
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    1698:	e2844001 	add	r4, r4, #1
    169c:	e5963014 	ldr	r3, [r6, #20]
    16a0:	e285500c 	add	r5, r5, #12
    16a4:	e5932004 	ldr	r2, [r3, #4]
    16a8:	e1520004 	cmp	r2, r4
    16ac:	8affffd4 	bhi	1604 <get_sample+0x48>
    16b0:	ea000002 	b	16c0 <get_sample+0x104>
}

//retrieve the current sample for all tracks of the provided playback type
double get_sample(char playback_type){
	//store the sample to be returned
	double to_return = 0;
    16b4:	e3a02000 	mov	r2, #0
    16b8:	e3a03000 	mov	r3, #0
    16bc:	e1cd20f0 	strd	r2, [sp]
			}
		}
	}
	
	return to_return;	
    16c0:	e1cd00d0 	ldrd	r0, [sp]
    16c4:	e28dd00c 	add	sp, sp, #12
    16c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    16cc:	00000000 	andeq	r0, r0, r0

000016d0 <floor>:
    16d0:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    16d4:	e1a08081 	lsl	r8, r1, #1
    16d8:	e1a08aa8 	lsr	r8, r8, #21
    16dc:	e2486fff 	sub	r6, r8, #1020	; 0x3fc
    16e0:	e2466003 	sub	r6, r6, #3
    16e4:	e3560013 	cmp	r6, #19
    16e8:	e1a02000 	mov	r2, r0
    16ec:	e1a03001 	mov	r3, r1
    16f0:	e1a04000 	mov	r4, r0
    16f4:	e1a05001 	mov	r5, r1
    16f8:	e1a07001 	mov	r7, r1
    16fc:	ca000019 	bgt	1768 <floor+0x98>
    1700:	e3560000 	cmp	r6, #0
    1704:	ba000034 	blt	17dc <floor+0x10c>
    1708:	e59f8150 	ldr	r8, [pc, #336]	; 1860 <floor+0x190>
    170c:	e1a08658 	asr	r8, r8, r6
    1710:	e008c001 	and	r12, r8, r1
    1714:	e19cc000 	orrs	r12, r12, r0
    1718:	0a00000e 	beq	1758 <floor+0x88>
    171c:	e28f3f4d 	add	r3, pc, #308	; 0x134
    1720:	e893000c 	ldm	r3, {r2, r3}
    1724:	eb000d36 	bl	4c04 <__adddf3>
    1728:	e3a02000 	mov	r2, #0
    172c:	e3a03000 	mov	r3, #0
    1730:	eb000fa9 	bl	55dc <__aeabi_dcmpgt>
    1734:	e3500000 	cmp	r0, #0
    1738:	0a000004 	beq	1750 <floor+0x80>
    173c:	e3550000 	cmp	r5, #0
    1740:	b3a03601 	movlt	r3, #1048576	; 0x100000
    1744:	b0855653 	addlt	r5, r5, r3, asr r6
    1748:	e3a04000 	mov	r4, #0
    174c:	e1c57008 	bic	r7, r5, r8
    1750:	e1a03007 	mov	r3, r7
    1754:	e1a02004 	mov	r2, r4
    1758:	e1a00002 	mov	r0, r2
    175c:	e1a01003 	mov	r1, r3
    1760:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    1764:	e12fff1e 	bx	lr
    1768:	e3560033 	cmp	r6, #51	; 0x33
    176c:	da000005 	ble	1788 <floor+0xb8>
    1770:	e3560b01 	cmp	r6, #1024	; 0x400
    1774:	1afffff7 	bne	1758 <floor+0x88>
    1778:	eb000d21 	bl	4c04 <__adddf3>
    177c:	e1a02000 	mov	r2, r0
    1780:	e1a03001 	mov	r3, r1
    1784:	eafffff3 	b	1758 <floor+0x88>
    1788:	e248ae41 	sub	r10, r8, #1040	; 0x410
    178c:	e24aa003 	sub	r10, r10, #3
    1790:	e3e0c000 	mvn	r12, #0
    1794:	e1a0aa3c 	lsr	r10, r12, r10
    1798:	e11a0000 	tst	r10, r0
    179c:	0affffed 	beq	1758 <floor+0x88>
    17a0:	e28f30b0 	add	r3, pc, #176	; 0xb0
    17a4:	e893000c 	ldm	r3, {r2, r3}
    17a8:	eb000d15 	bl	4c04 <__adddf3>
    17ac:	e3a02000 	mov	r2, #0
    17b0:	e3a03000 	mov	r3, #0
    17b4:	eb000f88 	bl	55dc <__aeabi_dcmpgt>
    17b8:	e3500000 	cmp	r0, #0
    17bc:	0affffe3 	beq	1750 <floor+0x80>
    17c0:	e3550000 	cmp	r5, #0
    17c4:	ba000017 	blt	1828 <floor+0x158>
    17c8:	e1c4400a 	bic	r4, r4, r10
    17cc:	e1a07005 	mov	r7, r5
    17d0:	e1a03007 	mov	r3, r7
    17d4:	e1a02004 	mov	r2, r4
    17d8:	eaffffde 	b	1758 <floor+0x88>
    17dc:	e28f3074 	add	r3, pc, #116	; 0x74
    17e0:	e893000c 	ldm	r3, {r2, r3}
    17e4:	eb000d06 	bl	4c04 <__adddf3>
    17e8:	e3a02000 	mov	r2, #0
    17ec:	e3a03000 	mov	r3, #0
    17f0:	eb000f79 	bl	55dc <__aeabi_dcmpgt>
    17f4:	e3500000 	cmp	r0, #0
    17f8:	0affffd4 	beq	1750 <floor+0x80>
    17fc:	e3550000 	cmp	r5, #0
    1800:	a3a04000 	movge	r4, #0
    1804:	a1a07004 	movge	r7, r4
    1808:	aaffffd0 	bge	1750 <floor+0x80>
    180c:	e3c73102 	bic	r3, r7, #-2147483648	; 0x80000000
    1810:	e1833004 	orr	r3, r3, r4
    1814:	e3530000 	cmp	r3, #0
    1818:	e59f3044 	ldr	r3, [pc, #68]	; 1864 <floor+0x194>
    181c:	13a04000 	movne	r4, #0
    1820:	11a07003 	movne	r7, r3
    1824:	eaffffc9 	b	1750 <floor+0x80>
    1828:	e3560014 	cmp	r6, #20
    182c:	02855001 	addeq	r5, r5, #1
    1830:	0affffe4 	beq	17c8 <floor+0xf8>
    1834:	e2688e43 	rsb	r8, r8, #1072	; 0x430
    1838:	e2888003 	add	r8, r8, #3
    183c:	e3a03001 	mov	r3, #1
    1840:	e0843813 	add	r3, r4, r3, lsl r8
    1844:	e1540003 	cmp	r4, r3
    1848:	82855001 	addhi	r5, r5, #1
    184c:	e1a04003 	mov	r4, r3
    1850:	eaffffdc 	b	17c8 <floor+0xf8>
    1854:	e1a00000 	nop			; (mov r0, r0)
    1858:	8800759c 	.word	0x8800759c
    185c:	7e37e43c 	.word	0x7e37e43c
    1860:	000fffff 	.word	0x000fffff
    1864:	bff00000 	.word	0xbff00000

00001868 <sin>:
    1868:	e92d4030 	push	{r4, r5, lr}
    186c:	e59fe0ec 	ldr	lr, [pc, #236]	; 1960 <sin+0xf8>
    1870:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    1874:	e15c000e 	cmp	r12, lr
    1878:	e24dd01c 	sub	sp, sp, #28
    187c:	e1a02000 	mov	r2, r0
    1880:	e1a03001 	mov	r3, r1
    1884:	e1a04000 	mov	r4, r0
    1888:	e1a05001 	mov	r5, r1
    188c:	da000017 	ble	18f0 <sin+0x88>
    1890:	e59fe0cc 	ldr	lr, [pc, #204]	; 1964 <sin+0xfc>
    1894:	e15c000e 	cmp	r12, lr
    1898:	da000003 	ble	18ac <sin+0x44>
    189c:	eb000cd7 	bl	4c00 <__aeabi_dsub>
    18a0:	e28dd01c 	add	sp, sp, #28
    18a4:	e8bd4030 	pop	{r4, r5, lr}
    18a8:	e12fff1e 	bx	lr
    18ac:	e28d2008 	add	r2, sp, #8
    18b0:	eb00056c 	bl	2e68 <__ieee754_rem_pio2>
    18b4:	e2000003 	and	r0, r0, #3
    18b8:	e3500001 	cmp	r0, #1
    18bc:	0a00001a 	beq	192c <sin+0xc4>
    18c0:	e3500002 	cmp	r0, #2
    18c4:	0a00000f 	beq	1908 <sin+0xa0>
    18c8:	e3500000 	cmp	r0, #0
    18cc:	1a00001c 	bne	1944 <sin+0xdc>
    18d0:	e3a03001 	mov	r3, #1
    18d4:	e58d3000 	str	r3, [sp]
    18d8:	e28d1008 	add	r1, sp, #8
    18dc:	e8910003 	ldm	r1, {r0, r1}
    18e0:	e28d3010 	add	r3, sp, #16
    18e4:	e893000c 	ldm	r3, {r2, r3}
    18e8:	eb000b3c 	bl	45e0 <__kernel_sin>
    18ec:	eaffffeb 	b	18a0 <sin+0x38>
    18f0:	e3a03000 	mov	r3, #0
    18f4:	e58d3000 	str	r3, [sp]
    18f8:	e3a02000 	mov	r2, #0
    18fc:	e3a03000 	mov	r3, #0
    1900:	eb000b36 	bl	45e0 <__kernel_sin>
    1904:	eaffffe5 	b	18a0 <sin+0x38>
    1908:	e3a03001 	mov	r3, #1
    190c:	e58d3000 	str	r3, [sp]
    1910:	e28d1008 	add	r1, sp, #8
    1914:	e8910003 	ldm	r1, {r0, r1}
    1918:	e28d3010 	add	r3, sp, #16
    191c:	e893000c 	ldm	r3, {r2, r3}
    1920:	eb000b2e 	bl	45e0 <__kernel_sin>
    1924:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    1928:	eaffffdc 	b	18a0 <sin+0x38>
    192c:	e28d1008 	add	r1, sp, #8
    1930:	e8910003 	ldm	r1, {r0, r1}
    1934:	e28d3010 	add	r3, sp, #16
    1938:	e893000c 	ldm	r3, {r2, r3}
    193c:	eb00076f 	bl	3700 <__kernel_cos>
    1940:	eaffffd6 	b	18a0 <sin+0x38>
    1944:	e28d1008 	add	r1, sp, #8
    1948:	e8910003 	ldm	r1, {r0, r1}
    194c:	e28d3010 	add	r3, sp, #16
    1950:	e893000c 	ldm	r3, {r2, r3}
    1954:	eb000769 	bl	3700 <__kernel_cos>
    1958:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    195c:	eaffffcf 	b	18a0 <sin+0x38>
    1960:	3fe921fb 	.word	0x3fe921fb
    1964:	7fefffff 	.word	0x7fefffff

00001968 <pow>:
    1968:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    196c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    1970:	e1a07003 	mov	r7, r3
    1974:	e1a08000 	mov	r8, r0
    1978:	e1a09001 	mov	r9, r1
    197c:	e1a06002 	mov	r6, r2
    1980:	eb000138 	bl	1e68 <__ieee754_pow>
    1984:	e59fb4bc 	ldr	r11, [pc, #1212]	; 1e48 <pow+0x4e0>
    1988:	e1db30d0 	ldrsb	r3, [r11]
    198c:	e3730001 	cmn	r3, #1
    1990:	e1a04000 	mov	r4, r0
    1994:	e1a05001 	mov	r5, r1
    1998:	0a000004 	beq	19b0 <pow+0x48>
    199c:	e1a00006 	mov	r0, r6
    19a0:	e1a01007 	mov	r1, r7
    19a4:	eb000b9b 	bl	4818 <__fpclassifyd>
    19a8:	e3500000 	cmp	r0, #0
    19ac:	1a000004 	bne	19c4 <pow+0x5c>
    19b0:	e1a00004 	mov	r0, r4
    19b4:	e1a01005 	mov	r1, r5
    19b8:	e28dd02c 	add	sp, sp, #44	; 0x2c
    19bc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    19c0:	e12fff1e 	bx	lr
    19c4:	e1a00008 	mov	r0, r8
    19c8:	e1a01009 	mov	r1, r9
    19cc:	eb000b91 	bl	4818 <__fpclassifyd>
    19d0:	e250a000 	subs	r10, r0, #0
    19d4:	1a00001a 	bne	1a44 <pow+0xdc>
    19d8:	e1a00006 	mov	r0, r6
    19dc:	e1a01007 	mov	r1, r7
    19e0:	e3a02000 	mov	r2, #0
    19e4:	e3a03000 	mov	r3, #0
    19e8:	eb000ee3 	bl	557c <__aeabi_dcmpeq>
    19ec:	e3500000 	cmp	r0, #0
    19f0:	0affffee 	beq	19b0 <pow+0x48>
    19f4:	e1db30d0 	ldrsb	r3, [r11]
    19f8:	e3730001 	cmn	r3, #1
    19fc:	13530002 	cmpne	r3, #2
    1a00:	e3a03001 	mov	r3, #1
    1a04:	e58d3000 	str	r3, [sp]
    1a08:	e59f343c 	ldr	r3, [pc, #1084]	; 1e4c <pow+0x4e4>
    1a0c:	e58d3004 	str	r3, [sp, #4]
    1a10:	e59f3438 	ldr	r3, [pc, #1080]	; 1e50 <pow+0x4e8>
    1a14:	e3a02000 	mov	r2, #0
    1a18:	e58da020 	str	r10, [sp, #32]
    1a1c:	e58d8008 	str	r8, [sp, #8]
    1a20:	e58d900c 	str	r9, [sp, #12]
    1a24:	e58d6010 	str	r6, [sp, #16]
    1a28:	e58d7014 	str	r7, [sp, #20]
    1a2c:	e58d2018 	str	r2, [sp, #24]
    1a30:	e58d301c 	str	r3, [sp, #28]
    1a34:	1a000025 	bne	1ad0 <pow+0x168>
    1a38:	e28d5018 	add	r5, sp, #24
    1a3c:	e8950030 	ldm	r5, {r4, r5}
    1a40:	eaffffda 	b	19b0 <pow+0x48>
    1a44:	e1a00008 	mov	r0, r8
    1a48:	e1a01009 	mov	r1, r9
    1a4c:	e3a02000 	mov	r2, #0
    1a50:	e3a03000 	mov	r3, #0
    1a54:	eb000ec8 	bl	557c <__aeabi_dcmpeq>
    1a58:	e3500000 	cmp	r0, #0
    1a5c:	0a000026 	beq	1afc <pow+0x194>
    1a60:	e1a00006 	mov	r0, r6
    1a64:	e1a01007 	mov	r1, r7
    1a68:	e3a02000 	mov	r2, #0
    1a6c:	e3a03000 	mov	r3, #0
    1a70:	eb000ec1 	bl	557c <__aeabi_dcmpeq>
    1a74:	e3500000 	cmp	r0, #0
    1a78:	0a00004e 	beq	1bb8 <pow+0x250>
    1a7c:	e1db30d0 	ldrsb	r3, [r11]
    1a80:	e3530000 	cmp	r3, #0
    1a84:	e3a03001 	mov	r3, #1
    1a88:	e58d3000 	str	r3, [sp]
    1a8c:	e59f33b8 	ldr	r3, [pc, #952]	; 1e4c <pow+0x4e4>
    1a90:	e58d3004 	str	r3, [sp, #4]
    1a94:	e3a03000 	mov	r3, #0
    1a98:	e58d3020 	str	r3, [sp, #32]
    1a9c:	e3a04000 	mov	r4, #0
    1aa0:	e3a03000 	mov	r3, #0
    1aa4:	e58d8008 	str	r8, [sp, #8]
    1aa8:	e58d900c 	str	r9, [sp, #12]
    1aac:	e58d6010 	str	r6, [sp, #16]
    1ab0:	e58d7014 	str	r7, [sp, #20]
    1ab4:	e58d3018 	str	r3, [sp, #24]
    1ab8:	e58d401c 	str	r4, [sp, #28]
    1abc:	159f338c 	ldrne	r3, [pc, #908]	; 1e50 <pow+0x4e8>
    1ac0:	13a02000 	movne	r2, #0
    1ac4:	158d2018 	strne	r2, [sp, #24]
    1ac8:	158d301c 	strne	r3, [sp, #28]
    1acc:	1affffd9 	bne	1a38 <pow+0xd0>
    1ad0:	e1a0000d 	mov	r0, sp
    1ad4:	eb000b6a 	bl	4884 <matherr>
    1ad8:	e3500000 	cmp	r0, #0
    1adc:	0a000058 	beq	1c44 <pow+0x2dc>
    1ae0:	e59d3020 	ldr	r3, [sp, #32]
    1ae4:	e3530000 	cmp	r3, #0
    1ae8:	0affffd2 	beq	1a38 <pow+0xd0>
    1aec:	eb000ef4 	bl	56c4 <__errno>
    1af0:	e59d3020 	ldr	r3, [sp, #32]
    1af4:	e5803000 	str	r3, [r0]
    1af8:	eaffffce 	b	1a38 <pow+0xd0>
    1afc:	e1a00004 	mov	r0, r4
    1b00:	e1a01005 	mov	r1, r5
    1b04:	eb000b3f 	bl	4808 <finite>
    1b08:	e250a000 	subs	r10, r0, #0
    1b0c:	0a000050 	beq	1c54 <pow+0x2ec>
    1b10:	e1a00004 	mov	r0, r4
    1b14:	e1a01005 	mov	r1, r5
    1b18:	e3a02000 	mov	r2, #0
    1b1c:	e3a03000 	mov	r3, #0
    1b20:	eb000e95 	bl	557c <__aeabi_dcmpeq>
    1b24:	e3500000 	cmp	r0, #0
    1b28:	0affffa0 	beq	19b0 <pow+0x48>
    1b2c:	e1a00008 	mov	r0, r8
    1b30:	e1a01009 	mov	r1, r9
    1b34:	eb000b33 	bl	4808 <finite>
    1b38:	e3500000 	cmp	r0, #0
    1b3c:	0affff9b 	beq	19b0 <pow+0x48>
    1b40:	e1a00006 	mov	r0, r6
    1b44:	e1a01007 	mov	r1, r7
    1b48:	eb000b2e 	bl	4808 <finite>
    1b4c:	e3500000 	cmp	r0, #0
    1b50:	0affff96 	beq	19b0 <pow+0x48>
    1b54:	e1db30d0 	ldrsb	r3, [r11]
    1b58:	e3530002 	cmp	r3, #2
    1b5c:	e3a03004 	mov	r3, #4
    1b60:	e58d3000 	str	r3, [sp]
    1b64:	e59f32e0 	ldr	r3, [pc, #736]	; 1e4c <pow+0x4e4>
    1b68:	e58d3004 	str	r3, [sp, #4]
    1b6c:	e3a03000 	mov	r3, #0
    1b70:	e58d3020 	str	r3, [sp, #32]
    1b74:	e3a04000 	mov	r4, #0
    1b78:	e3a03000 	mov	r3, #0
    1b7c:	e58d8008 	str	r8, [sp, #8]
    1b80:	e58d900c 	str	r9, [sp, #12]
    1b84:	e58d6010 	str	r6, [sp, #16]
    1b88:	e58d7014 	str	r7, [sp, #20]
    1b8c:	e58d3018 	str	r3, [sp, #24]
    1b90:	e58d401c 	str	r4, [sp, #28]
    1b94:	0a00005c 	beq	1d0c <pow+0x3a4>
    1b98:	e1a0000d 	mov	r0, sp
    1b9c:	eb000b38 	bl	4884 <matherr>
    1ba0:	e3500000 	cmp	r0, #0
    1ba4:	0a000058 	beq	1d0c <pow+0x3a4>
    1ba8:	e59d3020 	ldr	r3, [sp, #32]
    1bac:	e3530000 	cmp	r3, #0
    1bb0:	0affffa0 	beq	1a38 <pow+0xd0>
    1bb4:	eaffffcc 	b	1aec <pow+0x184>
    1bb8:	e1a00006 	mov	r0, r6
    1bbc:	e1a01007 	mov	r1, r7
    1bc0:	eb000b10 	bl	4808 <finite>
    1bc4:	e3500000 	cmp	r0, #0
    1bc8:	0affff78 	beq	19b0 <pow+0x48>
    1bcc:	e1a00006 	mov	r0, r6
    1bd0:	e1a01007 	mov	r1, r7
    1bd4:	e3a02000 	mov	r2, #0
    1bd8:	e3a03000 	mov	r3, #0
    1bdc:	eb000e6c 	bl	5594 <__aeabi_dcmplt>
    1be0:	e3500000 	cmp	r0, #0
    1be4:	0affff71 	beq	19b0 <pow+0x48>
    1be8:	e3a02001 	mov	r2, #1
    1bec:	e5db3000 	ldrb	r3, [r11]
    1bf0:	e58d2000 	str	r2, [sp]
    1bf4:	e59f2250 	ldr	r2, [pc, #592]	; 1e4c <pow+0x4e4>
    1bf8:	e3530000 	cmp	r3, #0
    1bfc:	e58d2004 	str	r2, [sp, #4]
    1c00:	e3a02000 	mov	r2, #0
    1c04:	e58d2020 	str	r2, [sp, #32]
    1c08:	e58d8008 	str	r8, [sp, #8]
    1c0c:	e58d900c 	str	r9, [sp, #12]
    1c10:	e58d6010 	str	r6, [sp, #16]
    1c14:	e58d7014 	str	r7, [sp, #20]
    1c18:	0a000036 	beq	1cf8 <pow+0x390>
    1c1c:	e3530002 	cmp	r3, #2
    1c20:	e59f322c 	ldr	r3, [pc, #556]	; 1e54 <pow+0x4ec>
    1c24:	e3a02000 	mov	r2, #0
    1c28:	e58d2018 	str	r2, [sp, #24]
    1c2c:	e58d301c 	str	r3, [sp, #28]
    1c30:	1a00002b 	bne	1ce4 <pow+0x37c>
    1c34:	eb000ea2 	bl	56c4 <__errno>
    1c38:	e3a03021 	mov	r3, #33	; 0x21
    1c3c:	e5803000 	str	r3, [r0]
    1c40:	eaffffd8 	b	1ba8 <pow+0x240>
    1c44:	eb000e9e 	bl	56c4 <__errno>
    1c48:	e3a03021 	mov	r3, #33	; 0x21
    1c4c:	e5803000 	str	r3, [r0]
    1c50:	eaffffa2 	b	1ae0 <pow+0x178>
    1c54:	e1a00008 	mov	r0, r8
    1c58:	e1a01009 	mov	r1, r9
    1c5c:	eb000ae9 	bl	4808 <finite>
    1c60:	e3500000 	cmp	r0, #0
    1c64:	0affffa9 	beq	1b10 <pow+0x1a8>
    1c68:	e1a00006 	mov	r0, r6
    1c6c:	e1a01007 	mov	r1, r7
    1c70:	eb000ae4 	bl	4808 <finite>
    1c74:	e3500000 	cmp	r0, #0
    1c78:	0affffa4 	beq	1b10 <pow+0x1a8>
    1c7c:	e1a00004 	mov	r0, r4
    1c80:	e1a01005 	mov	r1, r5
    1c84:	eb000ae3 	bl	4818 <__fpclassifyd>
    1c88:	e3500000 	cmp	r0, #0
    1c8c:	1a000022 	bne	1d1c <pow+0x3b4>
    1c90:	e3a03001 	mov	r3, #1
    1c94:	e5db4000 	ldrb	r4, [r11]
    1c98:	e58d3000 	str	r3, [sp]
    1c9c:	e59f31a8 	ldr	r3, [pc, #424]	; 1e4c <pow+0x4e4>
    1ca0:	e3540000 	cmp	r4, #0
    1ca4:	e58d3004 	str	r3, [sp, #4]
    1ca8:	e58d0020 	str	r0, [sp, #32]
    1cac:	e58d8008 	str	r8, [sp, #8]
    1cb0:	e58d900c 	str	r9, [sp, #12]
    1cb4:	e58d6010 	str	r6, [sp, #16]
    1cb8:	e58d7014 	str	r7, [sp, #20]
    1cbc:	0a00000d 	beq	1cf8 <pow+0x390>
    1cc0:	e3a00000 	mov	r0, #0
    1cc4:	e3a01000 	mov	r1, #0
    1cc8:	e1a02000 	mov	r2, r0
    1ccc:	e1a03001 	mov	r3, r1
    1cd0:	eb000d73 	bl	52a4 <__aeabi_ddiv>
    1cd4:	e3540002 	cmp	r4, #2
    1cd8:	e58d0018 	str	r0, [sp, #24]
    1cdc:	e58d101c 	str	r1, [sp, #28]
    1ce0:	0affffd3 	beq	1c34 <pow+0x2cc>
    1ce4:	e1a0000d 	mov	r0, sp
    1ce8:	eb000ae5 	bl	4884 <matherr>
    1cec:	e3500000 	cmp	r0, #0
    1cf0:	1affffac 	bne	1ba8 <pow+0x240>
    1cf4:	eaffffce 	b	1c34 <pow+0x2cc>
    1cf8:	e3a03000 	mov	r3, #0
    1cfc:	e3a04000 	mov	r4, #0
    1d00:	e58d3018 	str	r3, [sp, #24]
    1d04:	e58d401c 	str	r4, [sp, #28]
    1d08:	eafffff5 	b	1ce4 <pow+0x37c>
    1d0c:	eb000e6c 	bl	56c4 <__errno>
    1d10:	e3a03022 	mov	r3, #34	; 0x22
    1d14:	e5803000 	str	r3, [r0]
    1d18:	eaffffa2 	b	1ba8 <pow+0x240>
    1d1c:	e1db20d0 	ldrsb	r2, [r11]
    1d20:	e3520000 	cmp	r2, #0
    1d24:	e3a02003 	mov	r2, #3
    1d28:	e58d2000 	str	r2, [sp]
    1d2c:	e59f2118 	ldr	r2, [pc, #280]	; 1e4c <pow+0x4e4>
    1d30:	e1a00008 	mov	r0, r8
    1d34:	e58d2004 	str	r2, [sp, #4]
    1d38:	e1a01009 	mov	r1, r9
    1d3c:	e58da020 	str	r10, [sp, #32]
    1d40:	e58d8008 	str	r8, [sp, #8]
    1d44:	e58d900c 	str	r9, [sp, #12]
    1d48:	e58d6010 	str	r6, [sp, #16]
    1d4c:	e58d7014 	str	r7, [sp, #20]
    1d50:	e3a02000 	mov	r2, #0
    1d54:	e3a03000 	mov	r3, #0
    1d58:	1a000011 	bne	1da4 <pow+0x43c>
    1d5c:	e59f50f4 	ldr	r5, [pc, #244]	; 1e58 <pow+0x4f0>
    1d60:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    1d64:	e58d4018 	str	r4, [sp, #24]
    1d68:	e58d501c 	str	r5, [sp, #28]
    1d6c:	eb000e08 	bl	5594 <__aeabi_dcmplt>
    1d70:	e3500000 	cmp	r0, #0
    1d74:	1a000022 	bne	1e04 <pow+0x49c>
    1d78:	e1db30d0 	ldrsb	r3, [r11]
    1d7c:	e3530002 	cmp	r3, #2
    1d80:	0a000003 	beq	1d94 <pow+0x42c>
    1d84:	e1a0000d 	mov	r0, sp
    1d88:	eb000abd 	bl	4884 <matherr>
    1d8c:	e3500000 	cmp	r0, #0
    1d90:	1affff52 	bne	1ae0 <pow+0x178>
    1d94:	eb000e4a 	bl	56c4 <__errno>
    1d98:	e3a03022 	mov	r3, #34	; 0x22
    1d9c:	e5803000 	str	r3, [r0]
    1da0:	eaffff4e 	b	1ae0 <pow+0x178>
    1da4:	e59f50b0 	ldr	r5, [pc, #176]	; 1e5c <pow+0x4f4>
    1da8:	e3a04000 	mov	r4, #0
    1dac:	e58d4018 	str	r4, [sp, #24]
    1db0:	e58d501c 	str	r5, [sp, #28]
    1db4:	eb000df6 	bl	5594 <__aeabi_dcmplt>
    1db8:	e3500000 	cmp	r0, #0
    1dbc:	0affffed 	beq	1d78 <pow+0x410>
    1dc0:	e3a02000 	mov	r2, #0
    1dc4:	e59f3094 	ldr	r3, [pc, #148]	; 1e60 <pow+0x4f8>
    1dc8:	e1a00006 	mov	r0, r6
    1dcc:	e1a01007 	mov	r1, r7
    1dd0:	eb000c8f 	bl	5014 <__aeabi_dmul>
    1dd4:	e1a04000 	mov	r4, r0
    1dd8:	e1a05001 	mov	r5, r1
    1ddc:	eb000aae 	bl	489c <rint>
    1de0:	e1a02004 	mov	r2, r4
    1de4:	e1a03005 	mov	r3, r5
    1de8:	eb000de3 	bl	557c <__aeabi_dcmpeq>
    1dec:	e3500000 	cmp	r0, #0
    1df0:	059f305c 	ldreq	r3, [pc, #92]	; 1e54 <pow+0x4ec>
    1df4:	03a02000 	moveq	r2, #0
    1df8:	058d2018 	streq	r2, [sp, #24]
    1dfc:	058d301c 	streq	r3, [sp, #28]
    1e00:	eaffffdc 	b	1d78 <pow+0x410>
    1e04:	e3a02000 	mov	r2, #0
    1e08:	e59f3050 	ldr	r3, [pc, #80]	; 1e60 <pow+0x4f8>
    1e0c:	e1a00006 	mov	r0, r6
    1e10:	e1a01007 	mov	r1, r7
    1e14:	eb000c7e 	bl	5014 <__aeabi_dmul>
    1e18:	e1a04000 	mov	r4, r0
    1e1c:	e1a05001 	mov	r5, r1
    1e20:	eb000a9d 	bl	489c <rint>
    1e24:	e1a02004 	mov	r2, r4
    1e28:	e1a03005 	mov	r3, r5
    1e2c:	eb000dd2 	bl	557c <__aeabi_dcmpeq>
    1e30:	e3500000 	cmp	r0, #0
    1e34:	059f3028 	ldreq	r3, [pc, #40]	; 1e64 <pow+0x4fc>
    1e38:	03a0220e 	moveq	r2, #-536870912	; 0xe0000000
    1e3c:	058d2018 	streq	r2, [sp, #24]
    1e40:	058d301c 	streq	r3, [sp, #28]
    1e44:	eaffffcb 	b	1d78 <pow+0x410>
    1e48:	0002bcf0 	.word	0x0002bcf0
    1e4c:	00006ae8 	.word	0x00006ae8
    1e50:	3ff00000 	.word	0x3ff00000
    1e54:	fff00000 	.word	0xfff00000
    1e58:	47efffff 	.word	0x47efffff
    1e5c:	7ff00000 	.word	0x7ff00000
    1e60:	3fe00000 	.word	0x3fe00000
    1e64:	c7efffff 	.word	0xc7efffff

00001e68 <__ieee754_pow>:
    1e68:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1e6c:	e1a0b003 	mov	r11, r3
    1e70:	e1a0a002 	mov	r10, r2
    1e74:	e3cb6102 	bic	r6, r11, #-2147483648	; 0x80000000
    1e78:	e1a08001 	mov	r8, r1
    1e7c:	e24dd044 	sub	sp, sp, #68	; 0x44
    1e80:	e196100a 	orrs	r1, r6, r10
    1e84:	e1a04002 	mov	r4, r2
    1e88:	e1a07000 	mov	r7, r0
    1e8c:	e1a05003 	mov	r5, r3
    1e90:	e1a0c00a 	mov	r12, r10
    1e94:	e58d8010 	str	r8, [sp, #16]
    1e98:	e1a09000 	mov	r9, r0
    1e9c:	0a000060 	beq	2024 <__ieee754_pow+0x1bc>
    1ea0:	e59f12d0 	ldr	r1, [pc, #720]	; 2178 <__ieee754_pow+0x310>
    1ea4:	e3c80102 	bic	r0, r8, #-2147483648	; 0x80000000
    1ea8:	e1500001 	cmp	r0, r1
    1eac:	e58d0008 	str	r0, [sp, #8]
    1eb0:	da00000b 	ble	1ee4 <__ieee754_pow+0x7c>
    1eb4:	e59d4008 	ldr	r4, [sp, #8]
    1eb8:	e284a103 	add	r10, r4, #-1073741824	; 0xc0000000
    1ebc:	e28aa601 	add	r10, r10, #1048576	; 0x100000
    1ec0:	e19a9009 	orrs	r9, r10, r9
    1ec4:	01a0a009 	moveq	r10, r9
    1ec8:	059fb2d4 	ldreq	r11, [pc, #724]	; 21a4 <__ieee754_pow+0x33c>
    1ecc:	1a000057 	bne	2030 <__ieee754_pow+0x1c8>
    1ed0:	e1a0000a 	mov	r0, r10
    1ed4:	e1a0100b 	mov	r1, r11
    1ed8:	e28dd044 	add	sp, sp, #68	; 0x44
    1edc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1ee0:	e12fff1e 	bx	lr
    1ee4:	13a00000 	movne	r0, #0
    1ee8:	03a00001 	moveq	r0, #1
    1eec:	e58d0018 	str	r0, [sp, #24]
    1ef0:	e3570000 	cmp	r7, #0
    1ef4:	03a00000 	moveq	r0, #0
    1ef8:	12000001 	andne	r0, r0, #1
    1efc:	e3500000 	cmp	r0, #0
    1f00:	1affffeb 	bne	1eb4 <__ieee754_pow+0x4c>
    1f04:	e1560001 	cmp	r6, r1
    1f08:	caffffe9 	bgt	1eb4 <__ieee754_pow+0x4c>
    1f0c:	13a01000 	movne	r1, #0
    1f10:	03a01001 	moveq	r1, #1
    1f14:	e58d1028 	str	r1, [sp, #40]	; 0x28
    1f18:	e35a0000 	cmp	r10, #0
    1f1c:	03a01000 	moveq	r1, #0
    1f20:	12011001 	andne	r1, r1, #1
    1f24:	e3510000 	cmp	r1, #0
    1f28:	1affffe1 	bne	1eb4 <__ieee754_pow+0x4c>
    1f2c:	e59d0010 	ldr	r0, [sp, #16]
    1f30:	e3500000 	cmp	r0, #0
    1f34:	e58d8020 	str	r8, [sp, #32]
    1f38:	e1a0400b 	mov	r4, r11
    1f3c:	ba000040 	blt	2044 <__ieee754_pow+0x1dc>
    1f40:	e58d1030 	str	r1, [sp, #48]	; 0x30
    1f44:	e35c0000 	cmp	r12, #0
    1f48:	1a00000c 	bne	1f80 <__ieee754_pow+0x118>
    1f4c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    1f50:	e3530000 	cmp	r3, #0
    1f54:	1a00004e 	bne	2094 <__ieee754_pow+0x22c>
    1f58:	e59f3244 	ldr	r3, [pc, #580]	; 21a4 <__ieee754_pow+0x33c>
    1f5c:	e1560003 	cmp	r6, r3
    1f60:	0a000073 	beq	2134 <__ieee754_pow+0x2cc>
    1f64:	e3540101 	cmp	r4, #1073741824	; 0x40000000
    1f68:	01a00007 	moveq	r0, r7
    1f6c:	01a01008 	moveq	r1, r8
    1f70:	0a000025 	beq	200c <__ieee754_pow+0x1a4>
    1f74:	e59f3200 	ldr	r3, [pc, #512]	; 217c <__ieee754_pow+0x314>
    1f78:	e1540003 	cmp	r4, r3
    1f7c:	0a0002c7 	beq	2aa0 <__ieee754_pow+0xc38>
    1f80:	e1a00007 	mov	r0, r7
    1f84:	e1a01008 	mov	r1, r8
    1f88:	eb000a1c 	bl	4800 <fabs>
    1f8c:	e3590000 	cmp	r9, #0
    1f90:	1a000008 	bne	1fb8 <__ieee754_pow+0x150>
    1f94:	e59d3018 	ldr	r3, [sp, #24]
    1f98:	e59d2008 	ldr	r2, [sp, #8]
    1f9c:	e3520000 	cmp	r2, #0
    1fa0:	03833001 	orreq	r3, r3, #1
    1fa4:	e3530000 	cmp	r3, #0
    1fa8:	1a000046 	bne	20c8 <__ieee754_pow+0x260>
    1fac:	e59f31f0 	ldr	r3, [pc, #496]	; 21a4 <__ieee754_pow+0x33c>
    1fb0:	e1520003 	cmp	r2, r3
    1fb4:	0a000043 	beq	20c8 <__ieee754_pow+0x260>
    1fb8:	e59d2010 	ldr	r2, [sp, #16]
    1fbc:	e1a03fa2 	lsr	r3, r2, #31
    1fc0:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    1fc4:	e2433001 	sub	r3, r3, #1
    1fc8:	e1922003 	orrs	r2, r2, r3
    1fcc:	e58d3010 	str	r3, [sp, #16]
    1fd0:	0a000052 	beq	2120 <__ieee754_pow+0x2b8>
    1fd4:	e59f31a4 	ldr	r3, [pc, #420]	; 2180 <__ieee754_pow+0x318>
    1fd8:	e1560003 	cmp	r6, r3
    1fdc:	da000071 	ble	21a8 <__ieee754_pow+0x340>
    1fe0:	e2833621 	add	r3, r3, #34603008	; 0x2100000
    1fe4:	e1560003 	cmp	r6, r3
    1fe8:	da00030e 	ble	2c28 <__ieee754_pow+0xdc0>
    1fec:	e59d0008 	ldr	r0, [sp, #8]
    1ff0:	e2433341 	sub	r3, r3, #67108865	; 0x4000001
    1ff4:	e1500003 	cmp	r0, r3
    1ff8:	da0002b4 	ble	2ad0 <__ieee754_pow+0xc68>
    1ffc:	e3540000 	cmp	r4, #0
    2000:	da00002d 	ble	20bc <__ieee754_pow+0x254>
    2004:	e28f1f59 	add	r1, pc, #356	; 0x164
    2008:	e8910003 	ldm	r1, {r0, r1}
    200c:	e1a02000 	mov	r2, r0
    2010:	e1a03001 	mov	r3, r1
    2014:	eb000bfe 	bl	5014 <__aeabi_dmul>
    2018:	e1a0a000 	mov	r10, r0
    201c:	e1a0b001 	mov	r11, r1
    2020:	eaffffaa 	b	1ed0 <__ieee754_pow+0x68>
    2024:	e1a0a001 	mov	r10, r1
    2028:	e59fb174 	ldr	r11, [pc, #372]	; 21a4 <__ieee754_pow+0x33c>
    202c:	eaffffa7 	b	1ed0 <__ieee754_pow+0x68>
    2030:	e59f014c 	ldr	r0, [pc, #332]	; 2184 <__ieee754_pow+0x31c>
    2034:	eb000a14 	bl	488c <nan>
    2038:	e1a0a000 	mov	r10, r0
    203c:	e1a0b001 	mov	r11, r1
    2040:	eaffffa2 	b	1ed0 <__ieee754_pow+0x68>
    2044:	e59f313c 	ldr	r3, [pc, #316]	; 2188 <__ieee754_pow+0x320>
    2048:	e1560003 	cmp	r6, r3
    204c:	ca000044 	bgt	2164 <__ieee754_pow+0x2fc>
    2050:	e2433635 	sub	r3, r3, #55574528	; 0x3500000
    2054:	e1560003 	cmp	r6, r3
    2058:	daffffb8 	ble	1f40 <__ieee754_pow+0xd8>
    205c:	e59f2128 	ldr	r2, [pc, #296]	; 218c <__ieee754_pow+0x324>
    2060:	e1a03a46 	asr	r3, r6, #20
    2064:	e1530002 	cmp	r3, r2
    2068:	da00034b 	ble	2d9c <__ieee754_pow+0xf34>
    206c:	e2633e43 	rsb	r3, r3, #1072	; 0x430
    2070:	e2832003 	add	r2, r3, #3
    2074:	e1a0323a 	lsr	r3, r10, r2
    2078:	e15a0213 	cmp	r10, r3, lsl r2
    207c:	02033001 	andeq	r3, r3, #1
    2080:	02633002 	rsbeq	r3, r3, #2
    2084:	058d3030 	streq	r3, [sp, #48]	; 0x30
    2088:	13a02000 	movne	r2, #0
    208c:	158d2030 	strne	r2, [sp, #48]	; 0x30
    2090:	eaffffab 	b	1f44 <__ieee754_pow+0xdc>
    2094:	e59d0008 	ldr	r0, [sp, #8]
    2098:	e2803103 	add	r3, r0, #-1073741824	; 0xc0000000
    209c:	e2833601 	add	r3, r3, #1048576	; 0x100000
    20a0:	e1933009 	orrs	r3, r3, r9
    20a4:	0a000286 	beq	2ac4 <__ieee754_pow+0xc5c>
    20a8:	e59f30e0 	ldr	r3, [pc, #224]	; 2190 <__ieee754_pow+0x328>
    20ac:	e1500003 	cmp	r0, r3
    20b0:	da0002c4 	ble	2bc8 <__ieee754_pow+0xd60>
    20b4:	e3540000 	cmp	r4, #0
    20b8:	aaffff84 	bge	1ed0 <__ieee754_pow+0x68>
    20bc:	e3a0a000 	mov	r10, #0
    20c0:	e1a0b00a 	mov	r11, r10
    20c4:	eaffff81 	b	1ed0 <__ieee754_pow+0x68>
    20c8:	e3540000 	cmp	r4, #0
    20cc:	ba000321 	blt	2d58 <__ieee754_pow+0xef0>
    20d0:	e59d4020 	ldr	r4, [sp, #32]
    20d4:	e3540000 	cmp	r4, #0
    20d8:	aaffffce 	bge	2018 <__ieee754_pow+0x1b0>
    20dc:	e59d4008 	ldr	r4, [sp, #8]
    20e0:	e2843103 	add	r3, r4, #-1073741824	; 0xc0000000
    20e4:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    20e8:	e2833601 	add	r3, r3, #1048576	; 0x100000
    20ec:	e1944003 	orrs	r4, r4, r3
    20f0:	1a000335 	bne	2dcc <__ieee754_pow+0xf64>
    20f4:	e1a04000 	mov	r4, r0
    20f8:	e1a02000 	mov	r2, r0
    20fc:	e1a05001 	mov	r5, r1
    2100:	e1a03001 	mov	r3, r1
    2104:	eb000abd 	bl	4c00 <__aeabi_dsub>
    2108:	e1a02000 	mov	r2, r0
    210c:	e1a03001 	mov	r3, r1
    2110:	eb000c63 	bl	52a4 <__aeabi_ddiv>
    2114:	e1a0a000 	mov	r10, r0
    2118:	e1a0b001 	mov	r11, r1
    211c:	eaffff6b 	b	1ed0 <__ieee754_pow+0x68>
    2120:	e1a00007 	mov	r0, r7
    2124:	e1a01008 	mov	r1, r8
    2128:	e1a02007 	mov	r2, r7
    212c:	e1a03008 	mov	r3, r8
    2130:	eafffff3 	b	2104 <__ieee754_pow+0x29c>
    2134:	e3540000 	cmp	r4, #0
    2138:	a1a0a007 	movge	r10, r7
    213c:	a1a0b008 	movge	r11, r8
    2140:	aaffff62 	bge	1ed0 <__ieee754_pow+0x68>
    2144:	e1a02007 	mov	r2, r7
    2148:	e1a03008 	mov	r3, r8
    214c:	e3a00000 	mov	r0, #0
    2150:	e59f104c 	ldr	r1, [pc, #76]	; 21a4 <__ieee754_pow+0x33c>
    2154:	eb000c52 	bl	52a4 <__aeabi_ddiv>
    2158:	e1a0a000 	mov	r10, r0
    215c:	e1a0b001 	mov	r11, r1
    2160:	eaffff5a 	b	1ed0 <__ieee754_pow+0x68>
    2164:	e3a01002 	mov	r1, #2
    2168:	eaffff74 	b	1f40 <__ieee754_pow+0xd8>
    216c:	e1a00000 	nop			; (mov r0, r0)
    2170:	8800759c 	.word	0x8800759c
    2174:	7e37e43c 	.word	0x7e37e43c
    2178:	7ff00000 	.word	0x7ff00000
    217c:	3fe00000 	.word	0x3fe00000
    2180:	41e00000 	.word	0x41e00000
    2184:	00006b20 	.word	0x00006b20
    2188:	433fffff 	.word	0x433fffff
    218c:	00000413 	.word	0x00000413
    2190:	3fefffff 	.word	0x3fefffff
    2194:	43400000 	.word	0x43400000
    2198:	0003988e 	.word	0x0003988e
    219c:	000bb679 	.word	0x000bb679
    21a0:	00006af0 	.word	0x00006af0
    21a4:	3ff00000 	.word	0x3ff00000
    21a8:	e59d4008 	ldr	r4, [sp, #8]
    21ac:	e3540601 	cmp	r4, #1048576	; 0x100000
    21b0:	a3a02000 	movge	r2, #0
    21b4:	aa000004 	bge	21cc <__ieee754_pow+0x364>
    21b8:	e3a02000 	mov	r2, #0
    21bc:	e51f3030 	ldr	r3, [pc, #-48]	; 2194 <__ieee754_pow+0x32c>
    21c0:	eb000b93 	bl	5014 <__aeabi_dmul>
    21c4:	e58d1008 	str	r1, [sp, #8]
    21c8:	e3e02034 	mvn	r2, #52	; 0x34
    21cc:	e59d4008 	ldr	r4, [sp, #8]
    21d0:	e51fe040 	ldr	lr, [pc, #-64]	; 2198 <__ieee754_pow+0x330>
    21d4:	e3c434ff 	bic	r3, r4, #-16777216	; 0xff000000
    21d8:	e1a0ca44 	asr	r12, r4, #20
    21dc:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
    21e0:	e153000e 	cmp	r3, lr
    21e4:	e24ccfff 	sub	r12, r12, #1020	; 0x3fc
    21e8:	e24cc003 	sub	r12, r12, #3
    21ec:	e38345ff 	orr	r4, r3, #1069547520	; 0x3fc00000
    21f0:	d3a05000 	movle	r5, #0
    21f4:	e08cc002 	add	r12, r12, r2
    21f8:	e3844603 	orr	r4, r4, #3145728	; 0x300000
    21fc:	d1a0e005 	movle	lr, r5
    2200:	da000007 	ble	2224 <__ieee754_pow+0x3bc>
    2204:	e51f2070 	ldr	r2, [pc, #-112]	; 219c <__ieee754_pow+0x334>
    2208:	e1530002 	cmp	r3, r2
    220c:	c3a05000 	movgt	r5, #0
    2210:	c28cc001 	addgt	r12, r12, #1
    2214:	c2444601 	subgt	r4, r4, #1048576	; 0x100000
    2218:	c1a0e005 	movgt	lr, r5
    221c:	d3a05701 	movle	r5, #262144	; 0x40000
    2220:	d3a0e001 	movle	lr, #1
    2224:	e51f108c 	ldr	r1, [pc, #-140]	; 21a0 <__ieee754_pow+0x338>
    2228:	e081118e 	add	r1, r1, lr, lsl #3
    222c:	e1a02000 	mov	r2, r0
    2230:	e58d1034 	str	r1, [sp, #52]	; 0x34
    2234:	e8910003 	ldm	r1, {r0, r1}
    2238:	e1a03004 	mov	r3, r4
    223c:	e58d0028 	str	r0, [sp, #40]	; 0x28
    2240:	e58d102c 	str	r1, [sp, #44]	; 0x2c
    2244:	e58d2020 	str	r2, [sp, #32]
    2248:	e58d3024 	str	r3, [sp, #36]	; 0x24
    224c:	e1a00002 	mov	r0, r2
    2250:	e1a01004 	mov	r1, r4
    2254:	e28d3028 	add	r3, sp, #40	; 0x28
    2258:	e893000c 	ldm	r3, {r2, r3}
    225c:	e58dc004 	str	r12, [sp, #4]
    2260:	eb000a66 	bl	4c00 <__aeabi_dsub>
    2264:	e28d3028 	add	r3, sp, #40	; 0x28
    2268:	e893000c 	ldm	r3, {r2, r3}
    226c:	e1a06000 	mov	r6, r0
    2270:	e1a07001 	mov	r7, r1
    2274:	e28d1020 	add	r1, sp, #32
    2278:	e8910003 	ldm	r1, {r0, r1}
    227c:	eb000a60 	bl	4c04 <__adddf3>
    2280:	e1a02000 	mov	r2, r0
    2284:	e1a03001 	mov	r3, r1
    2288:	e3a00000 	mov	r0, #0
    228c:	e51f10f0 	ldr	r1, [pc, #-240]	; 21a4 <__ieee754_pow+0x33c>
    2290:	eb000c03 	bl	52a4 <__aeabi_ddiv>
    2294:	e58d0038 	str	r0, [sp, #56]	; 0x38
    2298:	e58d103c 	str	r1, [sp, #60]	; 0x3c
    229c:	e28d3038 	add	r3, sp, #56	; 0x38
    22a0:	e893000c 	ldm	r3, {r2, r3}
    22a4:	e1a00006 	mov	r0, r6
    22a8:	e1a01007 	mov	r1, r7
    22ac:	eb000b58 	bl	5014 <__aeabi_dmul>
    22b0:	e58d0018 	str	r0, [sp, #24]
    22b4:	e58d101c 	str	r1, [sp, #28]
    22b8:	e28d3018 	add	r3, sp, #24
    22bc:	e893000c 	ldm	r3, {r2, r3}
    22c0:	e1a010c4 	asr	r1, r4, #1
    22c4:	e3a04000 	mov	r4, #0
    22c8:	e58d2008 	str	r2, [sp, #8]
    22cc:	e58d300c 	str	r3, [sp, #12]
    22d0:	e58d4008 	str	r4, [sp, #8]
    22d4:	e28d9008 	add	r9, sp, #8
    22d8:	e8990300 	ldm	r9, {r8, r9}
    22dc:	e3811202 	orr	r1, r1, #536870912	; 0x20000000
    22e0:	e2811702 	add	r1, r1, #524288	; 0x80000
    22e4:	e0853001 	add	r3, r5, r1
    22e8:	e3a02000 	mov	r2, #0
    22ec:	e1a00008 	mov	r0, r8
    22f0:	e1a01009 	mov	r1, r9
    22f4:	e1a04002 	mov	r4, r2
    22f8:	e1a05003 	mov	r5, r3
    22fc:	eb000b44 	bl	5014 <__aeabi_dmul>
    2300:	e1a02000 	mov	r2, r0
    2304:	e1a03001 	mov	r3, r1
    2308:	e1a00006 	mov	r0, r6
    230c:	e1a01007 	mov	r1, r7
    2310:	eb000a3a 	bl	4c00 <__aeabi_dsub>
    2314:	e28d3028 	add	r3, sp, #40	; 0x28
    2318:	e893000c 	ldm	r3, {r2, r3}
    231c:	e1a06000 	mov	r6, r0
    2320:	e1a07001 	mov	r7, r1
    2324:	e1a00004 	mov	r0, r4
    2328:	e1a01005 	mov	r1, r5
    232c:	eb000a33 	bl	4c00 <__aeabi_dsub>
    2330:	e1a02000 	mov	r2, r0
    2334:	e1a03001 	mov	r3, r1
    2338:	e28d1020 	add	r1, sp, #32
    233c:	e8910003 	ldm	r1, {r0, r1}
    2340:	eb000a2e 	bl	4c00 <__aeabi_dsub>
    2344:	e1a02000 	mov	r2, r0
    2348:	e1a03001 	mov	r3, r1
    234c:	e1a00008 	mov	r0, r8
    2350:	e1a01009 	mov	r1, r9
    2354:	eb000b2e 	bl	5014 <__aeabi_dmul>
    2358:	e1a02000 	mov	r2, r0
    235c:	e1a03001 	mov	r3, r1
    2360:	e1a00006 	mov	r0, r6
    2364:	e1a01007 	mov	r1, r7
    2368:	eb000a24 	bl	4c00 <__aeabi_dsub>
    236c:	e28d3038 	add	r3, sp, #56	; 0x38
    2370:	e893000c 	ldm	r3, {r2, r3}
    2374:	eb000b26 	bl	5014 <__aeabi_dmul>
    2378:	e1a06000 	mov	r6, r0
    237c:	e1a07001 	mov	r7, r1
    2380:	e28d1018 	add	r1, sp, #24
    2384:	e8910003 	ldm	r1, {r0, r1}
    2388:	e1a02000 	mov	r2, r0
    238c:	e1a03001 	mov	r3, r1
    2390:	eb000b1f 	bl	5014 <__aeabi_dmul>
    2394:	e1a02000 	mov	r2, r0
    2398:	e1a03001 	mov	r3, r1
    239c:	e1a04000 	mov	r4, r0
    23a0:	e1a05001 	mov	r5, r1
    23a4:	eb000b1a 	bl	5014 <__aeabi_dmul>
    23a8:	e28f3e3f 	add	r3, pc, #1008	; 0x3f0
    23ac:	e893000c 	ldm	r3, {r2, r3}
    23b0:	e58d0020 	str	r0, [sp, #32]
    23b4:	e58d1024 	str	r1, [sp, #36]	; 0x24
    23b8:	e1a00004 	mov	r0, r4
    23bc:	e1a01005 	mov	r1, r5
    23c0:	eb000b13 	bl	5014 <__aeabi_dmul>
    23c4:	e28f3ff7 	add	r3, pc, #988	; 0x3dc
    23c8:	e893000c 	ldm	r3, {r2, r3}
    23cc:	eb000a0c 	bl	4c04 <__adddf3>
    23d0:	e1a02004 	mov	r2, r4
    23d4:	e1a03005 	mov	r3, r5
    23d8:	eb000b0d 	bl	5014 <__aeabi_dmul>
    23dc:	e28f3ff3 	add	r3, pc, #972	; 0x3cc
    23e0:	e893000c 	ldm	r3, {r2, r3}
    23e4:	eb000a06 	bl	4c04 <__adddf3>
    23e8:	e1a02004 	mov	r2, r4
    23ec:	e1a03005 	mov	r3, r5
    23f0:	eb000b07 	bl	5014 <__aeabi_dmul>
    23f4:	e28f3fef 	add	r3, pc, #956	; 0x3bc
    23f8:	e893000c 	ldm	r3, {r2, r3}
    23fc:	eb000a00 	bl	4c04 <__adddf3>
    2400:	e1a02004 	mov	r2, r4
    2404:	e1a03005 	mov	r3, r5
    2408:	eb000b01 	bl	5014 <__aeabi_dmul>
    240c:	e28f3feb 	add	r3, pc, #940	; 0x3ac
    2410:	e893000c 	ldm	r3, {r2, r3}
    2414:	eb0009fa 	bl	4c04 <__adddf3>
    2418:	e1a02004 	mov	r2, r4
    241c:	e1a03005 	mov	r3, r5
    2420:	eb000afb 	bl	5014 <__aeabi_dmul>
    2424:	e28f3fe7 	add	r3, pc, #924	; 0x39c
    2428:	e893000c 	ldm	r3, {r2, r3}
    242c:	eb0009f4 	bl	4c04 <__adddf3>
    2430:	e1a02000 	mov	r2, r0
    2434:	e1a03001 	mov	r3, r1
    2438:	e28d1020 	add	r1, sp, #32
    243c:	e8910003 	ldm	r1, {r0, r1}
    2440:	eb000af3 	bl	5014 <__aeabi_dmul>
    2444:	e28d3018 	add	r3, sp, #24
    2448:	e893000c 	ldm	r3, {r2, r3}
    244c:	e1a04000 	mov	r4, r0
    2450:	e1a05001 	mov	r5, r1
    2454:	e1a00008 	mov	r0, r8
    2458:	e1a01009 	mov	r1, r9
    245c:	eb0009e8 	bl	4c04 <__adddf3>
    2460:	e1a02006 	mov	r2, r6
    2464:	e1a03007 	mov	r3, r7
    2468:	eb000ae9 	bl	5014 <__aeabi_dmul>
    246c:	e1a02004 	mov	r2, r4
    2470:	e1a03005 	mov	r3, r5
    2474:	eb0009e2 	bl	4c04 <__adddf3>
    2478:	e1a02008 	mov	r2, r8
    247c:	e58d0020 	str	r0, [sp, #32]
    2480:	e58d1024 	str	r1, [sp, #36]	; 0x24
    2484:	e1a03009 	mov	r3, r9
    2488:	e1a00008 	mov	r0, r8
    248c:	e1a01009 	mov	r1, r9
    2490:	eb000adf 	bl	5014 <__aeabi_dmul>
    2494:	e3a02000 	mov	r2, #0
    2498:	e59f3348 	ldr	r3, [pc, #840]	; 27e8 <__ieee754_pow+0x980>
    249c:	e58d0028 	str	r0, [sp, #40]	; 0x28
    24a0:	e58d102c 	str	r1, [sp, #44]	; 0x2c
    24a4:	eb0009d6 	bl	4c04 <__adddf3>
    24a8:	e28d3020 	add	r3, sp, #32
    24ac:	e893000c 	ldm	r3, {r2, r3}
    24b0:	eb0009d3 	bl	4c04 <__adddf3>
    24b4:	e59de008 	ldr	lr, [sp, #8]
    24b8:	e1a05001 	mov	r5, r1
    24bc:	e1a0200e 	mov	r2, lr
    24c0:	e1a03005 	mov	r3, r5
    24c4:	e1a00008 	mov	r0, r8
    24c8:	e1a01009 	mov	r1, r9
    24cc:	e1a0400e 	mov	r4, lr
    24d0:	eb000acf 	bl	5014 <__aeabi_dmul>
    24d4:	e1a02004 	mov	r2, r4
    24d8:	e1a08000 	mov	r8, r0
    24dc:	e1a09001 	mov	r9, r1
    24e0:	e1a03005 	mov	r3, r5
    24e4:	e1a00006 	mov	r0, r6
    24e8:	e1a01007 	mov	r1, r7
    24ec:	eb000ac8 	bl	5014 <__aeabi_dmul>
    24f0:	e3a02000 	mov	r2, #0
    24f4:	e1a06000 	mov	r6, r0
    24f8:	e1a07001 	mov	r7, r1
    24fc:	e1a00004 	mov	r0, r4
    2500:	e1a01005 	mov	r1, r5
    2504:	e59f32dc 	ldr	r3, [pc, #732]	; 27e8 <__ieee754_pow+0x980>
    2508:	eb0009bc 	bl	4c00 <__aeabi_dsub>
    250c:	e28d3028 	add	r3, sp, #40	; 0x28
    2510:	e893000c 	ldm	r3, {r2, r3}
    2514:	eb0009b9 	bl	4c00 <__aeabi_dsub>
    2518:	e1a02000 	mov	r2, r0
    251c:	e1a03001 	mov	r3, r1
    2520:	e28d1020 	add	r1, sp, #32
    2524:	e8910003 	ldm	r1, {r0, r1}
    2528:	eb0009b4 	bl	4c00 <__aeabi_dsub>
    252c:	e28d3018 	add	r3, sp, #24
    2530:	e893000c 	ldm	r3, {r2, r3}
    2534:	eb000ab6 	bl	5014 <__aeabi_dmul>
    2538:	e1a02000 	mov	r2, r0
    253c:	e1a03001 	mov	r3, r1
    2540:	e1a00006 	mov	r0, r6
    2544:	e1a01007 	mov	r1, r7
    2548:	eb0009ad 	bl	4c04 <__adddf3>
    254c:	e1a06000 	mov	r6, r0
    2550:	e1a07001 	mov	r7, r1
    2554:	e1a02006 	mov	r2, r6
    2558:	e1a03007 	mov	r3, r7
    255c:	e1a00008 	mov	r0, r8
    2560:	e1a01009 	mov	r1, r9
    2564:	eb0009a6 	bl	4c04 <__adddf3>
    2568:	e59d2008 	ldr	r2, [sp, #8]
    256c:	e59f3278 	ldr	r3, [pc, #632]	; 27ec <__ieee754_pow+0x984>
    2570:	e1a04002 	mov	r4, r2
    2574:	e1a00002 	mov	r0, r2
    2578:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    257c:	e1a05001 	mov	r5, r1
    2580:	eb000aa3 	bl	5014 <__aeabi_dmul>
    2584:	e28f3f91 	add	r3, pc, #580	; 0x244
    2588:	e893000c 	ldm	r3, {r2, r3}
    258c:	e58d0018 	str	r0, [sp, #24]
    2590:	e58d101c 	str	r1, [sp, #28]
    2594:	e1a00004 	mov	r0, r4
    2598:	e1a01005 	mov	r1, r5
    259c:	eb000a9c 	bl	5014 <__aeabi_dmul>
    25a0:	e1a02008 	mov	r2, r8
    25a4:	e58d0020 	str	r0, [sp, #32]
    25a8:	e58d1024 	str	r1, [sp, #36]	; 0x24
    25ac:	e1a03009 	mov	r3, r9
    25b0:	e1a00004 	mov	r0, r4
    25b4:	e1a01005 	mov	r1, r5
    25b8:	eb000990 	bl	4c00 <__aeabi_dsub>
    25bc:	e1a02000 	mov	r2, r0
    25c0:	e1a03001 	mov	r3, r1
    25c4:	e1a00006 	mov	r0, r6
    25c8:	e1a01007 	mov	r1, r7
    25cc:	eb00098b 	bl	4c00 <__aeabi_dsub>
    25d0:	e28f3c02 	add	r3, pc, #512	; 0x200
    25d4:	e893000c 	ldm	r3, {r2, r3}
    25d8:	eb000a8d 	bl	5014 <__aeabi_dmul>
    25dc:	e1a02000 	mov	r2, r0
    25e0:	e1a03001 	mov	r3, r1
    25e4:	e28d1020 	add	r1, sp, #32
    25e8:	e8910003 	ldm	r1, {r0, r1}
    25ec:	eb000984 	bl	4c04 <__adddf3>
    25f0:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
    25f4:	e2843010 	add	r3, r4, #16
    25f8:	e893000c 	ldm	r3, {r2, r3}
    25fc:	eb000980 	bl	4c04 <__adddf3>
    2600:	e59dc004 	ldr	r12, [sp, #4]
    2604:	e1a04000 	mov	r4, r0
    2608:	e1a0000c 	mov	r0, r12
    260c:	e1a05001 	mov	r5, r1
    2610:	eb000a48 	bl	4f38 <__aeabi_i2d>
    2614:	e59de034 	ldr	lr, [sp, #52]	; 0x34
    2618:	e28e9020 	add	r9, lr, #32
    261c:	e8990300 	ldm	r9, {r8, r9}
    2620:	e1a06000 	mov	r6, r0
    2624:	e1a07001 	mov	r7, r1
    2628:	e1a02004 	mov	r2, r4
    262c:	e28d1018 	add	r1, sp, #24
    2630:	e8910003 	ldm	r1, {r0, r1}
    2634:	e1a03005 	mov	r3, r5
    2638:	eb000971 	bl	4c04 <__adddf3>
    263c:	e1a02008 	mov	r2, r8
    2640:	e1a03009 	mov	r3, r9
    2644:	eb00096e 	bl	4c04 <__adddf3>
    2648:	e1a02006 	mov	r2, r6
    264c:	e1a03007 	mov	r3, r7
    2650:	eb00096b 	bl	4c04 <__adddf3>
    2654:	e59d2008 	ldr	r2, [sp, #8]
    2658:	e1a03007 	mov	r3, r7
    265c:	e1a00002 	mov	r0, r2
    2660:	e1a02006 	mov	r2, r6
    2664:	e58d0008 	str	r0, [sp, #8]
    2668:	e58d100c 	str	r1, [sp, #12]
    266c:	eb000963 	bl	4c00 <__aeabi_dsub>
    2670:	e1a02008 	mov	r2, r8
    2674:	e1a03009 	mov	r3, r9
    2678:	eb000960 	bl	4c00 <__aeabi_dsub>
    267c:	e28d3018 	add	r3, sp, #24
    2680:	e893000c 	ldm	r3, {r2, r3}
    2684:	eb00095d 	bl	4c00 <__aeabi_dsub>
    2688:	e1a03001 	mov	r3, r1
    268c:	e1a02000 	mov	r2, r0
    2690:	e1a01005 	mov	r1, r5
    2694:	e1a00004 	mov	r0, r4
    2698:	eb000958 	bl	4c00 <__aeabi_dsub>
    269c:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    26a0:	e2443001 	sub	r3, r4, #1
    26a4:	e59d4010 	ldr	r4, [sp, #16]
    26a8:	e1934004 	orrs	r4, r3, r4
    26ac:	e1a08000 	mov	r8, r0
    26b0:	e1a09001 	mov	r9, r1
    26b4:	1a00013e 	bne	2bb4 <__ieee754_pow+0xd4c>
    26b8:	e59f1130 	ldr	r1, [pc, #304]	; 27f0 <__ieee754_pow+0x988>
    26bc:	e3a00000 	mov	r0, #0
    26c0:	e58d0010 	str	r0, [sp, #16]
    26c4:	e58d1014 	str	r1, [sp, #20]
    26c8:	e3a06000 	mov	r6, #0
    26cc:	e1a02006 	mov	r2, r6
    26d0:	e1a0300b 	mov	r3, r11
    26d4:	e1a0000a 	mov	r0, r10
    26d8:	e1a0100b 	mov	r1, r11
    26dc:	eb000947 	bl	4c00 <__aeabi_dsub>
    26e0:	e28d3008 	add	r3, sp, #8
    26e4:	e893000c 	ldm	r3, {r2, r3}
    26e8:	eb000a49 	bl	5014 <__aeabi_dmul>
    26ec:	e1a03009 	mov	r3, r9
    26f0:	e1a04000 	mov	r4, r0
    26f4:	e1a05001 	mov	r5, r1
    26f8:	e1a0000a 	mov	r0, r10
    26fc:	e1a0100b 	mov	r1, r11
    2700:	e1a02008 	mov	r2, r8
    2704:	eb000a42 	bl	5014 <__aeabi_dmul>
    2708:	e1a02000 	mov	r2, r0
    270c:	e1a03001 	mov	r3, r1
    2710:	e1a00004 	mov	r0, r4
    2714:	e1a01005 	mov	r1, r5
    2718:	eb000939 	bl	4c04 <__adddf3>
    271c:	e1a0700b 	mov	r7, r11
    2720:	e28d3008 	add	r3, sp, #8
    2724:	e893000c 	ldm	r3, {r2, r3}
    2728:	e1a0a000 	mov	r10, r0
    272c:	e1a0b001 	mov	r11, r1
    2730:	e1a00006 	mov	r0, r6
    2734:	e1a01007 	mov	r1, r7
    2738:	eb000a35 	bl	5014 <__aeabi_dmul>
    273c:	e1a04000 	mov	r4, r0
    2740:	e1a05001 	mov	r5, r1
    2744:	e1a0000a 	mov	r0, r10
    2748:	e1a0100b 	mov	r1, r11
    274c:	e1a02004 	mov	r2, r4
    2750:	e1a03005 	mov	r3, r5
    2754:	eb00092a 	bl	4c04 <__adddf3>
    2758:	e59fc094 	ldr	r12, [pc, #148]	; 27f4 <__ieee754_pow+0x98c>
    275c:	e151000c 	cmp	r1, r12
    2760:	e1a06000 	mov	r6, r0
    2764:	e1a07001 	mov	r7, r1
    2768:	e1a09001 	mov	r9, r1
    276c:	da0000da 	ble	2adc <__ieee754_pow+0xc74>
    2770:	e28134bf 	add	r3, r1, #-1090519040	; 0xbf000000
    2774:	e2833607 	add	r3, r3, #7340032	; 0x700000
    2778:	e1933000 	orrs	r3, r3, r0
    277c:	1a00017b 	bne	2d70 <__ieee754_pow+0xf08>
    2780:	e28f3058 	add	r3, pc, #88	; 0x58
    2784:	e893000c 	ldm	r3, {r2, r3}
    2788:	e1a0000a 	mov	r0, r10
    278c:	e1a0100b 	mov	r1, r11
    2790:	eb00091b 	bl	4c04 <__adddf3>
    2794:	e1a02004 	mov	r2, r4
    2798:	ea000018 	b	2800 <__ieee754_pow+0x998>
    279c:	e1a00000 	nop			; (mov r0, r0)
    27a0:	4a454eef 	.word	0x4a454eef
    27a4:	3fca7e28 	.word	0x3fca7e28
    27a8:	93c9db65 	.word	0x93c9db65
    27ac:	3fcd864a 	.word	0x3fcd864a
    27b0:	a91d4101 	.word	0xa91d4101
    27b4:	3fd17460 	.word	0x3fd17460
    27b8:	518f264d 	.word	0x518f264d
    27bc:	3fd55555 	.word	0x3fd55555
    27c0:	db6fabff 	.word	0xdb6fabff
    27c4:	3fdb6db6 	.word	0x3fdb6db6
    27c8:	33333303 	.word	0x33333303
    27cc:	3fe33333 	.word	0x3fe33333
    27d0:	145b01f5 	.word	0x145b01f5
    27d4:	be3e2fe0 	.word	0xbe3e2fe0
    27d8:	dc3a03fd 	.word	0xdc3a03fd
    27dc:	3feec709 	.word	0x3feec709
    27e0:	652b82fe 	.word	0x652b82fe
    27e4:	3c971547 	.word	0x3c971547
    27e8:	40080000 	.word	0x40080000
    27ec:	3feec709 	.word	0x3feec709
    27f0:	bff00000 	.word	0xbff00000
    27f4:	408fffff 	.word	0x408fffff
    27f8:	3fe00000 	.word	0x3fe00000
    27fc:	3fe62e43 	.word	0x3fe62e43
    2800:	e58d0008 	str	r0, [sp, #8]
    2804:	e58d100c 	str	r1, [sp, #12]
    2808:	e1a03005 	mov	r3, r5
    280c:	e1a00006 	mov	r0, r6
    2810:	e1a01007 	mov	r1, r7
    2814:	eb0008f9 	bl	4c00 <__aeabi_dsub>
    2818:	e1a02000 	mov	r2, r0
    281c:	e1a03001 	mov	r3, r1
    2820:	e28d1008 	add	r1, sp, #8
    2824:	e8910003 	ldm	r1, {r0, r1}
    2828:	eb000b6b 	bl	55dc <__aeabi_dcmpgt>
    282c:	e3500000 	cmp	r0, #0
    2830:	03c78102 	biceq	r8, r7, #-2147483648	; 0x80000000
    2834:	1a00014d 	bne	2d70 <__ieee754_pow+0xf08>
    2838:	e51f3048 	ldr	r3, [pc, #-72]	; 27f8 <__ieee754_pow+0x990>
    283c:	e1580003 	cmp	r8, r3
    2840:	d3a0c000 	movle	r12, #0
    2844:	d58dc008 	strle	r12, [sp, #8]
    2848:	ca0000b5 	bgt	2b24 <__ieee754_pow+0xcbc>
    284c:	e3a06000 	mov	r6, #0
    2850:	e1a00006 	mov	r0, r6
    2854:	e1a01007 	mov	r1, r7
    2858:	e3a02000 	mov	r2, #0
    285c:	e51f3068 	ldr	r3, [pc, #-104]	; 27fc <__ieee754_pow+0x994>
    2860:	e58dc004 	str	r12, [sp, #4]
    2864:	eb0009ea 	bl	5014 <__aeabi_dmul>
    2868:	e1a02004 	mov	r2, r4
    286c:	e1a08000 	mov	r8, r0
    2870:	e1a09001 	mov	r9, r1
    2874:	e1a03005 	mov	r3, r5
    2878:	e1a00006 	mov	r0, r6
    287c:	e1a01007 	mov	r1, r7
    2880:	eb0008de 	bl	4c00 <__aeabi_dsub>
    2884:	e1a02000 	mov	r2, r0
    2888:	e1a03001 	mov	r3, r1
    288c:	e1a0000a 	mov	r0, r10
    2890:	e1a0100b 	mov	r1, r11
    2894:	eb0008d9 	bl	4c00 <__aeabi_dsub>
    2898:	e28f3fce 	add	r3, pc, #824	; 0x338
    289c:	e893000c 	ldm	r3, {r2, r3}
    28a0:	eb0009db 	bl	5014 <__aeabi_dmul>
    28a4:	e28f3fcd 	add	r3, pc, #820	; 0x334
    28a8:	e893000c 	ldm	r3, {r2, r3}
    28ac:	e1a04000 	mov	r4, r0
    28b0:	e1a05001 	mov	r5, r1
    28b4:	e1a00006 	mov	r0, r6
    28b8:	e1a01007 	mov	r1, r7
    28bc:	eb0009d4 	bl	5014 <__aeabi_dmul>
    28c0:	e1a02000 	mov	r2, r0
    28c4:	e1a03001 	mov	r3, r1
    28c8:	e1a00004 	mov	r0, r4
    28cc:	e1a01005 	mov	r1, r5
    28d0:	eb0008cb 	bl	4c04 <__adddf3>
    28d4:	e1a04000 	mov	r4, r0
    28d8:	e1a05001 	mov	r5, r1
    28dc:	e1a02004 	mov	r2, r4
    28e0:	e1a03005 	mov	r3, r5
    28e4:	e1a00008 	mov	r0, r8
    28e8:	e1a01009 	mov	r1, r9
    28ec:	eb0008c4 	bl	4c04 <__adddf3>
    28f0:	e1a02008 	mov	r2, r8
    28f4:	e1a03009 	mov	r3, r9
    28f8:	e1a0a000 	mov	r10, r0
    28fc:	e1a0b001 	mov	r11, r1
    2900:	eb0008be 	bl	4c00 <__aeabi_dsub>
    2904:	e1a02000 	mov	r2, r0
    2908:	e1a03001 	mov	r3, r1
    290c:	e1a00004 	mov	r0, r4
    2910:	e1a01005 	mov	r1, r5
    2914:	eb0008b9 	bl	4c00 <__aeabi_dsub>
    2918:	e1a0200a 	mov	r2, r10
    291c:	e1a08000 	mov	r8, r0
    2920:	e1a09001 	mov	r9, r1
    2924:	e1a0300b 	mov	r3, r11
    2928:	e1a0000a 	mov	r0, r10
    292c:	e1a0100b 	mov	r1, r11
    2930:	eb0009b7 	bl	5014 <__aeabi_dmul>
    2934:	e28f3fab 	add	r3, pc, #684	; 0x2ac
    2938:	e893000c 	ldm	r3, {r2, r3}
    293c:	e1a04000 	mov	r4, r0
    2940:	e1a05001 	mov	r5, r1
    2944:	eb0009b2 	bl	5014 <__aeabi_dmul>
    2948:	e28f3e2a 	add	r3, pc, #672	; 0x2a0
    294c:	e893000c 	ldm	r3, {r2, r3}
    2950:	eb0008aa 	bl	4c00 <__aeabi_dsub>
    2954:	e1a02004 	mov	r2, r4
    2958:	e1a03005 	mov	r3, r5
    295c:	eb0009ac 	bl	5014 <__aeabi_dmul>
    2960:	e28f3e29 	add	r3, pc, #656	; 0x290
    2964:	e893000c 	ldm	r3, {r2, r3}
    2968:	eb0008a5 	bl	4c04 <__adddf3>
    296c:	e1a02004 	mov	r2, r4
    2970:	e1a03005 	mov	r3, r5
    2974:	eb0009a6 	bl	5014 <__aeabi_dmul>
    2978:	e28f3d0a 	add	r3, pc, #640	; 0x280
    297c:	e893000c 	ldm	r3, {r2, r3}
    2980:	eb00089e 	bl	4c00 <__aeabi_dsub>
    2984:	e1a02004 	mov	r2, r4
    2988:	e1a03005 	mov	r3, r5
    298c:	eb0009a0 	bl	5014 <__aeabi_dmul>
    2990:	e28f3e27 	add	r3, pc, #624	; 0x270
    2994:	e893000c 	ldm	r3, {r2, r3}
    2998:	eb000899 	bl	4c04 <__adddf3>
    299c:	e1a02004 	mov	r2, r4
    29a0:	e1a03005 	mov	r3, r5
    29a4:	eb00099a 	bl	5014 <__aeabi_dmul>
    29a8:	e1a02000 	mov	r2, r0
    29ac:	e1a03001 	mov	r3, r1
    29b0:	e1a0000a 	mov	r0, r10
    29b4:	e1a0100b 	mov	r1, r11
    29b8:	eb000890 	bl	4c00 <__aeabi_dsub>
    29bc:	e1a04000 	mov	r4, r0
    29c0:	e1a05001 	mov	r5, r1
    29c4:	e1a02004 	mov	r2, r4
    29c8:	e1a03005 	mov	r3, r5
    29cc:	e1a0000a 	mov	r0, r10
    29d0:	e1a0100b 	mov	r1, r11
    29d4:	eb00098e 	bl	5014 <__aeabi_dmul>
    29d8:	e3a02000 	mov	r2, #0
    29dc:	e1a06000 	mov	r6, r0
    29e0:	e1a07001 	mov	r7, r1
    29e4:	e1a00004 	mov	r0, r4
    29e8:	e1a01005 	mov	r1, r5
    29ec:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    29f0:	eb000882 	bl	4c00 <__aeabi_dsub>
    29f4:	e1a02000 	mov	r2, r0
    29f8:	e1a03001 	mov	r3, r1
    29fc:	e1a00006 	mov	r0, r6
    2a00:	e1a01007 	mov	r1, r7
    2a04:	eb000a26 	bl	52a4 <__aeabi_ddiv>
    2a08:	e1a02008 	mov	r2, r8
    2a0c:	e1a04000 	mov	r4, r0
    2a10:	e1a05001 	mov	r5, r1
    2a14:	e1a03009 	mov	r3, r9
    2a18:	e1a0000a 	mov	r0, r10
    2a1c:	e1a0100b 	mov	r1, r11
    2a20:	eb00097b 	bl	5014 <__aeabi_dmul>
    2a24:	e1a02008 	mov	r2, r8
    2a28:	e1a03009 	mov	r3, r9
    2a2c:	eb000874 	bl	4c04 <__adddf3>
    2a30:	e1a02000 	mov	r2, r0
    2a34:	e1a03001 	mov	r3, r1
    2a38:	e1a00004 	mov	r0, r4
    2a3c:	e1a01005 	mov	r1, r5
    2a40:	eb00086e 	bl	4c00 <__aeabi_dsub>
    2a44:	e1a0200a 	mov	r2, r10
    2a48:	e1a0300b 	mov	r3, r11
    2a4c:	eb00086b 	bl	4c00 <__aeabi_dsub>
    2a50:	e1a02000 	mov	r2, r0
    2a54:	e1a03001 	mov	r3, r1
    2a58:	e3a00000 	mov	r0, #0
    2a5c:	e59f11bc 	ldr	r1, [pc, #444]	; 2c20 <__ieee754_pow+0xdb8>
    2a60:	eb000866 	bl	4c00 <__aeabi_dsub>
    2a64:	e59dc004 	ldr	r12, [sp, #4]
    2a68:	e08ce001 	add	lr, r12, r1
    2a6c:	e35e0601 	cmp	lr, #1048576	; 0x100000
    2a70:	e1a03001 	mov	r3, r1
    2a74:	e1a02000 	mov	r2, r0
    2a78:	e1a04000 	mov	r4, r0
    2a7c:	e1a05001 	mov	r5, r1
    2a80:	a1a0300e 	movge	r3, lr
    2a84:	ba0000e4 	blt	2e1c <__ieee754_pow+0xfb4>
    2a88:	e28d1010 	add	r1, sp, #16
    2a8c:	e8910003 	ldm	r1, {r0, r1}
    2a90:	eb00095f 	bl	5014 <__aeabi_dmul>
    2a94:	e1a0a000 	mov	r10, r0
    2a98:	e1a0b001 	mov	r11, r1
    2a9c:	eafffd0b 	b	1ed0 <__ieee754_pow+0x68>
    2aa0:	e59d1020 	ldr	r1, [sp, #32]
    2aa4:	e3510000 	cmp	r1, #0
    2aa8:	bafffd34 	blt	1f80 <__ieee754_pow+0x118>
    2aac:	e1a00007 	mov	r0, r7
    2ab0:	e1a01008 	mov	r1, r8
    2ab4:	eb000281 	bl	34c0 <__ieee754_sqrt>
    2ab8:	e1a0a000 	mov	r10, r0
    2abc:	e1a0b001 	mov	r11, r1
    2ac0:	eafffd02 	b	1ed0 <__ieee754_pow+0x68>
    2ac4:	e1a0a003 	mov	r10, r3
    2ac8:	e59fb150 	ldr	r11, [pc, #336]	; 2c20 <__ieee754_pow+0xdb8>
    2acc:	eafffcff 	b	1ed0 <__ieee754_pow+0x68>
    2ad0:	e3540000 	cmp	r4, #0
    2ad4:	aafffd78 	bge	20bc <__ieee754_pow+0x254>
    2ad8:	eafffd49 	b	2004 <__ieee754_pow+0x19c>
    2adc:	e59f312c 	ldr	r3, [pc, #300]	; 2c10 <__ieee754_pow+0xda8>
    2ae0:	e3c18102 	bic	r8, r1, #-2147483648	; 0x80000000
    2ae4:	e1580003 	cmp	r8, r3
    2ae8:	daffff52 	ble	2838 <__ieee754_pow+0x9d0>
    2aec:	e59f3120 	ldr	r3, [pc, #288]	; 2c14 <__ieee754_pow+0xdac>
    2af0:	e0813003 	add	r3, r1, r3
    2af4:	e1933000 	orrs	r3, r3, r0
    2af8:	1a0000b9 	bne	2de4 <__ieee754_pow+0xf7c>
    2afc:	e1a02004 	mov	r2, r4
    2b00:	e1a03005 	mov	r3, r5
    2b04:	eb00083d 	bl	4c00 <__aeabi_dsub>
    2b08:	e1a02000 	mov	r2, r0
    2b0c:	e1a03001 	mov	r3, r1
    2b10:	e1a0000a 	mov	r0, r10
    2b14:	e1a0100b 	mov	r1, r11
    2b18:	eb000aa3 	bl	55ac <__aeabi_dcmple>
    2b1c:	e3500000 	cmp	r0, #0
    2b20:	1a0000af 	bne	2de4 <__ieee754_pow+0xf7c>
    2b24:	e1a03a48 	asr	r3, r8, #20
    2b28:	e2433fff 	sub	r3, r3, #1020	; 0x3fc
    2b2c:	e2433002 	sub	r3, r3, #2
    2b30:	e3a01601 	mov	r1, #1048576	; 0x100000
    2b34:	e0891351 	add	r1, r9, r1, asr r3
    2b38:	e3c10102 	bic	r0, r1, #-2147483648	; 0x80000000
    2b3c:	e1a00a40 	asr	r0, r0, #20
    2b40:	e240efff 	sub	lr, r0, #1020	; 0x3fc
    2b44:	e59f60cc 	ldr	r6, [pc, #204]	; 2c18 <__ieee754_pow+0xdb0>
    2b48:	e24ee003 	sub	lr, lr, #3
    2b4c:	e1c13e56 	bic	r3, r1, r6, asr lr
    2b50:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    2b54:	e3c1e60f 	bic	lr, r1, #15728640	; 0xf00000
    2b58:	e2601e41 	rsb	r1, r0, #1040	; 0x410
    2b5c:	e38ee601 	orr	lr, lr, #1048576	; 0x100000
    2b60:	e2811003 	add	r1, r1, #3
    2b64:	e1a0115e 	asr	r1, lr, r1
    2b68:	e3590000 	cmp	r9, #0
    2b6c:	e58d1008 	str	r1, [sp, #8]
    2b70:	b2611000 	rsblt	r1, r1, #0
    2b74:	b58d1008 	strlt	r1, [sp, #8]
    2b78:	e3a02000 	mov	r2, #0
    2b7c:	e1a00004 	mov	r0, r4
    2b80:	e1a01005 	mov	r1, r5
    2b84:	eb00081d 	bl	4c00 <__aeabi_dsub>
    2b88:	e1a04000 	mov	r4, r0
    2b8c:	e1a05001 	mov	r5, r1
    2b90:	e1a02004 	mov	r2, r4
    2b94:	e1a0000a 	mov	r0, r10
    2b98:	e1a0100b 	mov	r1, r11
    2b9c:	e1a03005 	mov	r3, r5
    2ba0:	eb000817 	bl	4c04 <__adddf3>
    2ba4:	e59d2008 	ldr	r2, [sp, #8]
    2ba8:	e1a07001 	mov	r7, r1
    2bac:	e1a0ca02 	lsl	r12, r2, #20
    2bb0:	eaffff25 	b	284c <__ieee754_pow+0x9e4>
    2bb4:	e59f2064 	ldr	r2, [pc, #100]	; 2c20 <__ieee754_pow+0xdb8>
    2bb8:	e3a01000 	mov	r1, #0
    2bbc:	e58d1010 	str	r1, [sp, #16]
    2bc0:	e58d2014 	str	r2, [sp, #20]
    2bc4:	eafffebf 	b	26c8 <__ieee754_pow+0x860>
    2bc8:	e3540000 	cmp	r4, #0
    2bcc:	b28bb102 	addlt	r11, r11, #-2147483648	; 0x80000000
    2bd0:	aafffd39 	bge	20bc <__ieee754_pow+0x254>
    2bd4:	eafffcbd 	b	1ed0 <__ieee754_pow+0x68>
    2bd8:	fefa39ef 	.word	0xfefa39ef
    2bdc:	3fe62e42 	.word	0x3fe62e42
    2be0:	0ca86c39 	.word	0x0ca86c39
    2be4:	be205c61 	.word	0xbe205c61
    2be8:	72bea4d0 	.word	0x72bea4d0
    2bec:	3e663769 	.word	0x3e663769
    2bf0:	c5d26bf1 	.word	0xc5d26bf1
    2bf4:	3ebbbd41 	.word	0x3ebbbd41
    2bf8:	af25de2c 	.word	0xaf25de2c
    2bfc:	3f11566a 	.word	0x3f11566a
    2c00:	16bebd93 	.word	0x16bebd93
    2c04:	3f66c16c 	.word	0x3f66c16c
    2c08:	5555553e 	.word	0x5555553e
    2c0c:	3fc55555 	.word	0x3fc55555
    2c10:	4090cbff 	.word	0x4090cbff
    2c14:	3f6f3400 	.word	0x3f6f3400
    2c18:	000fffff 	.word	0x000fffff
    2c1c:	3feffffe 	.word	0x3feffffe
    2c20:	3ff00000 	.word	0x3ff00000
    2c24:	3ff71547 	.word	0x3ff71547
    2c28:	e51f3014 	ldr	r3, [pc, #-20]	; 2c1c <__ieee754_pow+0xdb4>
    2c2c:	e59d2008 	ldr	r2, [sp, #8]
    2c30:	e1520003 	cmp	r2, r3
    2c34:	daffffa5 	ble	2ad0 <__ieee754_pow+0xc68>
    2c38:	e51f3020 	ldr	r3, [pc, #-32]	; 2c20 <__ieee754_pow+0xdb8>
    2c3c:	e59d2008 	ldr	r2, [sp, #8]
    2c40:	e1520003 	cmp	r2, r3
    2c44:	cafffcec 	bgt	1ffc <__ieee754_pow+0x194>
    2c48:	e3a02000 	mov	r2, #0
    2c4c:	e51f3034 	ldr	r3, [pc, #-52]	; 2c20 <__ieee754_pow+0xdb8>
    2c50:	eb0007ea 	bl	4c00 <__aeabi_dsub>
    2c54:	e3a02206 	mov	r2, #1610612736	; 0x60000000
    2c58:	e51f303c 	ldr	r3, [pc, #-60]	; 2c24 <__ieee754_pow+0xdbc>
    2c5c:	e1a04000 	mov	r4, r0
    2c60:	e1a05001 	mov	r5, r1
    2c64:	eb0008ea 	bl	5014 <__aeabi_dmul>
    2c68:	e28f3d07 	add	r3, pc, #448	; 0x1c0
    2c6c:	e893000c 	ldm	r3, {r2, r3}
    2c70:	e1a06000 	mov	r6, r0
    2c74:	e1a07001 	mov	r7, r1
    2c78:	e1a00004 	mov	r0, r4
    2c7c:	e1a01005 	mov	r1, r5
    2c80:	eb0008e3 	bl	5014 <__aeabi_dmul>
    2c84:	e1a02004 	mov	r2, r4
    2c88:	e58d0008 	str	r0, [sp, #8]
    2c8c:	e58d100c 	str	r1, [sp, #12]
    2c90:	e1a03005 	mov	r3, r5
    2c94:	e1a00004 	mov	r0, r4
    2c98:	e1a01005 	mov	r1, r5
    2c9c:	eb0008dc 	bl	5014 <__aeabi_dmul>
    2ca0:	e3a02000 	mov	r2, #0
    2ca4:	e1a08000 	mov	r8, r0
    2ca8:	e1a09001 	mov	r9, r1
    2cac:	e1a00004 	mov	r0, r4
    2cb0:	e1a01005 	mov	r1, r5
    2cb4:	e59f319c 	ldr	r3, [pc, #412]	; 2e58 <__ieee754_pow+0xff0>
    2cb8:	eb0008d5 	bl	5014 <__aeabi_dmul>
    2cbc:	e1a02000 	mov	r2, r0
    2cc0:	e1a03001 	mov	r3, r1
    2cc4:	e28f1f5b 	add	r1, pc, #364	; 0x16c
    2cc8:	e8910003 	ldm	r1, {r0, r1}
    2ccc:	eb0007cb 	bl	4c00 <__aeabi_dsub>
    2cd0:	e1a02004 	mov	r2, r4
    2cd4:	e1a03005 	mov	r3, r5
    2cd8:	eb0008cd 	bl	5014 <__aeabi_dmul>
    2cdc:	e1a02000 	mov	r2, r0
    2ce0:	e1a03001 	mov	r3, r1
    2ce4:	e3a00000 	mov	r0, #0
    2ce8:	e59f116c 	ldr	r1, [pc, #364]	; 2e5c <__ieee754_pow+0xff4>
    2cec:	eb0007c3 	bl	4c00 <__aeabi_dsub>
    2cf0:	e1a02000 	mov	r2, r0
    2cf4:	e1a03001 	mov	r3, r1
    2cf8:	e1a00008 	mov	r0, r8
    2cfc:	e1a01009 	mov	r1, r9
    2d00:	eb0008c3 	bl	5014 <__aeabi_dmul>
    2d04:	e28f3f4d 	add	r3, pc, #308	; 0x134
    2d08:	e893000c 	ldm	r3, {r2, r3}
    2d0c:	eb0008c0 	bl	5014 <__aeabi_dmul>
    2d10:	e1a02000 	mov	r2, r0
    2d14:	e1a03001 	mov	r3, r1
    2d18:	e28d1008 	add	r1, sp, #8
    2d1c:	e8910003 	ldm	r1, {r0, r1}
    2d20:	eb0007b6 	bl	4c00 <__aeabi_dsub>
    2d24:	e1a04000 	mov	r4, r0
    2d28:	e1a05001 	mov	r5, r1
    2d2c:	e1a02004 	mov	r2, r4
    2d30:	e1a03005 	mov	r3, r5
    2d34:	e1a00006 	mov	r0, r6
    2d38:	e1a01007 	mov	r1, r7
    2d3c:	eb0007b0 	bl	4c04 <__adddf3>
    2d40:	e3a00000 	mov	r0, #0
    2d44:	e58d0008 	str	r0, [sp, #8]
    2d48:	e58d100c 	str	r1, [sp, #12]
    2d4c:	e1a02006 	mov	r2, r6
    2d50:	e1a03007 	mov	r3, r7
    2d54:	eafffe4a 	b	2684 <__ieee754_pow+0x81c>
    2d58:	e1a02000 	mov	r2, r0
    2d5c:	e1a03001 	mov	r3, r1
    2d60:	e3a00000 	mov	r0, #0
    2d64:	e59f10f4 	ldr	r1, [pc, #244]	; 2e60 <__ieee754_pow+0xff8>
    2d68:	eb00094d 	bl	52a4 <__aeabi_ddiv>
    2d6c:	eafffcd7 	b	20d0 <__ieee754_pow+0x268>
    2d70:	e28f30d0 	add	r3, pc, #208	; 0xd0
    2d74:	e893000c 	ldm	r3, {r2, r3}
    2d78:	e28d1010 	add	r1, sp, #16
    2d7c:	e8910003 	ldm	r1, {r0, r1}
    2d80:	eb0008a3 	bl	5014 <__aeabi_dmul>
    2d84:	e28f30bc 	add	r3, pc, #188	; 0xbc
    2d88:	e893000c 	ldm	r3, {r2, r3}
    2d8c:	eb0008a0 	bl	5014 <__aeabi_dmul>
    2d90:	e1a0a000 	mov	r10, r0
    2d94:	e1a0b001 	mov	r11, r1
    2d98:	eafffc4c 	b	1ed0 <__ieee754_pow+0x68>
    2d9c:	e35a0000 	cmp	r10, #0
    2da0:	1a00001a 	bne	2e10 <__ieee754_pow+0xfa8>
    2da4:	e2633e41 	rsb	r3, r3, #1040	; 0x410
    2da8:	e2832003 	add	r2, r3, #3
    2dac:	e1a03256 	asr	r3, r6, r2
    2db0:	e1560213 	cmp	r6, r3, lsl r2
    2db4:	02033001 	andeq	r3, r3, #1
    2db8:	02633002 	rsbeq	r3, r3, #2
    2dbc:	058d3030 	streq	r3, [sp, #48]	; 0x30
    2dc0:	13a03000 	movne	r3, #0
    2dc4:	158d3030 	strne	r3, [sp, #48]	; 0x30
    2dc8:	eafffc5f 	b	1f4c <__ieee754_pow+0xe4>
    2dcc:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    2dd0:	e3540001 	cmp	r4, #1
    2dd4:	e1a0a000 	mov	r10, r0
    2dd8:	0281b102 	addeq	r11, r1, #-2147483648	; 0x80000000
    2ddc:	1afffc8e 	bne	201c <__ieee754_pow+0x1b4>
    2de0:	eafffc3a 	b	1ed0 <__ieee754_pow+0x68>
    2de4:	e28f3064 	add	r3, pc, #100	; 0x64
    2de8:	e893000c 	ldm	r3, {r2, r3}
    2dec:	e28d1010 	add	r1, sp, #16
    2df0:	e8910003 	ldm	r1, {r0, r1}
    2df4:	eb000886 	bl	5014 <__aeabi_dmul>
    2df8:	e28f3050 	add	r3, pc, #80	; 0x50
    2dfc:	e893000c 	ldm	r3, {r2, r3}
    2e00:	eb000883 	bl	5014 <__aeabi_dmul>
    2e04:	e1a0a000 	mov	r10, r0
    2e08:	e1a0b001 	mov	r11, r1
    2e0c:	eafffc2f 	b	1ed0 <__ieee754_pow+0x68>
    2e10:	e3a02000 	mov	r2, #0
    2e14:	e58d2030 	str	r2, [sp, #48]	; 0x30
    2e18:	eafffc58 	b	1f80 <__ieee754_pow+0x118>
    2e1c:	e59d2008 	ldr	r2, [sp, #8]
    2e20:	eb000706 	bl	4a40 <scalbn>
    2e24:	e1a02000 	mov	r2, r0
    2e28:	e1a03001 	mov	r3, r1
    2e2c:	eaffff15 	b	2a88 <__ieee754_pow+0xc20>
    2e30:	f85ddf44 	.word	0xf85ddf44
    2e34:	3e54ae0b 	.word	0x3e54ae0b
    2e38:	55555555 	.word	0x55555555
    2e3c:	3fd55555 	.word	0x3fd55555
    2e40:	652b82fe 	.word	0x652b82fe
    2e44:	3ff71547 	.word	0x3ff71547
    2e48:	8800759c 	.word	0x8800759c
    2e4c:	7e37e43c 	.word	0x7e37e43c
    2e50:	c2f8f359 	.word	0xc2f8f359
    2e54:	01a56e1f 	.word	0x01a56e1f
    2e58:	3fd00000 	.word	0x3fd00000
    2e5c:	3fe00000 	.word	0x3fe00000
    2e60:	3ff00000 	.word	0x3ff00000
    2e64:	e1a00000 	nop			; (mov r0, r0)

00002e68 <__ieee754_rem_pio2>:
    2e68:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2e6c:	e59fc3bc 	ldr	r12, [pc, #956]	; 3230 <__ieee754_rem_pio2+0x3c8>
    2e70:	e3c17102 	bic	r7, r1, #-2147483648	; 0x80000000
    2e74:	e157000c 	cmp	r7, r12
    2e78:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    2e7c:	e1a04000 	mov	r4, r0
    2e80:	e1a05001 	mov	r5, r1
    2e84:	e1a0a000 	mov	r10, r0
    2e88:	e1a0b001 	mov	r11, r1
    2e8c:	e1a08002 	mov	r8, r2
    2e90:	da00005b 	ble	3004 <__ieee754_rem_pio2+0x19c>
    2e94:	e59f2398 	ldr	r2, [pc, #920]	; 3234 <__ieee754_rem_pio2+0x3cc>
    2e98:	e1570002 	cmp	r7, r2
    2e9c:	e1a09001 	mov	r9, r1
    2ea0:	ca000019 	bgt	2f0c <__ieee754_rem_pio2+0xa4>
    2ea4:	e3510000 	cmp	r1, #0
    2ea8:	e28f3fd6 	add	r3, pc, #856	; 0x358
    2eac:	e893000c 	ldm	r3, {r2, r3}
    2eb0:	da000149 	ble	33dc <__ieee754_rem_pio2+0x574>
    2eb4:	eb000751 	bl	4c00 <__aeabi_dsub>
    2eb8:	e59f3378 	ldr	r3, [pc, #888]	; 3238 <__ieee754_rem_pio2+0x3d0>
    2ebc:	e1570003 	cmp	r7, r3
    2ec0:	e1a0a000 	mov	r10, r0
    2ec4:	e1a0b001 	mov	r11, r1
    2ec8:	0a00005f 	beq	304c <__ieee754_rem_pio2+0x1e4>
    2ecc:	e28f3fcf 	add	r3, pc, #828	; 0x33c
    2ed0:	e893000c 	ldm	r3, {r2, r3}
    2ed4:	eb000749 	bl	4c00 <__aeabi_dsub>
    2ed8:	e1a02000 	mov	r2, r0
    2edc:	e1a03001 	mov	r3, r1
    2ee0:	e8880003 	stm	r8, {r0, r1}
    2ee4:	e1a0000a 	mov	r0, r10
    2ee8:	e1a0100b 	mov	r1, r11
    2eec:	eb000743 	bl	4c00 <__aeabi_dsub>
    2ef0:	e28f3fc6 	add	r3, pc, #792	; 0x318
    2ef4:	e893000c 	ldm	r3, {r2, r3}
    2ef8:	eb000740 	bl	4c00 <__aeabi_dsub>
    2efc:	e3a06001 	mov	r6, #1
    2f00:	e5880008 	str	r0, [r8, #8]
    2f04:	e588100c 	str	r1, [r8, #12]
    2f08:	ea000043 	b	301c <__ieee754_rem_pio2+0x1b4>
    2f0c:	e59f3328 	ldr	r3, [pc, #808]	; 323c <__ieee754_rem_pio2+0x3d4>
    2f10:	e1570003 	cmp	r7, r3
    2f14:	da000075 	ble	30f0 <__ieee754_rem_pio2+0x288>
    2f18:	e59f3320 	ldr	r3, [pc, #800]	; 3240 <__ieee754_rem_pio2+0x3d8>
    2f1c:	e1570003 	cmp	r7, r3
    2f20:	ca000041 	bgt	302c <__ieee754_rem_pio2+0x1c4>
    2f24:	e1a0aa47 	asr	r10, r7, #20
    2f28:	e24aae41 	sub	r10, r10, #1040	; 0x410
    2f2c:	e24aa006 	sub	r10, r10, #6
    2f30:	e0475a0a 	sub	r5, r7, r10, lsl #20
    2f34:	e1a01005 	mov	r1, r5
    2f38:	e1a04000 	mov	r4, r0
    2f3c:	eb0009ac 	bl	55f4 <__aeabi_d2iz>
    2f40:	eb0007fc 	bl	4f38 <__aeabi_i2d>
    2f44:	e1a06000 	mov	r6, r0
    2f48:	e1a07001 	mov	r7, r1
    2f4c:	e1a02000 	mov	r2, r0
    2f50:	e1a03001 	mov	r3, r1
    2f54:	e1a00004 	mov	r0, r4
    2f58:	e1a01005 	mov	r1, r5
    2f5c:	e58d6020 	str	r6, [sp, #32]
    2f60:	e58d7024 	str	r7, [sp, #36]	; 0x24
    2f64:	eb000725 	bl	4c00 <__aeabi_dsub>
    2f68:	e3a02000 	mov	r2, #0
    2f6c:	e59f32d0 	ldr	r3, [pc, #720]	; 3244 <__ieee754_rem_pio2+0x3dc>
    2f70:	eb000827 	bl	5014 <__aeabi_dmul>
    2f74:	e1a06000 	mov	r6, r0
    2f78:	e1a07001 	mov	r7, r1
    2f7c:	eb00099c 	bl	55f4 <__aeabi_d2iz>
    2f80:	eb0007ec 	bl	4f38 <__aeabi_i2d>
    2f84:	e1a02000 	mov	r2, r0
    2f88:	e1a03001 	mov	r3, r1
    2f8c:	e1a04000 	mov	r4, r0
    2f90:	e1a05001 	mov	r5, r1
    2f94:	e1a00006 	mov	r0, r6
    2f98:	e1a01007 	mov	r1, r7
    2f9c:	e58d4028 	str	r4, [sp, #40]	; 0x28
    2fa0:	e58d502c 	str	r5, [sp, #44]	; 0x2c
    2fa4:	eb000715 	bl	4c00 <__aeabi_dsub>
    2fa8:	e3a02000 	mov	r2, #0
    2fac:	e59f3290 	ldr	r3, [pc, #656]	; 3244 <__ieee754_rem_pio2+0x3dc>
    2fb0:	eb000817 	bl	5014 <__aeabi_dmul>
    2fb4:	e3a02000 	mov	r2, #0
    2fb8:	e3a03000 	mov	r3, #0
    2fbc:	e58d0030 	str	r0, [sp, #48]	; 0x30
    2fc0:	e58d1034 	str	r1, [sp, #52]	; 0x34
    2fc4:	eb00096c 	bl	557c <__aeabi_dcmpeq>
    2fc8:	e3500000 	cmp	r0, #0
    2fcc:	03a06003 	moveq	r6, #3
    2fd0:	0a000032 	beq	30a0 <__ieee754_rem_pio2+0x238>
    2fd4:	e28d7028 	add	r7, sp, #40	; 0x28
    2fd8:	e3a06003 	mov	r6, #3
    2fdc:	e1a00004 	mov	r0, r4
    2fe0:	e1a01005 	mov	r1, r5
    2fe4:	e3a02000 	mov	r2, #0
    2fe8:	e3a03000 	mov	r3, #0
    2fec:	eb000962 	bl	557c <__aeabi_dcmpeq>
    2ff0:	e3500000 	cmp	r0, #0
    2ff4:	e2466001 	sub	r6, r6, #1
    2ff8:	0a000028 	beq	30a0 <__ieee754_rem_pio2+0x238>
    2ffc:	e9370003 	ldmdb	r7!, {r0, r1}
    3000:	eafffff7 	b	2fe4 <__ieee754_rem_pio2+0x17c>
    3004:	e8820030 	stm	r2, {r4, r5}
    3008:	e3a03000 	mov	r3, #0
    300c:	e3a02000 	mov	r2, #0
    3010:	e5882008 	str	r2, [r8, #8]
    3014:	e588300c 	str	r3, [r8, #12]
    3018:	e3a06000 	mov	r6, #0
    301c:	e1a00006 	mov	r0, r6
    3020:	e28dd03c 	add	sp, sp, #60	; 0x3c
    3024:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3028:	e12fff1e 	bx	lr
    302c:	e1a02000 	mov	r2, r0
    3030:	e1a03001 	mov	r3, r1
    3034:	eb0006f1 	bl	4c00 <__aeabi_dsub>
    3038:	e3a06000 	mov	r6, #0
    303c:	e5880008 	str	r0, [r8, #8]
    3040:	e588100c 	str	r1, [r8, #12]
    3044:	e8880003 	stm	r8, {r0, r1}
    3048:	eafffff3 	b	301c <__ieee754_rem_pio2+0x1b4>
    304c:	e28f3f71 	add	r3, pc, #452	; 0x1c4
    3050:	e893000c 	ldm	r3, {r2, r3}
    3054:	eb0006e9 	bl	4c00 <__aeabi_dsub>
    3058:	e28f3d07 	add	r3, pc, #448	; 0x1c0
    305c:	e893000c 	ldm	r3, {r2, r3}
    3060:	e1a06000 	mov	r6, r0
    3064:	e1a07001 	mov	r7, r1
    3068:	eb0006e4 	bl	4c00 <__aeabi_dsub>
    306c:	e1a02000 	mov	r2, r0
    3070:	e1a03001 	mov	r3, r1
    3074:	e8880003 	stm	r8, {r0, r1}
    3078:	e1a00006 	mov	r0, r6
    307c:	e1a01007 	mov	r1, r7
    3080:	eb0006de 	bl	4c00 <__aeabi_dsub>
    3084:	e28f3f65 	add	r3, pc, #404	; 0x194
    3088:	e893000c 	ldm	r3, {r2, r3}
    308c:	eb0006db 	bl	4c00 <__aeabi_dsub>
    3090:	e3a06001 	mov	r6, #1
    3094:	e5880008 	str	r0, [r8, #8]
    3098:	e588100c 	str	r1, [r8, #12]
    309c:	eaffffde 	b	301c <__ieee754_rem_pio2+0x1b4>
    30a0:	e3a03002 	mov	r3, #2
    30a4:	e58d3000 	str	r3, [sp]
    30a8:	e59f3198 	ldr	r3, [pc, #408]	; 3248 <__ieee754_rem_pio2+0x3e0>
    30ac:	e28d0020 	add	r0, sp, #32
    30b0:	e58d3004 	str	r3, [sp, #4]
    30b4:	e1a01008 	mov	r1, r8
    30b8:	e1a03006 	mov	r3, r6
    30bc:	e1a0200a 	mov	r2, r10
    30c0:	eb000260 	bl	3a48 <__kernel_rem_pio2>
    30c4:	e3590000 	cmp	r9, #0
    30c8:	e1a06000 	mov	r6, r0
    30cc:	aaffffd2 	bge	301c <__ieee754_rem_pio2+0x1b4>
    30d0:	e5982004 	ldr	r2, [r8, #4]
    30d4:	e598300c 	ldr	r3, [r8, #12]
    30d8:	e2822102 	add	r2, r2, #-2147483648	; 0x80000000
    30dc:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
    30e0:	e5882004 	str	r2, [r8, #4]
    30e4:	e588300c 	str	r3, [r8, #12]
    30e8:	e2606000 	rsb	r6, r0, #0
    30ec:	eaffffca 	b	301c <__ieee754_rem_pio2+0x1b4>
    30f0:	eb0005c2 	bl	4800 <fabs>
    30f4:	e28f3f4b 	add	r3, pc, #300	; 0x12c
    30f8:	e893000c 	ldm	r3, {r2, r3}
    30fc:	e1a04000 	mov	r4, r0
    3100:	e1a05001 	mov	r5, r1
    3104:	eb0007c2 	bl	5014 <__aeabi_dmul>
    3108:	e3a02000 	mov	r2, #0
    310c:	e59f3138 	ldr	r3, [pc, #312]	; 324c <__ieee754_rem_pio2+0x3e4>
    3110:	eb0006bb 	bl	4c04 <__adddf3>
    3114:	eb000936 	bl	55f4 <__aeabi_d2iz>
    3118:	e1a06000 	mov	r6, r0
    311c:	eb000785 	bl	4f38 <__aeabi_i2d>
    3120:	e28f30e0 	add	r3, pc, #224	; 0xe0
    3124:	e893000c 	ldm	r3, {r2, r3}
    3128:	e58d0010 	str	r0, [sp, #16]
    312c:	e58d1014 	str	r1, [sp, #20]
    3130:	eb0007b7 	bl	5014 <__aeabi_dmul>
    3134:	e1a02000 	mov	r2, r0
    3138:	e1a03001 	mov	r3, r1
    313c:	e1a00004 	mov	r0, r4
    3140:	e1a01005 	mov	r1, r5
    3144:	eb0006ad 	bl	4c00 <__aeabi_dsub>
    3148:	e28f30c0 	add	r3, pc, #192	; 0xc0
    314c:	e893000c 	ldm	r3, {r2, r3}
    3150:	e1a0a000 	mov	r10, r0
    3154:	e1a0b001 	mov	r11, r1
    3158:	e28d1010 	add	r1, sp, #16
    315c:	e8910003 	ldm	r1, {r0, r1}
    3160:	eb0007ab 	bl	5014 <__aeabi_dmul>
    3164:	e356001f 	cmp	r6, #31
    3168:	e58d0008 	str	r0, [sp, #8]
    316c:	e58d100c 	str	r1, [sp, #12]
    3170:	e1a0000a 	mov	r0, r10
    3174:	e1a0100b 	mov	r1, r11
    3178:	ca000035 	bgt	3254 <__ieee754_rem_pio2+0x3ec>
    317c:	e59f30cc 	ldr	r3, [pc, #204]	; 3250 <__ieee754_rem_pio2+0x3e8>
    3180:	e2462001 	sub	r2, r6, #1
    3184:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    3188:	e1530007 	cmp	r3, r7
    318c:	0a000030 	beq	3254 <__ieee754_rem_pio2+0x3ec>
    3190:	e28d3008 	add	r3, sp, #8
    3194:	e893000c 	ldm	r3, {r2, r3}
    3198:	eb000698 	bl	4c00 <__aeabi_dsub>
    319c:	e1a02000 	mov	r2, r0
    31a0:	e1a03001 	mov	r3, r1
    31a4:	e888000c 	stm	r8, {r2, r3}
    31a8:	e1a05000 	mov	r5, r0
    31ac:	e1a04001 	mov	r4, r1
    31b0:	e1a02005 	mov	r2, r5
    31b4:	e1a03004 	mov	r3, r4
    31b8:	e1a0000a 	mov	r0, r10
    31bc:	e1a0100b 	mov	r1, r11
    31c0:	eb00068e 	bl	4c00 <__aeabi_dsub>
    31c4:	e28d3008 	add	r3, sp, #8
    31c8:	e893000c 	ldm	r3, {r2, r3}
    31cc:	eb00068b 	bl	4c00 <__aeabi_dsub>
    31d0:	e3590000 	cmp	r9, #0
    31d4:	e1a02000 	mov	r2, r0
    31d8:	e1a03001 	mov	r3, r1
    31dc:	e5882008 	str	r2, [r8, #8]
    31e0:	e588300c 	str	r3, [r8, #12]
    31e4:	aaffff8c 	bge	301c <__ieee754_rem_pio2+0x1b4>
    31e8:	e2844102 	add	r4, r4, #-2147483648	; 0x80000000
    31ec:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    31f0:	e5885000 	str	r5, [r8]
    31f4:	e5884004 	str	r4, [r8, #4]
    31f8:	e5880008 	str	r0, [r8, #8]
    31fc:	e588100c 	str	r1, [r8, #12]
    3200:	e2666000 	rsb	r6, r6, #0
    3204:	eaffff84 	b	301c <__ieee754_rem_pio2+0x1b4>
    3208:	54400000 	.word	0x54400000
    320c:	3ff921fb 	.word	0x3ff921fb
    3210:	1a626331 	.word	0x1a626331
    3214:	3dd0b461 	.word	0x3dd0b461
    3218:	1a600000 	.word	0x1a600000
    321c:	3dd0b461 	.word	0x3dd0b461
    3220:	2e037073 	.word	0x2e037073
    3224:	3ba3198a 	.word	0x3ba3198a
    3228:	6dc9c883 	.word	0x6dc9c883
    322c:	3fe45f30 	.word	0x3fe45f30
    3230:	3fe921fb 	.word	0x3fe921fb
    3234:	4002d97b 	.word	0x4002d97b
    3238:	3ff921fb 	.word	0x3ff921fb
    323c:	413921fb 	.word	0x413921fb
    3240:	7fefffff 	.word	0x7fefffff
    3244:	41700000 	.word	0x41700000
    3248:	00006ba4 	.word	0x00006ba4
    324c:	3fe00000 	.word	0x3fe00000
    3250:	00006b24 	.word	0x00006b24
    3254:	e28d3008 	add	r3, sp, #8
    3258:	e893000c 	ldm	r3, {r2, r3}
    325c:	eb000667 	bl	4c00 <__aeabi_dsub>
    3260:	e1a07a47 	asr	r7, r7, #20
    3264:	e1a04001 	mov	r4, r1
    3268:	e1a01081 	lsl	r1, r1, #1
    326c:	e1a05000 	mov	r5, r0
    3270:	e0471aa1 	sub	r1, r7, r1, lsr #21
    3274:	e1a02005 	mov	r2, r5
    3278:	e1a03004 	mov	r3, r4
    327c:	e3510010 	cmp	r1, #16
    3280:	e888000c 	stm	r8, {r2, r3}
    3284:	daffffc9 	ble	31b0 <__ieee754_rem_pio2+0x348>
    3288:	e28f3f82 	add	r3, pc, #520	; 0x208
    328c:	e893000c 	ldm	r3, {r2, r3}
    3290:	e28d1010 	add	r1, sp, #16
    3294:	e8910003 	ldm	r1, {r0, r1}
    3298:	eb00075d 	bl	5014 <__aeabi_dmul>
    329c:	e1a04000 	mov	r4, r0
    32a0:	e1a05001 	mov	r5, r1
    32a4:	e1a02004 	mov	r2, r4
    32a8:	e1a03005 	mov	r3, r5
    32ac:	e1a0000a 	mov	r0, r10
    32b0:	e1a0100b 	mov	r1, r11
    32b4:	eb000651 	bl	4c00 <__aeabi_dsub>
    32b8:	e58d0018 	str	r0, [sp, #24]
    32bc:	e58d101c 	str	r1, [sp, #28]
    32c0:	e28d3018 	add	r3, sp, #24
    32c4:	e893000c 	ldm	r3, {r2, r3}
    32c8:	e1a0000a 	mov	r0, r10
    32cc:	e1a0100b 	mov	r1, r11
    32d0:	eb00064a 	bl	4c00 <__aeabi_dsub>
    32d4:	e1a02004 	mov	r2, r4
    32d8:	e1a03005 	mov	r3, r5
    32dc:	eb000647 	bl	4c00 <__aeabi_dsub>
    32e0:	e28f3f6e 	add	r3, pc, #440	; 0x1b8
    32e4:	e893000c 	ldm	r3, {r2, r3}
    32e8:	e1a04000 	mov	r4, r0
    32ec:	e1a05001 	mov	r5, r1
    32f0:	e28d1010 	add	r1, sp, #16
    32f4:	e8910003 	ldm	r1, {r0, r1}
    32f8:	eb000745 	bl	5014 <__aeabi_dmul>
    32fc:	e1a02004 	mov	r2, r4
    3300:	e1a03005 	mov	r3, r5
    3304:	eb00063d 	bl	4c00 <__aeabi_dsub>
    3308:	e58d0008 	str	r0, [sp, #8]
    330c:	e58d100c 	str	r1, [sp, #12]
    3310:	e28d3008 	add	r3, sp, #8
    3314:	e893000c 	ldm	r3, {r2, r3}
    3318:	e28d1018 	add	r1, sp, #24
    331c:	e8910003 	ldm	r1, {r0, r1}
    3320:	eb000636 	bl	4c00 <__aeabi_dsub>
    3324:	e1a04001 	mov	r4, r1
    3328:	e1a01081 	lsl	r1, r1, #1
    332c:	e1a05000 	mov	r5, r0
    3330:	e0477aa1 	sub	r7, r7, r1, lsr #21
    3334:	e1a02005 	mov	r2, r5
    3338:	e1a03004 	mov	r3, r4
    333c:	e3570031 	cmp	r7, #49	; 0x31
    3340:	e888000c 	stm	r8, {r2, r3}
    3344:	da00004f 	ble	3488 <__ieee754_rem_pio2+0x620>
    3348:	e3a0242e 	mov	r2, #771751936	; 0x2e000000
    334c:	e59f3164 	ldr	r3, [pc, #356]	; 34b8 <__ieee754_rem_pio2+0x650>
    3350:	e28d1010 	add	r1, sp, #16
    3354:	e8910003 	ldm	r1, {r0, r1}
    3358:	eb00072d 	bl	5014 <__aeabi_dmul>
    335c:	e1a04000 	mov	r4, r0
    3360:	e1a05001 	mov	r5, r1
    3364:	e1a02004 	mov	r2, r4
    3368:	e1a03005 	mov	r3, r5
    336c:	e28d1018 	add	r1, sp, #24
    3370:	e8910003 	ldm	r1, {r0, r1}
    3374:	eb000621 	bl	4c00 <__aeabi_dsub>
    3378:	e1a0a000 	mov	r10, r0
    337c:	e1a0b001 	mov	r11, r1
    3380:	e1a0200a 	mov	r2, r10
    3384:	e1a0300b 	mov	r3, r11
    3388:	e28d1018 	add	r1, sp, #24
    338c:	e8910003 	ldm	r1, {r0, r1}
    3390:	eb00061a 	bl	4c00 <__aeabi_dsub>
    3394:	e1a02004 	mov	r2, r4
    3398:	e1a03005 	mov	r3, r5
    339c:	eb000617 	bl	4c00 <__aeabi_dsub>
    33a0:	e28f3c01 	add	r3, pc, #256	; 0x100
    33a4:	e893000c 	ldm	r3, {r2, r3}
    33a8:	e1a04000 	mov	r4, r0
    33ac:	e1a05001 	mov	r5, r1
    33b0:	e28d1010 	add	r1, sp, #16
    33b4:	e8910003 	ldm	r1, {r0, r1}
    33b8:	eb000715 	bl	5014 <__aeabi_dmul>
    33bc:	e1a02004 	mov	r2, r4
    33c0:	e1a03005 	mov	r3, r5
    33c4:	eb00060d 	bl	4c00 <__aeabi_dsub>
    33c8:	e58d0008 	str	r0, [sp, #8]
    33cc:	e58d100c 	str	r1, [sp, #12]
    33d0:	e1a0000a 	mov	r0, r10
    33d4:	e1a0100b 	mov	r1, r11
    33d8:	eaffff6c 	b	3190 <__ieee754_rem_pio2+0x328>
    33dc:	eb000608 	bl	4c04 <__adddf3>
    33e0:	e59f30d4 	ldr	r3, [pc, #212]	; 34bc <__ieee754_rem_pio2+0x654>
    33e4:	e1570003 	cmp	r7, r3
    33e8:	e1a0a000 	mov	r10, r0
    33ec:	e1a0b001 	mov	r11, r1
    33f0:	0a00000f 	beq	3434 <__ieee754_rem_pio2+0x5cc>
    33f4:	e28f30b4 	add	r3, pc, #180	; 0xb4
    33f8:	e893000c 	ldm	r3, {r2, r3}
    33fc:	eb000600 	bl	4c04 <__adddf3>
    3400:	e1a02000 	mov	r2, r0
    3404:	e1a03001 	mov	r3, r1
    3408:	e8880003 	stm	r8, {r0, r1}
    340c:	e1a0000a 	mov	r0, r10
    3410:	e1a0100b 	mov	r1, r11
    3414:	eb0005f9 	bl	4c00 <__aeabi_dsub>
    3418:	e28f3090 	add	r3, pc, #144	; 0x90
    341c:	e893000c 	ldm	r3, {r2, r3}
    3420:	eb0005f7 	bl	4c04 <__adddf3>
    3424:	e3e06000 	mvn	r6, #0
    3428:	e5880008 	str	r0, [r8, #8]
    342c:	e588100c 	str	r1, [r8, #12]
    3430:	eafffef9 	b	301c <__ieee754_rem_pio2+0x1b4>
    3434:	e28f305c 	add	r3, pc, #92	; 0x5c
    3438:	e893000c 	ldm	r3, {r2, r3}
    343c:	eb0005f0 	bl	4c04 <__adddf3>
    3440:	e28f3058 	add	r3, pc, #88	; 0x58
    3444:	e893000c 	ldm	r3, {r2, r3}
    3448:	e1a06000 	mov	r6, r0
    344c:	e1a07001 	mov	r7, r1
    3450:	eb0005eb 	bl	4c04 <__adddf3>
    3454:	e1a02000 	mov	r2, r0
    3458:	e1a03001 	mov	r3, r1
    345c:	e8880003 	stm	r8, {r0, r1}
    3460:	e1a00006 	mov	r0, r6
    3464:	e1a01007 	mov	r1, r7
    3468:	eb0005e4 	bl	4c00 <__aeabi_dsub>
    346c:	e28f302c 	add	r3, pc, #44	; 0x2c
    3470:	e893000c 	ldm	r3, {r2, r3}
    3474:	eb0005e2 	bl	4c04 <__adddf3>
    3478:	e3e06000 	mvn	r6, #0
    347c:	e5880008 	str	r0, [r8, #8]
    3480:	e588100c 	str	r1, [r8, #12]
    3484:	eafffee4 	b	301c <__ieee754_rem_pio2+0x1b4>
    3488:	e28db018 	add	r11, sp, #24
    348c:	e89b0c00 	ldm	r11, {r10, r11}
    3490:	eaffff46 	b	31b0 <__ieee754_rem_pio2+0x348>
    3494:	e1a00000 	nop			; (mov r0, r0)
    3498:	1a600000 	.word	0x1a600000
    349c:	3dd0b461 	.word	0x3dd0b461
    34a0:	2e037073 	.word	0x2e037073
    34a4:	3ba3198a 	.word	0x3ba3198a
    34a8:	252049c1 	.word	0x252049c1
    34ac:	397b839a 	.word	0x397b839a
    34b0:	1a626331 	.word	0x1a626331
    34b4:	3dd0b461 	.word	0x3dd0b461
    34b8:	3ba3198a 	.word	0x3ba3198a
    34bc:	3ff921fb 	.word	0x3ff921fb

000034c0 <__ieee754_sqrt>:
    34c0:	e59fc230 	ldr	r12, [pc, #560]	; 36f8 <__ieee754_sqrt+0x238>
    34c4:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    34c8:	e59f7228 	ldr	r7, [pc, #552]	; 36f8 <__ieee754_sqrt+0x238>
    34cc:	e001c00c 	and	r12, r1, r12
    34d0:	e15c0007 	cmp	r12, r7
    34d4:	e1a04000 	mov	r4, r0
    34d8:	e1a05001 	mov	r5, r1
    34dc:	e1a02000 	mov	r2, r0
    34e0:	e1a03001 	mov	r3, r1
    34e4:	e1a06001 	mov	r6, r1
    34e8:	e1a0c001 	mov	r12, r1
    34ec:	e1a08000 	mov	r8, r0
    34f0:	0a00006a 	beq	36a0 <__ieee754_sqrt+0x1e0>
    34f4:	e3510000 	cmp	r1, #0
    34f8:	da000051 	ble	3644 <__ieee754_sqrt+0x184>
    34fc:	e1b02a41 	asrs	r2, r1, #20
    3500:	0a00005a 	beq	3670 <__ieee754_sqrt+0x1b0>
    3504:	e3cc34ff 	bic	r3, r12, #-16777216	; 0xff000000
    3508:	e3120001 	tst	r2, #1
    350c:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
    3510:	e2426fff 	sub	r6, r2, #1020	; 0x3fc
    3514:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    3518:	01a02fa8 	lsreq	r2, r8, #31
    351c:	01a08088 	lsleq	r8, r8, #1
    3520:	00823083 	addeq	r3, r2, r3, lsl #1
    3524:	e2466003 	sub	r6, r6, #3
    3528:	e1a02fa8 	lsr	r2, r8, #31
    352c:	e3a07000 	mov	r7, #0
    3530:	e0823083 	add	r3, r2, r3, lsl #1
    3534:	e1a060c6 	asr	r6, r6, #1
    3538:	e1a02088 	lsl	r2, r8, #1
    353c:	e3a0c016 	mov	r12, #22
    3540:	e1a00007 	mov	r0, r7
    3544:	e3a01602 	mov	r1, #2097152	; 0x200000
    3548:	e0804001 	add	r4, r0, r1
    354c:	e1540003 	cmp	r4, r3
    3550:	e1a05fa2 	lsr	r5, r2, #31
    3554:	d0840001 	addle	r0, r4, r1
    3558:	d0643003 	rsble	r3, r4, r3
    355c:	d0877001 	addle	r7, r7, r1
    3560:	e25cc001 	subs	r12, r12, #1
    3564:	e0853083 	add	r3, r5, r3, lsl #1
    3568:	e1a02082 	lsl	r2, r2, #1
    356c:	e1a010a1 	lsr	r1, r1, #1
    3570:	1afffff4 	bne	3548 <__ieee754_sqrt+0x88>
    3574:	e3a05020 	mov	r5, #32
    3578:	e1a0800c 	mov	r8, r12
    357c:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    3580:	ea00000c 	b	35b8 <__ieee754_sqrt+0xf8>
    3584:	e1a0a000 	mov	r10, r0
    3588:	e1540002 	cmp	r4, r2
    358c:	e0603003 	rsb	r3, r0, r3
    3590:	82433001 	subhi	r3, r3, #1
    3594:	e0642002 	rsb	r2, r4, r2
    3598:	e08cc001 	add	r12, r12, r1
    359c:	e1a0000a 	mov	r0, r10
    35a0:	e1a04fa2 	lsr	r4, r2, #31
    35a4:	e2555001 	subs	r5, r5, #1
    35a8:	e0843083 	add	r3, r4, r3, lsl #1
    35ac:	e1a02082 	lsl	r2, r2, #1
    35b0:	e1a010a1 	lsr	r1, r1, #1
    35b4:	0a00000d 	beq	35f0 <__ieee754_sqrt+0x130>
    35b8:	e1500003 	cmp	r0, r3
    35bc:	e0814008 	add	r4, r1, r8
    35c0:	ba000002 	blt	35d0 <__ieee754_sqrt+0x110>
    35c4:	e1540002 	cmp	r4, r2
    35c8:	91530000 	cmpls	r3, r0
    35cc:	1afffff3 	bne	35a0 <__ieee754_sqrt+0xe0>
    35d0:	e2048102 	and	r8, r4, #-2147483648	; 0x80000000
    35d4:	e3580102 	cmp	r8, #-2147483648	; 0x80000000
    35d8:	e0848001 	add	r8, r4, r1
    35dc:	1affffe8 	bne	3584 <__ieee754_sqrt+0xc4>
    35e0:	e3580000 	cmp	r8, #0
    35e4:	a280a001 	addge	r10, r0, #1
    35e8:	aaffffe6 	bge	3588 <__ieee754_sqrt+0xc8>
    35ec:	eaffffe4 	b	3584 <__ieee754_sqrt+0xc4>
    35f0:	e1923003 	orrs	r3, r2, r3
    35f4:	1a00000b 	bne	3628 <__ieee754_sqrt+0x168>
    35f8:	e1a0c0ac 	lsr	r12, r12, #1
    35fc:	e1a030c7 	asr	r3, r7, #1
    3600:	e28335ff 	add	r3, r3, #1069547520	; 0x3fc00000
    3604:	e3170001 	tst	r7, #1
    3608:	e2833602 	add	r3, r3, #2097152	; 0x200000
    360c:	138cc102 	orrne	r12, r12, #-2147483648	; 0x80000000
    3610:	e0835a06 	add	r5, r3, r6, lsl #20
    3614:	e1a0400c 	mov	r4, r12
    3618:	e1a00004 	mov	r0, r4
    361c:	e1a01005 	mov	r1, r5
    3620:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    3624:	e12fff1e 	bx	lr
    3628:	e37c0001 	cmn	r12, #1
    362c:	02877001 	addeq	r7, r7, #1
    3630:	01a0c005 	moveq	r12, r5
    3634:	0afffff0 	beq	35fc <__ieee754_sqrt+0x13c>
    3638:	e20c3001 	and	r3, r12, #1
    363c:	e083c00c 	add	r12, r3, r12
    3640:	eaffffec 	b	35f8 <__ieee754_sqrt+0x138>
    3644:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    3648:	e19cc000 	orrs	r12, r12, r0
    364c:	0afffff1 	beq	3618 <__ieee754_sqrt+0x158>
    3650:	e3510000 	cmp	r1, #0
    3654:	01a02001 	moveq	r2, r1
    3658:	1a00001d 	bne	36d4 <__ieee754_sqrt+0x214>
    365c:	e1a0c5a8 	lsr	r12, r8, #11
    3660:	e35c0000 	cmp	r12, #0
    3664:	e2422015 	sub	r2, r2, #21
    3668:	e1a08a88 	lsl	r8, r8, #21
    366c:	0afffffa 	beq	365c <__ieee754_sqrt+0x19c>
    3670:	e21c3601 	ands	r3, r12, #1048576	; 0x100000
    3674:	1a000012 	bne	36c4 <__ieee754_sqrt+0x204>
    3678:	e1a0c08c 	lsl	r12, r12, #1
    367c:	e31c0601 	tst	r12, #1048576	; 0x100000
    3680:	e2833001 	add	r3, r3, #1
    3684:	0afffffb 	beq	3678 <__ieee754_sqrt+0x1b8>
    3688:	e2631001 	rsb	r1, r3, #1
    368c:	e2630020 	rsb	r0, r3, #32
    3690:	e18cc038 	orr	r12, r12, r8, lsr r0
    3694:	e0822001 	add	r2, r2, r1
    3698:	e1a08318 	lsl	r8, r8, r3
    369c:	eaffff98 	b	3504 <__ieee754_sqrt+0x44>
    36a0:	eb00065b 	bl	5014 <__aeabi_dmul>
    36a4:	e1a02000 	mov	r2, r0
    36a8:	e1a03001 	mov	r3, r1
    36ac:	e1a00004 	mov	r0, r4
    36b0:	e1a01005 	mov	r1, r5
    36b4:	eb000552 	bl	4c04 <__adddf3>
    36b8:	e1a04000 	mov	r4, r0
    36bc:	e1a05001 	mov	r5, r1
    36c0:	eaffffd4 	b	3618 <__ieee754_sqrt+0x158>
    36c4:	e3a00020 	mov	r0, #32
    36c8:	e3a01001 	mov	r1, #1
    36cc:	e3a03000 	mov	r3, #0
    36d0:	eaffffee 	b	3690 <__ieee754_sqrt+0x1d0>
    36d4:	e1a02000 	mov	r2, r0
    36d8:	e1a03001 	mov	r3, r1
    36dc:	eb000547 	bl	4c00 <__aeabi_dsub>
    36e0:	e1a02000 	mov	r2, r0
    36e4:	e1a03001 	mov	r3, r1
    36e8:	eb0006ed 	bl	52a4 <__aeabi_ddiv>
    36ec:	e1a04000 	mov	r4, r0
    36f0:	e1a05001 	mov	r5, r1
    36f4:	eaffffc7 	b	3618 <__ieee754_sqrt+0x158>
    36f8:	7ff00000 	.word	0x7ff00000
    36fc:	00000000 	.word	0x00000000

00003700 <__kernel_cos>:
    3700:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3704:	e3c19102 	bic	r9, r1, #-2147483648	; 0x80000000
    3708:	e35905f9 	cmp	r9, #1044381696	; 0x3e400000
    370c:	e24dd014 	sub	sp, sp, #20
    3710:	e1a06000 	mov	r6, r0
    3714:	e1a07001 	mov	r7, r1
    3718:	e1a04000 	mov	r4, r0
    371c:	e1a05001 	mov	r5, r1
    3720:	e1a0a002 	mov	r10, r2
    3724:	e1a0b003 	mov	r11, r3
    3728:	aa00004d 	bge	3864 <__kernel_cos+0x164>
    372c:	eb0007b0 	bl	55f4 <__aeabi_d2iz>
    3730:	e3500000 	cmp	r0, #0
    3734:	0a0000ae 	beq	39f4 <__kernel_cos+0x2f4>
    3738:	e1a02006 	mov	r2, r6
    373c:	e1a03007 	mov	r3, r7
    3740:	e1a00006 	mov	r0, r6
    3744:	e1a01007 	mov	r1, r7
    3748:	eb000631 	bl	5014 <__aeabi_dmul>
    374c:	e28f3fab 	add	r3, pc, #684	; 0x2ac
    3750:	e893000c 	ldm	r3, {r2, r3}
    3754:	e1a04000 	mov	r4, r0
    3758:	e1a05001 	mov	r5, r1
    375c:	eb00062c 	bl	5014 <__aeabi_dmul>
    3760:	e28f3e2a 	add	r3, pc, #672	; 0x2a0
    3764:	e893000c 	ldm	r3, {r2, r3}
    3768:	eb000525 	bl	4c04 <__adddf3>
    376c:	e1a02004 	mov	r2, r4
    3770:	e1a03005 	mov	r3, r5
    3774:	eb000626 	bl	5014 <__aeabi_dmul>
    3778:	e28f3e29 	add	r3, pc, #656	; 0x290
    377c:	e893000c 	ldm	r3, {r2, r3}
    3780:	eb00051e 	bl	4c00 <__aeabi_dsub>
    3784:	e1a02004 	mov	r2, r4
    3788:	e1a03005 	mov	r3, r5
    378c:	eb000620 	bl	5014 <__aeabi_dmul>
    3790:	e28f3d0a 	add	r3, pc, #640	; 0x280
    3794:	e893000c 	ldm	r3, {r2, r3}
    3798:	eb000519 	bl	4c04 <__adddf3>
    379c:	e1a02004 	mov	r2, r4
    37a0:	e1a03005 	mov	r3, r5
    37a4:	eb00061a 	bl	5014 <__aeabi_dmul>
    37a8:	e28f3e27 	add	r3, pc, #624	; 0x270
    37ac:	e893000c 	ldm	r3, {r2, r3}
    37b0:	eb000512 	bl	4c00 <__aeabi_dsub>
    37b4:	e1a02004 	mov	r2, r4
    37b8:	e1a03005 	mov	r3, r5
    37bc:	eb000614 	bl	5014 <__aeabi_dmul>
    37c0:	e28f3e26 	add	r3, pc, #608	; 0x260
    37c4:	e893000c 	ldm	r3, {r2, r3}
    37c8:	eb00050d 	bl	4c04 <__adddf3>
    37cc:	e1a02004 	mov	r2, r4
    37d0:	e1a03005 	mov	r3, r5
    37d4:	eb00060e 	bl	5014 <__aeabi_dmul>
    37d8:	e88d0003 	stm	sp, {r0, r1}
    37dc:	e1a00004 	mov	r0, r4
    37e0:	e1a01005 	mov	r1, r5
    37e4:	e3a02000 	mov	r2, #0
    37e8:	e59f3240 	ldr	r3, [pc, #576]	; 3a30 <__kernel_cos+0x330>
    37ec:	eb000608 	bl	5014 <__aeabi_dmul>
    37f0:	e89d000c 	ldm	sp, {r2, r3}
    37f4:	e1a08000 	mov	r8, r0
    37f8:	e1a09001 	mov	r9, r1
    37fc:	e1a00004 	mov	r0, r4
    3800:	e1a01005 	mov	r1, r5
    3804:	eb000602 	bl	5014 <__aeabi_dmul>
    3808:	e1a0200a 	mov	r2, r10
    380c:	e1a04000 	mov	r4, r0
    3810:	e1a05001 	mov	r5, r1
    3814:	e1a0300b 	mov	r3, r11
    3818:	e1a00006 	mov	r0, r6
    381c:	e1a01007 	mov	r1, r7
    3820:	eb0005fb 	bl	5014 <__aeabi_dmul>
    3824:	e1a02000 	mov	r2, r0
    3828:	e1a03001 	mov	r3, r1
    382c:	e1a00004 	mov	r0, r4
    3830:	e1a01005 	mov	r1, r5
    3834:	eb0004f1 	bl	4c00 <__aeabi_dsub>
    3838:	e1a02000 	mov	r2, r0
    383c:	e1a03001 	mov	r3, r1
    3840:	e1a00008 	mov	r0, r8
    3844:	e1a01009 	mov	r1, r9
    3848:	eb0004ec 	bl	4c00 <__aeabi_dsub>
    384c:	e1a02000 	mov	r2, r0
    3850:	e1a03001 	mov	r3, r1
    3854:	e3a00000 	mov	r0, #0
    3858:	e59f11d4 	ldr	r1, [pc, #468]	; 3a34 <__kernel_cos+0x334>
    385c:	eb0004e7 	bl	4c00 <__aeabi_dsub>
    3860:	ea00005a 	b	39d0 <__kernel_cos+0x2d0>
    3864:	e1a02000 	mov	r2, r0
    3868:	e1a03001 	mov	r3, r1
    386c:	eb0005e8 	bl	5014 <__aeabi_dmul>
    3870:	e28f3f62 	add	r3, pc, #392	; 0x188
    3874:	e893000c 	ldm	r3, {r2, r3}
    3878:	e1a04000 	mov	r4, r0
    387c:	e1a05001 	mov	r5, r1
    3880:	eb0005e3 	bl	5014 <__aeabi_dmul>
    3884:	e28f3f5f 	add	r3, pc, #380	; 0x17c
    3888:	e893000c 	ldm	r3, {r2, r3}
    388c:	eb0004dc 	bl	4c04 <__adddf3>
    3890:	e1a02004 	mov	r2, r4
    3894:	e1a03005 	mov	r3, r5
    3898:	eb0005dd 	bl	5014 <__aeabi_dmul>
    389c:	e28f3f5b 	add	r3, pc, #364	; 0x16c
    38a0:	e893000c 	ldm	r3, {r2, r3}
    38a4:	eb0004d5 	bl	4c00 <__aeabi_dsub>
    38a8:	e1a02004 	mov	r2, r4
    38ac:	e1a03005 	mov	r3, r5
    38b0:	eb0005d7 	bl	5014 <__aeabi_dmul>
    38b4:	e28f3f57 	add	r3, pc, #348	; 0x15c
    38b8:	e893000c 	ldm	r3, {r2, r3}
    38bc:	eb0004d0 	bl	4c04 <__adddf3>
    38c0:	e1a02004 	mov	r2, r4
    38c4:	e1a03005 	mov	r3, r5
    38c8:	eb0005d1 	bl	5014 <__aeabi_dmul>
    38cc:	e28f3f53 	add	r3, pc, #332	; 0x14c
    38d0:	e893000c 	ldm	r3, {r2, r3}
    38d4:	eb0004c9 	bl	4c00 <__aeabi_dsub>
    38d8:	e1a02004 	mov	r2, r4
    38dc:	e1a03005 	mov	r3, r5
    38e0:	eb0005cb 	bl	5014 <__aeabi_dmul>
    38e4:	e28f3f4f 	add	r3, pc, #316	; 0x13c
    38e8:	e893000c 	ldm	r3, {r2, r3}
    38ec:	eb0004c4 	bl	4c04 <__adddf3>
    38f0:	e1a03005 	mov	r3, r5
    38f4:	e1a02004 	mov	r2, r4
    38f8:	eb0005c5 	bl	5014 <__aeabi_dmul>
    38fc:	e59f3134 	ldr	r3, [pc, #308]	; 3a38 <__kernel_cos+0x338>
    3900:	e1590003 	cmp	r9, r3
    3904:	e88d0003 	stm	sp, {r0, r1}
    3908:	daffffb3 	ble	37dc <__kernel_cos+0xdc>
    390c:	e59f3128 	ldr	r3, [pc, #296]	; 3a3c <__kernel_cos+0x33c>
    3910:	e1590003 	cmp	r9, r3
    3914:	e3a02000 	mov	r2, #0
    3918:	ca00002f 	bgt	39dc <__kernel_cos+0x2dc>
    391c:	e2493602 	sub	r3, r9, #2097152	; 0x200000
    3920:	e3a02000 	mov	r2, #0
    3924:	e3a00000 	mov	r0, #0
    3928:	e59f1104 	ldr	r1, [pc, #260]	; 3a34 <__kernel_cos+0x334>
    392c:	e1a08002 	mov	r8, r2
    3930:	e1a09003 	mov	r9, r3
    3934:	eb0004b1 	bl	4c00 <__aeabi_dsub>
    3938:	e58d0008 	str	r0, [sp, #8]
    393c:	e58d100c 	str	r1, [sp, #12]
    3940:	e1a00004 	mov	r0, r4
    3944:	e1a01005 	mov	r1, r5
    3948:	e3a02000 	mov	r2, #0
    394c:	e59f30dc 	ldr	r3, [pc, #220]	; 3a30 <__kernel_cos+0x330>
    3950:	eb0005af 	bl	5014 <__aeabi_dmul>
    3954:	e1a02008 	mov	r2, r8
    3958:	e1a03009 	mov	r3, r9
    395c:	eb0004a7 	bl	4c00 <__aeabi_dsub>
    3960:	e89d000c 	ldm	sp, {r2, r3}
    3964:	e1a08000 	mov	r8, r0
    3968:	e1a09001 	mov	r9, r1
    396c:	e1a00004 	mov	r0, r4
    3970:	e1a01005 	mov	r1, r5
    3974:	eb0005a6 	bl	5014 <__aeabi_dmul>
    3978:	e1a0200a 	mov	r2, r10
    397c:	e1a04000 	mov	r4, r0
    3980:	e1a05001 	mov	r5, r1
    3984:	e1a0300b 	mov	r3, r11
    3988:	e1a00006 	mov	r0, r6
    398c:	e1a01007 	mov	r1, r7
    3990:	eb00059f 	bl	5014 <__aeabi_dmul>
    3994:	e1a02000 	mov	r2, r0
    3998:	e1a03001 	mov	r3, r1
    399c:	e1a00004 	mov	r0, r4
    39a0:	e1a01005 	mov	r1, r5
    39a4:	eb000495 	bl	4c00 <__aeabi_dsub>
    39a8:	e1a02000 	mov	r2, r0
    39ac:	e1a03001 	mov	r3, r1
    39b0:	e1a00008 	mov	r0, r8
    39b4:	e1a01009 	mov	r1, r9
    39b8:	eb000490 	bl	4c00 <__aeabi_dsub>
    39bc:	e1a02000 	mov	r2, r0
    39c0:	e1a03001 	mov	r3, r1
    39c4:	e28d1008 	add	r1, sp, #8
    39c8:	e8910003 	ldm	r1, {r0, r1}
    39cc:	eb00048b 	bl	4c00 <__aeabi_dsub>
    39d0:	e28dd014 	add	sp, sp, #20
    39d4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    39d8:	e12fff1e 	bx	lr
    39dc:	e59f305c 	ldr	r3, [pc, #92]	; 3a40 <__kernel_cos+0x340>
    39e0:	e3a08000 	mov	r8, #0
    39e4:	e58d2008 	str	r2, [sp, #8]
    39e8:	e58d300c 	str	r3, [sp, #12]
    39ec:	e59f9050 	ldr	r9, [pc, #80]	; 3a44 <__kernel_cos+0x344>
    39f0:	eaffffd2 	b	3940 <__kernel_cos+0x240>
    39f4:	e3a00000 	mov	r0, #0
    39f8:	e59f1034 	ldr	r1, [pc, #52]	; 3a34 <__kernel_cos+0x334>
    39fc:	eafffff3 	b	39d0 <__kernel_cos+0x2d0>
    3a00:	be8838d4 	.word	0xbe8838d4
    3a04:	bda8fae9 	.word	0xbda8fae9
    3a08:	bdb4b1c4 	.word	0xbdb4b1c4
    3a0c:	3e21ee9e 	.word	0x3e21ee9e
    3a10:	809c52ad 	.word	0x809c52ad
    3a14:	3e927e4f 	.word	0x3e927e4f
    3a18:	19cb1590 	.word	0x19cb1590
    3a1c:	3efa01a0 	.word	0x3efa01a0
    3a20:	16c15177 	.word	0x16c15177
    3a24:	3f56c16c 	.word	0x3f56c16c
    3a28:	5555554c 	.word	0x5555554c
    3a2c:	3fa55555 	.word	0x3fa55555
    3a30:	3fe00000 	.word	0x3fe00000
    3a34:	3ff00000 	.word	0x3ff00000
    3a38:	3fd33332 	.word	0x3fd33332
    3a3c:	3fe90000 	.word	0x3fe90000
    3a40:	3fe70000 	.word	0x3fe70000
    3a44:	3fd20000 	.word	0x3fd20000

00003a48 <__kernel_rem_pio2>:
    3a48:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3a4c:	e59feb6c 	ldr	lr, [pc, #2924]	; 45c0 <__kernel_rem_pio2+0xb78>
    3a50:	e242c003 	sub	r12, r2, #3
    3a54:	e0ce4e9c 	smull	r4, lr, r12, lr
    3a58:	e1a0cfcc 	asr	r12, r12, #31
    3a5c:	e06cc14e 	rsb	r12, r12, lr, asr #2
    3a60:	e24ddf99 	sub	sp, sp, #612	; 0x264
    3a64:	e1cccfcc 	bic	r12, r12, r12, asr #31
    3a68:	e58dc028 	str	r12, [sp, #40]	; 0x28
    3a6c:	e1a0b003 	mov	r11, r3
    3a70:	e59dc288 	ldr	r12, [sp, #648]	; 0x288
    3a74:	e59f3b48 	ldr	r3, [pc, #2888]	; 45c4 <__kernel_rem_pio2+0xb7c>
    3a78:	e793310c 	ldr	r3, [r3, r12, lsl #2]
    3a7c:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    3a80:	e58d3020 	str	r3, [sp, #32]
    3a84:	e59de020 	ldr	lr, [sp, #32]
    3a88:	e1e0300c 	mvn	r3, r12
    3a8c:	e24b4001 	sub	r4, r11, #1
    3a90:	e0833083 	add	r3, r3, r3, lsl #1
    3a94:	e58d0010 	str	r0, [sp, #16]
    3a98:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
    3a9c:	e0823183 	add	r3, r2, r3, lsl #3
    3aa0:	e094c00e 	adds	r12, r4, lr
    3aa4:	e58d400c 	str	r4, [sp, #12]
    3aa8:	e58d101c 	str	r1, [sp, #28]
    3aac:	e58d3018 	str	r3, [sp, #24]
    3ab0:	e0646000 	rsb	r6, r4, r0
    3ab4:	4a000012 	bmi	3b04 <__kernel_rem_pio2+0xbc>
    3ab8:	e086c00c 	add	r12, r6, r12
    3abc:	e28c4001 	add	r4, r12, #1
    3ac0:	e59dc28c 	ldr	r12, [sp, #652]	; 0x28c
    3ac4:	e28d8080 	add	r8, sp, #128	; 0x80
    3ac8:	e08c5106 	add	r5, r12, r6, lsl #2
    3acc:	e3a07000 	mov	r7, #0
    3ad0:	ea000006 	b	3af0 <__kernel_rem_pio2+0xa8>
    3ad4:	e7950007 	ldr	r0, [r5, r7]
    3ad8:	eb000516 	bl	4f38 <__aeabi_i2d>
    3adc:	e2866001 	add	r6, r6, #1
    3ae0:	e1560004 	cmp	r6, r4
    3ae4:	e8a80003 	stmia	r8!, {r0, r1}
    3ae8:	e2877004 	add	r7, r7, #4
    3aec:	0a000004 	beq	3b04 <__kernel_rem_pio2+0xbc>
    3af0:	e3560000 	cmp	r6, #0
    3af4:	aafffff6 	bge	3ad4 <__kernel_rem_pio2+0x8c>
    3af8:	e3a00000 	mov	r0, #0
    3afc:	e3a01000 	mov	r1, #0
    3b00:	eafffff5 	b	3adc <__kernel_rem_pio2+0x94>
    3b04:	e59d4020 	ldr	r4, [sp, #32]
    3b08:	e3540000 	cmp	r4, #0
    3b0c:	ba000020 	blt	3b94 <__kernel_rem_pio2+0x14c>
    3b10:	e59d4020 	ldr	r4, [sp, #32]
    3b14:	e28dcf72 	add	r12, sp, #456	; 0x1c8
    3b18:	e08cc184 	add	r12, r12, r4, lsl #3
    3b1c:	e58dc004 	str	r12, [sp, #4]
    3b20:	e28dad07 	add	r10, sp, #448	; 0x1c0
    3b24:	e1a0800b 	mov	r8, r11
    3b28:	e59dc00c 	ldr	r12, [sp, #12]
    3b2c:	e35c0000 	cmp	r12, #0
    3b30:	ba000130 	blt	3ff8 <__kernel_rem_pio2+0x5b0>
    3b34:	e28de080 	add	lr, sp, #128	; 0x80
    3b38:	e59d9010 	ldr	r9, [sp, #16]
    3b3c:	e08e7188 	add	r7, lr, r8, lsl #3
    3b40:	e3a04000 	mov	r4, #0
    3b44:	e3a05000 	mov	r5, #0
    3b48:	e3a06000 	mov	r6, #0
    3b4c:	e937000c 	ldmdb	r7!, {r2, r3}
    3b50:	e8b90003 	ldm	r9!, {r0, r1}
    3b54:	eb00052e 	bl	5014 <__aeabi_dmul>
    3b58:	e1a02000 	mov	r2, r0
    3b5c:	e1a03001 	mov	r3, r1
    3b60:	e1a00004 	mov	r0, r4
    3b64:	e1a01005 	mov	r1, r5
    3b68:	eb000425 	bl	4c04 <__adddf3>
    3b6c:	e2866001 	add	r6, r6, #1
    3b70:	e156000b 	cmp	r6, r11
    3b74:	e1a04000 	mov	r4, r0
    3b78:	e1a05001 	mov	r5, r1
    3b7c:	1afffff2 	bne	3b4c <__kernel_rem_pio2+0x104>
    3b80:	e8aa0030 	stmia	r10!, {r4, r5}
    3b84:	e59d4004 	ldr	r4, [sp, #4]
    3b88:	e15a0004 	cmp	r10, r4
    3b8c:	e2888001 	add	r8, r8, #1
    3b90:	1affffe4 	bne	3b28 <__kernel_rem_pio2+0xe0>
    3b94:	e59dc020 	ldr	r12, [sp, #32]
    3b98:	e28d4030 	add	r4, sp, #48	; 0x30
    3b9c:	e084410c 	add	r4, r4, r12, lsl #2
    3ba0:	e58d402c 	str	r4, [sp, #44]	; 0x2c
    3ba4:	e58dc004 	str	r12, [sp, #4]
    3ba8:	e59d4004 	ldr	r4, [sp, #4]
    3bac:	e28dce26 	add	r12, sp, #608	; 0x260
    3bb0:	e1a0a184 	lsl	r10, r4, #3
    3bb4:	e08c300a 	add	r3, r12, r10
    3bb8:	e3540000 	cmp	r4, #0
    3bbc:	e24350a0 	sub	r5, r3, #160	; 0xa0
    3bc0:	e8950030 	ldm	r5, {r4, r5}
    3bc4:	da00001f 	ble	3c48 <__kernel_rem_pio2+0x200>
    3bc8:	e59dc004 	ldr	r12, [sp, #4]
    3bcc:	e28d802c 	add	r8, sp, #44	; 0x2c
    3bd0:	e28ded07 	add	lr, sp, #448	; 0x1c0
    3bd4:	e08ea00a 	add	r10, lr, r10
    3bd8:	e088910c 	add	r9, r8, r12, lsl #2
    3bdc:	e3a02000 	mov	r2, #0
    3be0:	e59f39e0 	ldr	r3, [pc, #2528]	; 45c8 <__kernel_rem_pio2+0xb80>
    3be4:	e1a00004 	mov	r0, r4
    3be8:	e1a01005 	mov	r1, r5
    3bec:	eb000508 	bl	5014 <__aeabi_dmul>
    3bf0:	eb00067f 	bl	55f4 <__aeabi_d2iz>
    3bf4:	eb0004cf 	bl	4f38 <__aeabi_i2d>
    3bf8:	e3a02000 	mov	r2, #0
    3bfc:	e59f39c8 	ldr	r3, [pc, #2504]	; 45cc <__kernel_rem_pio2+0xb84>
    3c00:	e1a06000 	mov	r6, r0
    3c04:	e1a07001 	mov	r7, r1
    3c08:	eb000501 	bl	5014 <__aeabi_dmul>
    3c0c:	e1a02000 	mov	r2, r0
    3c10:	e1a03001 	mov	r3, r1
    3c14:	e1a00004 	mov	r0, r4
    3c18:	e1a01005 	mov	r1, r5
    3c1c:	eb0003f7 	bl	4c00 <__aeabi_dsub>
    3c20:	eb000673 	bl	55f4 <__aeabi_d2iz>
    3c24:	e1a02006 	mov	r2, r6
    3c28:	e5a80004 	str	r0, [r8, #4]!
    3c2c:	e1a03007 	mov	r3, r7
    3c30:	e93a0003 	ldmdb	r10!, {r0, r1}
    3c34:	eb0003f2 	bl	4c04 <__adddf3>
    3c38:	e1580009 	cmp	r8, r9
    3c3c:	e1a04000 	mov	r4, r0
    3c40:	e1a05001 	mov	r5, r1
    3c44:	1affffe4 	bne	3bdc <__kernel_rem_pio2+0x194>
    3c48:	e59d2018 	ldr	r2, [sp, #24]
    3c4c:	e1a00004 	mov	r0, r4
    3c50:	e1a01005 	mov	r1, r5
    3c54:	eb000379 	bl	4a40 <scalbn>
    3c58:	e3a02000 	mov	r2, #0
    3c5c:	e3a035ff 	mov	r3, #1069547520	; 0x3fc00000
    3c60:	e1a04000 	mov	r4, r0
    3c64:	e1a05001 	mov	r5, r1
    3c68:	eb0004e9 	bl	5014 <__aeabi_dmul>
    3c6c:	ebfff697 	bl	16d0 <floor>
    3c70:	e3a02000 	mov	r2, #0
    3c74:	e59f3954 	ldr	r3, [pc, #2388]	; 45d0 <__kernel_rem_pio2+0xb88>
    3c78:	eb0004e5 	bl	5014 <__aeabi_dmul>
    3c7c:	e1a02000 	mov	r2, r0
    3c80:	e1a03001 	mov	r3, r1
    3c84:	e1a00004 	mov	r0, r4
    3c88:	e1a01005 	mov	r1, r5
    3c8c:	eb0003db 	bl	4c00 <__aeabi_dsub>
    3c90:	e1a04000 	mov	r4, r0
    3c94:	e1a05001 	mov	r5, r1
    3c98:	eb000655 	bl	55f4 <__aeabi_d2iz>
    3c9c:	e1a08000 	mov	r8, r0
    3ca0:	eb0004a4 	bl	4f38 <__aeabi_i2d>
    3ca4:	e1a02000 	mov	r2, r0
    3ca8:	e1a03001 	mov	r3, r1
    3cac:	e1a00004 	mov	r0, r4
    3cb0:	e1a01005 	mov	r1, r5
    3cb4:	eb0003d1 	bl	4c00 <__aeabi_dsub>
    3cb8:	e59d4018 	ldr	r4, [sp, #24]
    3cbc:	e3540000 	cmp	r4, #0
    3cc0:	e1a06000 	mov	r6, r0
    3cc4:	e1a07001 	mov	r7, r1
    3cc8:	da0000ad 	ble	3f84 <__kernel_rem_pio2+0x53c>
    3ccc:	e59dc004 	ldr	r12, [sp, #4]
    3cd0:	e28dee26 	add	lr, sp, #608	; 0x260
    3cd4:	e24c2001 	sub	r2, r12, #1
    3cd8:	e08e2102 	add	r2, lr, r2, lsl #2
    3cdc:	e5120230 	ldr	r0, [r2, #-560]	; 0xfffffdd0
    3ce0:	e2643018 	rsb	r3, r4, #24
    3ce4:	e1a01350 	asr	r1, r0, r3
    3ce8:	e0403311 	sub	r3, r0, r1, lsl r3
    3cec:	e2645017 	rsb	r5, r4, #23
    3cf0:	e1a05553 	asr	r5, r3, r5
    3cf4:	e5023230 	str	r3, [r2, #-560]	; 0xfffffdd0
    3cf8:	e0888001 	add	r8, r8, r1
    3cfc:	e3550000 	cmp	r5, #0
    3d00:	da000027 	ble	3da4 <__kernel_rem_pio2+0x35c>
    3d04:	e59d4004 	ldr	r4, [sp, #4]
    3d08:	e3540000 	cmp	r4, #0
    3d0c:	e2888001 	add	r8, r8, #1
    3d10:	da0000b6 	ble	3ff0 <__kernel_rem_pio2+0x5a8>
    3d14:	e28d3030 	add	r3, sp, #48	; 0x30
    3d18:	e0830104 	add	r0, r3, r4, lsl #2
    3d1c:	e3a04000 	mov	r4, #0
    3d20:	ea000005 	b	3d3c <__kernel_rem_pio2+0x2f4>
    3d24:	e3520000 	cmp	r2, #0
    3d28:	12622401 	rsbne	r2, r2, #16777216	; 0x1000000
    3d2c:	15032004 	strne	r2, [r3, #-4]
    3d30:	13a04001 	movne	r4, #1
    3d34:	e1530000 	cmp	r3, r0
    3d38:	0a000008 	beq	3d60 <__kernel_rem_pio2+0x318>
    3d3c:	e3540000 	cmp	r4, #0
    3d40:	e4932004 	ldr	r2, [r3], #4
    3d44:	0afffff6 	beq	3d24 <__kernel_rem_pio2+0x2dc>
    3d48:	e3e014ff 	mvn	r1, #-16777216	; 0xff000000
    3d4c:	e0621001 	rsb	r1, r2, r1
    3d50:	e1530000 	cmp	r3, r0
    3d54:	e5031004 	str	r1, [r3, #-4]
    3d58:	e3a04001 	mov	r4, #1
    3d5c:	1afffff6 	bne	3d3c <__kernel_rem_pio2+0x2f4>
    3d60:	e59dc018 	ldr	r12, [sp, #24]
    3d64:	e35c0000 	cmp	r12, #0
    3d68:	da00000b 	ble	3d9c <__kernel_rem_pio2+0x354>
    3d6c:	e35c0001 	cmp	r12, #1
    3d70:	0a00008a 	beq	3fa0 <__kernel_rem_pio2+0x558>
    3d74:	e35c0002 	cmp	r12, #2
    3d78:	1a000007 	bne	3d9c <__kernel_rem_pio2+0x354>
    3d7c:	e59dc004 	ldr	r12, [sp, #4]
    3d80:	e28dee26 	add	lr, sp, #608	; 0x260
    3d84:	e24c3001 	sub	r3, r12, #1
    3d88:	e08e3103 	add	r3, lr, r3, lsl #2
    3d8c:	e5132230 	ldr	r2, [r3, #-560]	; 0xfffffdd0
    3d90:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
    3d94:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000
    3d98:	e5032230 	str	r2, [r3, #-560]	; 0xfffffdd0
    3d9c:	e3550002 	cmp	r5, #2
    3da0:	0a000062 	beq	3f30 <__kernel_rem_pio2+0x4e8>
    3da4:	e1a00006 	mov	r0, r6
    3da8:	e1a01007 	mov	r1, r7
    3dac:	e3a02000 	mov	r2, #0
    3db0:	e3a03000 	mov	r3, #0
    3db4:	eb0005f0 	bl	557c <__aeabi_dcmpeq>
    3db8:	e3500000 	cmp	r0, #0
    3dbc:	0a000090 	beq	4004 <__kernel_rem_pio2+0x5bc>
    3dc0:	e59d4004 	ldr	r4, [sp, #4]
    3dc4:	e59dc020 	ldr	r12, [sp, #32]
    3dc8:	e2440001 	sub	r0, r4, #1
    3dcc:	e15c0000 	cmp	r12, r0
    3dd0:	ca000009 	bgt	3dfc <__kernel_rem_pio2+0x3b4>
    3dd4:	e28de030 	add	lr, sp, #48	; 0x30
    3dd8:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
    3ddc:	e08e3104 	add	r3, lr, r4, lsl #2
    3de0:	e3a02000 	mov	r2, #0
    3de4:	e5331004 	ldr	r1, [r3, #-4]!
    3de8:	e153000c 	cmp	r3, r12
    3dec:	e1822001 	orr	r2, r2, r1
    3df0:	1afffffb 	bne	3de4 <__kernel_rem_pio2+0x39c>
    3df4:	e3520000 	cmp	r2, #0
    3df8:	1a0001c9 	bne	4524 <__kernel_rem_pio2+0xadc>
    3dfc:	e59d4020 	ldr	r4, [sp, #32]
    3e00:	e2442001 	sub	r2, r4, #1
    3e04:	e1a02102 	lsl	r2, r2, #2
    3e08:	e28dce26 	add	r12, sp, #608	; 0x260
    3e0c:	e08c3002 	add	r3, r12, r2
    3e10:	e5133230 	ldr	r3, [r3, #-560]	; 0xfffffdd0
    3e14:	e3530000 	cmp	r3, #0
    3e18:	1a0001d9 	bne	4584 <__kernel_rem_pio2+0xb3c>
    3e1c:	e28de030 	add	lr, sp, #48	; 0x30
    3e20:	e08e2002 	add	r2, lr, r2
    3e24:	e3a03001 	mov	r3, #1
    3e28:	e5321004 	ldr	r1, [r2, #-4]!
    3e2c:	e3510000 	cmp	r1, #0
    3e30:	e2833001 	add	r3, r3, #1
    3e34:	0afffffb 	beq	3e28 <__kernel_rem_pio2+0x3e0>
    3e38:	e59d4004 	ldr	r4, [sp, #4]
    3e3c:	e0843003 	add	r3, r4, r3
    3e40:	e2848001 	add	r8, r4, #1
    3e44:	e1580003 	cmp	r8, r3
    3e48:	e58d3024 	str	r3, [sp, #36]	; 0x24
    3e4c:	ca000031 	bgt	3f18 <__kernel_rem_pio2+0x4d0>
    3e50:	e59d4004 	ldr	r4, [sp, #4]
    3e54:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    3e58:	e084300c 	add	r3, r4, r12
    3e5c:	e59dc28c 	ldr	r12, [sp, #652]	; 0x28c
    3e60:	e59d400c 	ldr	r4, [sp, #12]
    3e64:	e08c3103 	add	r3, r12, r3, lsl #2
    3e68:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    3e6c:	e0849008 	add	r9, r4, r8
    3e70:	e28d4d07 	add	r4, sp, #448	; 0x1c0
    3e74:	e0844188 	add	r4, r4, r8, lsl #3
    3e78:	e28cc001 	add	r12, r12, #1
    3e7c:	e28de080 	add	lr, sp, #128	; 0x80
    3e80:	e98d0018 	stmib	sp, {r3, r4}
    3e84:	e58dc014 	str	r12, [sp, #20]
    3e88:	e08e9189 	add	r9, lr, r9, lsl #3
    3e8c:	e59d4004 	ldr	r4, [sp, #4]
    3e90:	e5b40004 	ldr	r0, [r4, #4]!
    3e94:	e58d4004 	str	r4, [sp, #4]
    3e98:	eb000426 	bl	4f38 <__aeabi_i2d>
    3e9c:	e59dc00c 	ldr	r12, [sp, #12]
    3ea0:	e35c0000 	cmp	r12, #0
    3ea4:	e8a90003 	stmia	r9!, {r0, r1}
    3ea8:	ba00001d 	blt	3f24 <__kernel_rem_pio2+0x4dc>
    3eac:	e088700b 	add	r7, r8, r11
    3eb0:	e28de080 	add	lr, sp, #128	; 0x80
    3eb4:	e59da010 	ldr	r10, [sp, #16]
    3eb8:	e08e7187 	add	r7, lr, r7, lsl #3
    3ebc:	e3a04000 	mov	r4, #0
    3ec0:	e3a05000 	mov	r5, #0
    3ec4:	e3a06000 	mov	r6, #0
    3ec8:	e937000c 	ldmdb	r7!, {r2, r3}
    3ecc:	e8ba0003 	ldm	r10!, {r0, r1}
    3ed0:	eb00044f 	bl	5014 <__aeabi_dmul>
    3ed4:	e1a02000 	mov	r2, r0
    3ed8:	e1a03001 	mov	r3, r1
    3edc:	e1a00004 	mov	r0, r4
    3ee0:	e1a01005 	mov	r1, r5
    3ee4:	eb000346 	bl	4c04 <__adddf3>
    3ee8:	e2866001 	add	r6, r6, #1
    3eec:	e156000b 	cmp	r6, r11
    3ef0:	e1a04000 	mov	r4, r0
    3ef4:	e1a05001 	mov	r5, r1
    3ef8:	1afffff2 	bne	3ec8 <__kernel_rem_pio2+0x480>
    3efc:	e59dc014 	ldr	r12, [sp, #20]
    3f00:	e2888001 	add	r8, r8, #1
    3f04:	e158000c 	cmp	r8, r12
    3f08:	e59dc008 	ldr	r12, [sp, #8]
    3f0c:	e8ac0030 	stmia	r12!, {r4, r5}
    3f10:	e58dc008 	str	r12, [sp, #8]
    3f14:	1affffdc 	bne	3e8c <__kernel_rem_pio2+0x444>
    3f18:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    3f1c:	e58dc004 	str	r12, [sp, #4]
    3f20:	eaffff20 	b	3ba8 <__kernel_rem_pio2+0x160>
    3f24:	e3a04000 	mov	r4, #0
    3f28:	e3a05000 	mov	r5, #0
    3f2c:	eafffff2 	b	3efc <__kernel_rem_pio2+0x4b4>
    3f30:	e1a02006 	mov	r2, r6
    3f34:	e1a03007 	mov	r3, r7
    3f38:	e3a00000 	mov	r0, #0
    3f3c:	e59f1690 	ldr	r1, [pc, #1680]	; 45d4 <__kernel_rem_pio2+0xb8c>
    3f40:	eb00032e 	bl	4c00 <__aeabi_dsub>
    3f44:	e3540000 	cmp	r4, #0
    3f48:	e1a06000 	mov	r6, r0
    3f4c:	e1a07001 	mov	r7, r1
    3f50:	0affff93 	beq	3da4 <__kernel_rem_pio2+0x35c>
    3f54:	e59d2018 	ldr	r2, [sp, #24]
    3f58:	e3a00000 	mov	r0, #0
    3f5c:	e59f1670 	ldr	r1, [pc, #1648]	; 45d4 <__kernel_rem_pio2+0xb8c>
    3f60:	eb0002b6 	bl	4a40 <scalbn>
    3f64:	e1a02000 	mov	r2, r0
    3f68:	e1a03001 	mov	r3, r1
    3f6c:	e1a00006 	mov	r0, r6
    3f70:	e1a01007 	mov	r1, r7
    3f74:	eb000321 	bl	4c00 <__aeabi_dsub>
    3f78:	e1a06000 	mov	r6, r0
    3f7c:	e1a07001 	mov	r7, r1
    3f80:	eaffff87 	b	3da4 <__kernel_rem_pio2+0x35c>
    3f84:	1a00000e 	bne	3fc4 <__kernel_rem_pio2+0x57c>
    3f88:	e59d4004 	ldr	r4, [sp, #4]
    3f8c:	e28dce26 	add	r12, sp, #608	; 0x260
    3f90:	e08c3104 	add	r3, r12, r4, lsl #2
    3f94:	e5135234 	ldr	r5, [r3, #-564]	; 0xfffffdcc
    3f98:	e1a05bc5 	asr	r5, r5, #23
    3f9c:	eaffff56 	b	3cfc <__kernel_rem_pio2+0x2b4>
    3fa0:	e59dc004 	ldr	r12, [sp, #4]
    3fa4:	e28dee26 	add	lr, sp, #608	; 0x260
    3fa8:	e24c3001 	sub	r3, r12, #1
    3fac:	e08e3103 	add	r3, lr, r3, lsl #2
    3fb0:	e5132230 	ldr	r2, [r3, #-560]	; 0xfffffdd0
    3fb4:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
    3fb8:	e3c22502 	bic	r2, r2, #8388608	; 0x800000
    3fbc:	e5032230 	str	r2, [r3, #-560]	; 0xfffffdd0
    3fc0:	eaffff75 	b	3d9c <__kernel_rem_pio2+0x354>
    3fc4:	e3a02000 	mov	r2, #0
    3fc8:	e59f3608 	ldr	r3, [pc, #1544]	; 45d8 <__kernel_rem_pio2+0xb90>
    3fcc:	eb00057c 	bl	55c4 <__aeabi_dcmpge>
    3fd0:	e3500000 	cmp	r0, #0
    3fd4:	03a05000 	moveq	r5, #0
    3fd8:	0affff71 	beq	3da4 <__kernel_rem_pio2+0x35c>
    3fdc:	e59d4004 	ldr	r4, [sp, #4]
    3fe0:	e3540000 	cmp	r4, #0
    3fe4:	e3a05002 	mov	r5, #2
    3fe8:	e2888001 	add	r8, r8, #1
    3fec:	caffff48 	bgt	3d14 <__kernel_rem_pio2+0x2cc>
    3ff0:	e3a04000 	mov	r4, #0
    3ff4:	eaffff59 	b	3d60 <__kernel_rem_pio2+0x318>
    3ff8:	e3a04000 	mov	r4, #0
    3ffc:	e3a05000 	mov	r5, #0
    4000:	eafffede 	b	3b80 <__kernel_rem_pio2+0x138>
    4004:	e59d4018 	ldr	r4, [sp, #24]
    4008:	e1a00006 	mov	r0, r6
    400c:	e2642000 	rsb	r2, r4, #0
    4010:	e1a01007 	mov	r1, r7
    4014:	e58d500c 	str	r5, [sp, #12]
    4018:	e58d8010 	str	r8, [sp, #16]
    401c:	eb000287 	bl	4a40 <scalbn>
    4020:	e3a02000 	mov	r2, #0
    4024:	e59f35a0 	ldr	r3, [pc, #1440]	; 45cc <__kernel_rem_pio2+0xb84>
    4028:	e1a04000 	mov	r4, r0
    402c:	e1a05001 	mov	r5, r1
    4030:	eb000563 	bl	55c4 <__aeabi_dcmpge>
    4034:	e3500000 	cmp	r0, #0
    4038:	0a000153 	beq	458c <__kernel_rem_pio2+0xb44>
    403c:	e3a02000 	mov	r2, #0
    4040:	e59f3580 	ldr	r3, [pc, #1408]	; 45c8 <__kernel_rem_pio2+0xb80>
    4044:	e1a00004 	mov	r0, r4
    4048:	e1a01005 	mov	r1, r5
    404c:	eb0003f0 	bl	5014 <__aeabi_dmul>
    4050:	eb000567 	bl	55f4 <__aeabi_d2iz>
    4054:	eb0003b7 	bl	4f38 <__aeabi_i2d>
    4058:	e3a02000 	mov	r2, #0
    405c:	e59f3568 	ldr	r3, [pc, #1384]	; 45cc <__kernel_rem_pio2+0xb84>
    4060:	e1a06000 	mov	r6, r0
    4064:	e1a07001 	mov	r7, r1
    4068:	eb0003e9 	bl	5014 <__aeabi_dmul>
    406c:	e1a02000 	mov	r2, r0
    4070:	e1a03001 	mov	r3, r1
    4074:	e1a00004 	mov	r0, r4
    4078:	e1a01005 	mov	r1, r5
    407c:	eb0002df 	bl	4c00 <__aeabi_dsub>
    4080:	eb00055b 	bl	55f4 <__aeabi_d2iz>
    4084:	e59d4004 	ldr	r4, [sp, #4]
    4088:	e28dce26 	add	r12, sp, #608	; 0x260
    408c:	e08c3104 	add	r3, r12, r4, lsl #2
    4090:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    4094:	e1a01007 	mov	r1, r7
    4098:	e1a00006 	mov	r0, r6
    409c:	eb000554 	bl	55f4 <__aeabi_d2iz>
    40a0:	e2844001 	add	r4, r4, #1
    40a4:	e28dee26 	add	lr, sp, #608	; 0x260
    40a8:	e08e3104 	add	r3, lr, r4, lsl #2
    40ac:	e58d4004 	str	r4, [sp, #4]
    40b0:	e59d4018 	ldr	r4, [sp, #24]
    40b4:	e2844018 	add	r4, r4, #24
    40b8:	e58d4018 	str	r4, [sp, #24]
    40bc:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    40c0:	e3a00000 	mov	r0, #0
    40c4:	e59f1508 	ldr	r1, [pc, #1288]	; 45d4 <__kernel_rem_pio2+0xb8c>
    40c8:	e59d2018 	ldr	r2, [sp, #24]
    40cc:	eb00025b 	bl	4a40 <scalbn>
    40d0:	e59dc004 	ldr	r12, [sp, #4]
    40d4:	e35c0000 	cmp	r12, #0
    40d8:	e1a04000 	mov	r4, r0
    40dc:	e1a05001 	mov	r5, r1
    40e0:	ba00003b 	blt	41d4 <__kernel_rem_pio2+0x78c>
    40e4:	e28c6001 	add	r6, r12, #1
    40e8:	e28d9d07 	add	r9, sp, #448	; 0x1c0
    40ec:	e28de030 	add	lr, sp, #48	; 0x30
    40f0:	e08e7106 	add	r7, lr, r6, lsl #2
    40f4:	e0896186 	add	r6, r9, r6, lsl #3
    40f8:	e5370004 	ldr	r0, [r7, #-4]!
    40fc:	eb00038d 	bl	4f38 <__aeabi_i2d>
    4100:	e1a02004 	mov	r2, r4
    4104:	e1a03005 	mov	r3, r5
    4108:	eb0003c1 	bl	5014 <__aeabi_dmul>
    410c:	e3a02000 	mov	r2, #0
    4110:	e9260003 	stmdb	r6!, {r0, r1}
    4114:	e59f34ac 	ldr	r3, [pc, #1196]	; 45c8 <__kernel_rem_pio2+0xb80>
    4118:	e1a00004 	mov	r0, r4
    411c:	e1a01005 	mov	r1, r5
    4120:	eb0003bb 	bl	5014 <__aeabi_dmul>
    4124:	e1560009 	cmp	r6, r9
    4128:	e1a04000 	mov	r4, r0
    412c:	e1a05001 	mov	r5, r1
    4130:	1afffff0 	bne	40f8 <__kernel_rem_pio2+0x6b0>
    4134:	e59da004 	ldr	r10, [sp, #4]
    4138:	e59db020 	ldr	r11, [sp, #32]
    413c:	e58da008 	str	r10, [sp, #8]
    4140:	e3a08000 	mov	r8, #0
    4144:	e35b0000 	cmp	r11, #0
    4148:	b3a04000 	movlt	r4, #0
    414c:	b3a05000 	movlt	r5, #0
    4150:	ba000015 	blt	41ac <__kernel_rem_pio2+0x764>
    4154:	e59d4008 	ldr	r4, [sp, #8]
    4158:	e59fa47c 	ldr	r10, [pc, #1148]	; 45dc <__kernel_rem_pio2+0xb94>
    415c:	e0897184 	add	r7, r9, r4, lsl #3
    4160:	e3a05000 	mov	r5, #0
    4164:	e3a04000 	mov	r4, #0
    4168:	e3a06000 	mov	r6, #0
    416c:	ea000001 	b	4178 <__kernel_rem_pio2+0x730>
    4170:	e1560008 	cmp	r6, r8
    4174:	ca00000c 	bgt	41ac <__kernel_rem_pio2+0x764>
    4178:	e8b7000c 	ldm	r7!, {r2, r3}
    417c:	e8ba0003 	ldm	r10!, {r0, r1}
    4180:	eb0003a3 	bl	5014 <__aeabi_dmul>
    4184:	e1a02000 	mov	r2, r0
    4188:	e1a03001 	mov	r3, r1
    418c:	e1a00004 	mov	r0, r4
    4190:	e1a01005 	mov	r1, r5
    4194:	eb00029a 	bl	4c04 <__adddf3>
    4198:	e2866001 	add	r6, r6, #1
    419c:	e15b0006 	cmp	r11, r6
    41a0:	e1a04000 	mov	r4, r0
    41a4:	e1a05001 	mov	r5, r1
    41a8:	aafffff0 	bge	4170 <__kernel_rem_pio2+0x728>
    41ac:	e59dc008 	ldr	r12, [sp, #8]
    41b0:	e28d0e26 	add	r0, sp, #608	; 0x260
    41b4:	e24cc001 	sub	r12, r12, #1
    41b8:	e0803188 	add	r3, r0, r8, lsl #3
    41bc:	e37c0001 	cmn	r12, #1
    41c0:	e58dc008 	str	r12, [sp, #8]
    41c4:	e5034140 	str	r4, [r3, #-320]	; 0xfffffec0
    41c8:	e503513c 	str	r5, [r3, #-316]	; 0xfffffec4
    41cc:	e2888001 	add	r8, r8, #1
    41d0:	1affffdb 	bne	4144 <__kernel_rem_pio2+0x6fc>
    41d4:	e59dc288 	ldr	r12, [sp, #648]	; 0x288
    41d8:	e35c0003 	cmp	r12, #3
    41dc:	979ff10c 	ldrls	pc, [pc, r12, lsl #2]
    41e0:	ea000015 	b	423c <__kernel_rem_pio2+0x7f4>
    41e4:	000044c4 	.word	0x000044c4
    41e8:	000043e0 	.word	0x000043e0
    41ec:	000043e0 	.word	0x000043e0
    41f0:	00004250 	.word	0x00004250
    41f4:	e59d000c 	ldr	r0, [sp, #12]
    41f8:	e3a0c000 	mov	r12, #0
    41fc:	e3500000 	cmp	r0, #0
    4200:	e1a0400c 	mov	r4, r12
    4204:	0a000068 	beq	43ac <__kernel_rem_pio2+0x964>
    4208:	e59d2124 	ldr	r2, [sp, #292]	; 0x124
    420c:	e59d001c 	ldr	r0, [sp, #28]
    4210:	e59d1120 	ldr	r1, [sp, #288]	; 0x120
    4214:	e2822102 	add	r2, r2, #-2147483648	; 0x80000000
    4218:	e59d312c 	ldr	r3, [sp, #300]	; 0x12c
    421c:	e8800006 	stm	r0, {r1, r2}
    4220:	e59d2128 	ldr	r2, [sp, #296]	; 0x128
    4224:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
    4228:	e2844102 	add	r4, r4, #-2147483648	; 0x80000000
    422c:	e5802008 	str	r2, [r0, #8]
    4230:	e580300c 	str	r3, [r0, #12]
    4234:	e580c010 	str	r12, [r0, #16]
    4238:	e5804014 	str	r4, [r0, #20]
    423c:	e59d4010 	ldr	r4, [sp, #16]
    4240:	e2040007 	and	r0, r4, #7
    4244:	e28ddf99 	add	sp, sp, #612	; 0x264
    4248:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    424c:	e12fff1e 	bx	lr
    4250:	e59d4004 	ldr	r4, [sp, #4]
    4254:	e3540000 	cmp	r4, #0
    4258:	daffffe5 	ble	41f4 <__kernel_rem_pio2+0x7ac>
    425c:	e59d4004 	ldr	r4, [sp, #4]
    4260:	e28dbe12 	add	r11, sp, #288	; 0x120
    4264:	e08ba184 	add	r10, r11, r4, lsl #3
    4268:	e58da008 	str	r10, [sp, #8]
    426c:	e58da014 	str	r10, [sp, #20]
    4270:	e93a0300 	ldmdb	r10!, {r8, r9}
    4274:	e28a7008 	add	r7, r10, #8
    4278:	e89700c0 	ldm	r7, {r6, r7}
    427c:	e1a00008 	mov	r0, r8
    4280:	e1a02006 	mov	r2, r6
    4284:	e1a03007 	mov	r3, r7
    4288:	e1a01009 	mov	r1, r9
    428c:	eb00025c 	bl	4c04 <__adddf3>
    4290:	e1a04000 	mov	r4, r0
    4294:	e1a05001 	mov	r5, r1
    4298:	e1a02004 	mov	r2, r4
    429c:	e1a03005 	mov	r3, r5
    42a0:	e1a00008 	mov	r0, r8
    42a4:	e1a01009 	mov	r1, r9
    42a8:	eb000254 	bl	4c00 <__aeabi_dsub>
    42ac:	e1a02000 	mov	r2, r0
    42b0:	e1a03001 	mov	r3, r1
    42b4:	e1a00006 	mov	r0, r6
    42b8:	e1a01007 	mov	r1, r7
    42bc:	eb000250 	bl	4c04 <__adddf3>
    42c0:	e59dc008 	ldr	r12, [sp, #8]
    42c4:	e58a0008 	str	r0, [r10, #8]
    42c8:	e58a100c 	str	r1, [r10, #12]
    42cc:	e92c0030 	stmdb	r12!, {r4, r5}
    42d0:	e15a000b 	cmp	r10, r11
    42d4:	e58dc008 	str	r12, [sp, #8]
    42d8:	1affffe4 	bne	4270 <__kernel_rem_pio2+0x828>
    42dc:	e59d4004 	ldr	r4, [sp, #4]
    42e0:	e3540001 	cmp	r4, #1
    42e4:	e59da014 	ldr	r10, [sp, #20]
    42e8:	daffffc1 	ble	41f4 <__kernel_rem_pio2+0x7ac>
    42ec:	e28bc008 	add	r12, r11, #8
    42f0:	e58dc008 	str	r12, [sp, #8]
    42f4:	e1a0c00a 	mov	r12, r10
    42f8:	e93a0300 	ldmdb	r10!, {r8, r9}
    42fc:	e28a7008 	add	r7, r10, #8
    4300:	e89700c0 	ldm	r7, {r6, r7}
    4304:	e1a00008 	mov	r0, r8
    4308:	e1a02006 	mov	r2, r6
    430c:	e1a03007 	mov	r3, r7
    4310:	e1a01009 	mov	r1, r9
    4314:	e58dc000 	str	r12, [sp]
    4318:	eb000239 	bl	4c04 <__adddf3>
    431c:	e1a04000 	mov	r4, r0
    4320:	e1a05001 	mov	r5, r1
    4324:	e1a02004 	mov	r2, r4
    4328:	e1a03005 	mov	r3, r5
    432c:	e1a00008 	mov	r0, r8
    4330:	e1a01009 	mov	r1, r9
    4334:	eb000231 	bl	4c00 <__aeabi_dsub>
    4338:	e1a02000 	mov	r2, r0
    433c:	e1a03001 	mov	r3, r1
    4340:	e1a00006 	mov	r0, r6
    4344:	e1a01007 	mov	r1, r7
    4348:	eb00022d 	bl	4c04 <__adddf3>
    434c:	e59de008 	ldr	lr, [sp, #8]
    4350:	e59dc000 	ldr	r12, [sp]
    4354:	e15a000e 	cmp	r10, lr
    4358:	e58a0008 	str	r0, [r10, #8]
    435c:	e58a100c 	str	r1, [r10, #12]
    4360:	e92c0030 	stmdb	r12!, {r4, r5}
    4364:	1affffe3 	bne	42f8 <__kernel_rem_pio2+0x8b0>
    4368:	e59d4004 	ldr	r4, [sp, #4]
    436c:	e3a0c000 	mov	r12, #0
    4370:	e2845001 	add	r5, r4, #1
    4374:	e08b5185 	add	r5, r11, r5, lsl #3
    4378:	e1a0400c 	mov	r4, r12
    437c:	e28bb010 	add	r11, r11, #16
    4380:	e1a0000c 	mov	r0, r12
    4384:	e1a01004 	mov	r1, r4
    4388:	e935000c 	ldmdb	r5!, {r2, r3}
    438c:	eb00021c 	bl	4c04 <__adddf3>
    4390:	e155000b 	cmp	r5, r11
    4394:	e1a0c000 	mov	r12, r0
    4398:	e1a04001 	mov	r4, r1
    439c:	1afffff7 	bne	4380 <__kernel_rem_pio2+0x938>
    43a0:	e59d000c 	ldr	r0, [sp, #12]
    43a4:	e3500000 	cmp	r0, #0
    43a8:	1affff96 	bne	4208 <__kernel_rem_pio2+0x7c0>
    43ac:	e1a03004 	mov	r3, r4
    43b0:	e28d1e12 	add	r1, sp, #288	; 0x120
    43b4:	e8910003 	ldm	r1, {r0, r1}
    43b8:	e59d401c 	ldr	r4, [sp, #28]
    43bc:	e8840003 	stm	r4, {r0, r1}
    43c0:	e28d1f4a 	add	r1, sp, #296	; 0x128
    43c4:	e8910003 	ldm	r1, {r0, r1}
    43c8:	e1a0200c 	mov	r2, r12
    43cc:	e5840008 	str	r0, [r4, #8]
    43d0:	e584100c 	str	r1, [r4, #12]
    43d4:	e5842010 	str	r2, [r4, #16]
    43d8:	e5843014 	str	r3, [r4, #20]
    43dc:	eaffff96 	b	423c <__kernel_rem_pio2+0x7f4>
    43e0:	e59dc004 	ldr	r12, [sp, #4]
    43e4:	e35c0000 	cmp	r12, #0
    43e8:	b3a0e000 	movlt	lr, #0
    43ec:	b1a0c00e 	movlt	r12, lr
    43f0:	ba00000d 	blt	442c <__kernel_rem_pio2+0x9e4>
    43f4:	e59dc004 	ldr	r12, [sp, #4]
    43f8:	e28d5e12 	add	r5, sp, #288	; 0x120
    43fc:	e28c4001 	add	r4, r12, #1
    4400:	e3a0e000 	mov	lr, #0
    4404:	e0854184 	add	r4, r5, r4, lsl #3
    4408:	e1a0c00e 	mov	r12, lr
    440c:	e1a0000e 	mov	r0, lr
    4410:	e1a0100c 	mov	r1, r12
    4414:	e934000c 	ldmdb	r4!, {r2, r3}
    4418:	eb0001f9 	bl	4c04 <__adddf3>
    441c:	e1540005 	cmp	r4, r5
    4420:	e1a0e000 	mov	lr, r0
    4424:	e1a0c001 	mov	r12, r1
    4428:	1afffff7 	bne	440c <__kernel_rem_pio2+0x9c4>
    442c:	e59d400c 	ldr	r4, [sp, #12]
    4430:	e3540000 	cmp	r4, #0
    4434:	128c3102 	addne	r3, r12, #-2147483648	; 0x80000000
    4438:	01a0300c 	moveq	r3, r12
    443c:	e1a01003 	mov	r1, r3
    4440:	e1a0300c 	mov	r3, r12
    4444:	e59dc01c 	ldr	r12, [sp, #28]
    4448:	e1a0000e 	mov	r0, lr
    444c:	e88c0003 	stm	r12, {r0, r1}
    4450:	e1a0200e 	mov	r2, lr
    4454:	e28d1e12 	add	r1, sp, #288	; 0x120
    4458:	e8910003 	ldm	r1, {r0, r1}
    445c:	eb0001e7 	bl	4c00 <__aeabi_dsub>
    4460:	e59d4004 	ldr	r4, [sp, #4]
    4464:	e3540000 	cmp	r4, #0
    4468:	e1a05000 	mov	r5, r0
    446c:	e1a0c001 	mov	r12, r1
    4470:	da00000a 	ble	44a0 <__kernel_rem_pio2+0xa58>
    4474:	e59de004 	ldr	lr, [sp, #4]
    4478:	e28d4f4a 	add	r4, sp, #296	; 0x128
    447c:	e084618e 	add	r6, r4, lr, lsl #3
    4480:	e1a00005 	mov	r0, r5
    4484:	e1a0100c 	mov	r1, r12
    4488:	e8b4000c 	ldm	r4!, {r2, r3}
    448c:	eb0001dc 	bl	4c04 <__adddf3>
    4490:	e1540006 	cmp	r4, r6
    4494:	e1a05000 	mov	r5, r0
    4498:	e1a0c001 	mov	r12, r1
    449c:	1afffff7 	bne	4480 <__kernel_rem_pio2+0xa38>
    44a0:	e59d400c 	ldr	r4, [sp, #12]
    44a4:	e3540000 	cmp	r4, #0
    44a8:	128cc102 	addne	r12, r12, #-2147483648	; 0x80000000
    44ac:	e1a0300c 	mov	r3, r12
    44b0:	e59dc01c 	ldr	r12, [sp, #28]
    44b4:	e1a02005 	mov	r2, r5
    44b8:	e58c2008 	str	r2, [r12, #8]
    44bc:	e58c300c 	str	r3, [r12, #12]
    44c0:	eaffff5d 	b	423c <__kernel_rem_pio2+0x7f4>
    44c4:	e59d4004 	ldr	r4, [sp, #4]
    44c8:	e3540000 	cmp	r4, #0
    44cc:	ba000038 	blt	45b4 <__kernel_rem_pio2+0xb6c>
    44d0:	e2846001 	add	r6, r4, #1
    44d4:	e28d5e12 	add	r5, sp, #288	; 0x120
    44d8:	e3a04000 	mov	r4, #0
    44dc:	e0856186 	add	r6, r5, r6, lsl #3
    44e0:	e1a0c004 	mov	r12, r4
    44e4:	e1a00004 	mov	r0, r4
    44e8:	e1a0100c 	mov	r1, r12
    44ec:	e936000c 	ldmdb	r6!, {r2, r3}
    44f0:	eb0001c3 	bl	4c04 <__adddf3>
    44f4:	e1560005 	cmp	r6, r5
    44f8:	e1a04000 	mov	r4, r0
    44fc:	e1a0c001 	mov	r12, r1
    4500:	1afffff7 	bne	44e4 <__kernel_rem_pio2+0xa9c>
    4504:	e59d000c 	ldr	r0, [sp, #12]
    4508:	e3500000 	cmp	r0, #0
    450c:	e1a02004 	mov	r2, r4
    4510:	128cc102 	addne	r12, r12, #-2147483648	; 0x80000000
    4514:	e59d401c 	ldr	r4, [sp, #28]
    4518:	e1a0300c 	mov	r3, r12
    451c:	e884000c 	stm	r4, {r2, r3}
    4520:	eaffff45 	b	423c <__kernel_rem_pio2+0x7f4>
    4524:	e1a03100 	lsl	r3, r0, #2
    4528:	e28dce26 	add	r12, sp, #608	; 0x260
    452c:	e08c2003 	add	r2, r12, r3
    4530:	e59d4018 	ldr	r4, [sp, #24]
    4534:	e5122230 	ldr	r2, [r2, #-560]	; 0xfffffdd0
    4538:	e2444018 	sub	r4, r4, #24
    453c:	e3520000 	cmp	r2, #0
    4540:	e58d8010 	str	r8, [sp, #16]
    4544:	e58d500c 	str	r5, [sp, #12]
    4548:	e58d4018 	str	r4, [sp, #24]
    454c:	1a000016 	bne	45ac <__kernel_rem_pio2+0xb64>
    4550:	e28dc030 	add	r12, sp, #48	; 0x30
    4554:	e58d0004 	str	r0, [sp, #4]
    4558:	e08c3003 	add	r3, r12, r3
    455c:	e1a02000 	mov	r2, r0
    4560:	e1a01004 	mov	r1, r4
    4564:	e5330004 	ldr	r0, [r3, #-4]!
    4568:	e3500000 	cmp	r0, #0
    456c:	e2422001 	sub	r2, r2, #1
    4570:	e2411018 	sub	r1, r1, #24
    4574:	0afffffa 	beq	4564 <__kernel_rem_pio2+0xb1c>
    4578:	e58d2004 	str	r2, [sp, #4]
    457c:	e58d1018 	str	r1, [sp, #24]
    4580:	eafffece 	b	40c0 <__kernel_rem_pio2+0x678>
    4584:	e3a03001 	mov	r3, #1
    4588:	eafffe2a 	b	3e38 <__kernel_rem_pio2+0x3f0>
    458c:	e1a00004 	mov	r0, r4
    4590:	e1a01005 	mov	r1, r5
    4594:	eb000416 	bl	55f4 <__aeabi_d2iz>
    4598:	e59dc004 	ldr	r12, [sp, #4]
    459c:	e28dee26 	add	lr, sp, #608	; 0x260
    45a0:	e08e310c 	add	r3, lr, r12, lsl #2
    45a4:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    45a8:	eafffec4 	b	40c0 <__kernel_rem_pio2+0x678>
    45ac:	e58d0004 	str	r0, [sp, #4]
    45b0:	eafffec2 	b	40c0 <__kernel_rem_pio2+0x678>
    45b4:	e3a04000 	mov	r4, #0
    45b8:	e1a0c004 	mov	r12, r4
    45bc:	eaffffd0 	b	4504 <__kernel_rem_pio2+0xabc>
    45c0:	2aaaaaab 	.word	0x2aaaaaab
    45c4:	00006cb0 	.word	0x00006cb0
    45c8:	3e700000 	.word	0x3e700000
    45cc:	41700000 	.word	0x41700000
    45d0:	40200000 	.word	0x40200000
    45d4:	3ff00000 	.word	0x3ff00000
    45d8:	3fe00000 	.word	0x3fe00000
    45dc:	00006cc0 	.word	0x00006cc0

000045e0 <__kernel_sin>:
    45e0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    45e4:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    45e8:	e35c05f9 	cmp	r12, #1044381696	; 0x3e400000
    45ec:	e24dd014 	sub	sp, sp, #20
    45f0:	e1a04000 	mov	r4, r0
    45f4:	e1a05001 	mov	r5, r1
    45f8:	e1a06000 	mov	r6, r0
    45fc:	e1a07001 	mov	r7, r1
    4600:	e1a08002 	mov	r8, r2
    4604:	e1a09003 	mov	r9, r3
    4608:	aa000002 	bge	4618 <__kernel_sin+0x38>
    460c:	eb0003f8 	bl	55f4 <__aeabi_d2iz>
    4610:	e3500000 	cmp	r0, #0
    4614:	0a000052 	beq	4764 <__kernel_sin+0x184>
    4618:	e1a02004 	mov	r2, r4
    461c:	e1a03005 	mov	r3, r5
    4620:	e1a00004 	mov	r0, r4
    4624:	e1a01005 	mov	r1, r5
    4628:	eb000279 	bl	5014 <__aeabi_dmul>
    462c:	e1a02004 	mov	r2, r4
    4630:	e1a03005 	mov	r3, r5
    4634:	e1a06000 	mov	r6, r0
    4638:	e1a07001 	mov	r7, r1
    463c:	eb000274 	bl	5014 <__aeabi_dmul>
    4640:	e28f3d06 	add	r3, pc, #384	; 0x180
    4644:	e893000c 	ldm	r3, {r2, r3}
    4648:	e1a0a000 	mov	r10, r0
    464c:	e1a0b001 	mov	r11, r1
    4650:	e1a00006 	mov	r0, r6
    4654:	e1a01007 	mov	r1, r7
    4658:	eb00026d 	bl	5014 <__aeabi_dmul>
    465c:	e28f3f5b 	add	r3, pc, #364	; 0x16c
    4660:	e893000c 	ldm	r3, {r2, r3}
    4664:	eb000165 	bl	4c00 <__aeabi_dsub>
    4668:	e1a02006 	mov	r2, r6
    466c:	e1a03007 	mov	r3, r7
    4670:	eb000267 	bl	5014 <__aeabi_dmul>
    4674:	e28f3f57 	add	r3, pc, #348	; 0x15c
    4678:	e893000c 	ldm	r3, {r2, r3}
    467c:	eb000160 	bl	4c04 <__adddf3>
    4680:	e1a02006 	mov	r2, r6
    4684:	e1a03007 	mov	r3, r7
    4688:	eb000261 	bl	5014 <__aeabi_dmul>
    468c:	e28f3f53 	add	r3, pc, #332	; 0x14c
    4690:	e893000c 	ldm	r3, {r2, r3}
    4694:	eb000159 	bl	4c00 <__aeabi_dsub>
    4698:	e1a02006 	mov	r2, r6
    469c:	e1a03007 	mov	r3, r7
    46a0:	eb00025b 	bl	5014 <__aeabi_dmul>
    46a4:	e28f3f4f 	add	r3, pc, #316	; 0x13c
    46a8:	e893000c 	ldm	r3, {r2, r3}
    46ac:	eb000154 	bl	4c04 <__adddf3>
    46b0:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    46b4:	e3530000 	cmp	r3, #0
    46b8:	e88d0003 	stm	sp, {r0, r1}
    46bc:	0a00002d 	beq	4778 <__kernel_sin+0x198>
    46c0:	e3a02000 	mov	r2, #0
    46c4:	e59f312c 	ldr	r3, [pc, #300]	; 47f8 <__kernel_sin+0x218>
    46c8:	e1a00008 	mov	r0, r8
    46cc:	e1a01009 	mov	r1, r9
    46d0:	eb00024f 	bl	5014 <__aeabi_dmul>
    46d4:	e89d000c 	ldm	sp, {r2, r3}
    46d8:	e58d0008 	str	r0, [sp, #8]
    46dc:	e58d100c 	str	r1, [sp, #12]
    46e0:	e1a0000a 	mov	r0, r10
    46e4:	e1a0100b 	mov	r1, r11
    46e8:	eb000249 	bl	5014 <__aeabi_dmul>
    46ec:	e1a02000 	mov	r2, r0
    46f0:	e1a03001 	mov	r3, r1
    46f4:	e28d1008 	add	r1, sp, #8
    46f8:	e8910003 	ldm	r1, {r0, r1}
    46fc:	eb00013f 	bl	4c00 <__aeabi_dsub>
    4700:	e1a02006 	mov	r2, r6
    4704:	e1a03007 	mov	r3, r7
    4708:	eb000241 	bl	5014 <__aeabi_dmul>
    470c:	e1a02008 	mov	r2, r8
    4710:	e1a03009 	mov	r3, r9
    4714:	eb000139 	bl	4c00 <__aeabi_dsub>
    4718:	e28f30d0 	add	r3, pc, #208	; 0xd0
    471c:	e893000c 	ldm	r3, {r2, r3}
    4720:	e1a06000 	mov	r6, r0
    4724:	e1a07001 	mov	r7, r1
    4728:	e1a0000a 	mov	r0, r10
    472c:	e1a0100b 	mov	r1, r11
    4730:	eb000237 	bl	5014 <__aeabi_dmul>
    4734:	e1a02000 	mov	r2, r0
    4738:	e1a03001 	mov	r3, r1
    473c:	e1a00006 	mov	r0, r6
    4740:	e1a01007 	mov	r1, r7
    4744:	eb00012e 	bl	4c04 <__adddf3>
    4748:	e1a02000 	mov	r2, r0
    474c:	e1a03001 	mov	r3, r1
    4750:	e1a00004 	mov	r0, r4
    4754:	e1a01005 	mov	r1, r5
    4758:	eb000128 	bl	4c00 <__aeabi_dsub>
    475c:	e1a04000 	mov	r4, r0
    4760:	e1a05001 	mov	r5, r1
    4764:	e1a00004 	mov	r0, r4
    4768:	e1a01005 	mov	r1, r5
    476c:	e28dd014 	add	sp, sp, #20
    4770:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    4774:	e12fff1e 	bx	lr
    4778:	e1a02000 	mov	r2, r0
    477c:	e1a03001 	mov	r3, r1
    4780:	e1a00006 	mov	r0, r6
    4784:	e1a01007 	mov	r1, r7
    4788:	eb000221 	bl	5014 <__aeabi_dmul>
    478c:	e28f305c 	add	r3, pc, #92	; 0x5c
    4790:	e893000c 	ldm	r3, {r2, r3}
    4794:	eb000119 	bl	4c00 <__aeabi_dsub>
    4798:	e1a0200a 	mov	r2, r10
    479c:	e1a0300b 	mov	r3, r11
    47a0:	eb00021b 	bl	5014 <__aeabi_dmul>
    47a4:	e1a02000 	mov	r2, r0
    47a8:	e1a03001 	mov	r3, r1
    47ac:	e1a00004 	mov	r0, r4
    47b0:	e1a01005 	mov	r1, r5
    47b4:	eb000112 	bl	4c04 <__adddf3>
    47b8:	e1a04000 	mov	r4, r0
    47bc:	e1a05001 	mov	r5, r1
    47c0:	eaffffe7 	b	4764 <__kernel_sin+0x184>
    47c4:	e1a00000 	nop			; (mov r0, r0)
    47c8:	5acfd57c 	.word	0x5acfd57c
    47cc:	3de5d93a 	.word	0x3de5d93a
    47d0:	8a2b9ceb 	.word	0x8a2b9ceb
    47d4:	3e5ae5e6 	.word	0x3e5ae5e6
    47d8:	57b1fe7d 	.word	0x57b1fe7d
    47dc:	3ec71de3 	.word	0x3ec71de3
    47e0:	19c161d5 	.word	0x19c161d5
    47e4:	3f2a01a0 	.word	0x3f2a01a0
    47e8:	1110f8a6 	.word	0x1110f8a6
    47ec:	3f811111 	.word	0x3f811111
    47f0:	55555549 	.word	0x55555549
    47f4:	3fc55555 	.word	0x3fc55555
    47f8:	3fe00000 	.word	0x3fe00000
    47fc:	e1a00000 	nop			; (mov r0, r0)

00004800 <fabs>:
    4800:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    4804:	e12fff1e 	bx	lr

00004808 <finite>:
    4808:	e3811102 	orr	r1, r1, #-2147483648	; 0x80000000
    480c:	e2810601 	add	r0, r1, #1048576	; 0x100000
    4810:	e1a00fa0 	lsr	r0, r0, #31
    4814:	e12fff1e 	bx	lr

00004818 <__fpclassifyd>:
    4818:	e1902001 	orrs	r2, r0, r1
    481c:	1a000001 	bne	4828 <__fpclassifyd+0x10>
    4820:	e3a00002 	mov	r0, #2
    4824:	e12fff1e 	bx	lr
    4828:	e2702001 	rsbs	r2, r0, #1
    482c:	33a02000 	movcc	r2, #0
    4830:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    4834:	03500000 	cmpeq	r0, #0
    4838:	0afffff8 	beq	4820 <__fpclassifyd+0x8>
    483c:	e3c13102 	bic	r3, r1, #-2147483648	; 0x80000000
    4840:	e59f1034 	ldr	r1, [pc, #52]	; 487c <__fpclassifyd+0x64>
    4844:	e2430601 	sub	r0, r3, #1048576	; 0x100000
    4848:	e1500001 	cmp	r0, r1
    484c:	8a000001 	bhi	4858 <__fpclassifyd+0x40>
    4850:	e3a00004 	mov	r0, #4
    4854:	e12fff1e 	bx	lr
    4858:	e3530601 	cmp	r3, #1048576	; 0x100000
    485c:	2a000001 	bcs	4868 <__fpclassifyd+0x50>
    4860:	e3a00003 	mov	r0, #3
    4864:	e12fff1e 	bx	lr
    4868:	e59f0010 	ldr	r0, [pc, #16]	; 4880 <__fpclassifyd+0x68>
    486c:	e1530000 	cmp	r3, r0
    4870:	13a00000 	movne	r0, #0
    4874:	02020001 	andeq	r0, r2, #1
    4878:	e12fff1e 	bx	lr
    487c:	7fdfffff 	.word	0x7fdfffff
    4880:	7ff00000 	.word	0x7ff00000

00004884 <matherr>:
    4884:	e3a00000 	mov	r0, #0
    4888:	e12fff1e 	bx	lr

0000488c <nan>:
    488c:	e3a00000 	mov	r0, #0
    4890:	e59f1000 	ldr	r1, [pc]	; 4898 <nan+0xc>
    4894:	e12fff1e 	bx	lr
    4898:	7ff80000 	.word	0x7ff80000

0000489c <rint>:
    489c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    48a0:	e1a07081 	lsl	r7, r1, #1
    48a4:	e1a07aa7 	lsr	r7, r7, #21
    48a8:	e247cfff 	sub	r12, r7, #1020	; 0x3fc
    48ac:	e24cc003 	sub	r12, r12, #3
    48b0:	e35c0013 	cmp	r12, #19
    48b4:	e24dd00c 	sub	sp, sp, #12
    48b8:	e1a02000 	mov	r2, r0
    48bc:	e1a03001 	mov	r3, r1
    48c0:	e1a04000 	mov	r4, r0
    48c4:	e1a05001 	mov	r5, r1
    48c8:	e1a06001 	mov	r6, r1
    48cc:	e1a08fa1 	lsr	r8, r1, #31
    48d0:	ca000026 	bgt	4970 <rint+0xd4>
    48d4:	e35c0000 	cmp	r12, #0
    48d8:	ba000038 	blt	49c0 <rint+0x124>
    48dc:	e59f1150 	ldr	r1, [pc, #336]	; 4a34 <rint+0x198>
    48e0:	e1a01c51 	asr	r1, r1, r12
    48e4:	e0010003 	and	r0, r1, r3
    48e8:	e1900002 	orrs	r0, r0, r2
    48ec:	0a00001a 	beq	495c <rint+0xc0>
    48f0:	e1a010a1 	lsr	r1, r1, #1
    48f4:	e0013003 	and	r3, r1, r3
    48f8:	e1934002 	orrs	r4, r3, r2
    48fc:	0a000005 	beq	4918 <rint+0x7c>
    4900:	e1c51001 	bic	r1, r5, r1
    4904:	e3a05701 	mov	r5, #262144	; 0x40000
    4908:	e1815c55 	orr	r5, r1, r5, asr r12
    490c:	e35c0013 	cmp	r12, #19
    4910:	03a04102 	moveq	r4, #-2147483648	; 0x80000000
    4914:	13a04000 	movne	r4, #0
    4918:	e59f3118 	ldr	r3, [pc, #280]	; 4a38 <rint+0x19c>
    491c:	e0838188 	add	r8, r3, r8, lsl #3
    4920:	e8980300 	ldm	r8, {r8, r9}
    4924:	e1a02004 	mov	r2, r4
    4928:	e1a03005 	mov	r3, r5
    492c:	e1a00008 	mov	r0, r8
    4930:	e1a01009 	mov	r1, r9
    4934:	eb0000b2 	bl	4c04 <__adddf3>
    4938:	e88d0003 	stm	sp, {r0, r1}
    493c:	e1a02008 	mov	r2, r8
    4940:	e1a03009 	mov	r3, r9
    4944:	e89d0003 	ldm	sp, {r0, r1}
    4948:	eb0000ac 	bl	4c00 <__aeabi_dsub>
    494c:	e1a07005 	mov	r7, r5
    4950:	e1a06004 	mov	r6, r4
    4954:	e1a02000 	mov	r2, r0
    4958:	e1a03001 	mov	r3, r1
    495c:	e1a00002 	mov	r0, r2
    4960:	e1a01003 	mov	r1, r3
    4964:	e28dd00c 	add	sp, sp, #12
    4968:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
    496c:	e12fff1e 	bx	lr
    4970:	e35c0033 	cmp	r12, #51	; 0x33
    4974:	da000005 	ble	4990 <rint+0xf4>
    4978:	e35c0b01 	cmp	r12, #1024	; 0x400
    497c:	1afffff6 	bne	495c <rint+0xc0>
    4980:	eb00009f 	bl	4c04 <__adddf3>
    4984:	e1a02000 	mov	r2, r0
    4988:	e1a03001 	mov	r3, r1
    498c:	eafffff2 	b	495c <rint+0xc0>
    4990:	e2477e41 	sub	r7, r7, #1040	; 0x410
    4994:	e2477003 	sub	r7, r7, #3
    4998:	e3e01000 	mvn	r1, #0
    499c:	e1a01731 	lsr	r1, r1, r7
    49a0:	e1110000 	tst	r1, r0
    49a4:	0affffec 	beq	495c <rint+0xc0>
    49a8:	e1a010a1 	lsr	r1, r1, #1
    49ac:	e1110000 	tst	r1, r0
    49b0:	11c04001 	bicne	r4, r0, r1
    49b4:	13a03101 	movne	r3, #1073741824	; 0x40000000
    49b8:	11844753 	orrne	r4, r4, r3, asr r7
    49bc:	eaffffd5 	b	4918 <rint+0x7c>
    49c0:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    49c4:	e1911000 	orrs	r1, r1, r0
    49c8:	0affffe3 	beq	495c <rint+0xc0>
    49cc:	e3c314ff 	bic	r1, r3, #-16777216	; 0xff000000
    49d0:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    49d4:	e1814000 	orr	r4, r1, r0
    49d8:	e59f0058 	ldr	r0, [pc, #88]	; 4a38 <rint+0x19c>
    49dc:	e2641000 	rsb	r1, r4, #0
    49e0:	e1814004 	orr	r4, r1, r4
    49e4:	e0800188 	add	r0, r0, r8, lsl #3
    49e8:	e1a01624 	lsr	r1, r4, #12
    49ec:	e8900030 	ldm	r0, {r4, r5}
    49f0:	e2011702 	and	r1, r1, #524288	; 0x80000
    49f4:	e1a068a3 	lsr	r6, r3, #17
    49f8:	e1813886 	orr	r3, r1, r6, lsl #17
    49fc:	e1a00004 	mov	r0, r4
    4a00:	e1a01005 	mov	r1, r5
    4a04:	eb00007e 	bl	4c04 <__adddf3>
    4a08:	e88d0003 	stm	sp, {r0, r1}
    4a0c:	e1a02004 	mov	r2, r4
    4a10:	e1a03005 	mov	r3, r5
    4a14:	e89d0003 	ldm	sp, {r0, r1}
    4a18:	eb000078 	bl	4c00 <__aeabi_dsub>
    4a1c:	e1a05001 	mov	r5, r1
    4a20:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    4a24:	e1a04000 	mov	r4, r0
    4a28:	e1a02000 	mov	r2, r0
    4a2c:	e1813f88 	orr	r3, r1, r8, lsl #31
    4a30:	eaffffc9 	b	495c <rint+0xc0>
    4a34:	000fffff 	.word	0x000fffff
    4a38:	00006d00 	.word	0x00006d00
    4a3c:	00000000 	.word	0x00000000

00004a40 <scalbn>:
    4a40:	e59f3170 	ldr	r3, [pc, #368]	; 4bb8 <scalbn+0x178>
    4a44:	e0013003 	and	r3, r1, r3
    4a48:	e1b03a43 	asrs	r3, r3, #20
    4a4c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    4a50:	e1a04000 	mov	r4, r0
    4a54:	e1a05001 	mov	r5, r1
    4a58:	e1a06000 	mov	r6, r0
    4a5c:	e1a07001 	mov	r7, r1
    4a60:	e1a08002 	mov	r8, r2
    4a64:	1a000011 	bne	4ab0 <scalbn+0x70>
    4a68:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    4a6c:	e19cc000 	orrs	r12, r12, r0
    4a70:	0a00001d 	beq	4aec <scalbn+0xac>
    4a74:	e59f3140 	ldr	r3, [pc, #320]	; 4bbc <scalbn+0x17c>
    4a78:	e3a02000 	mov	r2, #0
    4a7c:	eb000164 	bl	5014 <__aeabi_dmul>
    4a80:	e59f3138 	ldr	r3, [pc, #312]	; 4bc0 <scalbn+0x180>
    4a84:	e1580003 	cmp	r8, r3
    4a88:	e1a04000 	mov	r4, r0
    4a8c:	e1a05001 	mov	r5, r1
    4a90:	e1a06000 	mov	r6, r0
    4a94:	e1a07001 	mov	r7, r1
    4a98:	ba000021 	blt	4b24 <scalbn+0xe4>
    4a9c:	e59f3114 	ldr	r3, [pc, #276]	; 4bb8 <scalbn+0x178>
    4aa0:	e0013003 	and	r3, r1, r3
    4aa4:	e1a03a43 	asr	r3, r3, #20
    4aa8:	e2433036 	sub	r3, r3, #54	; 0x36
    4aac:	ea000003 	b	4ac0 <scalbn+0x80>
    4ab0:	e59f210c 	ldr	r2, [pc, #268]	; 4bc4 <scalbn+0x184>
    4ab4:	e1530002 	cmp	r3, r2
    4ab8:	11a01001 	movne	r1, r1
    4abc:	0a000027 	beq	4b60 <scalbn+0x120>
    4ac0:	e59f2100 	ldr	r2, [pc, #256]	; 4bc8 <scalbn+0x188>
    4ac4:	e0833008 	add	r3, r3, r8
    4ac8:	e1530002 	cmp	r3, r2
    4acc:	c1a02004 	movgt	r2, r4
    4ad0:	c1a03005 	movgt	r3, r5
    4ad4:	ca000018 	bgt	4b3c <scalbn+0xfc>
    4ad8:	e3530000 	cmp	r3, #0
    4adc:	da000006 	ble	4afc <scalbn+0xbc>
    4ae0:	e3c1147f 	bic	r1, r1, #2130706432	; 0x7f000000
    4ae4:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    4ae8:	e1815a03 	orr	r5, r1, r3, lsl #20
    4aec:	e1a00004 	mov	r0, r4
    4af0:	e1a01005 	mov	r1, r5
    4af4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    4af8:	e12fff1e 	bx	lr
    4afc:	e3730035 	cmn	r3, #53	; 0x35
    4b00:	aa00001c 	bge	4b78 <scalbn+0x138>
    4b04:	e59f30c0 	ldr	r3, [pc, #192]	; 4bcc <scalbn+0x18c>
    4b08:	e1580003 	cmp	r8, r3
    4b0c:	e1a02004 	mov	r2, r4
    4b10:	e1a03005 	mov	r3, r5
    4b14:	ca000008 	bgt	4b3c <scalbn+0xfc>
    4b18:	e28f1088 	add	r1, pc, #136	; 0x88
    4b1c:	e8910003 	ldm	r1, {r0, r1}
    4b20:	eb00002c 	bl	4bd8 <copysign>
    4b24:	e28f307c 	add	r3, pc, #124	; 0x7c
    4b28:	e893000c 	ldm	r3, {r2, r3}
    4b2c:	eb000138 	bl	5014 <__aeabi_dmul>
    4b30:	e1a04000 	mov	r4, r0
    4b34:	e1a05001 	mov	r5, r1
    4b38:	eaffffeb 	b	4aec <scalbn+0xac>
    4b3c:	e28f106c 	add	r1, pc, #108	; 0x6c
    4b40:	e8910003 	ldm	r1, {r0, r1}
    4b44:	eb000023 	bl	4bd8 <copysign>
    4b48:	e28f3060 	add	r3, pc, #96	; 0x60
    4b4c:	e893000c 	ldm	r3, {r2, r3}
    4b50:	eb00012f 	bl	5014 <__aeabi_dmul>
    4b54:	e1a04000 	mov	r4, r0
    4b58:	e1a05001 	mov	r5, r1
    4b5c:	eaffffe2 	b	4aec <scalbn+0xac>
    4b60:	e1a03005 	mov	r3, r5
    4b64:	e1a02000 	mov	r2, r0
    4b68:	eb000025 	bl	4c04 <__adddf3>
    4b6c:	e1a04000 	mov	r4, r0
    4b70:	e1a05001 	mov	r5, r1
    4b74:	eaffffdc 	b	4aec <scalbn+0xac>
    4b78:	e3c1147f 	bic	r1, r1, #2130706432	; 0x7f000000
    4b7c:	e2833036 	add	r3, r3, #54	; 0x36
    4b80:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    4b84:	e1815a03 	orr	r5, r1, r3, lsl #20
    4b88:	e1a00004 	mov	r0, r4
    4b8c:	e1a01005 	mov	r1, r5
    4b90:	e3a02000 	mov	r2, #0
    4b94:	e59f3034 	ldr	r3, [pc, #52]	; 4bd0 <scalbn+0x190>
    4b98:	eb00011d 	bl	5014 <__aeabi_dmul>
    4b9c:	e1a04000 	mov	r4, r0
    4ba0:	e1a05001 	mov	r5, r1
    4ba4:	eaffffd0 	b	4aec <scalbn+0xac>
    4ba8:	c2f8f359 	.word	0xc2f8f359
    4bac:	01a56e1f 	.word	0x01a56e1f
    4bb0:	8800759c 	.word	0x8800759c
    4bb4:	7e37e43c 	.word	0x7e37e43c
    4bb8:	7ff00000 	.word	0x7ff00000
    4bbc:	43500000 	.word	0x43500000
    4bc0:	ffff3cb0 	.word	0xffff3cb0
    4bc4:	000007ff 	.word	0x000007ff
    4bc8:	000007fe 	.word	0x000007fe
    4bcc:	0000c350 	.word	0x0000c350
    4bd0:	3c900000 	.word	0x3c900000
    4bd4:	e1a00000 	nop			; (mov r0, r0)

00004bd8 <copysign>:
    4bd8:	e2033102 	and	r3, r3, #-2147483648	; 0x80000000
    4bdc:	e3c12102 	bic	r2, r1, #-2147483648	; 0x80000000
    4be0:	e92d0030 	push	{r4, r5}
    4be4:	e1a05001 	mov	r5, r1
    4be8:	e1a04000 	mov	r4, r0
    4bec:	e1831002 	orr	r1, r3, r2
    4bf0:	e8bd0030 	pop	{r4, r5}
    4bf4:	e12fff1e 	bx	lr

00004bf8 <__aeabi_drsub>:
    4bf8:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    4bfc:	ea000000 	b	4c04 <__adddf3>

00004c00 <__aeabi_dsub>:
    4c00:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00004c04 <__adddf3>:
    4c04:	e92d4030 	push	{r4, r5, lr}
    4c08:	e1a04081 	lsl	r4, r1, #1
    4c0c:	e1a05083 	lsl	r5, r3, #1
    4c10:	e1340005 	teq	r4, r5
    4c14:	01300002 	teqeq	r0, r2
    4c18:	1194c000 	orrsne	r12, r4, r0
    4c1c:	1195c002 	orrsne	r12, r5, r2
    4c20:	11f0cac4 	mvnsne	r12, r4, asr #21
    4c24:	11f0cac5 	mvnsne	r12, r5, asr #21
    4c28:	0a00008c 	beq	4e60 <__adddf3+0x25c>
    4c2c:	e1a04aa4 	lsr	r4, r4, #21
    4c30:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    4c34:	b2655000 	rsblt	r5, r5, #0
    4c38:	da000006 	ble	4c58 <__adddf3+0x54>
    4c3c:	e0844005 	add	r4, r4, r5
    4c40:	e0202002 	eor	r2, r0, r2
    4c44:	e0213003 	eor	r3, r1, r3
    4c48:	e0220000 	eor	r0, r2, r0
    4c4c:	e0231001 	eor	r1, r3, r1
    4c50:	e0202002 	eor	r2, r0, r2
    4c54:	e0213003 	eor	r3, r1, r3
    4c58:	e3550036 	cmp	r5, #54	; 0x36
    4c5c:	88bd4030 	pophi	{r4, r5, lr}
    4c60:	812fff1e 	bxhi	lr
    4c64:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    4c68:	e1a01601 	lsl	r1, r1, #12
    4c6c:	e3a0c601 	mov	r12, #1048576	; 0x100000
    4c70:	e18c1621 	orr	r1, r12, r1, lsr #12
    4c74:	0a000001 	beq	4c80 <__adddf3+0x7c>
    4c78:	e2700000 	rsbs	r0, r0, #0
    4c7c:	e2e11000 	rsc	r1, r1, #0
    4c80:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    4c84:	e1a03603 	lsl	r3, r3, #12
    4c88:	e18c3623 	orr	r3, r12, r3, lsr #12
    4c8c:	0a000001 	beq	4c98 <__adddf3+0x94>
    4c90:	e2722000 	rsbs	r2, r2, #0
    4c94:	e2e33000 	rsc	r3, r3, #0
    4c98:	e1340005 	teq	r4, r5
    4c9c:	0a000069 	beq	4e48 <__adddf3+0x244>
    4ca0:	e2444001 	sub	r4, r4, #1
    4ca4:	e275e020 	rsbs	lr, r5, #32
    4ca8:	ba000005 	blt	4cc4 <__adddf3+0xc0>
    4cac:	e1a0ce12 	lsl	r12, r2, lr
    4cb0:	e0900532 	adds	r0, r0, r2, lsr r5
    4cb4:	e2a11000 	adc	r1, r1, #0
    4cb8:	e0900e13 	adds	r0, r0, r3, lsl lr
    4cbc:	e0b11553 	adcs	r1, r1, r3, asr r5
    4cc0:	ea000006 	b	4ce0 <__adddf3+0xdc>
    4cc4:	e2455020 	sub	r5, r5, #32
    4cc8:	e28ee020 	add	lr, lr, #32
    4ccc:	e3520001 	cmp	r2, #1
    4cd0:	e1a0ce13 	lsl	r12, r3, lr
    4cd4:	238cc002 	orrcs	r12, r12, #2
    4cd8:	e0900553 	adds	r0, r0, r3, asr r5
    4cdc:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    4ce0:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    4ce4:	5a000002 	bpl	4cf4 <__adddf3+0xf0>
    4ce8:	e27cc000 	rsbs	r12, r12, #0
    4cec:	e2f00000 	rscs	r0, r0, #0
    4cf0:	e2e11000 	rsc	r1, r1, #0
    4cf4:	e3510601 	cmp	r1, #1048576	; 0x100000
    4cf8:	3a00000f 	bcc	4d3c <__adddf3+0x138>
    4cfc:	e3510602 	cmp	r1, #2097152	; 0x200000
    4d00:	3a000006 	bcc	4d20 <__adddf3+0x11c>
    4d04:	e1b010a1 	lsrs	r1, r1, #1
    4d08:	e1b00060 	rrxs	r0, r0
    4d0c:	e1a0c06c 	rrx	r12, r12
    4d10:	e2844001 	add	r4, r4, #1
    4d14:	e1a02a84 	lsl	r2, r4, #21
    4d18:	e3720501 	cmn	r2, #4194304	; 0x400000
    4d1c:	2a00006b 	bcs	4ed0 <__adddf3+0x2cc>
    4d20:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    4d24:	01b0c0a0 	lsrseq	r12, r0, #1
    4d28:	e2b00000 	adcs	r0, r0, #0
    4d2c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    4d30:	e1811005 	orr	r1, r1, r5
    4d34:	e8bd4030 	pop	{r4, r5, lr}
    4d38:	e12fff1e 	bx	lr
    4d3c:	e1b0c08c 	lsls	r12, r12, #1
    4d40:	e0b00000 	adcs	r0, r0, r0
    4d44:	e0a11001 	adc	r1, r1, r1
    4d48:	e3110601 	tst	r1, #1048576	; 0x100000
    4d4c:	e2444001 	sub	r4, r4, #1
    4d50:	1afffff2 	bne	4d20 <__adddf3+0x11c>
    4d54:	e3310000 	teq	r1, #0
    4d58:	13a03014 	movne	r3, #20
    4d5c:	03a03034 	moveq	r3, #52	; 0x34
    4d60:	01a01000 	moveq	r1, r0
    4d64:	03a00000 	moveq	r0, #0
    4d68:	e1a02001 	mov	r2, r1
    4d6c:	e3520801 	cmp	r2, #65536	; 0x10000
    4d70:	21a02822 	lsrcs	r2, r2, #16
    4d74:	22433010 	subcs	r3, r3, #16
    4d78:	e3520c01 	cmp	r2, #256	; 0x100
    4d7c:	21a02422 	lsrcs	r2, r2, #8
    4d80:	22433008 	subcs	r3, r3, #8
    4d84:	e3520010 	cmp	r2, #16
    4d88:	21a02222 	lsrcs	r2, r2, #4
    4d8c:	22433004 	subcs	r3, r3, #4
    4d90:	e3520004 	cmp	r2, #4
    4d94:	22433002 	subcs	r3, r3, #2
    4d98:	304330a2 	subcc	r3, r3, r2, lsr #1
    4d9c:	e04331a2 	sub	r3, r3, r2, lsr #3
    4da0:	e2532020 	subs	r2, r3, #32
    4da4:	aa000007 	bge	4dc8 <__adddf3+0x1c4>
    4da8:	e292200c 	adds	r2, r2, #12
    4dac:	da000004 	ble	4dc4 <__adddf3+0x1c0>
    4db0:	e282c014 	add	r12, r2, #20
    4db4:	e262200c 	rsb	r2, r2, #12
    4db8:	e1a00c11 	lsl	r0, r1, r12
    4dbc:	e1a01231 	lsr	r1, r1, r2
    4dc0:	ea000004 	b	4dd8 <__adddf3+0x1d4>
    4dc4:	e2822014 	add	r2, r2, #20
    4dc8:	d262c020 	rsble	r12, r2, #32
    4dcc:	e1a01211 	lsl	r1, r1, r2
    4dd0:	d1811c30 	orrle	r1, r1, r0, lsr r12
    4dd4:	d1a00210 	lslle	r0, r0, r2
    4dd8:	e0544003 	subs	r4, r4, r3
    4ddc:	a0811a04 	addge	r1, r1, r4, lsl #20
    4de0:	a1811005 	orrge	r1, r1, r5
    4de4:	a8bd4030 	popge	{r4, r5, lr}
    4de8:	a12fff1e 	bxge	lr
    4dec:	e1e04004 	mvn	r4, r4
    4df0:	e254401f 	subs	r4, r4, #31
    4df4:	aa00000f 	bge	4e38 <__adddf3+0x234>
    4df8:	e294400c 	adds	r4, r4, #12
    4dfc:	ca000006 	bgt	4e1c <__adddf3+0x218>
    4e00:	e2844014 	add	r4, r4, #20
    4e04:	e2642020 	rsb	r2, r4, #32
    4e08:	e1a00430 	lsr	r0, r0, r4
    4e0c:	e1800211 	orr	r0, r0, r1, lsl r2
    4e10:	e1851431 	orr	r1, r5, r1, lsr r4
    4e14:	e8bd4030 	pop	{r4, r5, lr}
    4e18:	e12fff1e 	bx	lr
    4e1c:	e264400c 	rsb	r4, r4, #12
    4e20:	e2642020 	rsb	r2, r4, #32
    4e24:	e1a00230 	lsr	r0, r0, r2
    4e28:	e1800411 	orr	r0, r0, r1, lsl r4
    4e2c:	e1a01005 	mov	r1, r5
    4e30:	e8bd4030 	pop	{r4, r5, lr}
    4e34:	e12fff1e 	bx	lr
    4e38:	e1a00431 	lsr	r0, r1, r4
    4e3c:	e1a01005 	mov	r1, r5
    4e40:	e8bd4030 	pop	{r4, r5, lr}
    4e44:	e12fff1e 	bx	lr
    4e48:	e3340000 	teq	r4, #0
    4e4c:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    4e50:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    4e54:	02844001 	addeq	r4, r4, #1
    4e58:	12455001 	subne	r5, r5, #1
    4e5c:	eaffff8f 	b	4ca0 <__adddf3+0x9c>
    4e60:	e1f0cac4 	mvns	r12, r4, asr #21
    4e64:	11f0cac5 	mvnsne	r12, r5, asr #21
    4e68:	0a00001d 	beq	4ee4 <__adddf3+0x2e0>
    4e6c:	e1340005 	teq	r4, r5
    4e70:	01300002 	teqeq	r0, r2
    4e74:	0a000004 	beq	4e8c <__adddf3+0x288>
    4e78:	e194c000 	orrs	r12, r4, r0
    4e7c:	01a01003 	moveq	r1, r3
    4e80:	01a00002 	moveq	r0, r2
    4e84:	e8bd4030 	pop	{r4, r5, lr}
    4e88:	e12fff1e 	bx	lr
    4e8c:	e1310003 	teq	r1, r3
    4e90:	13a01000 	movne	r1, #0
    4e94:	13a00000 	movne	r0, #0
    4e98:	18bd4030 	popne	{r4, r5, lr}
    4e9c:	112fff1e 	bxne	lr
    4ea0:	e1b0caa4 	lsrs	r12, r4, #21
    4ea4:	1a000004 	bne	4ebc <__adddf3+0x2b8>
    4ea8:	e1b00080 	lsls	r0, r0, #1
    4eac:	e0b11001 	adcs	r1, r1, r1
    4eb0:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    4eb4:	e8bd4030 	pop	{r4, r5, lr}
    4eb8:	e12fff1e 	bx	lr
    4ebc:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    4ec0:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    4ec4:	38bd4030 	popcc	{r4, r5, lr}
    4ec8:	312fff1e 	bxcc	lr
    4ecc:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    4ed0:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    4ed4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    4ed8:	e3a00000 	mov	r0, #0
    4edc:	e8bd4030 	pop	{r4, r5, lr}
    4ee0:	e12fff1e 	bx	lr
    4ee4:	e1f0cac4 	mvns	r12, r4, asr #21
    4ee8:	11a01003 	movne	r1, r3
    4eec:	11a00002 	movne	r0, r2
    4ef0:	01f0cac5 	mvnseq	r12, r5, asr #21
    4ef4:	11a03001 	movne	r3, r1
    4ef8:	11a02000 	movne	r2, r0
    4efc:	e1904601 	orrs	r4, r0, r1, lsl #12
    4f00:	01925603 	orrseq	r5, r2, r3, lsl #12
    4f04:	01310003 	teqeq	r1, r3
    4f08:	13811702 	orrne	r1, r1, #524288	; 0x80000
    4f0c:	e8bd4030 	pop	{r4, r5, lr}
    4f10:	e12fff1e 	bx	lr

00004f14 <__aeabi_ui2d>:
    4f14:	e3300000 	teq	r0, #0
    4f18:	03a01000 	moveq	r1, #0
    4f1c:	012fff1e 	bxeq	lr
    4f20:	e92d4030 	push	{r4, r5, lr}
    4f24:	e3a04b01 	mov	r4, #1024	; 0x400
    4f28:	e2844032 	add	r4, r4, #50	; 0x32
    4f2c:	e3a05000 	mov	r5, #0
    4f30:	e3a01000 	mov	r1, #0
    4f34:	eaffff86 	b	4d54 <__adddf3+0x150>

00004f38 <__aeabi_i2d>:
    4f38:	e3300000 	teq	r0, #0
    4f3c:	03a01000 	moveq	r1, #0
    4f40:	012fff1e 	bxeq	lr
    4f44:	e92d4030 	push	{r4, r5, lr}
    4f48:	e3a04b01 	mov	r4, #1024	; 0x400
    4f4c:	e2844032 	add	r4, r4, #50	; 0x32
    4f50:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    4f54:	42600000 	rsbmi	r0, r0, #0
    4f58:	e3a01000 	mov	r1, #0
    4f5c:	eaffff7c 	b	4d54 <__adddf3+0x150>

00004f60 <__aeabi_f2d>:
    4f60:	e1b02080 	lsls	r2, r0, #1
    4f64:	e1a011c2 	asr	r1, r2, #3
    4f68:	e1a01061 	rrx	r1, r1
    4f6c:	e1a00e02 	lsl	r0, r2, #28
    4f70:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    4f74:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    4f78:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    4f7c:	112fff1e 	bxne	lr
    4f80:	e3320000 	teq	r2, #0
    4f84:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    4f88:	012fff1e 	bxeq	lr
    4f8c:	e92d4030 	push	{r4, r5, lr}
    4f90:	e3a04d0e 	mov	r4, #896	; 0x380
    4f94:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    4f98:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    4f9c:	eaffff6c 	b	4d54 <__adddf3+0x150>

00004fa0 <__aeabi_ul2d>:
    4fa0:	e1902001 	orrs	r2, r0, r1
    4fa4:	012fff1e 	bxeq	lr
    4fa8:	e92d4030 	push	{r4, r5, lr}
    4fac:	e3a05000 	mov	r5, #0
    4fb0:	ea000006 	b	4fd0 <__aeabi_l2d+0x1c>

00004fb4 <__aeabi_l2d>:
    4fb4:	e1902001 	orrs	r2, r0, r1
    4fb8:	012fff1e 	bxeq	lr
    4fbc:	e92d4030 	push	{r4, r5, lr}
    4fc0:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    4fc4:	5a000001 	bpl	4fd0 <__aeabi_l2d+0x1c>
    4fc8:	e2700000 	rsbs	r0, r0, #0
    4fcc:	e2e11000 	rsc	r1, r1, #0
    4fd0:	e3a04b01 	mov	r4, #1024	; 0x400
    4fd4:	e2844032 	add	r4, r4, #50	; 0x32
    4fd8:	e1b0cb21 	lsrs	r12, r1, #22
    4fdc:	0affff44 	beq	4cf4 <__adddf3+0xf0>
    4fe0:	e3a02003 	mov	r2, #3
    4fe4:	e1b0c1ac 	lsrs	r12, r12, #3
    4fe8:	12822003 	addne	r2, r2, #3
    4fec:	e1b0c1ac 	lsrs	r12, r12, #3
    4ff0:	12822003 	addne	r2, r2, #3
    4ff4:	e08221ac 	add	r2, r2, r12, lsr #3
    4ff8:	e2623020 	rsb	r3, r2, #32
    4ffc:	e1a0c310 	lsl	r12, r0, r3
    5000:	e1a00230 	lsr	r0, r0, r2
    5004:	e1800311 	orr	r0, r0, r1, lsl r3
    5008:	e1a01231 	lsr	r1, r1, r2
    500c:	e0844002 	add	r4, r4, r2
    5010:	eaffff37 	b	4cf4 <__adddf3+0xf0>

00005014 <__aeabi_dmul>:
    5014:	e92d4070 	push	{r4, r5, r6, lr}
    5018:	e3a0c0ff 	mov	r12, #255	; 0xff
    501c:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    5020:	e01c4a21 	ands	r4, r12, r1, lsr #20
    5024:	101c5a23 	andsne	r5, r12, r3, lsr #20
    5028:	1134000c 	teqne	r4, r12
    502c:	1135000c 	teqne	r5, r12
    5030:	0b000075 	bleq	520c <__aeabi_dmul+0x1f8>
    5034:	e0844005 	add	r4, r4, r5
    5038:	e0216003 	eor	r6, r1, r3
    503c:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    5040:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    5044:	e1905601 	orrs	r5, r0, r1, lsl #12
    5048:	11925603 	orrsne	r5, r2, r3, lsl #12
    504c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    5050:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    5054:	0a00001d 	beq	50d0 <__aeabi_dmul+0xbc>
    5058:	e08ec290 	umull	r12, lr, r0, r2
    505c:	e3a05000 	mov	r5, #0
    5060:	e0a5e291 	umlal	lr, r5, r1, r2
    5064:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    5068:	e0a5e390 	umlal	lr, r5, r0, r3
    506c:	e3a06000 	mov	r6, #0
    5070:	e0a65391 	umlal	r5, r6, r1, r3
    5074:	e33c0000 	teq	r12, #0
    5078:	138ee001 	orrne	lr, lr, #1
    507c:	e24440ff 	sub	r4, r4, #255	; 0xff
    5080:	e3560c02 	cmp	r6, #512	; 0x200
    5084:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    5088:	2a000002 	bcs	5098 <__aeabi_dmul+0x84>
    508c:	e1b0e08e 	lsls	lr, lr, #1
    5090:	e0b55005 	adcs	r5, r5, r5
    5094:	e0a66006 	adc	r6, r6, r6
    5098:	e1821586 	orr	r1, r2, r6, lsl #11
    509c:	e1811aa5 	orr	r1, r1, r5, lsr #21
    50a0:	e1a00585 	lsl	r0, r5, #11
    50a4:	e1800aae 	orr	r0, r0, lr, lsr #21
    50a8:	e1a0e58e 	lsl	lr, lr, #11
    50ac:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    50b0:	835c0c07 	cmphi	r12, #1792	; 0x700
    50b4:	8a000011 	bhi	5100 <__aeabi_dmul+0xec>
    50b8:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    50bc:	01b0e0a0 	lsrseq	lr, r0, #1
    50c0:	e2b00000 	adcs	r0, r0, #0
    50c4:	e0a11a04 	adc	r1, r1, r4, lsl #20
    50c8:	e8bd4070 	pop	{r4, r5, r6, lr}
    50cc:	e12fff1e 	bx	lr
    50d0:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    50d4:	e1861001 	orr	r1, r6, r1
    50d8:	e1800002 	orr	r0, r0, r2
    50dc:	e0211003 	eor	r1, r1, r3
    50e0:	e05440ac 	subs	r4, r4, r12, lsr #1
    50e4:	c074500c 	rsbsgt	r5, r4, r12
    50e8:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    50ec:	c8bd4070 	popgt	{r4, r5, r6, lr}
    50f0:	c12fff1e 	bxgt	lr
    50f4:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    50f8:	e3a0e000 	mov	lr, #0
    50fc:	e2544001 	subs	r4, r4, #1
    5100:	ca00005d 	bgt	527c <__aeabi_dmul+0x268>
    5104:	e3740036 	cmn	r4, #54	; 0x36
    5108:	d3a00000 	movle	r0, #0
    510c:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    5110:	d8bd4070 	pople	{r4, r5, r6, lr}
    5114:	d12fff1e 	bxle	lr
    5118:	e2644000 	rsb	r4, r4, #0
    511c:	e2544020 	subs	r4, r4, #32
    5120:	aa00001a 	bge	5190 <__aeabi_dmul+0x17c>
    5124:	e294400c 	adds	r4, r4, #12
    5128:	ca00000c 	bgt	5160 <__aeabi_dmul+0x14c>
    512c:	e2844014 	add	r4, r4, #20
    5130:	e2645020 	rsb	r5, r4, #32
    5134:	e1a03510 	lsl	r3, r0, r5
    5138:	e1a00430 	lsr	r0, r0, r4
    513c:	e1800511 	orr	r0, r0, r1, lsl r5
    5140:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    5144:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    5148:	e0900fa3 	adds	r0, r0, r3, lsr #31
    514c:	e0a21431 	adc	r1, r2, r1, lsr r4
    5150:	e19ee083 	orrs	lr, lr, r3, lsl #1
    5154:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    5158:	e8bd4070 	pop	{r4, r5, r6, lr}
    515c:	e12fff1e 	bx	lr
    5160:	e264400c 	rsb	r4, r4, #12
    5164:	e2645020 	rsb	r5, r4, #32
    5168:	e1a03410 	lsl	r3, r0, r4
    516c:	e1a00530 	lsr	r0, r0, r5
    5170:	e1800411 	orr	r0, r0, r1, lsl r4
    5174:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    5178:	e0900fa3 	adds	r0, r0, r3, lsr #31
    517c:	e2a11000 	adc	r1, r1, #0
    5180:	e19ee083 	orrs	lr, lr, r3, lsl #1
    5184:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    5188:	e8bd4070 	pop	{r4, r5, r6, lr}
    518c:	e12fff1e 	bx	lr
    5190:	e2645020 	rsb	r5, r4, #32
    5194:	e18ee510 	orr	lr, lr, r0, lsl r5
    5198:	e1a03430 	lsr	r3, r0, r4
    519c:	e1833511 	orr	r3, r3, r1, lsl r5
    51a0:	e1a00431 	lsr	r0, r1, r4
    51a4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    51a8:	e1c00431 	bic	r0, r0, r1, lsr r4
    51ac:	e0800fa3 	add	r0, r0, r3, lsr #31
    51b0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    51b4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    51b8:	e8bd4070 	pop	{r4, r5, r6, lr}
    51bc:	e12fff1e 	bx	lr
    51c0:	e3340000 	teq	r4, #0
    51c4:	1a000008 	bne	51ec <__aeabi_dmul+0x1d8>
    51c8:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    51cc:	e1b00080 	lsls	r0, r0, #1
    51d0:	e0a11001 	adc	r1, r1, r1
    51d4:	e3110601 	tst	r1, #1048576	; 0x100000
    51d8:	02444001 	subeq	r4, r4, #1
    51dc:	0afffffa 	beq	51cc <__aeabi_dmul+0x1b8>
    51e0:	e1811006 	orr	r1, r1, r6
    51e4:	e3350000 	teq	r5, #0
    51e8:	112fff1e 	bxne	lr
    51ec:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    51f0:	e1b02082 	lsls	r2, r2, #1
    51f4:	e0a33003 	adc	r3, r3, r3
    51f8:	e3130601 	tst	r3, #1048576	; 0x100000
    51fc:	02455001 	subeq	r5, r5, #1
    5200:	0afffffa 	beq	51f0 <__aeabi_dmul+0x1dc>
    5204:	e1833006 	orr	r3, r3, r6
    5208:	e12fff1e 	bx	lr
    520c:	e134000c 	teq	r4, r12
    5210:	e00c5a23 	and	r5, r12, r3, lsr #20
    5214:	1135000c 	teqne	r5, r12
    5218:	0a000007 	beq	523c <__aeabi_dmul+0x228>
    521c:	e1906081 	orrs	r6, r0, r1, lsl #1
    5220:	11926083 	orrsne	r6, r2, r3, lsl #1
    5224:	1affffe5 	bne	51c0 <__aeabi_dmul+0x1ac>
    5228:	e0211003 	eor	r1, r1, r3
    522c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    5230:	e3a00000 	mov	r0, #0
    5234:	e8bd4070 	pop	{r4, r5, r6, lr}
    5238:	e12fff1e 	bx	lr
    523c:	e1906081 	orrs	r6, r0, r1, lsl #1
    5240:	01a00002 	moveq	r0, r2
    5244:	01a01003 	moveq	r1, r3
    5248:	11926083 	orrsne	r6, r2, r3, lsl #1
    524c:	0a000010 	beq	5294 <__aeabi_dmul+0x280>
    5250:	e134000c 	teq	r4, r12
    5254:	1a000001 	bne	5260 <__aeabi_dmul+0x24c>
    5258:	e1906601 	orrs	r6, r0, r1, lsl #12
    525c:	1a00000c 	bne	5294 <__aeabi_dmul+0x280>
    5260:	e135000c 	teq	r5, r12
    5264:	1a000003 	bne	5278 <__aeabi_dmul+0x264>
    5268:	e1926603 	orrs	r6, r2, r3, lsl #12
    526c:	11a00002 	movne	r0, r2
    5270:	11a01003 	movne	r1, r3
    5274:	1a000006 	bne	5294 <__aeabi_dmul+0x280>
    5278:	e0211003 	eor	r1, r1, r3
    527c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    5280:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    5284:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    5288:	e3a00000 	mov	r0, #0
    528c:	e8bd4070 	pop	{r4, r5, r6, lr}
    5290:	e12fff1e 	bx	lr
    5294:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    5298:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    529c:	e8bd4070 	pop	{r4, r5, r6, lr}
    52a0:	e12fff1e 	bx	lr

000052a4 <__aeabi_ddiv>:
    52a4:	e92d4070 	push	{r4, r5, r6, lr}
    52a8:	e3a0c0ff 	mov	r12, #255	; 0xff
    52ac:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    52b0:	e01c4a21 	ands	r4, r12, r1, lsr #20
    52b4:	101c5a23 	andsne	r5, r12, r3, lsr #20
    52b8:	1134000c 	teqne	r4, r12
    52bc:	1135000c 	teqne	r5, r12
    52c0:	0b00005e 	bleq	5440 <__aeabi_ddiv+0x19c>
    52c4:	e0444005 	sub	r4, r4, r5
    52c8:	e021e003 	eor	lr, r1, r3
    52cc:	e1925603 	orrs	r5, r2, r3, lsl #12
    52d0:	e1a01601 	lsl	r1, r1, #12
    52d4:	0a00004c 	beq	540c <__aeabi_ddiv+0x168>
    52d8:	e1a03603 	lsl	r3, r3, #12
    52dc:	e3a05201 	mov	r5, #268435456	; 0x10000000
    52e0:	e1853223 	orr	r3, r5, r3, lsr #4
    52e4:	e1833c22 	orr	r3, r3, r2, lsr #24
    52e8:	e1a02402 	lsl	r2, r2, #8
    52ec:	e1855221 	orr	r5, r5, r1, lsr #4
    52f0:	e1855c20 	orr	r5, r5, r0, lsr #24
    52f4:	e1a06400 	lsl	r6, r0, #8
    52f8:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    52fc:	e1550003 	cmp	r5, r3
    5300:	01560002 	cmpeq	r6, r2
    5304:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    5308:	e2844c03 	add	r4, r4, #768	; 0x300
    530c:	2a000001 	bcs	5318 <__aeabi_ddiv+0x74>
    5310:	e1b030a3 	lsrs	r3, r3, #1
    5314:	e1a02062 	rrx	r2, r2
    5318:	e0566002 	subs	r6, r6, r2
    531c:	e0c55003 	sbc	r5, r5, r3
    5320:	e1b030a3 	lsrs	r3, r3, #1
    5324:	e1a02062 	rrx	r2, r2
    5328:	e3a00601 	mov	r0, #1048576	; 0x100000
    532c:	e3a0c702 	mov	r12, #524288	; 0x80000
    5330:	e056e002 	subs	lr, r6, r2
    5334:	e0d5e003 	sbcs	lr, r5, r3
    5338:	20466002 	subcs	r6, r6, r2
    533c:	21a0500e 	movcs	r5, lr
    5340:	2180000c 	orrcs	r0, r0, r12
    5344:	e1b030a3 	lsrs	r3, r3, #1
    5348:	e1a02062 	rrx	r2, r2
    534c:	e056e002 	subs	lr, r6, r2
    5350:	e0d5e003 	sbcs	lr, r5, r3
    5354:	20466002 	subcs	r6, r6, r2
    5358:	21a0500e 	movcs	r5, lr
    535c:	218000ac 	orrcs	r0, r0, r12, lsr #1
    5360:	e1b030a3 	lsrs	r3, r3, #1
    5364:	e1a02062 	rrx	r2, r2
    5368:	e056e002 	subs	lr, r6, r2
    536c:	e0d5e003 	sbcs	lr, r5, r3
    5370:	20466002 	subcs	r6, r6, r2
    5374:	21a0500e 	movcs	r5, lr
    5378:	2180012c 	orrcs	r0, r0, r12, lsr #2
    537c:	e1b030a3 	lsrs	r3, r3, #1
    5380:	e1a02062 	rrx	r2, r2
    5384:	e056e002 	subs	lr, r6, r2
    5388:	e0d5e003 	sbcs	lr, r5, r3
    538c:	20466002 	subcs	r6, r6, r2
    5390:	21a0500e 	movcs	r5, lr
    5394:	218001ac 	orrcs	r0, r0, r12, lsr #3
    5398:	e195e006 	orrs	lr, r5, r6
    539c:	0a00000d 	beq	53d8 <__aeabi_ddiv+0x134>
    53a0:	e1a05205 	lsl	r5, r5, #4
    53a4:	e1855e26 	orr	r5, r5, r6, lsr #28
    53a8:	e1a06206 	lsl	r6, r6, #4
    53ac:	e1a03183 	lsl	r3, r3, #3
    53b0:	e1833ea2 	orr	r3, r3, r2, lsr #29
    53b4:	e1a02182 	lsl	r2, r2, #3
    53b8:	e1b0c22c 	lsrs	r12, r12, #4
    53bc:	1affffdb 	bne	5330 <__aeabi_ddiv+0x8c>
    53c0:	e3110601 	tst	r1, #1048576	; 0x100000
    53c4:	1a000006 	bne	53e4 <__aeabi_ddiv+0x140>
    53c8:	e1811000 	orr	r1, r1, r0
    53cc:	e3a00000 	mov	r0, #0
    53d0:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    53d4:	eaffffd5 	b	5330 <__aeabi_ddiv+0x8c>
    53d8:	e3110601 	tst	r1, #1048576	; 0x100000
    53dc:	01811000 	orreq	r1, r1, r0
    53e0:	03a00000 	moveq	r0, #0
    53e4:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    53e8:	835c0c07 	cmphi	r12, #1792	; 0x700
    53ec:	8affff43 	bhi	5100 <__aeabi_dmul+0xec>
    53f0:	e055c003 	subs	r12, r5, r3
    53f4:	0056c002 	subseq	r12, r6, r2
    53f8:	01b0c0a0 	lsrseq	r12, r0, #1
    53fc:	e2b00000 	adcs	r0, r0, #0
    5400:	e0a11a04 	adc	r1, r1, r4, lsl #20
    5404:	e8bd4070 	pop	{r4, r5, r6, lr}
    5408:	e12fff1e 	bx	lr
    540c:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    5410:	e18e1621 	orr	r1, lr, r1, lsr #12
    5414:	e09440ac 	adds	r4, r4, r12, lsr #1
    5418:	c074500c 	rsbsgt	r5, r4, r12
    541c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    5420:	c8bd4070 	popgt	{r4, r5, r6, lr}
    5424:	c12fff1e 	bxgt	lr
    5428:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    542c:	e3a0e000 	mov	lr, #0
    5430:	e2544001 	subs	r4, r4, #1
    5434:	eaffff31 	b	5100 <__aeabi_dmul+0xec>
    5438:	e185e006 	orr	lr, r5, r6
    543c:	eaffff2f 	b	5100 <__aeabi_dmul+0xec>
    5440:	e00c5a23 	and	r5, r12, r3, lsr #20
    5444:	e134000c 	teq	r4, r12
    5448:	0135000c 	teqeq	r5, r12
    544c:	0affff90 	beq	5294 <__aeabi_dmul+0x280>
    5450:	e134000c 	teq	r4, r12
    5454:	1a000006 	bne	5474 <__aeabi_ddiv+0x1d0>
    5458:	e1904601 	orrs	r4, r0, r1, lsl #12
    545c:	1affff8c 	bne	5294 <__aeabi_dmul+0x280>
    5460:	e135000c 	teq	r5, r12
    5464:	1affff83 	bne	5278 <__aeabi_dmul+0x264>
    5468:	e1a00002 	mov	r0, r2
    546c:	e1a01003 	mov	r1, r3
    5470:	eaffff87 	b	5294 <__aeabi_dmul+0x280>
    5474:	e135000c 	teq	r5, r12
    5478:	1a000004 	bne	5490 <__aeabi_ddiv+0x1ec>
    547c:	e1925603 	orrs	r5, r2, r3, lsl #12
    5480:	0affff68 	beq	5228 <__aeabi_dmul+0x214>
    5484:	e1a00002 	mov	r0, r2
    5488:	e1a01003 	mov	r1, r3
    548c:	eaffff80 	b	5294 <__aeabi_dmul+0x280>
    5490:	e1906081 	orrs	r6, r0, r1, lsl #1
    5494:	11926083 	orrsne	r6, r2, r3, lsl #1
    5498:	1affff48 	bne	51c0 <__aeabi_dmul+0x1ac>
    549c:	e1904081 	orrs	r4, r0, r1, lsl #1
    54a0:	1affff74 	bne	5278 <__aeabi_dmul+0x264>
    54a4:	e1925083 	orrs	r5, r2, r3, lsl #1
    54a8:	1affff5e 	bne	5228 <__aeabi_dmul+0x214>
    54ac:	eaffff78 	b	5294 <__aeabi_dmul+0x280>

000054b0 <__gedf2>:
    54b0:	e3e0c000 	mvn	r12, #0
    54b4:	ea000002 	b	54c4 <__cmpdf2+0x4>

000054b8 <__ledf2>:
    54b8:	e3a0c001 	mov	r12, #1
    54bc:	ea000000 	b	54c4 <__cmpdf2+0x4>

000054c0 <__cmpdf2>:
    54c0:	e3a0c001 	mov	r12, #1
    54c4:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    54c8:	e1a0c081 	lsl	r12, r1, #1
    54cc:	e1f0cacc 	mvns	r12, r12, asr #21
    54d0:	e1a0c083 	lsl	r12, r3, #1
    54d4:	11f0cacc 	mvnsne	r12, r12, asr #21
    54d8:	0a00000e 	beq	5518 <__cmpdf2+0x58>
    54dc:	e28dd004 	add	sp, sp, #4
    54e0:	e190c081 	orrs	r12, r0, r1, lsl #1
    54e4:	0192c083 	orrseq	r12, r2, r3, lsl #1
    54e8:	11310003 	teqne	r1, r3
    54ec:	01300002 	teqeq	r0, r2
    54f0:	03a00000 	moveq	r0, #0
    54f4:	012fff1e 	bxeq	lr
    54f8:	e3700000 	cmn	r0, #0
    54fc:	e1310003 	teq	r1, r3
    5500:	51510003 	cmppl	r1, r3
    5504:	01500002 	cmpeq	r0, r2
    5508:	21a00fc3 	asrcs	r0, r3, #31
    550c:	31e00fc3 	mvncc	r0, r3, asr #31
    5510:	e3800001 	orr	r0, r0, #1
    5514:	e12fff1e 	bx	lr
    5518:	e1a0c081 	lsl	r12, r1, #1
    551c:	e1f0cacc 	mvns	r12, r12, asr #21
    5520:	1a000001 	bne	552c <__cmpdf2+0x6c>
    5524:	e190c601 	orrs	r12, r0, r1, lsl #12
    5528:	1a000004 	bne	5540 <__cs3_region_zero_size_ram+0x8>
    552c:	e1a0c083 	lsl	r12, r3, #1
    5530:	e1f0cacc 	mvns	r12, r12, asr #21
    5534:	1affffe8 	bne	54dc <__cmpdf2+0x1c>
    5538:	e192c603 	orrs	r12, r2, r3, lsl #12
    553c:	0affffe6 	beq	54dc <__cmpdf2+0x1c>
    5540:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    5544:	e12fff1e 	bx	lr

00005548 <__aeabi_cdrcmple>:
    5548:	e1a0c000 	mov	r12, r0
    554c:	e1a00002 	mov	r0, r2
    5550:	e1a0200c 	mov	r2, r12
    5554:	e1a0c001 	mov	r12, r1
    5558:	e1a01003 	mov	r1, r3
    555c:	e1a0300c 	mov	r3, r12
    5560:	eaffffff 	b	5564 <__aeabi_cdcmpeq>

00005564 <__aeabi_cdcmpeq>:
    5564:	e92d4001 	push	{r0, lr}
    5568:	ebffffd4 	bl	54c0 <__cmpdf2>
    556c:	e3500000 	cmp	r0, #0
    5570:	43700000 	cmnmi	r0, #0
    5574:	e8bd4001 	pop	{r0, lr}
    5578:	e12fff1e 	bx	lr

0000557c <__aeabi_dcmpeq>:
    557c:	e52de008 	str	lr, [sp, #-8]!
    5580:	ebfffff7 	bl	5564 <__aeabi_cdcmpeq>
    5584:	03a00001 	moveq	r0, #1
    5588:	13a00000 	movne	r0, #0
    558c:	e49de008 	ldr	lr, [sp], #8
    5590:	e12fff1e 	bx	lr

00005594 <__aeabi_dcmplt>:
    5594:	e52de008 	str	lr, [sp, #-8]!
    5598:	ebfffff1 	bl	5564 <__aeabi_cdcmpeq>
    559c:	33a00001 	movcc	r0, #1
    55a0:	23a00000 	movcs	r0, #0
    55a4:	e49de008 	ldr	lr, [sp], #8
    55a8:	e12fff1e 	bx	lr

000055ac <__aeabi_dcmple>:
    55ac:	e52de008 	str	lr, [sp, #-8]!
    55b0:	ebffffeb 	bl	5564 <__aeabi_cdcmpeq>
    55b4:	93a00001 	movls	r0, #1
    55b8:	83a00000 	movhi	r0, #0
    55bc:	e49de008 	ldr	lr, [sp], #8
    55c0:	e12fff1e 	bx	lr

000055c4 <__aeabi_dcmpge>:
    55c4:	e52de008 	str	lr, [sp, #-8]!
    55c8:	ebffffde 	bl	5548 <__aeabi_cdrcmple>
    55cc:	93a00001 	movls	r0, #1
    55d0:	83a00000 	movhi	r0, #0
    55d4:	e49de008 	ldr	lr, [sp], #8
    55d8:	e12fff1e 	bx	lr

000055dc <__aeabi_dcmpgt>:
    55dc:	e52de008 	str	lr, [sp, #-8]!
    55e0:	ebffffd8 	bl	5548 <__aeabi_cdrcmple>
    55e4:	33a00001 	movcc	r0, #1
    55e8:	23a00000 	movcs	r0, #0
    55ec:	e49de008 	ldr	lr, [sp], #8
    55f0:	e12fff1e 	bx	lr

000055f4 <__aeabi_d2iz>:
    55f4:	e1a02081 	lsl	r2, r1, #1
    55f8:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    55fc:	2a00000c 	bcs	5634 <__aeabi_d2iz+0x40>
    5600:	5a000009 	bpl	562c <__aeabi_d2iz+0x38>
    5604:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    5608:	e0532ac2 	subs	r2, r3, r2, asr #21
    560c:	9a00000a 	bls	563c <__aeabi_d2iz+0x48>
    5610:	e1a03581 	lsl	r3, r1, #11
    5614:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    5618:	e1833aa0 	orr	r3, r3, r0, lsr #21
    561c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    5620:	e1a00233 	lsr	r0, r3, r2
    5624:	12600000 	rsbne	r0, r0, #0
    5628:	e12fff1e 	bx	lr
    562c:	e3a00000 	mov	r0, #0
    5630:	e12fff1e 	bx	lr
    5634:	e1900601 	orrs	r0, r0, r1, lsl #12
    5638:	1a000002 	bne	5648 <__aeabi_d2iz+0x54>
    563c:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    5640:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    5644:	e12fff1e 	bx	lr
    5648:	e3a00000 	mov	r0, #0
    564c:	e12fff1e 	bx	lr

00005650 <__aeabi_d2uiz>:
    5650:	e1b02081 	lsls	r2, r1, #1
    5654:	2a00000a 	bcs	5684 <__aeabi_d2uiz+0x34>
    5658:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    565c:	2a00000a 	bcs	568c <__aeabi_d2uiz+0x3c>
    5660:	5a000007 	bpl	5684 <__aeabi_d2uiz+0x34>
    5664:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    5668:	e0532ac2 	subs	r2, r3, r2, asr #21
    566c:	4a000008 	bmi	5694 <__aeabi_d2uiz+0x44>
    5670:	e1a03581 	lsl	r3, r1, #11
    5674:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    5678:	e1833aa0 	orr	r3, r3, r0, lsr #21
    567c:	e1a00233 	lsr	r0, r3, r2
    5680:	e12fff1e 	bx	lr
    5684:	e3a00000 	mov	r0, #0
    5688:	e12fff1e 	bx	lr
    568c:	e1900601 	orrs	r0, r0, r1, lsl #12
    5690:	1a000001 	bne	569c <__aeabi_d2uiz+0x4c>
    5694:	e3e00000 	mvn	r0, #0
    5698:	e12fff1e 	bx	lr
    569c:	e3a00000 	mov	r0, #0
    56a0:	e12fff1e 	bx	lr

000056a4 <atexit>:
    56a4:	e1a01000 	mov	r1, r0
    56a8:	e3a00000 	mov	r0, #0
    56ac:	e92d4008 	push	{r3, lr}
    56b0:	e1a02000 	mov	r2, r0
    56b4:	e1a03000 	mov	r3, r0
    56b8:	eb000287 	bl	60dc <__register_exitproc>
    56bc:	e8bd4008 	pop	{r3, lr}
    56c0:	e12fff1e 	bx	lr

000056c4 <__errno>:
    56c4:	e59f3004 	ldr	r3, [pc, #4]	; 56d0 <__errno+0xc>
    56c8:	e5930000 	ldr	r0, [r3]
    56cc:	e12fff1e 	bx	lr
    56d0:	0002bcf8 	.word	0x0002bcf8

000056d4 <exit>:
    56d4:	e92d4008 	push	{r3, lr}
    56d8:	e3a01000 	mov	r1, #0
    56dc:	e1a04000 	mov	r4, r0
    56e0:	eb0002ba 	bl	61d0 <__call_exitprocs>
    56e4:	e59f3018 	ldr	r3, [pc, #24]	; 5704 <exit+0x30>
    56e8:	e5930000 	ldr	r0, [r3]
    56ec:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    56f0:	e3530000 	cmp	r3, #0
    56f4:	11a0e00f 	movne	lr, pc
    56f8:	112fff13 	bxne	r3
    56fc:	e1a00004 	mov	r0, r4
    5700:	eb00047f 	bl	6904 <_exit>
    5704:	00006d10 	.word	0x00006d10

00005708 <malloc>:
    5708:	e92d4008 	push	{r3, lr}
    570c:	e59f3010 	ldr	r3, [pc, #16]	; 5724 <malloc+0x1c>
    5710:	e1a01000 	mov	r1, r0
    5714:	e5930000 	ldr	r0, [r3]
    5718:	eb00000a 	bl	5748 <_malloc_r>
    571c:	e8bd4008 	pop	{r3, lr}
    5720:	e12fff1e 	bx	lr
    5724:	0002bcf8 	.word	0x0002bcf8

00005728 <free>:
    5728:	e92d4008 	push	{r3, lr}
    572c:	e59f3010 	ldr	r3, [pc, #16]	; 5744 <free+0x1c>
    5730:	e1a01000 	mov	r1, r0
    5734:	e5930000 	ldr	r0, [r3]
    5738:	eb00035c 	bl	64b0 <_free_r>
    573c:	e8bd4008 	pop	{r3, lr}
    5740:	e12fff1e 	bx	lr
    5744:	0002bcf8 	.word	0x0002bcf8

00005748 <_malloc_r>:
    5748:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    574c:	e281500b 	add	r5, r1, #11
    5750:	e3550016 	cmp	r5, #22
    5754:	83c55007 	bichi	r5, r5, #7
    5758:	81a03fa5 	lsrhi	r3, r5, #31
    575c:	93a03000 	movls	r3, #0
    5760:	93a05010 	movls	r5, #16
    5764:	e1550001 	cmp	r5, r1
    5768:	21a01003 	movcs	r1, r3
    576c:	33831001 	orrcc	r1, r3, #1
    5770:	e3510000 	cmp	r1, #0
    5774:	13a0300c 	movne	r3, #12
    5778:	e24dd00c 	sub	sp, sp, #12
    577c:	e1a06000 	mov	r6, r0
    5780:	15803000 	strne	r3, [r0]
    5784:	13a04000 	movne	r4, #0
    5788:	1a000015 	bne	57e4 <_malloc_r+0x9c>
    578c:	eb0001b4 	bl	5e64 <__malloc_lock>
    5790:	e3550f7e 	cmp	r5, #504	; 0x1f8
    5794:	2a000016 	bcs	57f4 <_malloc_r+0xac>
    5798:	e59f76b8 	ldr	r7, [pc, #1720]	; 5e58 <_malloc_r+0x710>
    579c:	e1a0e1a5 	lsr	lr, r5, #3
    57a0:	e087318e 	add	r3, r7, lr, lsl #3
    57a4:	e593400c 	ldr	r4, [r3, #12]
    57a8:	e1540003 	cmp	r4, r3
    57ac:	0a00014b 	beq	5ce0 <_malloc_r+0x598>
    57b0:	e5943004 	ldr	r3, [r4, #4]
    57b4:	e3c33003 	bic	r3, r3, #3
    57b8:	e0843003 	add	r3, r4, r3
    57bc:	e5930004 	ldr	r0, [r3, #4]
    57c0:	e2841008 	add	r1, r4, #8
    57c4:	e8910006 	ldm	r1, {r1, r2}
    57c8:	e3800001 	orr	r0, r0, #1
    57cc:	e5830004 	str	r0, [r3, #4]
    57d0:	e581200c 	str	r2, [r1, #12]
    57d4:	e5821008 	str	r1, [r2, #8]
    57d8:	e1a00006 	mov	r0, r6
    57dc:	eb0001a1 	bl	5e68 <__malloc_unlock>
    57e0:	e2844008 	add	r4, r4, #8
    57e4:	e1a00004 	mov	r0, r4
    57e8:	e28dd00c 	add	sp, sp, #12
    57ec:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    57f0:	e12fff1e 	bx	lr
    57f4:	e1b0e4a5 	lsrs	lr, r5, #9
    57f8:	01a0e1a5 	lsreq	lr, r5, #3
    57fc:	01a0108e 	lsleq	r1, lr, #1
    5800:	1a000061 	bne	598c <_malloc_r+0x244>
    5804:	e59f764c 	ldr	r7, [pc, #1612]	; 5e58 <_malloc_r+0x710>
    5808:	e0871101 	add	r1, r7, r1, lsl #2
    580c:	e591400c 	ldr	r4, [r1, #12]
    5810:	e1510004 	cmp	r1, r4
    5814:	1a000005 	bne	5830 <_malloc_r+0xe8>
    5818:	ea00000a 	b	5848 <_malloc_r+0x100>
    581c:	e3530000 	cmp	r3, #0
    5820:	aa0000d7 	bge	5b84 <_malloc_r+0x43c>
    5824:	e594400c 	ldr	r4, [r4, #12]
    5828:	e1510004 	cmp	r1, r4
    582c:	0a000005 	beq	5848 <_malloc_r+0x100>
    5830:	e5942004 	ldr	r2, [r4, #4]
    5834:	e3c22003 	bic	r2, r2, #3
    5838:	e0653002 	rsb	r3, r5, r2
    583c:	e353000f 	cmp	r3, #15
    5840:	dafffff5 	ble	581c <_malloc_r+0xd4>
    5844:	e24ee001 	sub	lr, lr, #1
    5848:	e28ee001 	add	lr, lr, #1
    584c:	e59f3604 	ldr	r3, [pc, #1540]	; 5e58 <_malloc_r+0x710>
    5850:	e5974010 	ldr	r4, [r7, #16]
    5854:	e2838008 	add	r8, r3, #8
    5858:	e1540008 	cmp	r4, r8
    585c:	05931004 	ldreq	r1, [r3, #4]
    5860:	0a000016 	beq	58c0 <_malloc_r+0x178>
    5864:	e5942004 	ldr	r2, [r4, #4]
    5868:	e3c22003 	bic	r2, r2, #3
    586c:	e0651002 	rsb	r1, r5, r2
    5870:	e351000f 	cmp	r1, #15
    5874:	ca0000f7 	bgt	5c58 <_malloc_r+0x510>
    5878:	e3510000 	cmp	r1, #0
    587c:	e5838014 	str	r8, [r3, #20]
    5880:	e5838010 	str	r8, [r3, #16]
    5884:	aa000046 	bge	59a4 <_malloc_r+0x25c>
    5888:	e3520c02 	cmp	r2, #512	; 0x200
    588c:	2a0000d2 	bcs	5bdc <_malloc_r+0x494>
    5890:	e5930004 	ldr	r0, [r3, #4]
    5894:	e1a021a2 	lsr	r2, r2, #3
    5898:	e1a01142 	asr	r1, r2, #2
    589c:	e3a0c001 	mov	r12, #1
    58a0:	e180111c 	orr	r1, r0, r12, lsl r1
    58a4:	e0832182 	add	r2, r3, r2, lsl #3
    58a8:	e5920008 	ldr	r0, [r2, #8]
    58ac:	e584200c 	str	r2, [r4, #12]
    58b0:	e5840008 	str	r0, [r4, #8]
    58b4:	e5831004 	str	r1, [r3, #4]
    58b8:	e5824008 	str	r4, [r2, #8]
    58bc:	e580400c 	str	r4, [r0, #12]
    58c0:	e1a0014e 	asr	r0, lr, #2
    58c4:	e3a03001 	mov	r3, #1
    58c8:	e1a00013 	lsl	r0, r3, r0
    58cc:	e1500001 	cmp	r0, r1
    58d0:	8a00003b 	bhi	59c4 <_malloc_r+0x27c>
    58d4:	e1110000 	tst	r1, r0
    58d8:	1a000008 	bne	5900 <_malloc_r+0x1b8>
    58dc:	e1a00310 	lsl	r0, r0, r3
    58e0:	e3cee003 	bic	lr, lr, #3
    58e4:	e1110000 	tst	r1, r0
    58e8:	e28ee004 	add	lr, lr, #4
    58ec:	1a000003 	bne	5900 <_malloc_r+0x1b8>
    58f0:	e1a00080 	lsl	r0, r0, #1
    58f4:	e1110000 	tst	r1, r0
    58f8:	e28ee004 	add	lr, lr, #4
    58fc:	0afffffb 	beq	58f0 <_malloc_r+0x1a8>
    5900:	e087a18e 	add	r10, r7, lr, lsl #3
    5904:	e1a0c00a 	mov	r12, r10
    5908:	e1a0400e 	mov	r4, lr
    590c:	e59c300c 	ldr	r3, [r12, #12]
    5910:	e15c0003 	cmp	r12, r3
    5914:	1a000005 	bne	5930 <_malloc_r+0x1e8>
    5918:	ea0000db 	b	5c8c <_malloc_r+0x544>
    591c:	e3520000 	cmp	r2, #0
    5920:	aa0000f4 	bge	5cf8 <_malloc_r+0x5b0>
    5924:	e593300c 	ldr	r3, [r3, #12]
    5928:	e15c0003 	cmp	r12, r3
    592c:	0a0000d6 	beq	5c8c <_malloc_r+0x544>
    5930:	e5931004 	ldr	r1, [r3, #4]
    5934:	e3c11003 	bic	r1, r1, #3
    5938:	e0652001 	rsb	r2, r5, r1
    593c:	e352000f 	cmp	r2, #15
    5940:	dafffff5 	ble	591c <_malloc_r+0x1d4>
    5944:	e1a04003 	mov	r4, r3
    5948:	e593000c 	ldr	r0, [r3, #12]
    594c:	e5b4c008 	ldr	r12, [r4, #8]!
    5950:	e0831005 	add	r1, r3, r5
    5954:	e382e001 	orr	lr, r2, #1
    5958:	e3855001 	orr	r5, r5, #1
    595c:	e58c000c 	str	r0, [r12, #12]
    5960:	e580c008 	str	r12, [r0, #8]
    5964:	e5835004 	str	r5, [r3, #4]
    5968:	e5871014 	str	r1, [r7, #20]
    596c:	e5871010 	str	r1, [r7, #16]
    5970:	e581800c 	str	r8, [r1, #12]
    5974:	e5818008 	str	r8, [r1, #8]
    5978:	e581e004 	str	lr, [r1, #4]
    597c:	e7812002 	str	r2, [r1, r2]
    5980:	e1a00006 	mov	r0, r6
    5984:	eb000137 	bl	5e68 <__malloc_unlock>
    5988:	eaffff95 	b	57e4 <_malloc_r+0x9c>
    598c:	e35e0004 	cmp	lr, #4
    5990:	8a000087 	bhi	5bb4 <_malloc_r+0x46c>
    5994:	e1a0e325 	lsr	lr, r5, #6
    5998:	e28ee038 	add	lr, lr, #56	; 0x38
    599c:	e1a0108e 	lsl	r1, lr, #1
    59a0:	eaffff97 	b	5804 <_malloc_r+0xbc>
    59a4:	e0842002 	add	r2, r4, r2
    59a8:	e5923004 	ldr	r3, [r2, #4]
    59ac:	e3833001 	orr	r3, r3, #1
    59b0:	e5823004 	str	r3, [r2, #4]
    59b4:	e1a00006 	mov	r0, r6
    59b8:	eb00012a 	bl	5e68 <__malloc_unlock>
    59bc:	e2844008 	add	r4, r4, #8
    59c0:	eaffff87 	b	57e4 <_malloc_r+0x9c>
    59c4:	e5974008 	ldr	r4, [r7, #8]
    59c8:	e594a004 	ldr	r10, [r4, #4]
    59cc:	e3caa003 	bic	r10, r10, #3
    59d0:	e155000a 	cmp	r5, r10
    59d4:	8a000002 	bhi	59e4 <_malloc_r+0x29c>
    59d8:	e065300a 	rsb	r3, r5, r10
    59dc:	e353000f 	cmp	r3, #15
    59e0:	ca00005d 	bgt	5b5c <_malloc_r+0x414>
    59e4:	e59f9470 	ldr	r9, [pc, #1136]	; 5e5c <_malloc_r+0x714>
    59e8:	e5973408 	ldr	r3, [r7, #1032]	; 0x408
    59ec:	e599b000 	ldr	r11, [r9]
    59f0:	e3730001 	cmn	r3, #1
    59f4:	e085b00b 	add	r11, r5, r11
    59f8:	128bba01 	addne	r11, r11, #4096	; 0x1000
    59fc:	128bb00f 	addne	r11, r11, #15
    5a00:	13cbbeff 	bicne	r11, r11, #4080	; 0xff0
    5a04:	028bb010 	addeq	r11, r11, #16
    5a08:	13cbb00f 	bicne	r11, r11, #15
    5a0c:	e084200a 	add	r2, r4, r10
    5a10:	e1a00006 	mov	r0, r6
    5a14:	e1a0100b 	mov	r1, r11
    5a18:	e58d2004 	str	r2, [sp, #4]
    5a1c:	eb000112 	bl	5e6c <_sbrk_r>
    5a20:	e3700001 	cmn	r0, #1
    5a24:	e1a08000 	mov	r8, r0
    5a28:	e59d2004 	ldr	r2, [sp, #4]
    5a2c:	0a0000e2 	beq	5dbc <_malloc_r+0x674>
    5a30:	e1520000 	cmp	r2, r0
    5a34:	8a0000bf 	bhi	5d38 <_malloc_r+0x5f0>
    5a38:	e5993004 	ldr	r3, [r9, #4]
    5a3c:	e1520008 	cmp	r2, r8
    5a40:	e08b3003 	add	r3, r11, r3
    5a44:	e5893004 	str	r3, [r9, #4]
    5a48:	0a0000df 	beq	5dcc <_malloc_r+0x684>
    5a4c:	e5971408 	ldr	r1, [r7, #1032]	; 0x408
    5a50:	e3710001 	cmn	r1, #1
    5a54:	10622008 	rsbne	r2, r2, r8
    5a58:	059f33f8 	ldreq	r3, [pc, #1016]	; 5e58 <_malloc_r+0x710>
    5a5c:	10833002 	addne	r3, r3, r2
    5a60:	05838408 	streq	r8, [r3, #1032]	; 0x408
    5a64:	15893004 	strne	r3, [r9, #4]
    5a68:	e2183007 	ands	r3, r8, #7
    5a6c:	12632008 	rsbne	r2, r3, #8
    5a70:	10888002 	addne	r8, r8, r2
    5a74:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
    5a78:	12832008 	addne	r2, r3, #8
    5a7c:	e088300b 	add	r3, r8, r11
    5a80:	03a02a01 	moveq	r2, #4096	; 0x1000
    5a84:	e1a03a03 	lsl	r3, r3, #20
    5a88:	e042ba23 	sub	r11, r2, r3, lsr #20
    5a8c:	e1a0100b 	mov	r1, r11
    5a90:	e1a00006 	mov	r0, r6
    5a94:	eb0000f4 	bl	5e6c <_sbrk_r>
    5a98:	e3700001 	cmn	r0, #1
    5a9c:	10682000 	rsbne	r2, r8, r0
    5aa0:	e5993004 	ldr	r3, [r9, #4]
    5aa4:	108b2002 	addne	r2, r11, r2
    5aa8:	03a0b000 	moveq	r11, #0
    5aac:	13822001 	orrne	r2, r2, #1
    5ab0:	03a02001 	moveq	r2, #1
    5ab4:	e08b3003 	add	r3, r11, r3
    5ab8:	e1540007 	cmp	r4, r7
    5abc:	e5893004 	str	r3, [r9, #4]
    5ac0:	e5878008 	str	r8, [r7, #8]
    5ac4:	e5882004 	str	r2, [r8, #4]
    5ac8:	0a00000d 	beq	5b04 <_malloc_r+0x3bc>
    5acc:	e35a000f 	cmp	r10, #15
    5ad0:	9a0000ac 	bls	5d88 <_malloc_r+0x640>
    5ad4:	e594c004 	ldr	r12, [r4, #4]
    5ad8:	e24a200c 	sub	r2, r10, #12
    5adc:	e3c22007 	bic	r2, r2, #7
    5ae0:	e20cc001 	and	r12, r12, #1
    5ae4:	e0841002 	add	r1, r4, r2
    5ae8:	e3a00005 	mov	r0, #5
    5aec:	e182c00c 	orr	r12, r2, r12
    5af0:	e352000f 	cmp	r2, #15
    5af4:	e584c004 	str	r12, [r4, #4]
    5af8:	e5810004 	str	r0, [r1, #4]
    5afc:	e5810008 	str	r0, [r1, #8]
    5b00:	8a0000b8 	bhi	5de8 <_malloc_r+0x6a0>
    5b04:	e599202c 	ldr	r2, [r9, #44]	; 0x2c
    5b08:	e1530002 	cmp	r3, r2
    5b0c:	859f2348 	ldrhi	r2, [pc, #840]	; 5e5c <_malloc_r+0x714>
    5b10:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
    5b14:	e5992030 	ldr	r2, [r9, #48]	; 0x30
    5b18:	e5974008 	ldr	r4, [r7, #8]
    5b1c:	e1530002 	cmp	r3, r2
    5b20:	95943004 	ldrls	r3, [r4, #4]
    5b24:	85942004 	ldrhi	r2, [r4, #4]
    5b28:	859f132c 	ldrhi	r1, [pc, #812]	; 5e5c <_malloc_r+0x714>
    5b2c:	93c33003 	bicls	r3, r3, #3
    5b30:	85813030 	strhi	r3, [r1, #48]	; 0x30
    5b34:	83c23003 	bichi	r3, r2, #3
    5b38:	e1550003 	cmp	r5, r3
    5b3c:	e0653003 	rsb	r3, r5, r3
    5b40:	8a000001 	bhi	5b4c <_malloc_r+0x404>
    5b44:	e353000f 	cmp	r3, #15
    5b48:	ca000003 	bgt	5b5c <_malloc_r+0x414>
    5b4c:	e1a00006 	mov	r0, r6
    5b50:	eb0000c4 	bl	5e68 <__malloc_unlock>
    5b54:	e3a04000 	mov	r4, #0
    5b58:	eaffff21 	b	57e4 <_malloc_r+0x9c>
    5b5c:	e0842005 	add	r2, r4, r5
    5b60:	e3833001 	orr	r3, r3, #1
    5b64:	e3855001 	orr	r5, r5, #1
    5b68:	e5845004 	str	r5, [r4, #4]
    5b6c:	e1a00006 	mov	r0, r6
    5b70:	e5823004 	str	r3, [r2, #4]
    5b74:	e5872008 	str	r2, [r7, #8]
    5b78:	e2844008 	add	r4, r4, #8
    5b7c:	eb0000b9 	bl	5e68 <__malloc_unlock>
    5b80:	eaffff17 	b	57e4 <_malloc_r+0x9c>
    5b84:	e0842002 	add	r2, r4, r2
    5b88:	e5920004 	ldr	r0, [r2, #4]
    5b8c:	e2841008 	add	r1, r4, #8
    5b90:	e891000a 	ldm	r1, {r1, r3}
    5b94:	e3800001 	orr	r0, r0, #1
    5b98:	e5820004 	str	r0, [r2, #4]
    5b9c:	e581300c 	str	r3, [r1, #12]
    5ba0:	e5831008 	str	r1, [r3, #8]
    5ba4:	e1a00006 	mov	r0, r6
    5ba8:	eb0000ae 	bl	5e68 <__malloc_unlock>
    5bac:	e2844008 	add	r4, r4, #8
    5bb0:	eaffff0b 	b	57e4 <_malloc_r+0x9c>
    5bb4:	e35e0014 	cmp	lr, #20
    5bb8:	928ee05b 	addls	lr, lr, #91	; 0x5b
    5bbc:	91a0108e 	lslls	r1, lr, #1
    5bc0:	9affff0f 	bls	5804 <_malloc_r+0xbc>
    5bc4:	e35e0054 	cmp	lr, #84	; 0x54
    5bc8:	8a000061 	bhi	5d54 <_malloc_r+0x60c>
    5bcc:	e1a0e625 	lsr	lr, r5, #12
    5bd0:	e28ee06e 	add	lr, lr, #110	; 0x6e
    5bd4:	e1a0108e 	lsl	r1, lr, #1
    5bd8:	eaffff09 	b	5804 <_malloc_r+0xbc>
    5bdc:	e1a034a2 	lsr	r3, r2, #9
    5be0:	e3530004 	cmp	r3, #4
    5be4:	9a00004f 	bls	5d28 <_malloc_r+0x5e0>
    5be8:	e3530014 	cmp	r3, #20
    5bec:	9283a05b 	addls	r10, r3, #91	; 0x5b
    5bf0:	91a0008a 	lslls	r0, r10, #1
    5bf4:	9a000004 	bls	5c0c <_malloc_r+0x4c4>
    5bf8:	e3530054 	cmp	r3, #84	; 0x54
    5bfc:	8a00007f 	bhi	5e00 <_malloc_r+0x6b8>
    5c00:	e1a0a622 	lsr	r10, r2, #12
    5c04:	e28aa06e 	add	r10, r10, #110	; 0x6e
    5c08:	e1a0008a 	lsl	r0, r10, #1
    5c0c:	e0870100 	add	r0, r7, r0, lsl #2
    5c10:	e5903008 	ldr	r3, [r0, #8]
    5c14:	e1530000 	cmp	r3, r0
    5c18:	e59fc238 	ldr	r12, [pc, #568]	; 5e58 <_malloc_r+0x710>
    5c1c:	0a000052 	beq	5d6c <_malloc_r+0x624>
    5c20:	e5931004 	ldr	r1, [r3, #4]
    5c24:	e3c11003 	bic	r1, r1, #3
    5c28:	e1520001 	cmp	r2, r1
    5c2c:	2a000002 	bcs	5c3c <_malloc_r+0x4f4>
    5c30:	e5933008 	ldr	r3, [r3, #8]
    5c34:	e1500003 	cmp	r0, r3
    5c38:	1afffff8 	bne	5c20 <_malloc_r+0x4d8>
    5c3c:	e593200c 	ldr	r2, [r3, #12]
    5c40:	e5971004 	ldr	r1, [r7, #4]
    5c44:	e584200c 	str	r2, [r4, #12]
    5c48:	e5843008 	str	r3, [r4, #8]
    5c4c:	e583400c 	str	r4, [r3, #12]
    5c50:	e5824008 	str	r4, [r2, #8]
    5c54:	eaffff19 	b	58c0 <_malloc_r+0x178>
    5c58:	e0842005 	add	r2, r4, r5
    5c5c:	e3810001 	orr	r0, r1, #1
    5c60:	e3855001 	orr	r5, r5, #1
    5c64:	e5845004 	str	r5, [r4, #4]
    5c68:	e5832014 	str	r2, [r3, #20]
    5c6c:	e5832010 	str	r2, [r3, #16]
    5c70:	e582800c 	str	r8, [r2, #12]
    5c74:	e9820101 	stmib	r2, {r0, r8}
    5c78:	e7821001 	str	r1, [r2, r1]
    5c7c:	e1a00006 	mov	r0, r6
    5c80:	eb000078 	bl	5e68 <__malloc_unlock>
    5c84:	e2844008 	add	r4, r4, #8
    5c88:	eafffed5 	b	57e4 <_malloc_r+0x9c>
    5c8c:	e2844001 	add	r4, r4, #1
    5c90:	e3140003 	tst	r4, #3
    5c94:	e28cc008 	add	r12, r12, #8
    5c98:	1affff1b 	bne	590c <_malloc_r+0x1c4>
    5c9c:	e31e0003 	tst	lr, #3
    5ca0:	e24a3008 	sub	r3, r10, #8
    5ca4:	0a000062 	beq	5e34 <_malloc_r+0x6ec>
    5ca8:	e59aa000 	ldr	r10, [r10]
    5cac:	e15a0003 	cmp	r10, r3
    5cb0:	e24ee001 	sub	lr, lr, #1
    5cb4:	0afffff8 	beq	5c9c <_malloc_r+0x554>
    5cb8:	e5973004 	ldr	r3, [r7, #4]
    5cbc:	e1a00080 	lsl	r0, r0, #1
    5cc0:	e1500003 	cmp	r0, r3
    5cc4:	8affff3e 	bhi	59c4 <_malloc_r+0x27c>
    5cc8:	e3500000 	cmp	r0, #0
    5ccc:	0affff3c 	beq	59c4 <_malloc_r+0x27c>
    5cd0:	e1130000 	tst	r3, r0
    5cd4:	0a00005a 	beq	5e44 <_malloc_r+0x6fc>
    5cd8:	e1a0e004 	mov	lr, r4
    5cdc:	eaffff07 	b	5900 <_malloc_r+0x1b8>
    5ce0:	e2843008 	add	r3, r4, #8
    5ce4:	e5944014 	ldr	r4, [r4, #20]
    5ce8:	e1530004 	cmp	r3, r4
    5cec:	028ee002 	addeq	lr, lr, #2
    5cf0:	0afffed5 	beq	584c <_malloc_r+0x104>
    5cf4:	eafffead 	b	57b0 <_malloc_r+0x68>
    5cf8:	e0831001 	add	r1, r3, r1
    5cfc:	e5910004 	ldr	r0, [r1, #4]
    5d00:	e1a04003 	mov	r4, r3
    5d04:	e5b42008 	ldr	r2, [r4, #8]!
    5d08:	e593300c 	ldr	r3, [r3, #12]
    5d0c:	e3800001 	orr	r0, r0, #1
    5d10:	e5810004 	str	r0, [r1, #4]
    5d14:	e582300c 	str	r3, [r2, #12]
    5d18:	e5832008 	str	r2, [r3, #8]
    5d1c:	e1a00006 	mov	r0, r6
    5d20:	eb000050 	bl	5e68 <__malloc_unlock>
    5d24:	eafffeae 	b	57e4 <_malloc_r+0x9c>
    5d28:	e1a0a322 	lsr	r10, r2, #6
    5d2c:	e28aa038 	add	r10, r10, #56	; 0x38
    5d30:	e1a0008a 	lsl	r0, r10, #1
    5d34:	eaffffb4 	b	5c0c <_malloc_r+0x4c4>
    5d38:	e1540007 	cmp	r4, r7
    5d3c:	0affff3d 	beq	5a38 <_malloc_r+0x2f0>
    5d40:	e59f3110 	ldr	r3, [pc, #272]	; 5e58 <_malloc_r+0x710>
    5d44:	e5934008 	ldr	r4, [r3, #8]
    5d48:	e5943004 	ldr	r3, [r4, #4]
    5d4c:	e3c33003 	bic	r3, r3, #3
    5d50:	eaffff78 	b	5b38 <_malloc_r+0x3f0>
    5d54:	e35e0f55 	cmp	lr, #340	; 0x154
    5d58:	8a00000f 	bhi	5d9c <_malloc_r+0x654>
    5d5c:	e1a0e7a5 	lsr	lr, r5, #15
    5d60:	e28ee077 	add	lr, lr, #119	; 0x77
    5d64:	e1a0108e 	lsl	r1, lr, #1
    5d68:	eafffea5 	b	5804 <_malloc_r+0xbc>
    5d6c:	e59c2004 	ldr	r2, [r12, #4]
    5d70:	e1a0a14a 	asr	r10, r10, #2
    5d74:	e3a01001 	mov	r1, #1
    5d78:	e1821a11 	orr	r1, r2, r1, lsl r10
    5d7c:	e1a02003 	mov	r2, r3
    5d80:	e58c1004 	str	r1, [r12, #4]
    5d84:	eaffffae 	b	5c44 <_malloc_r+0x4fc>
    5d88:	e3a03001 	mov	r3, #1
    5d8c:	e5883004 	str	r3, [r8, #4]
    5d90:	e1a04008 	mov	r4, r8
    5d94:	e3a03000 	mov	r3, #0
    5d98:	eaffff66 	b	5b38 <_malloc_r+0x3f0>
    5d9c:	e59f30bc 	ldr	r3, [pc, #188]	; 5e60 <_malloc_r+0x718>
    5da0:	e15e0003 	cmp	lr, r3
    5da4:	91a0e925 	lsrls	lr, r5, #18
    5da8:	928ee07c 	addls	lr, lr, #124	; 0x7c
    5dac:	91a0108e 	lslls	r1, lr, #1
    5db0:	83a010fc 	movhi	r1, #252	; 0xfc
    5db4:	83a0e07e 	movhi	lr, #126	; 0x7e
    5db8:	eafffe91 	b	5804 <_malloc_r+0xbc>
    5dbc:	e5974008 	ldr	r4, [r7, #8]
    5dc0:	e5943004 	ldr	r3, [r4, #4]
    5dc4:	e3c33003 	bic	r3, r3, #3
    5dc8:	eaffff5a 	b	5b38 <_malloc_r+0x3f0>
    5dcc:	e1b01a02 	lsls	r1, r2, #20
    5dd0:	1affff1d 	bne	5a4c <_malloc_r+0x304>
    5dd4:	e5972008 	ldr	r2, [r7, #8]
    5dd8:	e08b100a 	add	r1, r11, r10
    5ddc:	e3811001 	orr	r1, r1, #1
    5de0:	e5821004 	str	r1, [r2, #4]
    5de4:	eaffff46 	b	5b04 <_malloc_r+0x3bc>
    5de8:	e1a00006 	mov	r0, r6
    5dec:	e2841008 	add	r1, r4, #8
    5df0:	eb0001ae 	bl	64b0 <_free_r>
    5df4:	e59f3060 	ldr	r3, [pc, #96]	; 5e5c <_malloc_r+0x714>
    5df8:	e5933004 	ldr	r3, [r3, #4]
    5dfc:	eaffff40 	b	5b04 <_malloc_r+0x3bc>
    5e00:	e3530f55 	cmp	r3, #340	; 0x154
    5e04:	91a0a7a2 	lsrls	r10, r2, #15
    5e08:	928aa077 	addls	r10, r10, #119	; 0x77
    5e0c:	91a0008a 	lslls	r0, r10, #1
    5e10:	9affff7d 	bls	5c0c <_malloc_r+0x4c4>
    5e14:	e59f1044 	ldr	r1, [pc, #68]	; 5e60 <_malloc_r+0x718>
    5e18:	e1530001 	cmp	r3, r1
    5e1c:	91a0a922 	lsrls	r10, r2, #18
    5e20:	928aa07c 	addls	r10, r10, #124	; 0x7c
    5e24:	91a0008a 	lslls	r0, r10, #1
    5e28:	83a000fc 	movhi	r0, #252	; 0xfc
    5e2c:	83a0a07e 	movhi	r10, #126	; 0x7e
    5e30:	eaffff75 	b	5c0c <_malloc_r+0x4c4>
    5e34:	e5973004 	ldr	r3, [r7, #4]
    5e38:	e1c33000 	bic	r3, r3, r0
    5e3c:	e5873004 	str	r3, [r7, #4]
    5e40:	eaffff9d 	b	5cbc <_malloc_r+0x574>
    5e44:	e1a00080 	lsl	r0, r0, #1
    5e48:	e1130000 	tst	r3, r0
    5e4c:	e2844004 	add	r4, r4, #4
    5e50:	1affffa0 	bne	5cd8 <_malloc_r+0x590>
    5e54:	eafffffa 	b	5e44 <_malloc_r+0x6fc>
    5e58:	0002c128 	.word	0x0002c128
    5e5c:	00031a40 	.word	0x00031a40
    5e60:	00000554 	.word	0x00000554

00005e64 <__malloc_lock>:
    5e64:	e12fff1e 	bx	lr

00005e68 <__malloc_unlock>:
    5e68:	e12fff1e 	bx	lr

00005e6c <_sbrk_r>:
    5e6c:	e92d4038 	push	{r3, r4, r5, lr}
    5e70:	e59f4030 	ldr	r4, [pc, #48]	; 5ea8 <_sbrk_r+0x3c>
    5e74:	e3a03000 	mov	r3, #0
    5e78:	e1a05000 	mov	r5, r0
    5e7c:	e1a00001 	mov	r0, r1
    5e80:	e5843000 	str	r3, [r4]
    5e84:	eb0002a4 	bl	691c <_sbrk>
    5e88:	e3700001 	cmn	r0, #1
    5e8c:	0a000001 	beq	5e98 <_sbrk_r+0x2c>
    5e90:	e8bd4038 	pop	{r3, r4, r5, lr}
    5e94:	e12fff1e 	bx	lr
    5e98:	e5943000 	ldr	r3, [r4]
    5e9c:	e3530000 	cmp	r3, #0
    5ea0:	15853000 	strne	r3, [r5]
    5ea4:	eafffff9 	b	5e90 <_sbrk_r+0x24>
    5ea8:	00031a74 	.word	0x00031a74

00005eac <strcmp>:
    5eac:	e0202001 	eor	r2, r0, r1
    5eb0:	e3120003 	tst	r2, #3
    5eb4:	1a000021 	bne	5f40 <strcmp_unaligned>
    5eb8:	e2102003 	ands	r2, r0, #3
    5ebc:	e3c00003 	bic	r0, r0, #3
    5ec0:	e3c11003 	bic	r1, r1, #3
    5ec4:	e490c004 	ldr	r12, [r0], #4
    5ec8:	04913004 	ldreq	r3, [r1], #4
    5ecc:	0a000006 	beq	5eec <strcmp+0x40>
    5ed0:	e2222003 	eor	r2, r2, #3
    5ed4:	e1a02182 	lsl	r2, r2, #3
    5ed8:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
    5edc:	e1a02233 	lsr	r2, r3, r2
    5ee0:	e4913004 	ldr	r3, [r1], #4
    5ee4:	e18cc002 	orr	r12, r12, r2
    5ee8:	e1833002 	orr	r3, r3, r2
    5eec:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    5ef0:	e3a04001 	mov	r4, #1
    5ef4:	e1844404 	orr	r4, r4, r4, lsl #8
    5ef8:	e1844804 	orr	r4, r4, r4, lsl #16
    5efc:	e04c2004 	sub	r2, r12, r4
    5f00:	e15c0003 	cmp	r12, r3
    5f04:	01c2200c 	biceq	r2, r2, r12
    5f08:	01120384 	tsteq	r2, r4, lsl #7
    5f0c:	0490c004 	ldreq	r12, [r0], #4
    5f10:	04913004 	ldreq	r3, [r1], #4
    5f14:	0afffff8 	beq	5efc <strcmp+0x50>
    5f18:	e1a00c0c 	lsl	r0, r12, #24
    5f1c:	e1a0c42c 	lsr	r12, r12, #8
    5f20:	e3500001 	cmp	r0, #1
    5f24:	21500c03 	cmpcs	r0, r3, lsl #24
    5f28:	01a03423 	lsreq	r3, r3, #8
    5f2c:	0afffff9 	beq	5f18 <strcmp+0x6c>
    5f30:	e20330ff 	and	r3, r3, #255	; 0xff
    5f34:	e0630c20 	rsb	r0, r3, r0, lsr #24
    5f38:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    5f3c:	e12fff1e 	bx	lr

00005f40 <strcmp_unaligned>:
    5f40:	e3100003 	tst	r0, #3
    5f44:	0a000006 	beq	5f64 <strcmp_unaligned+0x24>
    5f48:	e4d02001 	ldrb	r2, [r0], #1
    5f4c:	e4d13001 	ldrb	r3, [r1], #1
    5f50:	e3520001 	cmp	r2, #1
    5f54:	21520003 	cmpcs	r2, r3
    5f58:	0afffff8 	beq	5f40 <strcmp_unaligned>
    5f5c:	e0420003 	sub	r0, r2, r3
    5f60:	e12fff1e 	bx	lr
    5f64:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)
    5f68:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    5f6c:	e3a02001 	mov	r2, #1
    5f70:	e1822402 	orr	r2, r2, r2, lsl #8
    5f74:	e1822802 	orr	r2, r2, r2, lsl #16
    5f78:	e201c003 	and	r12, r1, #3
    5f7c:	e3c11003 	bic	r1, r1, #3
    5f80:	e4904004 	ldr	r4, [r0], #4
    5f84:	e4915004 	ldr	r5, [r1], #4
    5f88:	e35c0002 	cmp	r12, #2
    5f8c:	0a000017 	beq	5ff0 <strcmp_unaligned+0xb0>
    5f90:	8a00002d 	bhi	604c <strcmp_unaligned+0x10c>
    5f94:	e3c4c4ff 	bic	r12, r4, #-16777216	; 0xff000000
    5f98:	e15c0425 	cmp	r12, r5, lsr #8
    5f9c:	e0443002 	sub	r3, r4, r2
    5fa0:	e1c33004 	bic	r3, r3, r4
    5fa4:	1a000007 	bne	5fc8 <strcmp_unaligned+0x88>
    5fa8:	e0133382 	ands	r3, r3, r2, lsl #7
    5fac:	04915004 	ldreq	r5, [r1], #4
    5fb0:	1a000006 	bne	5fd0 <strcmp_unaligned+0x90>
    5fb4:	e02cc004 	eor	r12, r12, r4
    5fb8:	e15c0c05 	cmp	r12, r5, lsl #24
    5fbc:	1a000008 	bne	5fe4 <strcmp_unaligned+0xa4>
    5fc0:	e4904004 	ldr	r4, [r0], #4
    5fc4:	eafffff2 	b	5f94 <strcmp_unaligned+0x54>
    5fc8:	e1a05425 	lsr	r5, r5, #8
    5fcc:	ea000037 	b	60b0 <strcmp_unaligned+0x170>
    5fd0:	e3d334ff 	bics	r3, r3, #-16777216	; 0xff000000
    5fd4:	1a000031 	bne	60a0 <strcmp_unaligned+0x160>
    5fd8:	e5d15000 	ldrb	r5, [r1]
    5fdc:	e1a0cc24 	lsr	r12, r4, #24
    5fe0:	ea000032 	b	60b0 <strcmp_unaligned+0x170>
    5fe4:	e1a0cc24 	lsr	r12, r4, #24
    5fe8:	e20550ff 	and	r5, r5, #255	; 0xff
    5fec:	ea00002f 	b	60b0 <strcmp_unaligned+0x170>
    5ff0:	e1a0c804 	lsl	r12, r4, #16
    5ff4:	e0443002 	sub	r3, r4, r2
    5ff8:	e1a0c82c 	lsr	r12, r12, #16
    5ffc:	e1c33004 	bic	r3, r3, r4
    6000:	e15c0825 	cmp	r12, r5, lsr #16
    6004:	1a00000e 	bne	6044 <strcmp_unaligned+0x104>
    6008:	e0133382 	ands	r3, r3, r2, lsl #7
    600c:	04915004 	ldreq	r5, [r1], #4
    6010:	1a000004 	bne	6028 <strcmp_unaligned+0xe8>
    6014:	e02cc004 	eor	r12, r12, r4
    6018:	e15c0805 	cmp	r12, r5, lsl #16
    601c:	1a000006 	bne	603c <strcmp_unaligned+0xfc>
    6020:	e4904004 	ldr	r4, [r0], #4
    6024:	eafffff1 	b	5ff0 <strcmp_unaligned+0xb0>
    6028:	e1b03803 	lsls	r3, r3, #16
    602c:	1a00001b 	bne	60a0 <strcmp_unaligned+0x160>
    6030:	e1d150b0 	ldrh	r5, [r1]
    6034:	e1a0c824 	lsr	r12, r4, #16
    6038:	ea00001c 	b	60b0 <strcmp_unaligned+0x170>
    603c:	e1a05805 	lsl	r5, r5, #16
    6040:	e1a0c824 	lsr	r12, r4, #16
    6044:	e1a05825 	lsr	r5, r5, #16
    6048:	ea000018 	b	60b0 <strcmp_unaligned+0x170>
    604c:	e204c0ff 	and	r12, r4, #255	; 0xff
    6050:	e15c0c25 	cmp	r12, r5, lsr #24
    6054:	e0443002 	sub	r3, r4, r2
    6058:	e1c33004 	bic	r3, r3, r4
    605c:	1a000007 	bne	6080 <strcmp_unaligned+0x140>
    6060:	e0133382 	ands	r3, r3, r2, lsl #7
    6064:	04915004 	ldreq	r5, [r1], #4
    6068:	1a000006 	bne	6088 <strcmp_unaligned+0x148>
    606c:	e02cc004 	eor	r12, r12, r4
    6070:	e15c0405 	cmp	r12, r5, lsl #8
    6074:	1a000006 	bne	6094 <strcmp_unaligned+0x154>
    6078:	e4904004 	ldr	r4, [r0], #4
    607c:	eafffff2 	b	604c <strcmp_unaligned+0x10c>
    6080:	e1a05c25 	lsr	r5, r5, #24
    6084:	ea000009 	b	60b0 <strcmp_unaligned+0x170>
    6088:	e31400ff 	tst	r4, #255	; 0xff
    608c:	0a000003 	beq	60a0 <strcmp_unaligned+0x160>
    6090:	e4915004 	ldr	r5, [r1], #4
    6094:	e1a0c424 	lsr	r12, r4, #8
    6098:	e3c554ff 	bic	r5, r5, #-16777216	; 0xff000000
    609c:	ea000003 	b	60b0 <strcmp_unaligned+0x170>
    60a0:	e3a00000 	mov	r0, #0
    60a4:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    60a8:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    60ac:	e12fff1e 	bx	lr
    60b0:	e20c20ff 	and	r2, r12, #255	; 0xff
    60b4:	e20500ff 	and	r0, r5, #255	; 0xff
    60b8:	e3500001 	cmp	r0, #1
    60bc:	21500002 	cmpcs	r0, r2
    60c0:	01a0c42c 	lsreq	r12, r12, #8
    60c4:	01a05425 	lsreq	r5, r5, #8
    60c8:	0afffff8 	beq	60b0 <strcmp_unaligned+0x170>
    60cc:	e0420000 	sub	r0, r2, r0
    60d0:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    60d4:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    60d8:	e12fff1e 	bx	lr

000060dc <__register_exitproc>:
    60dc:	e59fc0e4 	ldr	r12, [pc, #228]	; 61c8 <__register_exitproc+0xec>
    60e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    60e4:	e59c4000 	ldr	r4, [r12]
    60e8:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    60ec:	e35c0000 	cmp	r12, #0
    60f0:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    60f4:	e59c5004 	ldr	r5, [r12, #4]
    60f8:	0584c148 	streq	r12, [r4, #328]	; 0x148
    60fc:	e355001f 	cmp	r5, #31
    6100:	e24dd010 	sub	sp, sp, #16
    6104:	e1a06000 	mov	r6, r0
    6108:	da000015 	ble	6164 <__register_exitproc+0x88>
    610c:	e59f00b8 	ldr	r0, [pc, #184]	; 61cc <__register_exitproc+0xf0>
    6110:	e3500000 	cmp	r0, #0
    6114:	1a000001 	bne	6120 <__register_exitproc+0x44>
    6118:	e3e00000 	mvn	r0, #0
    611c:	ea000018 	b	6184 <__register_exitproc+0xa8>
    6120:	e3a00e19 	mov	r0, #400	; 0x190
    6124:	e58d100c 	str	r1, [sp, #12]
    6128:	e58d2008 	str	r2, [sp, #8]
    612c:	e58d3004 	str	r3, [sp, #4]
    6130:	ebfffd74 	bl	5708 <malloc>
    6134:	e250c000 	subs	r12, r0, #0
    6138:	e59d100c 	ldr	r1, [sp, #12]
    613c:	e59d2008 	ldr	r2, [sp, #8]
    6140:	e59d3004 	ldr	r3, [sp, #4]
    6144:	0afffff3 	beq	6118 <__register_exitproc+0x3c>
    6148:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    614c:	e3a00000 	mov	r0, #0
    6150:	e58c0004 	str	r0, [r12, #4]
    6154:	e58c5000 	str	r5, [r12]
    6158:	e584c148 	str	r12, [r4, #328]	; 0x148
    615c:	e58c0188 	str	r0, [r12, #392]	; 0x188
    6160:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    6164:	e3560000 	cmp	r6, #0
    6168:	e59c4004 	ldr	r4, [r12, #4]
    616c:	1a000007 	bne	6190 <__register_exitproc+0xb4>
    6170:	e2843002 	add	r3, r4, #2
    6174:	e2844001 	add	r4, r4, #1
    6178:	e78c1103 	str	r1, [r12, r3, lsl #2]
    617c:	e58c4004 	str	r4, [r12, #4]
    6180:	e3a00000 	mov	r0, #0
    6184:	e28dd010 	add	sp, sp, #16
    6188:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    618c:	e12fff1e 	bx	lr
    6190:	e3a00001 	mov	r0, #1
    6194:	e1a00410 	lsl	r0, r0, r4
    6198:	e08c8104 	add	r8, r12, r4, lsl #2
    619c:	e3560002 	cmp	r6, #2
    61a0:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    61a4:	e5883108 	str	r3, [r8, #264]	; 0x108
    61a8:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    61ac:	e1877000 	orr	r7, r7, r0
    61b0:	01830000 	orreq	r0, r3, r0
    61b4:	e1a05008 	mov	r5, r8
    61b8:	e5882088 	str	r2, [r8, #136]	; 0x88
    61bc:	e58c7188 	str	r7, [r12, #392]	; 0x188
    61c0:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    61c4:	eaffffe9 	b	6170 <__register_exitproc+0x94>
    61c8:	00006d10 	.word	0x00006d10
    61cc:	00005708 	.word	0x00005708

000061d0 <__call_exitprocs>:
    61d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    61d4:	e59f3168 	ldr	r3, [pc, #360]	; 6344 <__call_exitprocs+0x174>
    61d8:	e5933000 	ldr	r3, [r3]
    61dc:	e24dd014 	sub	sp, sp, #20
    61e0:	e58d3004 	str	r3, [sp, #4]
    61e4:	e2833f52 	add	r3, r3, #328	; 0x148
    61e8:	e58d0008 	str	r0, [sp, #8]
    61ec:	e58d300c 	str	r3, [sp, #12]
    61f0:	e1a07001 	mov	r7, r1
    61f4:	e3a08001 	mov	r8, #1
    61f8:	e59d3004 	ldr	r3, [sp, #4]
    61fc:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    6200:	e3560000 	cmp	r6, #0
    6204:	e59db00c 	ldr	r11, [sp, #12]
    6208:	0a000033 	beq	62dc <__call_exitprocs+0x10c>
    620c:	e5965004 	ldr	r5, [r6, #4]
    6210:	e2554001 	subs	r4, r5, #1
    6214:	5286a088 	addpl	r10, r6, #136	; 0x88
    6218:	5285501f 	addpl	r5, r5, #31
    621c:	508a5105 	addpl	r5, r10, r5, lsl #2
    6220:	5a000007 	bpl	6244 <__call_exitprocs+0x74>
    6224:	ea000029 	b	62d0 <__call_exitprocs+0x100>
    6228:	e5953000 	ldr	r3, [r5]
    622c:	e1530007 	cmp	r3, r7
    6230:	0a000005 	beq	624c <__call_exitprocs+0x7c>
    6234:	e2444001 	sub	r4, r4, #1
    6238:	e3740001 	cmn	r4, #1
    623c:	e2455004 	sub	r5, r5, #4
    6240:	0a000022 	beq	62d0 <__call_exitprocs+0x100>
    6244:	e3570000 	cmp	r7, #0
    6248:	1afffff6 	bne	6228 <__call_exitprocs+0x58>
    624c:	e5963004 	ldr	r3, [r6, #4]
    6250:	e06a2005 	rsb	r2, r10, r5
    6254:	e2433001 	sub	r3, r3, #1
    6258:	e0862002 	add	r2, r6, r2
    625c:	e1530004 	cmp	r3, r4
    6260:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    6264:	13a01000 	movne	r1, #0
    6268:	05864004 	streq	r4, [r6, #4]
    626c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    6270:	e3530000 	cmp	r3, #0
    6274:	0affffee 	beq	6234 <__call_exitprocs+0x64>
    6278:	e1a02418 	lsl	r2, r8, r4
    627c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    6280:	e1120001 	tst	r2, r1
    6284:	e5969004 	ldr	r9, [r6, #4]
    6288:	0a000016 	beq	62e8 <__call_exitprocs+0x118>
    628c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    6290:	e1120001 	tst	r2, r1
    6294:	1a000016 	bne	62f4 <__call_exitprocs+0x124>
    6298:	e59d0008 	ldr	r0, [sp, #8]
    629c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    62a0:	e1a0e00f 	mov	lr, pc
    62a4:	e12fff13 	bx	r3
    62a8:	e5963004 	ldr	r3, [r6, #4]
    62ac:	e1530009 	cmp	r3, r9
    62b0:	1affffd0 	bne	61f8 <__call_exitprocs+0x28>
    62b4:	e59b3000 	ldr	r3, [r11]
    62b8:	e1530006 	cmp	r3, r6
    62bc:	1affffcd 	bne	61f8 <__call_exitprocs+0x28>
    62c0:	e2444001 	sub	r4, r4, #1
    62c4:	e3740001 	cmn	r4, #1
    62c8:	e2455004 	sub	r5, r5, #4
    62cc:	1affffdc 	bne	6244 <__call_exitprocs+0x74>
    62d0:	e59f1070 	ldr	r1, [pc, #112]	; 6348 <__call_exitprocs+0x178>
    62d4:	e3510000 	cmp	r1, #0
    62d8:	1a000009 	bne	6304 <__call_exitprocs+0x134>
    62dc:	e28dd014 	add	sp, sp, #20
    62e0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    62e4:	e12fff1e 	bx	lr
    62e8:	e1a0e00f 	mov	lr, pc
    62ec:	e12fff13 	bx	r3
    62f0:	eaffffec 	b	62a8 <__call_exitprocs+0xd8>
    62f4:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    62f8:	e1a0e00f 	mov	lr, pc
    62fc:	e12fff13 	bx	r3
    6300:	eaffffe8 	b	62a8 <__call_exitprocs+0xd8>
    6304:	e5963004 	ldr	r3, [r6, #4]
    6308:	e3530000 	cmp	r3, #0
    630c:	e5963000 	ldr	r3, [r6]
    6310:	1a000008 	bne	6338 <__call_exitprocs+0x168>
    6314:	e3530000 	cmp	r3, #0
    6318:	0a000006 	beq	6338 <__call_exitprocs+0x168>
    631c:	e1a00006 	mov	r0, r6
    6320:	e58b3000 	str	r3, [r11]
    6324:	ebfffcff 	bl	5728 <free>
    6328:	e59b6000 	ldr	r6, [r11]
    632c:	e3560000 	cmp	r6, #0
    6330:	1affffb5 	bne	620c <__call_exitprocs+0x3c>
    6334:	eaffffe8 	b	62dc <__call_exitprocs+0x10c>
    6338:	e1a0b006 	mov	r11, r6
    633c:	e1a06003 	mov	r6, r3
    6340:	eafffff9 	b	632c <__call_exitprocs+0x15c>
    6344:	00006d10 	.word	0x00006d10
    6348:	00005728 	.word	0x00005728

0000634c <register_fini>:
    634c:	e92d4008 	push	{r3, lr}
    6350:	e59f3010 	ldr	r3, [pc, #16]	; 6368 <register_fini+0x1c>
    6354:	e3530000 	cmp	r3, #0
    6358:	159f000c 	ldrne	r0, [pc, #12]	; 636c <register_fini+0x20>
    635c:	1bfffcd0 	blne	56a4 <atexit>
    6360:	e8bd4008 	pop	{r3, lr}
    6364:	e12fff1e 	bx	lr
    6368:	00006d34 	.word	0x00006d34
    636c:	00006370 	.word	0x00006370

00006370 <__libc_fini_array>:
    6370:	e92d4038 	push	{r3, r4, r5, lr}
    6374:	e59f5030 	ldr	r5, [pc, #48]	; 63ac <__libc_fini_array+0x3c>
    6378:	e59f4030 	ldr	r4, [pc, #48]	; 63b0 <__libc_fini_array+0x40>
    637c:	e0654004 	rsb	r4, r5, r4
    6380:	e1b04144 	asrs	r4, r4, #2
    6384:	10855104 	addne	r5, r5, r4, lsl #2
    6388:	0a000004 	beq	63a0 <__libc_fini_array+0x30>
    638c:	e5353004 	ldr	r3, [r5, #-4]!
    6390:	e1a0e00f 	mov	lr, pc
    6394:	e12fff13 	bx	r3
    6398:	e2544001 	subs	r4, r4, #1
    639c:	1afffffa 	bne	638c <__libc_fini_array+0x1c>
    63a0:	eb000263 	bl	6d34 <__libc_fini>
    63a4:	e8bd4038 	pop	{r3, r4, r5, lr}
    63a8:	e12fff1e 	bx	lr
    63ac:	00006d4c 	.word	0x00006d4c
    63b0:	00006d50 	.word	0x00006d50

000063b4 <_malloc_trim_r>:
    63b4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    63b8:	e59f50e4 	ldr	r5, [pc, #228]	; 64a4 <_malloc_trim_r+0xf0>
    63bc:	e1a07001 	mov	r7, r1
    63c0:	e1a04000 	mov	r4, r0
    63c4:	ebfffea6 	bl	5e64 <__malloc_lock>
    63c8:	e5953008 	ldr	r3, [r5, #8]
    63cc:	e5936004 	ldr	r6, [r3, #4]
    63d0:	e3c66003 	bic	r6, r6, #3
    63d4:	e2863efe 	add	r3, r6, #4064	; 0xfe0
    63d8:	e283300f 	add	r3, r3, #15
    63dc:	e0677003 	rsb	r7, r7, r3
    63e0:	e1a07627 	lsr	r7, r7, #12
    63e4:	e2477001 	sub	r7, r7, #1
    63e8:	e1a07607 	lsl	r7, r7, #12
    63ec:	e3570a01 	cmp	r7, #4096	; 0x1000
    63f0:	ba000006 	blt	6410 <_malloc_trim_r+0x5c>
    63f4:	e1a00004 	mov	r0, r4
    63f8:	e3a01000 	mov	r1, #0
    63fc:	ebfffe9a 	bl	5e6c <_sbrk_r>
    6400:	e5953008 	ldr	r3, [r5, #8]
    6404:	e0833006 	add	r3, r3, r6
    6408:	e1500003 	cmp	r0, r3
    640c:	0a000004 	beq	6424 <_malloc_trim_r+0x70>
    6410:	e1a00004 	mov	r0, r4
    6414:	ebfffe93 	bl	5e68 <__malloc_unlock>
    6418:	e3a00000 	mov	r0, #0
    641c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    6420:	e12fff1e 	bx	lr
    6424:	e1a00004 	mov	r0, r4
    6428:	e2671000 	rsb	r1, r7, #0
    642c:	ebfffe8e 	bl	5e6c <_sbrk_r>
    6430:	e3700001 	cmn	r0, #1
    6434:	0a00000b 	beq	6468 <_malloc_trim_r+0xb4>
    6438:	e59f3068 	ldr	r3, [pc, #104]	; 64a8 <_malloc_trim_r+0xf4>
    643c:	e5952008 	ldr	r2, [r5, #8]
    6440:	e5931000 	ldr	r1, [r3]
    6444:	e0676006 	rsb	r6, r7, r6
    6448:	e3866001 	orr	r6, r6, #1
    644c:	e0677001 	rsb	r7, r7, r1
    6450:	e1a00004 	mov	r0, r4
    6454:	e5826004 	str	r6, [r2, #4]
    6458:	e5837000 	str	r7, [r3]
    645c:	ebfffe81 	bl	5e68 <__malloc_unlock>
    6460:	e3a00001 	mov	r0, #1
    6464:	eaffffec 	b	641c <_malloc_trim_r+0x68>
    6468:	e1a00004 	mov	r0, r4
    646c:	e3a01000 	mov	r1, #0
    6470:	ebfffe7d 	bl	5e6c <_sbrk_r>
    6474:	e5953008 	ldr	r3, [r5, #8]
    6478:	e0632000 	rsb	r2, r3, r0
    647c:	e352000f 	cmp	r2, #15
    6480:	daffffe2 	ble	6410 <_malloc_trim_r+0x5c>
    6484:	e59f1020 	ldr	r1, [pc, #32]	; 64ac <_malloc_trim_r+0xf8>
    6488:	e5911000 	ldr	r1, [r1]
    648c:	e0610000 	rsb	r0, r1, r0
    6490:	e59f1010 	ldr	r1, [pc, #16]	; 64a8 <_malloc_trim_r+0xf4>
    6494:	e3822001 	orr	r2, r2, #1
    6498:	e5810000 	str	r0, [r1]
    649c:	e5832004 	str	r2, [r3, #4]
    64a0:	eaffffda 	b	6410 <_malloc_trim_r+0x5c>
    64a4:	0002c128 	.word	0x0002c128
    64a8:	00031a44 	.word	0x00031a44
    64ac:	0002c530 	.word	0x0002c530

000064b0 <_free_r>:
    64b0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    64b4:	e2514000 	subs	r4, r1, #0
    64b8:	e1a06000 	mov	r6, r0
    64bc:	0a000046 	beq	65dc <_free_r+0x12c>
    64c0:	ebfffe67 	bl	5e64 <__malloc_lock>
    64c4:	e514e004 	ldr	lr, [r4, #-4]
    64c8:	e59f1238 	ldr	r1, [pc, #568]	; 6708 <_free_r+0x258>
    64cc:	e244c008 	sub	r12, r4, #8
    64d0:	e3ce3001 	bic	r3, lr, #1
    64d4:	e08c2003 	add	r2, r12, r3
    64d8:	e5910008 	ldr	r0, [r1, #8]
    64dc:	e5925004 	ldr	r5, [r2, #4]
    64e0:	e1500002 	cmp	r0, r2
    64e4:	e3c55003 	bic	r5, r5, #3
    64e8:	0a00004a 	beq	6618 <_free_r+0x168>
    64ec:	e21ee001 	ands	lr, lr, #1
    64f0:	e5825004 	str	r5, [r2, #4]
    64f4:	13a0e000 	movne	lr, #0
    64f8:	1a000009 	bne	6524 <_free_r+0x74>
    64fc:	e5144008 	ldr	r4, [r4, #-8]
    6500:	e064c00c 	rsb	r12, r4, r12
    6504:	e59c0008 	ldr	r0, [r12, #8]
    6508:	e2817008 	add	r7, r1, #8
    650c:	e1500007 	cmp	r0, r7
    6510:	e0833004 	add	r3, r3, r4
    6514:	159c400c 	ldrne	r4, [r12, #12]
    6518:	1580400c 	strne	r4, [r0, #12]
    651c:	15840008 	strne	r0, [r4, #8]
    6520:	03a0e001 	moveq	lr, #1
    6524:	e0820005 	add	r0, r2, r5
    6528:	e5900004 	ldr	r0, [r0, #4]
    652c:	e3100001 	tst	r0, #1
    6530:	1a000009 	bne	655c <_free_r+0xac>
    6534:	e35e0000 	cmp	lr, #0
    6538:	e5920008 	ldr	r0, [r2, #8]
    653c:	e0833005 	add	r3, r3, r5
    6540:	1a000002 	bne	6550 <_free_r+0xa0>
    6544:	e59f41c0 	ldr	r4, [pc, #448]	; 670c <_free_r+0x25c>
    6548:	e1500004 	cmp	r0, r4
    654c:	0a000047 	beq	6670 <_free_r+0x1c0>
    6550:	e592200c 	ldr	r2, [r2, #12]
    6554:	e580200c 	str	r2, [r0, #12]
    6558:	e5820008 	str	r0, [r2, #8]
    655c:	e3832001 	orr	r2, r3, #1
    6560:	e35e0000 	cmp	lr, #0
    6564:	e58c2004 	str	r2, [r12, #4]
    6568:	e78c3003 	str	r3, [r12, r3]
    656c:	1a000018 	bne	65d4 <_free_r+0x124>
    6570:	e3530c02 	cmp	r3, #512	; 0x200
    6574:	3a00001a 	bcc	65e4 <_free_r+0x134>
    6578:	e1a024a3 	lsr	r2, r3, #9
    657c:	e3520004 	cmp	r2, #4
    6580:	8a000042 	bhi	6690 <_free_r+0x1e0>
    6584:	e1a0e323 	lsr	lr, r3, #6
    6588:	e28ee038 	add	lr, lr, #56	; 0x38
    658c:	e1a0008e 	lsl	r0, lr, #1
    6590:	e0810100 	add	r0, r1, r0, lsl #2
    6594:	e5902008 	ldr	r2, [r0, #8]
    6598:	e1520000 	cmp	r2, r0
    659c:	e59f1164 	ldr	r1, [pc, #356]	; 6708 <_free_r+0x258>
    65a0:	0a000044 	beq	66b8 <_free_r+0x208>
    65a4:	e5921004 	ldr	r1, [r2, #4]
    65a8:	e3c11003 	bic	r1, r1, #3
    65ac:	e1530001 	cmp	r3, r1
    65b0:	2a000002 	bcs	65c0 <_free_r+0x110>
    65b4:	e5922008 	ldr	r2, [r2, #8]
    65b8:	e1500002 	cmp	r0, r2
    65bc:	1afffff8 	bne	65a4 <_free_r+0xf4>
    65c0:	e592300c 	ldr	r3, [r2, #12]
    65c4:	e58c300c 	str	r3, [r12, #12]
    65c8:	e58c2008 	str	r2, [r12, #8]
    65cc:	e582c00c 	str	r12, [r2, #12]
    65d0:	e583c008 	str	r12, [r3, #8]
    65d4:	e1a00006 	mov	r0, r6
    65d8:	ebfffe22 	bl	5e68 <__malloc_unlock>
    65dc:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    65e0:	e12fff1e 	bx	lr
    65e4:	e5912004 	ldr	r2, [r1, #4]
    65e8:	e1a031a3 	lsr	r3, r3, #3
    65ec:	e1a00143 	asr	r0, r3, #2
    65f0:	e3a0e001 	mov	lr, #1
    65f4:	e182001e 	orr	r0, r2, lr, lsl r0
    65f8:	e0813183 	add	r3, r1, r3, lsl #3
    65fc:	e5932008 	ldr	r2, [r3, #8]
    6600:	e58c300c 	str	r3, [r12, #12]
    6604:	e58c2008 	str	r2, [r12, #8]
    6608:	e5810004 	str	r0, [r1, #4]
    660c:	e583c008 	str	r12, [r3, #8]
    6610:	e582c00c 	str	r12, [r2, #12]
    6614:	eaffffee 	b	65d4 <_free_r+0x124>
    6618:	e31e0001 	tst	lr, #1
    661c:	e0853003 	add	r3, r5, r3
    6620:	1a000006 	bne	6640 <_free_r+0x190>
    6624:	e5142008 	ldr	r2, [r4, #-8]
    6628:	e062c00c 	rsb	r12, r2, r12
    662c:	e59c000c 	ldr	r0, [r12, #12]
    6630:	e59ce008 	ldr	lr, [r12, #8]
    6634:	e58e000c 	str	r0, [lr, #12]
    6638:	e580e008 	str	lr, [r0, #8]
    663c:	e0833002 	add	r3, r3, r2
    6640:	e59f20c8 	ldr	r2, [pc, #200]	; 6710 <_free_r+0x260>
    6644:	e5920000 	ldr	r0, [r2]
    6648:	e3832001 	orr	r2, r3, #1
    664c:	e1530000 	cmp	r3, r0
    6650:	e58c2004 	str	r2, [r12, #4]
    6654:	e581c008 	str	r12, [r1, #8]
    6658:	3affffdd 	bcc	65d4 <_free_r+0x124>
    665c:	e59f30b0 	ldr	r3, [pc, #176]	; 6714 <_free_r+0x264>
    6660:	e1a00006 	mov	r0, r6
    6664:	e5931000 	ldr	r1, [r3]
    6668:	ebffff51 	bl	63b4 <_malloc_trim_r>
    666c:	eaffffd8 	b	65d4 <_free_r+0x124>
    6670:	e3832001 	orr	r2, r3, #1
    6674:	e581c014 	str	r12, [r1, #20]
    6678:	e581c010 	str	r12, [r1, #16]
    667c:	e58c000c 	str	r0, [r12, #12]
    6680:	e58c0008 	str	r0, [r12, #8]
    6684:	e58c2004 	str	r2, [r12, #4]
    6688:	e78c3003 	str	r3, [r12, r3]
    668c:	eaffffd0 	b	65d4 <_free_r+0x124>
    6690:	e3520014 	cmp	r2, #20
    6694:	9282e05b 	addls	lr, r2, #91	; 0x5b
    6698:	91a0008e 	lslls	r0, lr, #1
    669c:	9affffbb 	bls	6590 <_free_r+0xe0>
    66a0:	e3520054 	cmp	r2, #84	; 0x54
    66a4:	8a00000a 	bhi	66d4 <_free_r+0x224>
    66a8:	e1a0e623 	lsr	lr, r3, #12
    66ac:	e28ee06e 	add	lr, lr, #110	; 0x6e
    66b0:	e1a0008e 	lsl	r0, lr, #1
    66b4:	eaffffb5 	b	6590 <_free_r+0xe0>
    66b8:	e5913004 	ldr	r3, [r1, #4]
    66bc:	e1a0e14e 	asr	lr, lr, #2
    66c0:	e3a00001 	mov	r0, #1
    66c4:	e1830e10 	orr	r0, r3, r0, lsl lr
    66c8:	e1a03002 	mov	r3, r2
    66cc:	e5810004 	str	r0, [r1, #4]
    66d0:	eaffffbb 	b	65c4 <_free_r+0x114>
    66d4:	e3520f55 	cmp	r2, #340	; 0x154
    66d8:	91a0e7a3 	lsrls	lr, r3, #15
    66dc:	928ee077 	addls	lr, lr, #119	; 0x77
    66e0:	91a0008e 	lslls	r0, lr, #1
    66e4:	9affffa9 	bls	6590 <_free_r+0xe0>
    66e8:	e59f0028 	ldr	r0, [pc, #40]	; 6718 <_free_r+0x268>
    66ec:	e1520000 	cmp	r2, r0
    66f0:	91a0e923 	lsrls	lr, r3, #18
    66f4:	928ee07c 	addls	lr, lr, #124	; 0x7c
    66f8:	91a0008e 	lslls	r0, lr, #1
    66fc:	83a000fc 	movhi	r0, #252	; 0xfc
    6700:	83a0e07e 	movhi	lr, #126	; 0x7e
    6704:	eaffffa1 	b	6590 <_free_r+0xe0>
    6708:	0002c128 	.word	0x0002c128
    670c:	0002c130 	.word	0x0002c130
    6710:	0002c534 	.word	0x0002c534
    6714:	00031a40 	.word	0x00031a40
    6718:	00000554 	.word	0x00000554

0000671c <cleanup_glue>:
    671c:	e92d4038 	push	{r3, r4, r5, lr}
    6720:	e1a04001 	mov	r4, r1
    6724:	e5911000 	ldr	r1, [r1]
    6728:	e3510000 	cmp	r1, #0
    672c:	e1a05000 	mov	r5, r0
    6730:	1bfffff9 	blne	671c <cleanup_glue>
    6734:	e1a00005 	mov	r0, r5
    6738:	e1a01004 	mov	r1, r4
    673c:	ebffff5b 	bl	64b0 <_free_r>
    6740:	e8bd4038 	pop	{r3, r4, r5, lr}
    6744:	e12fff1e 	bx	lr

00006748 <_reclaim_reent>:
    6748:	e59f30f0 	ldr	r3, [pc, #240]	; 6840 <_reclaim_reent+0xf8>
    674c:	e5933000 	ldr	r3, [r3]
    6750:	e1500003 	cmp	r0, r3
    6754:	e92d4070 	push	{r4, r5, r6, lr}
    6758:	e1a05000 	mov	r5, r0
    675c:	0a00002b 	beq	6810 <_reclaim_reent+0xc8>
    6760:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    6764:	e3520000 	cmp	r2, #0
    6768:	0a000011 	beq	67b4 <_reclaim_reent+0x6c>
    676c:	e3a03000 	mov	r3, #0
    6770:	e1a06003 	mov	r6, r3
    6774:	e7921103 	ldr	r1, [r2, r3, lsl #2]
    6778:	e3510000 	cmp	r1, #0
    677c:	0a000005 	beq	6798 <_reclaim_reent+0x50>
    6780:	e5914000 	ldr	r4, [r1]
    6784:	e1a00005 	mov	r0, r5
    6788:	ebffff48 	bl	64b0 <_free_r>
    678c:	e2541000 	subs	r1, r4, #0
    6790:	1afffffa 	bne	6780 <_reclaim_reent+0x38>
    6794:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    6798:	e2866001 	add	r6, r6, #1
    679c:	e3560020 	cmp	r6, #32
    67a0:	e1a03006 	mov	r3, r6
    67a4:	1afffff2 	bne	6774 <_reclaim_reent+0x2c>
    67a8:	e1a00005 	mov	r0, r5
    67ac:	e1a01002 	mov	r1, r2
    67b0:	ebffff3e 	bl	64b0 <_free_r>
    67b4:	e5951040 	ldr	r1, [r5, #64]	; 0x40
    67b8:	e3510000 	cmp	r1, #0
    67bc:	11a00005 	movne	r0, r5
    67c0:	1bffff3a 	blne	64b0 <_free_r>
    67c4:	e5951148 	ldr	r1, [r5, #328]	; 0x148
    67c8:	e3510000 	cmp	r1, #0
    67cc:	0a000008 	beq	67f4 <_reclaim_reent+0xac>
    67d0:	e2856f53 	add	r6, r5, #332	; 0x14c
    67d4:	e1510006 	cmp	r1, r6
    67d8:	0a000005 	beq	67f4 <_reclaim_reent+0xac>
    67dc:	e5914000 	ldr	r4, [r1]
    67e0:	e1a00005 	mov	r0, r5
    67e4:	ebffff31 	bl	64b0 <_free_r>
    67e8:	e1560004 	cmp	r6, r4
    67ec:	e1a01004 	mov	r1, r4
    67f0:	1afffff9 	bne	67dc <_reclaim_reent+0x94>
    67f4:	e5951054 	ldr	r1, [r5, #84]	; 0x54
    67f8:	e3510000 	cmp	r1, #0
    67fc:	11a00005 	movne	r0, r5
    6800:	1bffff2a 	blne	64b0 <_free_r>
    6804:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    6808:	e3530000 	cmp	r3, #0
    680c:	1a000001 	bne	6818 <_reclaim_reent+0xd0>
    6810:	e8bd4070 	pop	{r4, r5, r6, lr}
    6814:	e12fff1e 	bx	lr
    6818:	e1a00005 	mov	r0, r5
    681c:	e595c03c 	ldr	r12, [r5, #60]	; 0x3c
    6820:	e1a0e00f 	mov	lr, pc
    6824:	e12fff1c 	bx	r12
    6828:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
    682c:	e3510000 	cmp	r1, #0
    6830:	0afffff6 	beq	6810 <_reclaim_reent+0xc8>
    6834:	e1a00005 	mov	r0, r5
    6838:	e8bd4070 	pop	{r4, r5, r6, lr}
    683c:	eaffffb6 	b	671c <cleanup_glue>
    6840:	0002bcf8 	.word	0x0002bcf8

00006844 <_wrapup_reent>:
    6844:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    6848:	e2507000 	subs	r7, r0, #0
    684c:	059f3060 	ldreq	r3, [pc, #96]	; 68b4 <_wrapup_reent+0x70>
    6850:	05937000 	ldreq	r7, [r3]
    6854:	e5976148 	ldr	r6, [r7, #328]	; 0x148
    6858:	e3560000 	cmp	r6, #0
    685c:	0a00000d 	beq	6898 <_wrapup_reent+0x54>
    6860:	e5965004 	ldr	r5, [r6, #4]
    6864:	e2554001 	subs	r4, r5, #1
    6868:	52855002 	addpl	r5, r5, #2
    686c:	50865105 	addpl	r5, r6, r5, lsl #2
    6870:	4a000005 	bmi	688c <_wrapup_reent+0x48>
    6874:	e5353004 	ldr	r3, [r5, #-4]!
    6878:	e2444001 	sub	r4, r4, #1
    687c:	e1a0e00f 	mov	lr, pc
    6880:	e12fff13 	bx	r3
    6884:	e3740001 	cmn	r4, #1
    6888:	1afffff9 	bne	6874 <_wrapup_reent+0x30>
    688c:	e5966000 	ldr	r6, [r6]
    6890:	e3560000 	cmp	r6, #0
    6894:	1afffff1 	bne	6860 <_wrapup_reent+0x1c>
    6898:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
    689c:	e3530000 	cmp	r3, #0
    68a0:	11a00007 	movne	r0, r7
    68a4:	11a0e00f 	movne	lr, pc
    68a8:	112fff13 	bxne	r3
    68ac:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    68b0:	e12fff1e 	bx	lr
    68b4:	0002bcf8 	.word	0x0002bcf8

000068b8 <__cs3_premain>:
    68b8:	e92d4008 	push	{r3, lr}
    68bc:	eb000033 	bl	6990 <__libc_init_array>
    68c0:	e59f3030 	ldr	r3, [pc, #48]	; 68f8 <__cs3_premain+0x40>
    68c4:	e3530000 	cmp	r3, #0
    68c8:	15930000 	ldrne	r0, [r3]
    68cc:	01a00003 	moveq	r0, r3
    68d0:	e59f3024 	ldr	r3, [pc, #36]	; 68fc <__cs3_premain+0x44>
    68d4:	e3530000 	cmp	r3, #0
    68d8:	15931000 	ldrne	r1, [r3]
    68dc:	01a01003 	moveq	r1, r3
    68e0:	e3a02000 	mov	r2, #0
    68e4:	ebffe6ae 	bl	3a4 <main>
    68e8:	e59f3010 	ldr	r3, [pc, #16]	; 6900 <__cs3_premain+0x48>
    68ec:	e3530000 	cmp	r3, #0
    68f0:	1bfffb77 	blne	56d4 <exit>
    68f4:	eafffffe 	b	68f4 <__cs3_premain+0x3c>
	...
    6900:	000056d4 	.word	0x000056d4

00006904 <_exit>:
    6904:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    6908:	e3a00018 	mov	r0, #24
    690c:	e59f1004 	ldr	r1, [pc, #4]	; 6918 <_exit+0x14>
    6910:	ef123456 	svc	0x00123456
    6914:	eafffffe 	b	6914 <_exit+0x10>
    6918:	00020026 	.word	0x00020026

0000691c <_sbrk>:
    691c:	e92d4008 	push	{r3, lr}
    6920:	e59f305c 	ldr	r3, [pc, #92]	; 6984 <_sbrk+0x68>
    6924:	e59f105c 	ldr	r1, [pc, #92]	; 6988 <_sbrk+0x6c>
    6928:	e5932000 	ldr	r2, [r3]
    692c:	e5913000 	ldr	r3, [r1]
    6930:	e3520000 	cmp	r2, #0
    6934:	e0830000 	add	r0, r3, r0
    6938:	0a000002 	beq	6948 <_sbrk+0x2c>
    693c:	e0602002 	rsb	r2, r0, r2
    6940:	e3520000 	cmp	r2, #0
    6944:	ba000009 	blt	6970 <_sbrk+0x54>
    6948:	e04d2003 	sub	r2, sp, r3
    694c:	e3520000 	cmp	r2, #0
    6950:	ba000002 	blt	6960 <_sbrk+0x44>
    6954:	e04d2000 	sub	r2, sp, r0
    6958:	e35200ff 	cmp	r2, #255	; 0xff
    695c:	da000003 	ble	6970 <_sbrk+0x54>
    6960:	e5810000 	str	r0, [r1]
    6964:	e1a00003 	mov	r0, r3
    6968:	e8bd4008 	pop	{r3, lr}
    696c:	e12fff1e 	bx	lr
    6970:	ebfffb53 	bl	56c4 <__errno>
    6974:	e3a0300c 	mov	r3, #12
    6978:	e5803000 	str	r3, [r0]
    697c:	e3e03000 	mvn	r3, #0
    6980:	eafffff7 	b	6964 <_sbrk+0x48>
    6984:	0002c538 	.word	0x0002c538
    6988:	0002c53c 	.word	0x0002c53c

0000698c <__cs3_isr_interrupt>:
    698c:	eafffffe 	b	698c <__cs3_isr_interrupt>

00006990 <__libc_init_array>:
    6990:	e92d4070 	push	{r4, r5, r6, lr}
    6994:	e59f506c 	ldr	r5, [pc, #108]	; 6a08 <__libc_init_array+0x78>
    6998:	e59f606c 	ldr	r6, [pc, #108]	; 6a0c <__libc_init_array+0x7c>
    699c:	e0656006 	rsb	r6, r5, r6
    69a0:	e1b06146 	asrs	r6, r6, #2
    69a4:	12455004 	subne	r5, r5, #4
    69a8:	13a04000 	movne	r4, #0
    69ac:	0a000005 	beq	69c8 <__libc_init_array+0x38>
    69b0:	e5b53004 	ldr	r3, [r5, #4]!
    69b4:	e2844001 	add	r4, r4, #1
    69b8:	e1a0e00f 	mov	lr, pc
    69bc:	e12fff13 	bx	r3
    69c0:	e1560004 	cmp	r6, r4
    69c4:	1afffff9 	bne	69b0 <__libc_init_array+0x20>
    69c8:	e59f5040 	ldr	r5, [pc, #64]	; 6a10 <__libc_init_array+0x80>
    69cc:	e59f6040 	ldr	r6, [pc, #64]	; 6a14 <__libc_init_array+0x84>
    69d0:	e0656006 	rsb	r6, r5, r6
    69d4:	eb0000ce 	bl	6d14 <_init>
    69d8:	e1b06146 	asrs	r6, r6, #2
    69dc:	12455004 	subne	r5, r5, #4
    69e0:	13a04000 	movne	r4, #0
    69e4:	0a000005 	beq	6a00 <__libc_init_array+0x70>
    69e8:	e5b53004 	ldr	r3, [r5, #4]!
    69ec:	e2844001 	add	r4, r4, #1
    69f0:	e1a0e00f 	mov	lr, pc
    69f4:	e12fff13 	bx	r3
    69f8:	e1560004 	cmp	r6, r4
    69fc:	1afffff9 	bne	69e8 <__libc_init_array+0x58>
    6a00:	e8bd4070 	pop	{r4, r5, r6, lr}
    6a04:	e12fff1e 	bx	lr
    6a08:	00006d2c 	.word	0x00006d2c
    6a0c:	00006d2c 	.word	0x00006d2c
    6a10:	00006d2c 	.word	0x00006d2c
    6a14:	00006d34 	.word	0x00006d34

Disassembly of section .rodata:

00006a20 <seg7_codes>:
    6a20:	4f5b063f 077d6d66 7c77677f 71795e39     ?.[Ofm}..gw|9^yq

00006a30 <song_list>:
    6a30:	00006d74 00000001 00006d80 00000001     tm.......m......
    6a40:	00006d8c 00000004                       .m......

00006a48 <volume_sensitivity>:
    6a48:	00000000 3ff80000                       .......?

00006a50 <default_volume>:
    6a50:	00000005                                ....

00006a54 <min_volume>:
    6a54:	00000000                                ....

00006a58 <max_volume>:
    6a58:	0000000a                                ....

00006a5c <error_code>:
    6a5c:	00000040 00000041 00007343 00000045     @...A...Cs..E...
    6a6c:	00000053 00000042 00007344 00007346     S...B...Ds..Fs..
    6a7c:	00000047 00000043 00000044 00000046     G...C...D...F...
    6a8c:	00007341                                As..

00006a90 <harmonic_intensities>:
    6a90:	00000000 3ff00000 00000000 3fe00000     .......?.......?
    6aa0:	00000000 3fd00000                       .......?

00006aa8 <num_harmonics>:
    6aa8:	00000000 40080000                       .......@

00006ab0 <default_amplitude>:
    6ab0:	c0000000 4150624d                       ....MbPA

00006ab8 <sampling_period>:
    6ab8:	d2f1a9fc 3f20624d                       ....Mb ?

00006ac0 <sampling_frequency>:
    6ac0:	00001f40 00000000                       @.......

00006ac8 <pi>:
    6ac8:	54442d18 400921fb 00006244 00006245     .-DT.!.@Db..Eb..
    6ad8:	00006247 00007347 00006241 00006242     Gb..Gs..Ab..Bb..
    6ae8:	00776f70 00000000                       pow.....

00006af0 <bp>:
    6af0:	00000000 3ff00000 00000000 3ff80000     .......?.......?

00006b00 <dp_l>:
	...
    6b08:	43cfd006 3e4cfdeb                       ...C..L>

00006b10 <dp_h>:
	...
    6b18:	40000000 3fe2b803 00000000              ...@...?....

00006b24 <npio2_hw>:
    6b24:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
    6b34:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
    6b44:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
    6b54:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
    6b64:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
    6b74:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
    6b84:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
    6b94:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00006ba4 <two_over_pi>:
    6ba4:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
    6bb4:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
    6bc4:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
    6bd4:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
    6be4:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
    6bf4:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
    6c04:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
    6c14:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
    6c24:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
    6c34:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
    6c44:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
    6c54:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
    6c64:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
    6c74:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
    6c84:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
    6c94:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
    6ca4:	0060e27b 00c08c6b 00000000              {.`.k.......

00006cb0 <init_jk>:
    6cb0:	00000002 00000003 00000004 00000006     ................

00006cc0 <PIo2>:
    6cc0:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
    6cd0:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
    6ce0:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
    6cf0:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

00006d00 <TWO52>:
    6d00:	00000000 43300000 00000000 c3300000     ......0C......0.

00006d10 <_global_impure_ptr>:
    6d10:	0002bd00                                ....

00006d14 <_init>:
    6d14:	e1a0c00d 	mov	r12, sp
    6d18:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    6d1c:	e24cb004 	sub	r11, r12, #4
    6d20:	e24bd028 	sub	sp, r11, #40	; 0x28
    6d24:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    6d28:	e12fff1e 	bx	lr

00006d2c <__init_array_start>:
    6d2c:	0000634c 	.word	0x0000634c

00006d30 <__frame_dummy_init_array_entry>:
    6d30:	00000208                                ....

00006d34 <__libc_fini>:
    6d34:	e1a0c00d 	mov	r12, sp
    6d38:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    6d3c:	e24cb004 	sub	r11, r12, #4
    6d40:	e24bd028 	sub	sp, r11, #40	; 0x28
    6d44:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    6d48:	e12fff1e 	bx	lr

00006d4c <__fini_array_start>:
    6d4c:	000001c4 	.word	0x000001c4

00006d50 <__cs3_regions>:
    6d50:	00000000 	.word	0x00000000
    6d54:	00000040 	.word	0x00000040
    6d58:	00000040 	.word	0x00000040
    6d5c:	0002c500 	.word	0x0002c500
    6d60:	00005538 	.word	0x00005538

00006d64 <__cs3_regions_end>:
    6d64:	00000000 	.word	0x00000000
