
C:/Users/David/Documents/GitHub/happy-birthday-project/project_main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	88 0c 00 00 8c 0c 00 00 90 0c 00 00 94 0c 00 00     ................
<<<<<<< HEAD
  30:	98 0c 00 00 bc 75 00 00 28 0c 00 00 9c 0c 00 00     .....u..(.......
=======
  30:	98 0c 00 00 84 71 00 00 28 0c 00 00 9c 0c 00 00     .....q..(.......
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
<<<<<<< HEAD
      d4:	eb001d03 	bl	74e8 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000079bc 	.word	0x000079bc
=======
      d4:	eb001bf5 	bl	70b0 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	0000757c 	.word	0x0000757c
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
<<<<<<< HEAD
     120:	00126228 	.word	0x00126228

00000124 <__cs3_heap_start_ptr>:
     124:	00153fe8 	.word	0x00153fe8
=======
     120:	000e54e0 	.word	0x000e54e0

00000124 <__cs3_heap_start_ptr>:
     124:	001075c0 	.word	0x001075c0
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
<<<<<<< HEAD
     16c:	00126230 	.word	0x00126230
     170:	00126233 	.word	0x00126233
=======
     16c:	000e54e8 	.word	0x000e54e8
     170:	000e54eb 	.word	0x000e54eb
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
<<<<<<< HEAD
     1b8:	00126230 	.word	0x00126230
     1bc:	00126230 	.word	0x00126230
=======
     1b8:	000e54e8 	.word	0x000e54e8
     1bc:	000e54e8 	.word	0x000e54e8
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
<<<<<<< HEAD
     1fc:	00126230 	.word	0x00126230
     200:	00000000 	.word	0x00000000
     204:	00007648 	.word	0x00007648
=======
     1fc:	000e54e8 	.word	0x000e54e8
     200:	00000000 	.word	0x00000000
     204:	00007210 	.word	0x00007210
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
<<<<<<< HEAD
     24c:	00007648 	.word	0x00007648
     250:	00126234 	.word	0x00126234
     254:	000079c0 	.word	0x000079c0
=======
     24c:	00007210 	.word	0x00007210
     250:	000e54ec 	.word	0x000e54ec
     254:	00007580 	.word	0x00007580
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     258:	00000000 	.word	0x00000000

0000025c <num_to_seg7_hex>:
	 
const char error_code = 0b01000000;

short int num_to_seg7_hex(unsigned int num){
	//make sure that the number does not exceed 0xFF
	if(num > 0xFF) return error_code | (error_code << 8);
     25c:	e35000ff 	cmp	r0, #255	; 0xff
	//extract the digits from the num given
	int first_hexdigit = num & 0xF;
	int second_hexdigit = num >> 4;
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
<<<<<<< HEAD
     260:	93073650 	movwls	r3, #30288	; 0x7650
=======
     260:	93073218 	movwls	r3, #29208	; 0x7218
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
short int num_to_seg7_hex(unsigned int num){
	//make sure that the number does not exceed 0xFF
	if(num > 0xFF) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num & 0xF;
     264:	9200200f 	andls	r2, r0, #15
	int second_hexdigit = num >> 4;
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     268:	93403000 	movtls	r3, #0
	 
const char error_code = 0b01000000;

short int num_to_seg7_hex(unsigned int num){
	//make sure that the number does not exceed 0xFF
	if(num > 0xFF) return error_code | (error_code << 8);
     26c:	83040040 	movwhi	r0, #16448	; 0x4040
	//extract the digits from the num given
	int first_hexdigit = num & 0xF;
	int second_hexdigit = num >> 4;
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     270:	97d30220 	ldrbls	r0, [r3, r0, lsr #4]
     274:	97d33002 	ldrbls	r3, [r3, r2]
	
	return to_return;
     278:	91830400 	orrls	r0, r3, r0, lsl #8
}
     27c:	e6bf0070 	sxth	r0, r0
     280:	e12fff1e 	bx	lr

00000284 <num_to_seg7_dec>:

short int num_to_seg7_dec(unsigned int num){
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
     284:	e3500063 	cmp	r0, #99	; 0x63
     288:	83040040 	movwhi	r0, #16448	; 0x4040
     28c:	9a000001 	bls	298 <num_to_seg7_dec+0x14>
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
	
	return to_return;
     290:	e6bf0070 	sxth	r0, r0
     294:	e12fff1e 	bx	lr
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
     298:	e30c1ccd 	movw	r1, #52429	; 0xcccd
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
<<<<<<< HEAD
     29c:	e3073650 	movw	r3, #30288	; 0x7650
=======
     29c:	e3073218 	movw	r3, #29208	; 0x7218
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
     2a0:	e34c1ccc 	movt	r1, #52428	; 0xcccc
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     2a4:	e3403000 	movt	r3, #0
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
     2a8:	e0812091 	umull	r2, r1, r1, r0
     2ac:	e1a021a1 	lsr	r2, r1, #3
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     2b0:	e7d311a1 	ldrb	r1, [r3, r1, lsr #3]
short int num_to_seg7_dec(unsigned int num){
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
     2b4:	e0822102 	add	r2, r2, r2, lsl #2
     2b8:	e0400082 	sub	r0, r0, r2, lsl #1
	int second_hexdigit = num / 10;
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     2bc:	e7d33000 	ldrb	r3, [r3, r0]
	
	return to_return;
     2c0:	e1830401 	orr	r0, r3, r1, lsl #8
     2c4:	e6bf0070 	sxth	r0, r0
     2c8:	e12fff1e 	bx	lr

000002cc <display_status>:
	}
	
	return 0;
}

void display_status(){
     2cc:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
	
	//store all ledr displays
	int to_display_on_ledr = 0;
	
	//display if the stream has been fully populated
	if (is_stream_fully_processed()) 
<<<<<<< HEAD
     2d0:	eb00062e 	bl	1b90 <is_stream_fully_processed>
=======
     2d0:	eb0005cc 	bl	1a08 <is_stream_fully_processed>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	volatile int * ledr_base = (int*) LEDR_BASE;
	volatile int * hex3_hex0_base = (int*) HEX3_HEX0_BASE;
	volatile int * hex5_hex4_base = (int*) HEX5_HEX4_BASE;
	
	//store all ledr displays
	int to_display_on_ledr = 0;
     2d4:	e3500000 	cmp	r0, #0
     2d8:	13a06002 	movne	r6, #2
     2dc:	03a06000 	moveq	r6, #0
	//display if the stream has been fully populated
	if (is_stream_fully_processed()) 
		to_display_on_ledr = 0x2;
	
	//display if the stream is currently valid
	if (is_stream_valid())
<<<<<<< HEAD
     2e0:	eb0005f2 	bl	1ab0 <is_stream_valid>
=======
     2e0:	eb00059c 	bl	1958 <is_stream_valid>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		to_display_on_ledr = to_display_on_ledr | 0x1;
	
	//display if the audio output overflowed
	if(status_flags.volume_clipped){
<<<<<<< HEAD
     2e4:	e3063250 	movw	r3, #25168	; 0x6250
=======
     2e4:	e3053508 	movw	r3, #21768	; 0x5508
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//display if the stream has been fully populated
	if (is_stream_fully_processed()) 
		to_display_on_ledr = 0x2;
	
	//display if the stream is currently valid
	if (is_stream_valid())
     2e8:	e3500000 	cmp	r0, #0
		to_display_on_ledr = to_display_on_ledr | 0x1;
	
	//display if the audio output overflowed
	if(status_flags.volume_clipped){
     2ec:	e340300e 	movt	r3, #14
	if (is_stream_fully_processed()) 
		to_display_on_ledr = 0x2;
	
	//display if the stream is currently valid
	if (is_stream_valid())
		to_display_on_ledr = to_display_on_ledr | 0x1;
     2f0:	13866001 	orrne	r6, r6, #1
	
	//display if the audio output overflowed
	if(status_flags.volume_clipped){
     2f4:	e5d32003 	ldrb	r2, [r3, #3]
		to_display_on_ledr = to_display_on_ledr | 0x200;
	}
	
	//display if frequency overflow has occurred
	if(status_flags.frequency_overflow){
     2f8:	e5d33004 	ldrb	r3, [r3, #4]
	//display if the stream is currently valid
	if (is_stream_valid())
		to_display_on_ledr = to_display_on_ledr | 0x1;
	
	//display if the audio output overflowed
	if(status_flags.volume_clipped){
     2fc:	e3520000 	cmp	r2, #0
		to_display_on_ledr = to_display_on_ledr | 0x200;
     300:	13866c02 	orrne	r6, r6, #512	; 0x200
	}
	
	//display if frequency overflow has occurred
	if(status_flags.frequency_overflow){
     304:	e3530000 	cmp	r3, #0
	//store all hex displays
	int to_display_on_hex3_hex0 = 0;
	int to_display_on_hex5_hex4 = 0;
	
	//display the current volume on the hexes
	to_display_on_hex3_hex0 = num_to_seg7_dec(volume);
<<<<<<< HEAD
     308:	e30739c8 	movw	r3, #31176	; 0x79c8
=======
     308:	e3073588 	movw	r3, #30088	; 0x7588
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		to_display_on_ledr = to_display_on_ledr | 0x200;
	}
	
	//display if frequency overflow has occurred
	if(status_flags.frequency_overflow){
		to_display_on_ledr = to_display_on_ledr | 0x100;
     30c:	13866c01 	orrne	r6, r6, #256	; 0x100
	//store all hex displays
	int to_display_on_hex3_hex0 = 0;
	int to_display_on_hex5_hex4 = 0;
	
	//display the current volume on the hexes
	to_display_on_hex3_hex0 = num_to_seg7_dec(volume);
     310:	e3403000 	movt	r3, #0
     314:	e5933000 	ldr	r3, [r3]
	return to_return;
}

short int num_to_seg7_dec(unsigned int num){
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
     318:	e3530063 	cmp	r3, #99	; 0x63
     31c:	83047040 	movwhi	r7, #16448	; 0x4040
     320:	9a00006c 	bls	4d8 <display_status+0x20c>
	
	//display the current length on the hexes as well
	double time_left = get_time_left();
<<<<<<< HEAD
     324:	eb00065e 	bl	1ca4 <get_time_left>
=======
     324:	eb0005fc 	bl	1b1c <get_time_left>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//decide to display the deciseconds or not
	if(time_left > 100){
     328:	e3a03000 	mov	r3, #0
     32c:	e3a02000 	mov	r2, #0
     330:	e3443059 	movt	r3, #16473	; 0x4059
	
	//display the current volume on the hexes
	to_display_on_hex3_hex0 = num_to_seg7_dec(volume);
	
	//display the current length on the hexes as well
	double time_left = get_time_left();
     334:	e1a04000 	mov	r4, r0
     338:	e1a05001 	mov	r5, r1
	//decide to display the deciseconds or not
	if(time_left > 100){
<<<<<<< HEAD
     33c:	eb0017b2 	bl	620c <__aeabi_dcmpgt>
=======
     33c:	eb0016a4 	bl	5dd4 <__aeabi_dcmpgt>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     340:	e3500000 	cmp	r0, #0
     344:	1a00003f 	bne	448 <display_status+0x17c>
		to_display_on_hex3_hex0 = to_display_on_hex3_hex0 | (num_to_seg7_dec(((int) time_left) % 60) << 16);
		to_display_on_hex5_hex4 = num_to_seg7_dec(((int) time_left) / 60);
	} else { //display the deciseconds
		to_display_on_hex3_hex0 = to_display_on_hex3_hex0 | (num_to_seg7_dec(((int) (time_left * 100)) % 100) << 16);
     348:	e3a03000 	mov	r3, #0
     34c:	e3a02000 	mov	r2, #0
     350:	e3443059 	movt	r3, #16473	; 0x4059
     354:	e1a00004 	mov	r0, r4
     358:	e1a01005 	mov	r1, r5
<<<<<<< HEAD
     35c:	eb001638 	bl	5c44 <__aeabi_dmul>
     360:	eb0017af 	bl	6224 <__aeabi_d2iz>
=======
     35c:	eb00152a 	bl	580c <__aeabi_dmul>
     360:	eb0016a1 	bl	5dec <__aeabi_d2iz>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     364:	e308251f 	movw	r2, #34079	; 0x851f
     368:	e1a01fc0 	asr	r1, r0, #31
     36c:	e34521eb 	movt	r2, #20971	; 0x51eb
     370:	e0c3c092 	smull	r12, r3, r2, r0
     374:	e3a02064 	mov	r2, #100	; 0x64
     378:	e06132c3 	rsb	r3, r1, r3, asr #5
     37c:	e0630392 	mls	r3, r2, r3, r0
     380:	e3530063 	cmp	r3, #99	; 0x63
     384:	83a03000 	movhi	r3, #0
     388:	83443040 	movthi	r3, #16448	; 0x4040
     38c:	9a000020 	bls	414 <display_status+0x148>
		to_display_on_hex5_hex4 = num_to_seg7_dec(((int) time_left) % 100);
     390:	e1a00004 	mov	r0, r4
     394:	e1a01005 	mov	r1, r5
	//decide to display the deciseconds or not
	if(time_left > 100){
		to_display_on_hex3_hex0 = to_display_on_hex3_hex0 | (num_to_seg7_dec(((int) time_left) % 60) << 16);
		to_display_on_hex5_hex4 = num_to_seg7_dec(((int) time_left) / 60);
	} else { //display the deciseconds
		to_display_on_hex3_hex0 = to_display_on_hex3_hex0 | (num_to_seg7_dec(((int) (time_left * 100)) % 100) << 16);
     398:	e1837007 	orr	r7, r3, r7
		to_display_on_hex5_hex4 = num_to_seg7_dec(((int) time_left) % 100);
<<<<<<< HEAD
     39c:	eb0017a0 	bl	6224 <__aeabi_d2iz>
=======
     39c:	eb001692 	bl	5dec <__aeabi_d2iz>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     3a0:	e308251f 	movw	r2, #34079	; 0x851f
     3a4:	e1a01fc0 	asr	r1, r0, #31
     3a8:	e34521eb 	movt	r2, #20971	; 0x51eb
     3ac:	e0c34092 	smull	r4, r3, r2, r0
     3b0:	e3a02064 	mov	r2, #100	; 0x64
     3b4:	e06132c3 	rsb	r3, r1, r3, asr #5
     3b8:	e0630392 	mls	r3, r2, r3, r0
     3bc:	e3530063 	cmp	r3, #99	; 0x63
     3c0:	9a000006 	bls	3e0 <display_status+0x114>
     3c4:	e3042040 	movw	r2, #16448	; 0x4040
	}
	
	//display on hex and ledr
	*ledr_base = to_display_on_ledr;
     3c8:	e3a03000 	mov	r3, #0
     3cc:	e34f3f20 	movt	r3, #65312	; 0xff20
     3d0:	e5836000 	str	r6, [r3]
	*hex3_hex0_base = to_display_on_hex3_hex0;
     3d4:	e5837020 	str	r7, [r3, #32]
	*hex5_hex4_base = to_display_on_hex5_hex4;
     3d8:	e5832030 	str	r2, [r3, #48]	; 0x30
     3dc:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
     3e0:	e30c2ccd 	movw	r2, #52429	; 0xcccd
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
<<<<<<< HEAD
     3e4:	e3071650 	movw	r1, #30288	; 0x7650
=======
     3e4:	e3071218 	movw	r1, #29208	; 0x7218
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
     3e8:	e34c2ccc 	movt	r2, #52428	; 0xcccc
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     3ec:	e3401000 	movt	r1, #0
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
     3f0:	e082c392 	umull	r12, r2, r2, r3
     3f4:	e1a001a2 	lsr	r0, r2, #3
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     3f8:	e7d121a2 	ldrb	r2, [r1, r2, lsr #3]
short int num_to_seg7_dec(unsigned int num){
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
     3fc:	e0800100 	add	r0, r0, r0, lsl #2
     400:	e0433080 	sub	r3, r3, r0, lsl #1
	int second_hexdigit = num / 10;
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     404:	e7d13003 	ldrb	r3, [r1, r3]
     408:	e1832402 	orr	r2, r3, r2, lsl #8
     40c:	e6bf2072 	sxth	r2, r2
     410:	eaffffec 	b	3c8 <display_status+0xfc>
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
     414:	e30c0ccd 	movw	r0, #52429	; 0xcccd
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
<<<<<<< HEAD
     418:	e3072650 	movw	r2, #30288	; 0x7650
=======
     418:	e3072218 	movw	r2, #29208	; 0x7218
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
     41c:	e34c0ccc 	movt	r0, #52428	; 0xcccc
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     420:	e3402000 	movt	r2, #0
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
     424:	e0801390 	umull	r1, r0, r0, r3
     428:	e1a011a0 	lsr	r1, r0, #3
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     42c:	e7d201a0 	ldrb	r0, [r2, r0, lsr #3]
short int num_to_seg7_dec(unsigned int num){
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
     430:	e0811101 	add	r1, r1, r1, lsl #2
     434:	e0433081 	sub	r3, r3, r1, lsl #1
	int second_hexdigit = num / 10;
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     438:	e7d23003 	ldrb	r3, [r2, r3]
     43c:	e1833400 	orr	r3, r3, r0, lsl #8
     440:	e1a03803 	lsl	r3, r3, #16
     444:	eaffffd1 	b	390 <display_status+0xc4>
	
	//display the current length on the hexes as well
	double time_left = get_time_left();
	//decide to display the deciseconds or not
	if(time_left > 100){
		to_display_on_hex3_hex0 = to_display_on_hex3_hex0 | (num_to_seg7_dec(((int) time_left) % 60) << 16);
     448:	e1a01005 	mov	r1, r5
     44c:	e1a00004 	mov	r0, r4
<<<<<<< HEAD
     450:	eb001773 	bl	6224 <__aeabi_d2iz>
=======
     450:	eb001665 	bl	5dec <__aeabi_d2iz>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     454:	e3083889 	movw	r3, #34953	; 0x8889
     458:	e1a02fc0 	asr	r2, r0, #31
     45c:	e3483888 	movt	r3, #34952	; 0x8888
     460:	e0c34093 	smull	r4, r3, r3, r0
     464:	e0833000 	add	r3, r3, r0
     468:	e06232c3 	rsb	r3, r2, r3, asr #5
     46c:	e0633203 	rsb	r3, r3, r3, lsl #4
     470:	e0403103 	sub	r3, r0, r3, lsl #2
	return to_return;
}

short int num_to_seg7_dec(unsigned int num){
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
     474:	e3530063 	cmp	r3, #99	; 0x63
     478:	83a01000 	movhi	r1, #0
     47c:	83441040 	movthi	r1, #16448	; 0x4040
     480:	9a000021 	bls	50c <display_status+0x240>
		to_display_on_hex5_hex4 = num_to_seg7_dec(((int) time_left) / 60);
     484:	e3083889 	movw	r3, #34953	; 0x8889
	
	//display the current length on the hexes as well
	double time_left = get_time_left();
	//decide to display the deciseconds or not
	if(time_left > 100){
		to_display_on_hex3_hex0 = to_display_on_hex3_hex0 | (num_to_seg7_dec(((int) time_left) % 60) << 16);
     488:	e1817007 	orr	r7, r1, r7
		to_display_on_hex5_hex4 = num_to_seg7_dec(((int) time_left) / 60);
     48c:	e3483888 	movt	r3, #34952	; 0x8888
     490:	e0c3c093 	smull	r12, r3, r3, r0
     494:	e0830000 	add	r0, r3, r0
     498:	e06222c0 	rsb	r2, r2, r0, asr #5
     49c:	e3520063 	cmp	r2, #99	; 0x63
     4a0:	8affffc7 	bhi	3c4 <display_status+0xf8>
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
     4a4:	e30c0ccd 	movw	r0, #52429	; 0xcccd
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
<<<<<<< HEAD
     4a8:	e3073650 	movw	r3, #30288	; 0x7650
=======
     4a8:	e3073218 	movw	r3, #29208	; 0x7218
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
     4ac:	e34c0ccc 	movt	r0, #52428	; 0xcccc
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     4b0:	e3403000 	movt	r3, #0
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
     4b4:	e0801290 	umull	r1, r0, r0, r2
     4b8:	e1a011a0 	lsr	r1, r0, #3
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     4bc:	e7d3c1a0 	ldrb	r12, [r3, r0, lsr #3]
short int num_to_seg7_dec(unsigned int num){
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
     4c0:	e0811101 	add	r1, r1, r1, lsl #2
     4c4:	e0422081 	sub	r2, r2, r1, lsl #1
	int second_hexdigit = num / 10;
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     4c8:	e7d33002 	ldrb	r3, [r3, r2]
     4cc:	e183240c 	orr	r2, r3, r12, lsl #8
     4d0:	e6bf2072 	sxth	r2, r2
     4d4:	eaffffbb 	b	3c8 <display_status+0xfc>
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
     4d8:	e30c0ccd 	movw	r0, #52429	; 0xcccd
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
<<<<<<< HEAD
     4dc:	e3072650 	movw	r2, #30288	; 0x7650
=======
     4dc:	e3072218 	movw	r2, #29208	; 0x7218
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
     4e0:	e34c0ccc 	movt	r0, #52428	; 0xcccc
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     4e4:	e3402000 	movt	r2, #0
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
     4e8:	e0801390 	umull	r1, r0, r0, r3
     4ec:	e1a011a0 	lsr	r1, r0, #3
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     4f0:	e7d271a0 	ldrb	r7, [r2, r0, lsr #3]
short int num_to_seg7_dec(unsigned int num){
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
     4f4:	e0811101 	add	r1, r1, r1, lsl #2
     4f8:	e0433081 	sub	r3, r3, r1, lsl #1
	int second_hexdigit = num / 10;
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     4fc:	e7d23003 	ldrb	r3, [r2, r3]
     500:	e1837407 	orr	r7, r3, r7, lsl #8
     504:	e6bf7077 	sxth	r7, r7
     508:	eaffff85 	b	324 <display_status+0x58>
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
     50c:	e30c1ccd 	movw	r1, #52429	; 0xcccd
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
<<<<<<< HEAD
     510:	e307c650 	movw	r12, #30288	; 0x7650
=======
     510:	e307c218 	movw	r12, #29208	; 0x7218
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
     514:	e34c1ccc 	movt	r1, #52428	; 0xcccc
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     518:	e340c000 	movt	r12, #0
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
	int second_hexdigit = num / 10;
     51c:	e0814391 	umull	r4, r1, r1, r3
     520:	e1a041a1 	lsr	r4, r1, #3
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     524:	e7dc11a1 	ldrb	r1, [r12, r1, lsr #3]
short int num_to_seg7_dec(unsigned int num){
	//make sure that the number does not exceed 99
	if(num > 99) return error_code | (error_code << 8);
	
	//extract the digits from the num given
	int first_hexdigit = num % 10;
     528:	e0844104 	add	r4, r4, r4, lsl #2
     52c:	e0433084 	sub	r3, r3, r4, lsl #1
	int second_hexdigit = num / 10;
	
	//append the seg 7 codes for the hex digits
	int to_return = seg7_codes[first_hexdigit] | (seg7_codes[second_hexdigit] << 8);
     530:	e7dc3003 	ldrb	r3, [r12, r3]
     534:	e1831401 	orr	r1, r3, r1, lsl #8
     538:	e1a01801 	lsl	r1, r1, #16
     53c:	eaffffd0 	b	484 <display_status+0x1b8>

00000540 <stop_all_audio_playback>:
}

void stop_all_audio_playback(){
	volatile int * audio_base = (int *) AUDIO_BASE;
	
	unsigned int fifo_space = *(audio_base + 1);
     540:	e3031fff 	movw	r1, #16383	; 0x3fff
     544:	e34f1f20 	movt	r1, #65312	; 0xff20
     548:	e5110fbb 	ldr	r0, [r1, #-4027]	; 0xfffff045
	
	//stop audio playback for the right
	unsigned int num_samples_right = (unsigned int) ((fifo_space >> 16) & 0xFF);
     54c:	e7e73850 	ubfx	r3, r0, #16, #8
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     550:	e3530000 	cmp	r3, #0
		//write nothing to the audio fifo (merely to clear the interrupt)
		*audio_fifo = 0;
     554:	13a02000 	movne	r2, #0
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     558:	0a000002 	beq	568 <stop_all_audio_playback+0x28>
     55c:	e2533001 	subs	r3, r3, #1
		//write nothing to the audio fifo (merely to clear the interrupt)
		*audio_fifo = 0;
     560:	e5012fb3 	str	r2, [r1, #-4019]	; 0xfffff04d
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     564:	1afffffc 	bne	55c <stop_all_audio_playback+0x1c>
     568:	e1b03c20 	lsrs	r3, r0, #24
		*num_samples = *num_samples - 1;
	}
	
	//turn off interrupts
	volatile int * audio_base = (int*) AUDIO_BASE;
	*audio_base = 0b0000;
     56c:	e3031fff 	movw	r1, #16383	; 0x3fff
	
	//set the status flags
	status_flags.is_playing = false;
<<<<<<< HEAD
     570:	e3060250 	movw	r0, #25168	; 0x6250
=======
     570:	e3050508 	movw	r0, #21768	; 0x5508
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		*num_samples = *num_samples - 1;
	}
	
	//turn off interrupts
	volatile int * audio_base = (int*) AUDIO_BASE;
	*audio_base = 0b0000;
     574:	e3a02000 	mov	r2, #0
     578:	e34f1f20 	movt	r1, #65312	; 0xff20
	
	//set the status flags
	status_flags.is_playing = false;
     57c:	e340000e 	movt	r0, #14
		*num_samples = *num_samples - 1;
	}
	
	//turn off interrupts
	volatile int * audio_base = (int*) AUDIO_BASE;
	*audio_base = 0b0000;
     580:	e5012fbf 	str	r2, [r1, #-4031]	; 0xfffff041
	
	//set the status flags
	status_flags.is_playing = false;
     584:	e5c02002 	strb	r2, [r0, #2]
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     588:	0a000002 	beq	598 <stop_all_audio_playback+0x58>
     58c:	e2533001 	subs	r3, r3, #1
		//write nothing to the audio fifo (merely to clear the interrupt)
		*audio_fifo = 0;
     590:	e5012fb7 	str	r2, [r1, #-4023]	; 0xfffff049
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     594:	1afffffc 	bne	58c <stop_all_audio_playback+0x4c>
		*num_samples = *num_samples - 1;
	}
	
	//turn off interrupts
	volatile int * audio_base = (int*) AUDIO_BASE;
	*audio_base = 0b0000;
     598:	e3033fff 	movw	r3, #16383	; 0x3fff
     59c:	e3a02000 	mov	r2, #0
     5a0:	e34f3f20 	movt	r3, #65312	; 0xff20
     5a4:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
     5a8:	e12fff1e 	bx	lr

000005ac <stop_audio_playback>:
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     5ac:	e5903000 	ldr	r3, [r0]
     5b0:	e3530000 	cmp	r3, #0
		//write nothing to the audio fifo (merely to clear the interrupt)
		*audio_fifo = 0;
     5b4:	13a02000 	movne	r2, #0
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     5b8:	0a000005 	beq	5d4 <stop_audio_playback+0x28>
		//write nothing to the audio fifo (merely to clear the interrupt)
		*audio_fifo = 0;
     5bc:	e5812000 	str	r2, [r1]
		
		//advance the number of samples
		*num_samples = *num_samples - 1;
     5c0:	e5903000 	ldr	r3, [r0]
     5c4:	e2433001 	sub	r3, r3, #1
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     5c8:	e3530000 	cmp	r3, #0
		//write nothing to the audio fifo (merely to clear the interrupt)
		*audio_fifo = 0;
		
		//advance the number of samples
		*num_samples = *num_samples - 1;
     5cc:	e5803000 	str	r3, [r0]
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     5d0:	1afffff9 	bne	5bc <stop_audio_playback+0x10>
		*num_samples = *num_samples - 1;
	}
	
	//turn off interrupts
	volatile int * audio_base = (int*) AUDIO_BASE;
	*audio_base = 0b0000;
     5d4:	e3031fff 	movw	r1, #16383	; 0x3fff
	
	//set the status flags
	status_flags.is_playing = false;
<<<<<<< HEAD
     5d8:	e3063250 	movw	r3, #25168	; 0x6250
=======
     5d8:	e3053508 	movw	r3, #21768	; 0x5508
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		*num_samples = *num_samples - 1;
	}
	
	//turn off interrupts
	volatile int * audio_base = (int*) AUDIO_BASE;
	*audio_base = 0b0000;
     5dc:	e3a02000 	mov	r2, #0
     5e0:	e34f1f20 	movt	r1, #65312	; 0xff20
	
	//set the status flags
	status_flags.is_playing = false;
     5e4:	e340300e 	movt	r3, #14
		*num_samples = *num_samples - 1;
	}
	
	//turn off interrupts
	volatile int * audio_base = (int*) AUDIO_BASE;
	*audio_base = 0b0000;
     5e8:	e5012fbf 	str	r2, [r1, #-4031]	; 0xfffff041
	
	//set the status flags
	status_flags.is_playing = false;
     5ec:	e5c32002 	strb	r2, [r3, #2]
     5f0:	e12fff1e 	bx	lr

000005f4 <start_audio_playback>:
}

void start_audio_playback(){
     5f4:	e92d4008 	push	{r3, lr}
	//check to see if the stream is valid
	if(!is_stream_valid()) return;
<<<<<<< HEAD
     5f8:	eb00052c 	bl	1ab0 <is_stream_valid>
=======
     5f8:	eb0004d6 	bl	1958 <is_stream_valid>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     5fc:	e3500000 	cmp	r0, #0
     600:	08bd8008 	popeq	{r3, pc}
	
	//turn on interrupts
	volatile int * audio_base = (int*) AUDIO_BASE;
	*audio_base = 0b0010;
     604:	e3032fff 	movw	r2, #16383	; 0x3fff
	
	//set the playing flag
	status_flags.is_playing = true;
<<<<<<< HEAD
     608:	e3063250 	movw	r3, #25168	; 0x6250
=======
     608:	e3053508 	movw	r3, #21768	; 0x5508
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//check to see if the stream is valid
	if(!is_stream_valid()) return;
	
	//turn on interrupts
	volatile int * audio_base = (int*) AUDIO_BASE;
	*audio_base = 0b0010;
     60c:	e34f2f20 	movt	r2, #65312	; 0xff20
     610:	e3a01002 	mov	r1, #2
     614:	e5021fbf 	str	r1, [r2, #-4031]	; 0xfffff041
	
	//set the playing flag
	status_flags.is_playing = true;
     618:	e340300e 	movt	r3, #14
     61c:	e3a02001 	mov	r2, #1
     620:	e5c32002 	strb	r2, [r3, #2]
     624:	e8bd8008 	pop	{r3, pc}

00000628 <keys_ISR>:
}

void keys_ISR(){
     628:	e92d4038 	push	{r3, r4, r5, lr}
	volatile int * key_base = (int*) KEY_BASE;
	
	//read the reset the edgecapture bits
	int edgecapture = *(key_base + 3);
     62c:	e3a03000 	mov	r3, #0
     630:	e34f3f20 	movt	r3, #65312	; 0xff20
     634:	e593405c 	ldr	r4, [r3, #92]	; 0x5c
	*(key_base + 3) = edgecapture;
	
	//play selected song with key press 0
	if(edgecapture & 0b0001){		
     638:	e3140001 	tst	r4, #1
void keys_ISR(){
	volatile int * key_base = (int*) KEY_BASE;
	
	//read the reset the edgecapture bits
	int edgecapture = *(key_base + 3);
	*(key_base + 3) = edgecapture;
     63c:	e583405c 	str	r4, [r3, #92]	; 0x5c
	
	//play selected song with key press 0
	if(edgecapture & 0b0001){		
     640:	0a00001c 	beq	6b8 <keys_ISR+0x90>
		if(status_flags.is_playing){
<<<<<<< HEAD
     644:	e3065250 	movw	r5, #25168	; 0x6250
     648:	e3405012 	movt	r5, #18
=======
     644:	e3055508 	movw	r5, #21768	; 0x5508
     648:	e340500e 	movt	r5, #14
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     64c:	e5d53002 	ldrb	r3, [r5, #2]
     650:	e3530000 	cmp	r3, #0
     654:	0a000031 	beq	720 <keys_ISR+0xf8>
}

void stop_all_audio_playback(){
	volatile int * audio_base = (int *) AUDIO_BASE;
	
	unsigned int fifo_space = *(audio_base + 1);
     658:	e3031fff 	movw	r1, #16383	; 0x3fff
     65c:	e34f1f20 	movt	r1, #65312	; 0xff20
     660:	e5110fbb 	ldr	r0, [r1, #-4027]	; 0xfffff045
	
	//stop audio playback for the right
	unsigned int num_samples_right = (unsigned int) ((fifo_space >> 16) & 0xFF);
     664:	e7e73850 	ubfx	r3, r0, #16, #8
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     668:	e3530000 	cmp	r3, #0
		//write nothing to the audio fifo (merely to clear the interrupt)
		*audio_fifo = 0;
     66c:	13a02000 	movne	r2, #0
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     670:	0a000002 	beq	680 <keys_ISR+0x58>
     674:	e2533001 	subs	r3, r3, #1
		//write nothing to the audio fifo (merely to clear the interrupt)
		*audio_fifo = 0;
     678:	e5012fb3 	str	r2, [r1, #-4019]	; 0xfffff04d
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     67c:	1afffffc 	bne	674 <keys_ISR+0x4c>
     680:	e1b03c20 	lsrs	r3, r0, #24
		*num_samples = *num_samples - 1;
	}
	
	//turn off interrupts
	volatile int * audio_base = (int*) AUDIO_BASE;
	*audio_base = 0b0000;
     684:	e3031fff 	movw	r1, #16383	; 0x3fff
     688:	e3a02000 	mov	r2, #0
     68c:	e34f1f20 	movt	r1, #65312	; 0xff20
     690:	e5012fbf 	str	r2, [r1, #-4031]	; 0xfffff041
	
	//set the status flags
	status_flags.is_playing = false;
     694:	e5c52002 	strb	r2, [r5, #2]
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     698:	0a000002 	beq	6a8 <keys_ISR+0x80>
     69c:	e2533001 	subs	r3, r3, #1
		//write nothing to the audio fifo (merely to clear the interrupt)
		*audio_fifo = 0;
     6a0:	e5012fb7 	str	r2, [r1, #-4023]	; 0xfffff049
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     6a4:	1afffffc 	bne	69c <keys_ISR+0x74>
		*num_samples = *num_samples - 1;
	}
	
	//turn off interrupts
	volatile int * audio_base = (int*) AUDIO_BASE;
	*audio_base = 0b0000;
     6a8:	e3033fff 	movw	r3, #16383	; 0x3fff
     6ac:	e3a02000 	mov	r2, #0
     6b0:	e34f3f20 	movt	r3, #65312	; 0xff20
     6b4:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
			start_audio_playback();
		}
	}
	
	//change song to selected on switches and clear current queue if key press 1
	if(edgecapture & 0b0010){
     6b8:	e3140002 	tst	r4, #2
     6bc:	0a000006 	beq	6dc <keys_ISR+0xb4>
		status_flags.change_song = true;
<<<<<<< HEAD
     6c0:	e3065250 	movw	r5, #25168	; 0x6250
=======
     6c0:	e3055508 	movw	r5, #21768	; 0x5508
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     6c4:	e3a02001 	mov	r2, #1
     6c8:	e340500e 	movt	r5, #14
		
		//stop playing if there is a song currently playing
		if(status_flags.is_playing){
     6cc:	e5d53002 	ldrb	r3, [r5, #2]
		}
	}
	
	//change song to selected on switches and clear current queue if key press 1
	if(edgecapture & 0b0010){
		status_flags.change_song = true;
     6d0:	e5c52001 	strb	r2, [r5, #1]
		
		//stop playing if there is a song currently playing
		if(status_flags.is_playing){
     6d4:	e3530000 	cmp	r3, #0
     6d8:	1a00001a 	bne	748 <keys_ISR+0x120>
			stop_all_audio_playback();
		}
	}
	
	//increase volume if key press 2
	if(edgecapture & 0b0100){
     6dc:	e3140004 	tst	r4, #4
     6e0:	0a000005 	beq	6fc <keys_ISR+0xd4>
		if(volume < max_volume) volume++;
<<<<<<< HEAD
     6e4:	e30739c8 	movw	r3, #31176	; 0x79c8
=======
     6e4:	e3073588 	movw	r3, #30088	; 0x7588
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     6e8:	e3403000 	movt	r3, #0
     6ec:	e5932000 	ldr	r2, [r3]
     6f0:	e3520009 	cmp	r2, #9
     6f4:	92822001 	addls	r2, r2, #1
     6f8:	95832000 	strls	r2, [r3]
	}
	
	//decrease volume if key press 3
	if(edgecapture & 0b1000){
     6fc:	e3140008 	tst	r4, #8
     700:	08bd8038 	popeq	{r3, r4, r5, pc}
		if(volume > min_volume) volume--;
<<<<<<< HEAD
     704:	e30739c8 	movw	r3, #31176	; 0x79c8
=======
     704:	e3073588 	movw	r3, #30088	; 0x7588
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     708:	e3403000 	movt	r3, #0
     70c:	e5932000 	ldr	r2, [r3]
     710:	e3520000 	cmp	r2, #0
     714:	12422001 	subne	r2, r2, #1
     718:	15832000 	strne	r2, [r3]
     71c:	e8bd8038 	pop	{r3, r4, r5, pc}
	status_flags.is_playing = false;
}

void start_audio_playback(){
	//check to see if the stream is valid
	if(!is_stream_valid()) return;
<<<<<<< HEAD
     720:	eb0004e2 	bl	1ab0 <is_stream_valid>
=======
     720:	eb00048c 	bl	1958 <is_stream_valid>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     724:	e3500000 	cmp	r0, #0
     728:	0affffe2 	beq	6b8 <keys_ISR+0x90>
	
	//turn on interrupts
	volatile int * audio_base = (int*) AUDIO_BASE;
	*audio_base = 0b0010;
     72c:	e3033fff 	movw	r3, #16383	; 0x3fff
     730:	e3a02002 	mov	r2, #2
     734:	e34f3f20 	movt	r3, #65312	; 0xff20
     738:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
	
	//set the playing flag
	status_flags.is_playing = true;
     73c:	e3a03001 	mov	r3, #1
     740:	e5c53002 	strb	r3, [r5, #2]
     744:	eaffffdb 	b	6b8 <keys_ISR+0x90>
}

void stop_all_audio_playback(){
	volatile int * audio_base = (int *) AUDIO_BASE;
	
	unsigned int fifo_space = *(audio_base + 1);
     748:	e3031fff 	movw	r1, #16383	; 0x3fff
     74c:	e34f1f20 	movt	r1, #65312	; 0xff20
     750:	e5110fbb 	ldr	r0, [r1, #-4027]	; 0xfffff045
	
	//stop audio playback for the right
	unsigned int num_samples_right = (unsigned int) ((fifo_space >> 16) & 0xFF);
     754:	e7e73850 	ubfx	r3, r0, #16, #8
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     758:	e3530000 	cmp	r3, #0
		//write nothing to the audio fifo (merely to clear the interrupt)
		*audio_fifo = 0;
     75c:	13a02000 	movne	r2, #0
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     760:	0a000002 	beq	770 <keys_ISR+0x148>
     764:	e2533001 	subs	r3, r3, #1
		//write nothing to the audio fifo (merely to clear the interrupt)
		*audio_fifo = 0;
     768:	e5012fb3 	str	r2, [r1, #-4019]	; 0xfffff04d
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     76c:	1afffffc 	bne	764 <keys_ISR+0x13c>
     770:	e1b03c20 	lsrs	r3, r0, #24
		*num_samples = *num_samples - 1;
	}
	
	//turn off interrupts
	volatile int * audio_base = (int*) AUDIO_BASE;
	*audio_base = 0b0000;
     774:	e3031fff 	movw	r1, #16383	; 0x3fff
     778:	e3a02000 	mov	r2, #0
     77c:	e34f1f20 	movt	r1, #65312	; 0xff20
     780:	e5012fbf 	str	r2, [r1, #-4031]	; 0xfffff041
	
	//set the status flags
	status_flags.is_playing = false;
     784:	e5c52002 	strb	r2, [r5, #2]
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     788:	0a000002 	beq	798 <keys_ISR+0x170>
     78c:	e2533001 	subs	r3, r3, #1
		//write nothing to the audio fifo (merely to clear the interrupt)
		*audio_fifo = 0;
     790:	e5012fb7 	str	r2, [r1, #-4023]	; 0xfffff049
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	stop_audio_playback(&num_samples_left, audio_base + 2);
}

void stop_audio_playback(unsigned int * num_samples, volatile int * audio_fifo){	
	while (*num_samples > 0){
     794:	1afffffc 	bne	78c <keys_ISR+0x164>
		*num_samples = *num_samples - 1;
	}
	
	//turn off interrupts
	volatile int * audio_base = (int*) AUDIO_BASE;
	*audio_base = 0b0000;
     798:	e3033fff 	movw	r3, #16383	; 0x3fff
     79c:	e3a02000 	mov	r2, #0
     7a0:	e34f3f20 	movt	r3, #65312	; 0xff20
     7a4:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
     7a8:	eaffffcb 	b	6dc <keys_ISR+0xb4>

000007ac <audio_ISR>:
	if(edgecapture & 0b1000){
		if(volume > min_volume) volume--;
	}
}

void audio_ISR(){
     7ac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     7b0:	e24dd014 	sub	sp, sp, #20
	//catch if there is nothing to write to the audio queue
	if(!is_stream_valid()) while (1);
<<<<<<< HEAD
     7b4:	eb0004bd 	bl	1ab0 <is_stream_valid>
=======
     7b4:	eb000467 	bl	1958 <is_stream_valid>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     7b8:	e3500000 	cmp	r0, #0
     7bc:	1a000000 	bne	7c4 <audio_ISR+0x18>
     7c0:	eafffffe 	b	7c0 <audio_ISR+0x14>
	volatile int * audio_left = audio_base + 2;
	
	unsigned int fifo_space = *(audio_base + 1);
		
	//check the change in amplitude of the waves
	double amplitude_modulation = pow(volume_sensitivity, ((double) volume) - ((double) default_volume));
<<<<<<< HEAD
     7c4:	e30739c8 	movw	r3, #31176	; 0x79c8
=======
     7c4:	e3073588 	movw	r3, #30088	; 0x7588
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	volatile int * audio_base = (int *) AUDIO_BASE;
	volatile int * audio_right = audio_base + 3;
	volatile int * audio_left = audio_base + 2;
	
	unsigned int fifo_space = *(audio_base + 1);
     7c8:	e3034fff 	movw	r4, #16383	; 0x3fff
		
	//check the change in amplitude of the waves
	double amplitude_modulation = pow(volume_sensitivity, ((double) volume) - ((double) default_volume));
     7cc:	e3403000 	movt	r3, #0
	
	volatile int * audio_base = (int *) AUDIO_BASE;
	volatile int * audio_right = audio_base + 3;
	volatile int * audio_left = audio_base + 2;
	
	unsigned int fifo_space = *(audio_base + 1);
     7d0:	e34f4f20 	movt	r4, #65312	; 0xff20
		
	//check the change in amplitude of the waves
	double amplitude_modulation = pow(volume_sensitivity, ((double) volume) - ((double) default_volume));
     7d4:	e5930000 	ldr	r0, [r3]
		
		if(num_samples_right > 0){
			//check for overflow
			double sample_right = get_sample(PLAYBACK_STEREO_R) + sample_mono;
			if(abs(sample_right) > INT_MAX / amplitude_modulation){
				status_flags.volume_clipped = true;
<<<<<<< HEAD
     7d8:	e3068250 	movw	r8, #25168	; 0x6250
=======
     7d8:	e3058508 	movw	r8, #21768	; 0x5508
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	volatile int * audio_base = (int *) AUDIO_BASE;
	volatile int * audio_right = audio_base + 3;
	volatile int * audio_left = audio_base + 2;
	
	unsigned int fifo_space = *(audio_base + 1);
     7dc:	e514bfbb 	ldr	r11, [r4, #-4027]	; 0xfffff045
			if(abs(sample_right) > INT_MAX / amplitude_modulation){
				status_flags.volume_clipped = true;
			}
			
			//retrieve and write a sample to the right
			*audio_right = (int) (sample_right * amplitude_modulation);
     7e0:	e1a09004 	mov	r9, r4
	volatile int * audio_left = audio_base + 2;
	
	unsigned int fifo_space = *(audio_base + 1);
		
	//check the change in amplitude of the waves
	double amplitude_modulation = pow(volume_sensitivity, ((double) volume) - ((double) default_volume));
<<<<<<< HEAD
     7e4:	eb0014d6 	bl	5b44 <__aeabi_ui2d>
=======
     7e4:	eb0013c8 	bl	570c <__aeabi_ui2d>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     7e8:	e3a03000 	mov	r3, #0
     7ec:	e3a02000 	mov	r2, #0
     7f0:	e3443014 	movt	r3, #16404	; 0x4014
		
	//check the right and left write availability
	unsigned int num_samples_right = (unsigned int) ((fifo_space >> 16) & 0xFF);
     7f4:	e7e7a85b 	ubfx	r10, r11, #16, #8
	volatile int * audio_left = audio_base + 2;
	
	unsigned int fifo_space = *(audio_base + 1);
		
	//check the change in amplitude of the waves
	double amplitude_modulation = pow(volume_sensitivity, ((double) volume) - ((double) default_volume));
<<<<<<< HEAD
     7f8:	eb00140c 	bl	5830 <__aeabi_dsub>
=======
     7f8:	eb0012fe 	bl	53f8 <__aeabi_dsub>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     7fc:	e1a03001 	mov	r3, r1
     800:	e3a01000 	mov	r1, #0
     804:	e1a02000 	mov	r2, r0
     808:	e3431ff8 	movt	r1, #16376	; 0x3ff8
     80c:	e3a00000 	mov	r0, #0
		
	//check the right and left write availability
	unsigned int num_samples_right = (unsigned int) ((fifo_space >> 16) & 0xFF);
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
     810:	e1a0bc2b 	lsr	r11, r11, #24
		
		if(num_samples_right > 0){
			//check for overflow
			double sample_right = get_sample(PLAYBACK_STEREO_R) + sample_mono;
			if(abs(sample_right) > INT_MAX / amplitude_modulation){
				status_flags.volume_clipped = true;
     814:	e340800e 	movt	r8, #14
	volatile int * audio_left = audio_base + 2;
	
	unsigned int fifo_space = *(audio_base + 1);
		
	//check the change in amplitude of the waves
	double amplitude_modulation = pow(volume_sensitivity, ((double) volume) - ((double) default_volume));
<<<<<<< HEAD
     818:	eb000718 	bl	2480 <pow>
=======
     818:	eb000650 	bl	2160 <pow>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     81c:	e1a06000 	mov	r6, r0
     820:	e1a07001 	mov	r7, r1
		
	//check the right and left write availability
	unsigned int num_samples_right = (unsigned int) ((fifo_space >> 16) & 0xFF);
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	while(num_samples_right > 0 || num_samples_left > 0){
     824:	e19b300a 	orrs	r3, r11, r10
		double sample_mono = get_sample(PLAYBACK_MONO);
     828:	e3a00000 	mov	r0, #0
	double amplitude_modulation = pow(volume_sensitivity, ((double) volume) - ((double) default_volume));
		
	//check the right and left write availability
	unsigned int num_samples_right = (unsigned int) ((fifo_space >> 16) & 0xFF);
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	while(num_samples_right > 0 || num_samples_left > 0){
     82c:	0a000010 	beq	874 <audio_ISR+0xc8>
		double sample_mono = get_sample(PLAYBACK_MONO);
<<<<<<< HEAD
     830:	eb0005ac 	bl	1ee8 <get_sample>
=======
     830:	eb00054a 	bl	1d60 <get_sample>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		
		if(num_samples_right > 0){
     834:	e35a0000 	cmp	r10, #0
		
	//check the right and left write availability
	unsigned int num_samples_right = (unsigned int) ((fifo_space >> 16) & 0xFF);
	unsigned int num_samples_left = (unsigned int) ((fifo_space >> 24) & 0xFF);
	while(num_samples_right > 0 || num_samples_left > 0){
		double sample_mono = get_sample(PLAYBACK_MONO);
     838:	e1a04000 	mov	r4, r0
     83c:	e1a05001 	mov	r5, r1
		
		if(num_samples_right > 0){
     840:	1a00000d 	bne	87c <audio_ISR+0xd0>
			
			//decrement the number of samples required
			num_samples_right--;
		}
		
		if(num_samples_left > 0){
     844:	e35b0000 	cmp	r11, #0
     848:	1a00002d 	bne	904 <audio_ISR+0x158>
			//decrement the number of samples required
			num_samples_left--;
		}
		
		//check if the audio stream is still valid
		if(!is_stream_valid()){
<<<<<<< HEAD
     84c:	eb000497 	bl	1ab0 <is_stream_valid>
=======
     84c:	eb000441 	bl	1958 <is_stream_valid>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     850:	e3500000 	cmp	r0, #0
     854:	1afffff2 	bne	824 <audio_ISR+0x78>
			stop_all_audio_playback();
     858:	ebffff38 	bl	540 <stop_all_audio_playback>
<<<<<<< HEAD
			if(is_stream_fully_processed()) {
     85c:	eb0004cb 	bl	1b90 <is_stream_fully_processed>
     860:	e3500000 	cmp	r0, #0
				status_flags.clear_queue = true;
     864:	13063250 	movwne	r3, #25168	; 0x6250
=======
			if(is_stream_fully_processed()) status_flags.clear_queue = true;
     85c:	eb000469 	bl	1a08 <is_stream_fully_processed>
     860:	e3500000 	cmp	r0, #0
     864:	13053508 	movwne	r3, #21768	; 0x5508
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     868:	13a02001 	movne	r2, #1
     86c:	1340300e 	movtne	r3, #14
     870:	15c32000 	strbne	r2, [r3]
			break;
		}
	}
     874:	e28dd014 	add	sp, sp, #20
     878:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
	while(num_samples_right > 0 || num_samples_left > 0){
		double sample_mono = get_sample(PLAYBACK_MONO);
		
		if(num_samples_right > 0){
			//check for overflow
			double sample_right = get_sample(PLAYBACK_STEREO_R) + sample_mono;
     87c:	e3a00001 	mov	r0, #1
			
			//retrieve and write a sample to the right
			*audio_right = (int) (sample_right * amplitude_modulation);
			
			//decrement the number of samples required
			num_samples_right--;
     880:	e24aa001 	sub	r10, r10, #1
	while(num_samples_right > 0 || num_samples_left > 0){
		double sample_mono = get_sample(PLAYBACK_MONO);
		
		if(num_samples_right > 0){
			//check for overflow
			double sample_right = get_sample(PLAYBACK_STEREO_R) + sample_mono;
<<<<<<< HEAD
     884:	eb000597 	bl	1ee8 <get_sample>
     888:	e1a02004 	mov	r2, r4
     88c:	e1a03005 	mov	r3, r5
     890:	eb0013e7 	bl	5834 <__adddf3>
     894:	e1cd00f0 	strd	r0, [sp]
			if(abs(sample_right) > INT_MAX / amplitude_modulation){
     898:	eb001661 	bl	6224 <__aeabi_d2iz>
     89c:	e3500000 	cmp	r0, #0
     8a0:	b2600000 	rsblt	r0, r0, #0
     8a4:	eb0014af 	bl	5b68 <__aeabi_i2d>
=======
     884:	eb000535 	bl	1d60 <get_sample>
     888:	e1a02004 	mov	r2, r4
     88c:	e1a03005 	mov	r3, r5
     890:	eb0012d9 	bl	53fc <__adddf3>
     894:	e1cd00f0 	strd	r0, [sp]
			if(abs(sample_right) > INT_MAX / amplitude_modulation){
     898:	eb001553 	bl	5dec <__aeabi_d2iz>
     89c:	e3500000 	cmp	r0, #0
     8a0:	b2600000 	rsblt	r0, r0, #0
     8a4:	eb0013a1 	bl	5730 <__aeabi_i2d>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     8a8:	e1cd00f8 	strd	r0, [sp, #8]
     8ac:	e3a00000 	mov	r0, #0
     8b0:	e30f1fff 	movw	r1, #65535	; 0xffff
     8b4:	e1a02006 	mov	r2, r6
     8b8:	e1a03007 	mov	r3, r7
     8bc:	e34f0fc0 	movt	r0, #65472	; 0xffc0
     8c0:	e34411df 	movt	r1, #16863	; 0x41df
<<<<<<< HEAD
     8c4:	eb001582 	bl	5ed4 <__aeabi_ddiv>
     8c8:	e1a02000 	mov	r2, r0
     8cc:	e1a03001 	mov	r3, r1
     8d0:	e1cd00d8 	ldrd	r0, [sp, #8]
     8d4:	eb00164c 	bl	620c <__aeabi_dcmpgt>
=======
     8c4:	eb001474 	bl	5a9c <__aeabi_ddiv>
     8c8:	e1a02000 	mov	r2, r0
     8cc:	e1a03001 	mov	r3, r1
     8d0:	e1cd00d8 	ldrd	r0, [sp, #8]
     8d4:	eb00153e 	bl	5dd4 <__aeabi_dcmpgt>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     8d8:	e3500000 	cmp	r0, #0
				status_flags.volume_clipped = true;
			}
			
			//retrieve and write a sample to the right
			*audio_right = (int) (sample_right * amplitude_modulation);
     8dc:	e1a02006 	mov	r2, r6
		
		if(num_samples_right > 0){
			//check for overflow
			double sample_right = get_sample(PLAYBACK_STEREO_R) + sample_mono;
			if(abs(sample_right) > INT_MAX / amplitude_modulation){
				status_flags.volume_clipped = true;
     8e0:	13a0c001 	movne	r12, #1
			}
			
			//retrieve and write a sample to the right
			*audio_right = (int) (sample_right * amplitude_modulation);
     8e4:	e1a03007 	mov	r3, r7
		
		if(num_samples_right > 0){
			//check for overflow
			double sample_right = get_sample(PLAYBACK_STEREO_R) + sample_mono;
			if(abs(sample_right) > INT_MAX / amplitude_modulation){
				status_flags.volume_clipped = true;
     8e8:	15c8c003 	strbne	r12, [r8, #3]
			}
			
			//retrieve and write a sample to the right
			*audio_right = (int) (sample_right * amplitude_modulation);
     8ec:	e1cd00d0 	ldrd	r0, [sp]
<<<<<<< HEAD
     8f0:	eb0014d3 	bl	5c44 <__aeabi_dmul>
     8f4:	eb00164a 	bl	6224 <__aeabi_d2iz>
=======
     8f0:	eb0013c5 	bl	580c <__aeabi_dmul>
     8f4:	eb00153c 	bl	5dec <__aeabi_d2iz>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
			
			//decrement the number of samples required
			num_samples_right--;
		}
		
		if(num_samples_left > 0){
     8f8:	e35b0000 	cmp	r11, #0
			if(abs(sample_right) > INT_MAX / amplitude_modulation){
				status_flags.volume_clipped = true;
			}
			
			//retrieve and write a sample to the right
			*audio_right = (int) (sample_right * amplitude_modulation);
     8fc:	e5090fb3 	str	r0, [r9, #-4019]	; 0xfffff04d
			
			//decrement the number of samples required
			num_samples_right--;
		}
		
		if(num_samples_left > 0){
     900:	0affffd1 	beq	84c <audio_ISR+0xa0>
			//check for overflow
			double sample_left = get_sample(PLAYBACK_STEREO_L) + sample_mono;
     904:	e3a00002 	mov	r0, #2
			
			//retrieve and write a sample to the left
			*audio_left = (int) (sample_left * amplitude_modulation);
			
			//decrement the number of samples required
			num_samples_left--;
     908:	e24bb001 	sub	r11, r11, #1
			num_samples_right--;
		}
		
		if(num_samples_left > 0){
			//check for overflow
			double sample_left = get_sample(PLAYBACK_STEREO_L) + sample_mono;
<<<<<<< HEAD
     90c:	eb000575 	bl	1ee8 <get_sample>
     910:	e1a02004 	mov	r2, r4
     914:	e1a03005 	mov	r3, r5
     918:	eb0013c5 	bl	5834 <__adddf3>
     91c:	e1cd00f0 	strd	r0, [sp]
			if(abs(sample_left) > INT_MAX / amplitude_modulation){
     920:	eb00163f 	bl	6224 <__aeabi_d2iz>
     924:	e3500000 	cmp	r0, #0
     928:	b2600000 	rsblt	r0, r0, #0
     92c:	eb00148d 	bl	5b68 <__aeabi_i2d>
=======
     90c:	eb000513 	bl	1d60 <get_sample>
     910:	e1a02004 	mov	r2, r4
     914:	e1a03005 	mov	r3, r5
     918:	eb0012b7 	bl	53fc <__adddf3>
     91c:	e1cd00f0 	strd	r0, [sp]
			if(abs(sample_left) > INT_MAX / amplitude_modulation){
     920:	eb001531 	bl	5dec <__aeabi_d2iz>
     924:	e3500000 	cmp	r0, #0
     928:	b2600000 	rsblt	r0, r0, #0
     92c:	eb00137f 	bl	5730 <__aeabi_i2d>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     930:	e1a04000 	mov	r4, r0
     934:	e1a05001 	mov	r5, r1
     938:	e3a00000 	mov	r0, #0
     93c:	e30f1fff 	movw	r1, #65535	; 0xffff
     940:	e1a02006 	mov	r2, r6
     944:	e1a03007 	mov	r3, r7
     948:	e34f0fc0 	movt	r0, #65472	; 0xffc0
     94c:	e34411df 	movt	r1, #16863	; 0x41df
<<<<<<< HEAD
     950:	eb00155f 	bl	5ed4 <__aeabi_ddiv>
=======
     950:	eb001451 	bl	5a9c <__aeabi_ddiv>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     954:	e1a03001 	mov	r3, r1
     958:	e1a01005 	mov	r1, r5
     95c:	e1a02000 	mov	r2, r0
     960:	e1a00004 	mov	r0, r4
<<<<<<< HEAD
     964:	eb001628 	bl	620c <__aeabi_dcmpgt>
=======
     964:	eb00151a 	bl	5dd4 <__aeabi_dcmpgt>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     968:	e3500000 	cmp	r0, #0
				status_flags.volume_clipped = true;
			}
			
			//retrieve and write a sample to the left
			*audio_left = (int) (sample_left * amplitude_modulation);
     96c:	e1a02006 	mov	r2, r6
		
		if(num_samples_left > 0){
			//check for overflow
			double sample_left = get_sample(PLAYBACK_STEREO_L) + sample_mono;
			if(abs(sample_left) > INT_MAX / amplitude_modulation){
				status_flags.volume_clipped = true;
     970:	13a0c001 	movne	r12, #1
			}
			
			//retrieve and write a sample to the left
			*audio_left = (int) (sample_left * amplitude_modulation);
     974:	e1cd00d0 	ldrd	r0, [sp]
     978:	e1a03007 	mov	r3, r7
		
		if(num_samples_left > 0){
			//check for overflow
			double sample_left = get_sample(PLAYBACK_STEREO_L) + sample_mono;
			if(abs(sample_left) > INT_MAX / amplitude_modulation){
				status_flags.volume_clipped = true;
     97c:	15c8c003 	strbne	r12, [r8, #3]
			}
			
			//retrieve and write a sample to the left
			*audio_left = (int) (sample_left * amplitude_modulation);
<<<<<<< HEAD
     980:	eb0014af 	bl	5c44 <__aeabi_dmul>
     984:	eb001626 	bl	6224 <__aeabi_d2iz>
=======
     980:	eb0013a1 	bl	580c <__aeabi_dmul>
     984:	eb001518 	bl	5dec <__aeabi_d2iz>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     988:	e5090fb7 	str	r0, [r9, #-4023]	; 0xfffff049
     98c:	eaffffae 	b	84c <audio_ISR+0xa0>

00000990 <main>:
struct StatusFlags status_flags = {.clear_queue = false, .change_song = false, .is_playing = false, .volume_clipped = false, .frequency_overflow = false};
const unsigned int max_volume = 10, min_volume = 0, default_volume = 5;
const double volume_sensitivity = 1.5;
unsigned int volume = 5;

int main(){
     990:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
<<<<<<< HEAD
     994:	e3064250 	movw	r4, #25168	; 0x6250
=======
     994:	e3054508 	movw	r4, #21768	; 0x5508
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	config_GIC();
	config_audio();
	config_keys();
					
	//initialize the audio stream
	audio_stream.current_song = song_list;
     998:	e59fa094 	ldr	r10, [pc, #148]	; a34 <main+0xa4>
<<<<<<< HEAD
     99c:	e3038f98 	movw	r8, #16280	; 0x3f98
     9a0:	e3404012 	movt	r4, #18
=======
     99c:	e3078570 	movw	r8, #30064	; 0x7570
     9a0:	e340400e 	movt	r4, #14
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		}
		
		//change current song if requested
		if(status_flags.change_song){
			//use the first four switches to pick song
			unsigned int song_offset = (*sw_base) & 0xF;
     9a4:	e3a07000 	mov	r7, #0
	config_GIC();
	config_audio();
	config_keys();
					
	//initialize the audio stream
	audio_stream.current_song = song_list;
     9a8:	e3408010 	movt	r8, #16
		//clear the audio_stream if requested
		if(status_flags.clear_queue || status_flags.change_song){
			clear_stream();
			
			//reset the flag so that clearing does not happen again
			status_flags.clear_queue = false;
     9ac:	e1a05007 	mov	r5, r7

int main(){
	volatile int * sw_base = (int*) SW_BASE;
	
	//configure the interrupts and hardware components
	set_A9_IRQ_stack();
     9b0:	eb00002c 	bl	a68 <set_A9_IRQ_stack>
	while(1){
		//continue to populate the audio_stream
		populate_stream();
		
		//clear the audio_stream if requested
		if(status_flags.clear_queue || status_flags.change_song){
     9b4:	e1a06004 	mov	r6, r4
		}
		
		//change current song if requested
		if(status_flags.change_song){
			//use the first four switches to pick song
			unsigned int song_offset = (*sw_base) & 0xF;
     9b8:	e34f7f20 	movt	r7, #65312	; 0xff20
int main(){
	volatile int * sw_base = (int*) SW_BASE;
	
	//configure the interrupts and hardware components
	set_A9_IRQ_stack();
	config_GIC();
     9bc:	eb000037 	bl	aa0 <config_GIC>
	config_audio();
     9c0:	eb00001c 	bl	a38 <config_audio>
	config_keys();
     9c4:	eb000022 	bl	a54 <config_keys>
					
	//initialize the audio stream
	audio_stream.current_song = song_list;
     9c8:	e588a014 	str	r10, [r8, #20]
	initialize_stream();
<<<<<<< HEAD
     9cc:	eb00035c 	bl	1744 <initialize_stream>
=======
     9cc:	eb000306 	bl	15ec <initialize_stream>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	//enable interrupts once all setup is finished
	enable_A9_interrupts();
     9d0:	eb00002b 	bl	a84 <enable_A9_interrupts>
     9d4:	ea000001 	b	9e0 <main+0x50>
				//re-initializes the stream
				initialize_stream();
			}
			
			//reset the flag so that changing the song does not happen again
			status_flags.change_song = false;
     9d8:	e5c45001 	strb	r5, [r4, #1]
		}
		
		//display status on leds and hexes
		display_status();
     9dc:	ebfffe3a 	bl	2cc <display_status>
	enable_A9_interrupts();
	
	//main loop
	while(1){
		//continue to populate the audio_stream
		populate_stream();
<<<<<<< HEAD
     9e0:	eb000393 	bl	1834 <populate_stream>
=======
     9e0:	eb00033d 	bl	16dc <populate_stream>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		
		//clear the audio_stream if requested
		if(status_flags.clear_queue || status_flags.change_song){
     9e4:	e5d43000 	ldrb	r3, [r4]
     9e8:	e3530000 	cmp	r3, #0
     9ec:	1a000002 	bne	9fc <main+0x6c>
     9f0:	e5d63001 	ldrb	r3, [r6, #1]
     9f4:	e3530000 	cmp	r3, #0
     9f8:	0afffff7 	beq	9dc <main+0x4c>
			clear_stream();
<<<<<<< HEAD
     9fc:	eb0003f7 	bl	19e0 <clear_stream>
=======
     9fc:	eb0003a1 	bl	1888 <clear_stream>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
			//reset the flag so that clearing does not happen again
			status_flags.clear_queue = false;
		}
		
		//change current song if requested
		if(status_flags.change_song){
     a00:	e5d43001 	ldrb	r3, [r4, #1]
		//clear the audio_stream if requested
		if(status_flags.clear_queue || status_flags.change_song){
			clear_stream();
			
			//reset the flag so that clearing does not happen again
			status_flags.clear_queue = false;
     a04:	e5c45000 	strb	r5, [r4]
		}
		
		//change current song if requested
		if(status_flags.change_song){
     a08:	e3530000 	cmp	r3, #0
     a0c:	0afffff2 	beq	9dc <main+0x4c>
			//use the first four switches to pick song
			unsigned int song_offset = (*sw_base) & 0xF;
     a10:	e5979040 	ldr	r9, [r7, #64]	; 0x40
     a14:	e209900f 	and	r9, r9, #15
			
			//check that the song offset is valid
			if(song_offset < NUM_SONGS){
     a18:	e3590006 	cmp	r9, #6
     a1c:	8affffed 	bhi	9d8 <main+0x48>
				//deconstructs the current stream
				deconstruct_stream();
				
				//changes the song based on switches
				audio_stream.current_song = song_list + song_offset;
     a20:	e08a9189 	add	r9, r10, r9, lsl #3
			unsigned int song_offset = (*sw_base) & 0xF;
			
			//check that the song offset is valid
			if(song_offset < NUM_SONGS){
				//deconstructs the current stream
				deconstruct_stream();
<<<<<<< HEAD
     a24:	eb000374 	bl	17fc <deconstruct_stream>
=======
     a24:	eb00031e 	bl	16a4 <deconstruct_stream>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
				
				//changes the song based on switches
				audio_stream.current_song = song_list + song_offset;
     a28:	e5889014 	str	r9, [r8, #20]
			
				//re-initializes the stream
				initialize_stream();
<<<<<<< HEAD
     a2c:	eb000344 	bl	1744 <initialize_stream>
     a30:	eaffffe8 	b	9d8 <main+0x48>
     a34:	00007660 	.word	0x00007660
=======
     a2c:	eb0002ee 	bl	15ec <initialize_stream>
     a30:	eaffffe8 	b	9d8 <main+0x48>
     a34:	00007228 	.word	0x00007228
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate

00000a38 <config_audio>:
void config_audio(){
	volatile int * audio_base = (int*) AUDIO_BASE;
	
	//set the control bits to clear both write and read queue in the audio controller
	int control = 0b1100;
	*audio_base = control;
     a38:	e3033fff 	movw	r3, #16383	; 0x3fff
     a3c:	e3a0200c 	mov	r2, #12
     a40:	e34f3f20 	movt	r3, #65312	; 0xff20
     a44:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
	
	//unset the control bits to clear and set the correct interrupt bit in the audio controller
	control = 0b0000;
	*audio_base = control;
     a48:	e3a02000 	mov	r2, #0
     a4c:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
     a50:	e12fff1e 	bx	lr

00000a54 <config_keys>:
void config_keys(){
	volatile int * key_base = (int*) KEY_BASE;
	
	//turn on interrupts for all the keys
	int interrupt_mask = 0b1111;
	*(key_base + 2) = interrupt_mask;
     a54:	e3a03000 	mov	r3, #0
     a58:	e3a0200f 	mov	r2, #15
     a5c:	e34f3f20 	movt	r3, #65312	; 0xff20
     a60:	e5832058 	str	r2, [r3, #88]	; 0x58
     a64:	e12fff1e 	bx	lr

00000a68 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack(){
	register int stack __asm__ ("r2");
	register int mode __asm__ ("r3");
	
	stack = 0xFFFFFFFF - 7; //top of A9 on-chip memory, aligned to 8 bytes
     a68:	e3e02007 	mvn	r2, #7
	
	/* change processor to IRQ mode with interrupts disabled */
	mode = 0b11010010;
     a6c:	e3a030d2 	mov	r3, #210	; 0xd2
	__asm__("msr cpsr, %[ps]" : : [ps] "r" (mode));
     a70:	e129f003 	msr	CPSR_fc, r3
	/* set banked stack pointer */
	__asm__("mov sp, %[ps]" : : [ps] "r" (stack));
     a74:	e1a0d002 	mov	sp, r2
	
	/* go back to SVC mode before executing subroutine return! */
	mode = 0b11010011;
     a78:	e3a030d3 	mov	r3, #211	; 0xd3
	__asm__("msr cpsr, %[ps]" : : [ps] "r" (mode));
     a7c:	e129f003 	msr	CPSR_fc, r3
     a80:	e12fff1e 	bx	lr

00000a84 <enable_A9_interrupts>:
}

void enable_A9_interrupts(){
     a84:	e24dd008 	sub	sp, sp, #8
	volatile int status = 0b01010011;
     a88:	e3a03053 	mov	r3, #83	; 0x53
     a8c:	e58d3004 	str	r3, [sp, #4]
	__asm__("msr cpsr, %[ps]" : : [ps] "r" (status));
     a90:	e59d3004 	ldr	r3, [sp, #4]
     a94:	e129f003 	msr	CPSR_fc, r3
}
     a98:	e28dd008 	add	sp, sp, #8
     a9c:	e12fff1e 	bx	lr

00000aa0 <config_GIC>:

void config_GIC(){	
     aa0:	e92d0070 	push	{r4, r5, r6}
	volatile int reg_offset, index, value, address;
	
	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
     aa4:	e3a00008 	mov	r0, #8
void enable_A9_interrupts(){
	volatile int status = 0b01010011;
	__asm__("msr cpsr, %[ps]" : : [ps] "r" (status));
}

void config_GIC(){	
     aa8:	e24dd024 	sub	sp, sp, #36	; 0x24
	
	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
	index = N & 0x1F;
     aac:	e3a02009 	mov	r2, #9
	value = 0x1 << index;
     ab0:	e3a03001 	mov	r3, #1
	
	/* Configure the Interrupt Processor Targets Register (ICDIPTRn)
	* reg_offset = integer_div(N / 4) * 4
	* index = N mod 4 */
	
	reg_offset = (N & 0xFFFFFFFC);
     ab4:	e3a0c048 	mov	r12, #72	; 0x48
	volatile int reg_offset, index, value, address;
	
	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
     ab8:	e58d0000 	str	r0, [sp]
	index = N & 0x1F;
     abc:	e58d2004 	str	r2, [sp, #4]
	config_interrupt(KEYS_IRQ, 1);
	config_interrupt(AUDIO_IRQ, 1);

	// Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all
	// priorities
	*((int *) MPCORE_GIC_CPUIF + ICCPMR) = 0xFFFF;
     ac0:	e3e02a13 	mvn	r2, #77824	; 0x13000
	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
	index = N & 0x1F;
	value = 0x1 << index;
     ac4:	e59d1004 	ldr	r1, [sp, #4]
     ac8:	e1a01113 	lsl	r1, r3, r1
     acc:	e58d1008 	str	r1, [sp, #8]
	address = 0xFFFED100 + reg_offset;
     ad0:	e59d1000 	ldr	r1, [sp]
     ad4:	e2411b4b 	sub	r1, r1, #76800	; 0x12c00
     ad8:	e2411c03 	sub	r1, r1, #768	; 0x300
     adc:	e58d100c 	str	r1, [sp, #12]
	
	/* Now that we know the register address and value, set the appropriate bit */
	*(int *)address |= value;
     ae0:	e59d100c 	ldr	r1, [sp, #12]
     ae4:	e59d4008 	ldr	r4, [sp, #8]
	
	/* Configure the Interrupt Processor Targets Register (ICDIPTRn)
	* reg_offset = integer_div(N / 4) * 4
	* index = N mod 4 */
	
	reg_offset = (N & 0xFFFFFFFC);
     ae8:	e58dc000 	str	r12, [sp]
	index = N & 0x3;
     aec:	e58d3004 	str	r3, [sp, #4]
	address = 0xFFFED800 + reg_offset + index;
     af0:	e59d6000 	ldr	r6, [sp]
     af4:	e59dc004 	ldr	r12, [sp, #4]
	index = N & 0x1F;
	value = 0x1 << index;
	address = 0xFFFED100 + reg_offset;
	
	/* Now that we know the register address and value, set the appropriate bit */
	*(int *)address |= value;
     af8:	e5915000 	ldr	r5, [r1]
	* reg_offset = integer_div(N / 4) * 4
	* index = N mod 4 */
	
	reg_offset = (N & 0xFFFFFFFC);
	index = N & 0x3;
	address = 0xFFFED800 + reg_offset + index;
     afc:	e086c00c 	add	r12, r6, r12
     b00:	e24ccb4a 	sub	r12, r12, #75776	; 0x12800
	index = N & 0x1F;
	value = 0x1 << index;
	address = 0xFFFED100 + reg_offset;
	
	/* Now that we know the register address and value, set the appropriate bit */
	*(int *)address |= value;
     b04:	e1854004 	orr	r4, r5, r4
	* reg_offset = integer_div(N / 4) * 4
	* index = N mod 4 */
	
	reg_offset = (N & 0xFFFFFFFC);
	index = N & 0x3;
	address = 0xFFFED800 + reg_offset + index;
     b08:	e58dc00c 	str	r12, [sp, #12]
	/* Now that we know the register address and value, write to (only) the
	* appropriate byte */
	*(char *)address = (char)CPU_target;
     b0c:	e59dc00c 	ldr	r12, [sp, #12]
	volatile int reg_offset, index, value, address;
	
	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
     b10:	e58d0010 	str	r0, [sp, #16]
	index = N & 0x1F;
     b14:	e3a0000e 	mov	r0, #14
     b18:	e58d0014 	str	r0, [sp, #20]
	value = 0x1 << index;
     b1c:	e59d0014 	ldr	r0, [sp, #20]
	address = 0xFFFED100 + reg_offset;
	
	/* Now that we know the register address and value, set the appropriate bit */
	*(int *)address |= value;
     b20:	e5814000 	str	r4, [r1]
	reg_offset = (N & 0xFFFFFFFC);
	index = N & 0x3;
	address = 0xFFFED800 + reg_offset + index;
	/* Now that we know the register address and value, write to (only) the
	* appropriate byte */
	*(char *)address = (char)CPU_target;
     b24:	e5cc3000 	strb	r3, [r12]
	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
	index = N & 0x1F;
	value = 0x1 << index;
     b28:	e1a01013 	lsl	r1, r3, r0
	
	/* Configure the Interrupt Processor Targets Register (ICDIPTRn)
	* reg_offset = integer_div(N / 4) * 4
	* index = N mod 4 */
	
	reg_offset = (N & 0xFFFFFFFC);
     b2c:	e3a0004c 	mov	r0, #76	; 0x4c
	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
	index = N & 0x1F;
	value = 0x1 << index;
     b30:	e58d1018 	str	r1, [sp, #24]
	address = 0xFFFED100 + reg_offset;
     b34:	e59d1010 	ldr	r1, [sp, #16]
     b38:	e2411b4b 	sub	r1, r1, #76800	; 0x12c00
     b3c:	e2411c03 	sub	r1, r1, #768	; 0x300
     b40:	e58d101c 	str	r1, [sp, #28]
	
	/* Now that we know the register address and value, set the appropriate bit */
	*(int *)address |= value;
     b44:	e59d101c 	ldr	r1, [sp, #28]
     b48:	e59dc018 	ldr	r12, [sp, #24]
	
	/* Configure the Interrupt Processor Targets Register (ICDIPTRn)
	* reg_offset = integer_div(N / 4) * 4
	* index = N mod 4 */
	
	reg_offset = (N & 0xFFFFFFFC);
     b4c:	e58d0010 	str	r0, [sp, #16]
	index = N & 0x3;
     b50:	e3a00002 	mov	r0, #2
     b54:	e58d0014 	str	r0, [sp, #20]
	address = 0xFFFED800 + reg_offset + index;
     b58:	e59d5010 	ldr	r5, [sp, #16]
     b5c:	e59d0014 	ldr	r0, [sp, #20]
	index = N & 0x1F;
	value = 0x1 << index;
	address = 0xFFFED100 + reg_offset;
	
	/* Now that we know the register address and value, set the appropriate bit */
	*(int *)address |= value;
     b60:	e5914000 	ldr	r4, [r1]
	* reg_offset = integer_div(N / 4) * 4
	* index = N mod 4 */
	
	reg_offset = (N & 0xFFFFFFFC);
	index = N & 0x3;
	address = 0xFFFED800 + reg_offset + index;
     b64:	e0850000 	add	r0, r5, r0
     b68:	e2400b4a 	sub	r0, r0, #75776	; 0x12800
	index = N & 0x1F;
	value = 0x1 << index;
	address = 0xFFFED100 + reg_offset;
	
	/* Now that we know the register address and value, set the appropriate bit */
	*(int *)address |= value;
     b6c:	e184c00c 	orr	r12, r4, r12
	* reg_offset = integer_div(N / 4) * 4
	* index = N mod 4 */
	
	reg_offset = (N & 0xFFFFFFFC);
	index = N & 0x3;
	address = 0xFFFED800 + reg_offset + index;
     b70:	e58d001c 	str	r0, [sp, #28]
	/* Now that we know the register address and value, write to (only) the
	* appropriate byte */
	*(char *)address = (char)CPU_target;
     b74:	e59d001c 	ldr	r0, [sp, #28]
	index = N & 0x1F;
	value = 0x1 << index;
	address = 0xFFFED100 + reg_offset;
	
	/* Now that we know the register address and value, set the appropriate bit */
	*(int *)address |= value;
     b78:	e581c000 	str	r12, [r1]
	config_interrupt(KEYS_IRQ, 1);
	config_interrupt(AUDIO_IRQ, 1);

	// Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all
	// priorities
	*((int *) MPCORE_GIC_CPUIF + ICCPMR) = 0xFFFF;
     b7c:	e30f1fff 	movw	r1, #65535	; 0xffff
	reg_offset = (N & 0xFFFFFFFC);
	index = N & 0x3;
	address = 0xFFFED800 + reg_offset + index;
	/* Now that we know the register address and value, write to (only) the
	* appropriate byte */
	*(char *)address = (char)CPU_target;
     b80:	e5c03000 	strb	r3, [r0]
	config_interrupt(KEYS_IRQ, 1);
	config_interrupt(AUDIO_IRQ, 1);

	// Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all
	// priorities
	*((int *) MPCORE_GIC_CPUIF + ICCPMR) = 0xFFFF;
     b84:	e5021eef 	str	r1, [r2, #-3823]	; 0xfffff111
	
	// Set CPU Interface Control Register (ICCICR). Enable signaling of
	// interrupts
	*((int *) MPCORE_GIC_CPUIF + ICCICR) = 1;
     b88:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101
	
	// Configure the Distributor Control Register (ICDDCR) to send pending
	// interrupts to CPUs
	*((int *) MPCORE_GIC_DIST + ICDDCR) = 1;
     b8c:	e3e02a12 	mvn	r2, #73728	; 0x12000
     b90:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
}
     b94:	e28dd024 	add	sp, sp, #36	; 0x24
     b98:	e8bd0070 	pop	{r4, r5, r6}
     b9c:	e12fff1e 	bx	lr

00000ba0 <config_interrupt>:
	volatile int reg_offset, index, value, address;
	
	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
     ba0:	e1a0c1c0 	asr	r12, r0, #3
	// Configure the Distributor Control Register (ICDDCR) to send pending
	// interrupts to CPUs
	*((int *) MPCORE_GIC_DIST + ICDDCR) = 1;
}

void config_interrupt(int N, int CPU_target){
     ba4:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	
	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
	index = N & 0x1F;
     ba8:	e200301f 	and	r3, r0, #31
	// Configure the Distributor Control Register (ICDDCR) to send pending
	// interrupts to CPUs
	*((int *) MPCORE_GIC_DIST + ICDDCR) = 1;
}

void config_interrupt(int N, int CPU_target){
     bac:	e24dd014 	sub	sp, sp, #20
	volatile int reg_offset, index, value, address;
	
	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
     bb0:	e3ccc003 	bic	r12, r12, #3
     bb4:	e58dc000 	str	r12, [sp]
	index = N & 0x1F;
	value = 0x1 << index;
     bb8:	e3a0c001 	mov	r12, #1
	
	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
	index = N & 0x1F;
     bbc:	e58d3004 	str	r3, [sp, #4]
	
	/* Configure the Interrupt Processor Targets Register (ICDIPTRn)
	* reg_offset = integer_div(N / 4) * 4
	* index = N mod 4 */
	
	reg_offset = (N & 0xFFFFFFFC);
     bc0:	e3c02003 	bic	r2, r0, #3
	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
	index = N & 0x1F;
	value = 0x1 << index;
     bc4:	e59d3004 	ldr	r3, [sp, #4]
	/* Configure the Interrupt Processor Targets Register (ICDIPTRn)
	* reg_offset = integer_div(N / 4) * 4
	* index = N mod 4 */
	
	reg_offset = (N & 0xFFFFFFFC);
	index = N & 0x3;
     bc8:	e2000003 	and	r0, r0, #3
	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
	index = N & 0x1F;
	value = 0x1 << index;
     bcc:	e1a0331c 	lsl	r3, r12, r3
     bd0:	e58d3008 	str	r3, [sp, #8]
	address = 0xFFFED100 + reg_offset;
     bd4:	e59d3000 	ldr	r3, [sp]
     bd8:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     bdc:	e2433c03 	sub	r3, r3, #768	; 0x300
     be0:	e58d300c 	str	r3, [sp, #12]
	
	/* Now that we know the register address and value, set the appropriate bit */
	*(int *)address |= value;
     be4:	e59d300c 	ldr	r3, [sp, #12]
     be8:	e59dc008 	ldr	r12, [sp, #8]
	
	/* Configure the Interrupt Processor Targets Register (ICDIPTRn)
	* reg_offset = integer_div(N / 4) * 4
	* index = N mod 4 */
	
	reg_offset = (N & 0xFFFFFFFC);
     bec:	e58d2000 	str	r2, [sp]
	index = N & 0x3;
     bf0:	e58d0004 	str	r0, [sp, #4]
	address = 0xFFFED800 + reg_offset + index;
     bf4:	e59d4000 	ldr	r4, [sp]
     bf8:	e59d2004 	ldr	r2, [sp, #4]
	index = N & 0x1F;
	value = 0x1 << index;
	address = 0xFFFED100 + reg_offset;
	
	/* Now that we know the register address and value, set the appropriate bit */
	*(int *)address |= value;
     bfc:	e5930000 	ldr	r0, [r3]
	* reg_offset = integer_div(N / 4) * 4
	* index = N mod 4 */
	
	reg_offset = (N & 0xFFFFFFFC);
	index = N & 0x3;
	address = 0xFFFED800 + reg_offset + index;
     c00:	e0842002 	add	r2, r4, r2
     c04:	e2422b4a 	sub	r2, r2, #75776	; 0x12800
	index = N & 0x1F;
	value = 0x1 << index;
	address = 0xFFFED100 + reg_offset;
	
	/* Now that we know the register address and value, set the appropriate bit */
	*(int *)address |= value;
     c08:	e180000c 	orr	r0, r0, r12
	* reg_offset = integer_div(N / 4) * 4
	* index = N mod 4 */
	
	reg_offset = (N & 0xFFFFFFFC);
	index = N & 0x3;
	address = 0xFFFED800 + reg_offset + index;
     c0c:	e58d200c 	str	r2, [sp, #12]
	/* Now that we know the register address and value, write to (only) the
	* appropriate byte */
	*(char *)address = (char)CPU_target;
     c10:	e59d200c 	ldr	r2, [sp, #12]
	index = N & 0x1F;
	value = 0x1 << index;
	address = 0xFFFED100 + reg_offset;
	
	/* Now that we know the register address and value, set the appropriate bit */
	*(int *)address |= value;
     c14:	e5830000 	str	r0, [r3]
	reg_offset = (N & 0xFFFFFFFC);
	index = N & 0x3;
	address = 0xFFFED800 + reg_offset + index;
	/* Now that we know the register address and value, write to (only) the
	* appropriate byte */
	*(char *)address = (char)CPU_target;
     c18:	e5c21000 	strb	r1, [r2]
}
     c1c:	e28dd014 	add	sp, sp, #20
     c20:	e8bd0010 	ldmfd	sp!, {r4}
     c24:	e12fff1e 	bx	lr

00000c28 <__cs3_isr_irq>:
#include "interrupt_ID.h"
#include "address_map_arm.h"
#include "exceptions.h"

// Define the IRQ exception handler
void __attribute__((interrupt)) __cs3_isr_irq(){
     c28:	e24ee004 	sub	lr, lr, #4
     c2c:	e92d500f 	push	{r0, r1, r2, r3, r12, lr}
	// Read the ICCIAR from the processor interface
	volatile int address = MPCORE_GIC_CPUIF + ICCIAR;
     c30:	e30c310c 	movw	r3, #49420	; 0xc10c
#include "interrupt_ID.h"
#include "address_map_arm.h"
#include "exceptions.h"

// Define the IRQ exception handler
void __attribute__((interrupt)) __cs3_isr_irq(){
     c34:	e24dd008 	sub	sp, sp, #8
	// Read the ICCIAR from the processor interface
	volatile int address = MPCORE_GIC_CPUIF + ICCIAR;
     c38:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     c3c:	e58d3000 	str	r3, [sp]
	volatile int int_ID = *((int *)address);
     c40:	e59d3000 	ldr	r3, [sp]
     c44:	e5933000 	ldr	r3, [r3]
     c48:	e58d3004 	str	r3, [sp, #4]
	
	if (int_ID == KEYS_IRQ)
     c4c:	e59d3004 	ldr	r3, [sp, #4]
     c50:	e3530049 	cmp	r3, #73	; 0x49
     c54:	0a000009 	beq	c80 <__cs3_isr_irq+0x58>
		keys_ISR();
	else if(int_ID == AUDIO_IRQ)
     c58:	e59d3004 	ldr	r3, [sp, #4]
     c5c:	e353004e 	cmp	r3, #78	; 0x4e
     c60:	0a000000 	beq	c68 <__cs3_isr_irq+0x40>
     c64:	eafffffe 	b	c64 <__cs3_isr_irq+0x3c>
		audio_ISR();
     c68:	ebfffecf 	bl	7ac <audio_ISR>
	else
		while (1);
	
	//clear the interrupt id from the GIC
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = int_ID;
     c6c:	e59d2004 	ldr	r2, [sp, #4]
     c70:	e3e03a13 	mvn	r3, #77824	; 0x13000
     c74:	e5032eef 	str	r2, [r3, #-3823]	; 0xfffff111
}
     c78:	e28dd008 	add	sp, sp, #8
     c7c:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, r12, pc}^
	// Read the ICCIAR from the processor interface
	volatile int address = MPCORE_GIC_CPUIF + ICCIAR;
	volatile int int_ID = *((int *)address);
	
	if (int_ID == KEYS_IRQ)
		keys_ISR();
     c80:	ebfffe68 	bl	628 <keys_ISR>
     c84:	eafffff8 	b	c6c <__cs3_isr_irq+0x44>

00000c88 <__cs3_reset>:
	//clear the interrupt id from the GIC
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = int_ID;
}

// Define the remaining exception handlers
void __attribute__((interrupt)) __cs3_reset(){
     c88:	eafffffe 	b	c88 <__cs3_reset>

00000c8c <__cs3_isr_undef>:
	while (1);
}

void __attribute__((interrupt)) __cs3_isr_undef(){
     c8c:	eafffffe 	b	c8c <__cs3_isr_undef>

00000c90 <__cs3_isr_swi>:
	while (1);
}

void __attribute__((interrupt)) __cs3_isr_swi(){
     c90:	eafffffe 	b	c90 <__cs3_isr_swi>

00000c94 <__cs3_isr_pabort>:
	while (1);
}

void __attribute__((interrupt)) __cs3_isr_pabort(){
     c94:	eafffffe 	b	c94 <__cs3_isr_pabort>

00000c98 <__cs3_isr_dabort>:
	while (1);
}

void __attribute__((interrupt)) __cs3_isr_dabort(){
     c98:	eafffffe 	b	c98 <__cs3_isr_dabort>

00000c9c <__cs3_isr_fiq>:
	while (1);
}

void __attribute__((interrupt)) __cs3_isr_fiq(){
     c9c:	eafffffe 	b	c9c <__cs3_isr_fiq>

00000ca0 <get_num>:
	
	return change_in_freq * middle_A_freq;
}

//returns the key number requested of the note and octave given
int get_num(char * note, int octave){	
     ca0:	e92d4038 	push	{r3, r4, r5, lr}
     ca4:	e1a05001 	mov	r5, r1
	int number;
	if(!strcmp(note, "C")){
<<<<<<< HEAD
     ca8:	e30716d8 	movw	r1, #30424	; 0x76d8
=======
     ca8:	e3071298 	movw	r1, #29336	; 0x7298
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return change_in_freq * middle_A_freq;
}

//returns the key number requested of the note and octave given
int get_num(char * note, int octave){	
     cac:	e1a04000 	mov	r4, r0
	int number;
	if(!strcmp(note, "C")){
     cb0:	e3401000 	movt	r1, #0
<<<<<<< HEAD
     cb4:	eb001788 	bl	6adc <strcmp>
=======
     cb4:	eb00167a 	bl	66a4 <strcmp>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     cb8:	e3500000 	cmp	r0, #0
     cbc:	0a000061 	beq	e48 <get_num+0x1a8>
		number = 0;
	} else if(!strcmp(note, "Cs") || !strcmp(note, "Db")){
<<<<<<< HEAD
     cc0:	e30716bc 	movw	r1, #30396	; 0x76bc
     cc4:	e1a00004 	mov	r0, r4
     cc8:	e3401000 	movt	r1, #0
     ccc:	eb001782 	bl	6adc <strcmp>
     cd0:	e3500000 	cmp	r0, #0
     cd4:	0a00005f 	beq	e58 <get_num+0x1b8>
     cd8:	e3071730 	movw	r1, #30512	; 0x7730
     cdc:	e1a00004 	mov	r0, r4
     ce0:	e3401000 	movt	r1, #0
     ce4:	eb00177c 	bl	6adc <strcmp>
=======
     cc0:	e307127c 	movw	r1, #29308	; 0x727c
     cc4:	e1a00005 	mov	r0, r5
     cc8:	e3401000 	movt	r1, #0
     ccc:	eb001674 	bl	66a4 <strcmp>
     cd0:	e3500000 	cmp	r0, #0
     cd4:	0a00005e 	beq	e54 <get_num+0x1b4>
     cd8:	e30712f0 	movw	r1, #29424	; 0x72f0
     cdc:	e1a00005 	mov	r0, r5
     ce0:	e3401000 	movt	r1, #0
     ce4:	eb00166e 	bl	66a4 <strcmp>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     ce8:	e3500000 	cmp	r0, #0
     cec:	0a000059 	beq	e58 <get_num+0x1b8>
		number = 1;
	} else if(!strcmp(note, "D")){
<<<<<<< HEAD
     cf0:	e30716dc 	movw	r1, #30428	; 0x76dc
     cf4:	e1a00004 	mov	r0, r4
     cf8:	e3401000 	movt	r1, #0
     cfc:	eb001776 	bl	6adc <strcmp>
=======
     cf0:	e307129c 	movw	r1, #29340	; 0x729c
     cf4:	e1a00005 	mov	r0, r5
     cf8:	e3401000 	movt	r1, #0
     cfc:	eb001668 	bl	66a4 <strcmp>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     d00:	e3500000 	cmp	r0, #0
     d04:	0a000055 	beq	e60 <get_num+0x1c0>
		number = 2;
	} else if(!strcmp(note, "Ds") || !strcmp(note, "Eb")){
<<<<<<< HEAD
     d08:	e30716cc 	movw	r1, #30412	; 0x76cc
     d0c:	e1a00004 	mov	r0, r4
     d10:	e3401000 	movt	r1, #0
     d14:	eb001770 	bl	6adc <strcmp>
     d18:	e3500000 	cmp	r0, #0
     d1c:	0a000051 	beq	e68 <get_num+0x1c8>
     d20:	e3071734 	movw	r1, #30516	; 0x7734
     d24:	e1a00004 	mov	r0, r4
     d28:	e3401000 	movt	r1, #0
     d2c:	eb00176a 	bl	6adc <strcmp>
=======
     d08:	e307128c 	movw	r1, #29324	; 0x728c
     d0c:	e1a00005 	mov	r0, r5
     d10:	e3401000 	movt	r1, #0
     d14:	eb001662 	bl	66a4 <strcmp>
     d18:	e3500000 	cmp	r0, #0
     d1c:	0a000050 	beq	e64 <get_num+0x1c4>
     d20:	e30712f4 	movw	r1, #29428	; 0x72f4
     d24:	e1a00005 	mov	r0, r5
     d28:	e3401000 	movt	r1, #0
     d2c:	eb00165c 	bl	66a4 <strcmp>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     d30:	e3500000 	cmp	r0, #0
     d34:	0a00004b 	beq	e68 <get_num+0x1c8>
		number = 3;
	} else if(!strcmp(note, "E")){
<<<<<<< HEAD
     d38:	e30716c0 	movw	r1, #30400	; 0x76c0
     d3c:	e1a00004 	mov	r0, r4
     d40:	e3401000 	movt	r1, #0
     d44:	eb001764 	bl	6adc <strcmp>
=======
     d38:	e3071280 	movw	r1, #29312	; 0x7280
     d3c:	e1a00005 	mov	r0, r5
     d40:	e3401000 	movt	r1, #0
     d44:	eb001656 	bl	66a4 <strcmp>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     d48:	e3500000 	cmp	r0, #0
     d4c:	0a000047 	beq	e70 <get_num+0x1d0>
		number = 4;
	} else if(!strcmp(note, "F")){
<<<<<<< HEAD
     d50:	e30716e0 	movw	r1, #30432	; 0x76e0
     d54:	e1a00004 	mov	r0, r4
     d58:	e3401000 	movt	r1, #0
     d5c:	eb00175e 	bl	6adc <strcmp>
=======
     d50:	e30712a0 	movw	r1, #29344	; 0x72a0
     d54:	e1a00005 	mov	r0, r5
     d58:	e3401000 	movt	r1, #0
     d5c:	eb001650 	bl	66a4 <strcmp>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     d60:	e3500000 	cmp	r0, #0
     d64:	0a000045 	beq	e80 <get_num+0x1e0>
		number = 5;
	} else if(!strcmp(note, "Fs") || !strcmp(note, "Gb")){
<<<<<<< HEAD
     d68:	e30716d0 	movw	r1, #30416	; 0x76d0
     d6c:	e1a00004 	mov	r0, r4
     d70:	e3401000 	movt	r1, #0
     d74:	eb001758 	bl	6adc <strcmp>
     d78:	e3500000 	cmp	r0, #0
     d7c:	0a000041 	beq	e88 <get_num+0x1e8>
     d80:	e3071738 	movw	r1, #30520	; 0x7738
     d84:	e1a00004 	mov	r0, r4
     d88:	e3401000 	movt	r1, #0
     d8c:	eb001752 	bl	6adc <strcmp>
=======
     d68:	e3071290 	movw	r1, #29328	; 0x7290
     d6c:	e1a00005 	mov	r0, r5
     d70:	e3401000 	movt	r1, #0
     d74:	eb00164a 	bl	66a4 <strcmp>
     d78:	e3500000 	cmp	r0, #0
     d7c:	0a000040 	beq	e84 <get_num+0x1e4>
     d80:	e30712f8 	movw	r1, #29432	; 0x72f8
     d84:	e1a00005 	mov	r0, r5
     d88:	e3401000 	movt	r1, #0
     d8c:	eb001644 	bl	66a4 <strcmp>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     d90:	e3500000 	cmp	r0, #0
     d94:	0a00003b 	beq	e88 <get_num+0x1e8>
		number = 6;
	} else if(!strcmp(note, "G")){
<<<<<<< HEAD
     d98:	e30716d4 	movw	r1, #30420	; 0x76d4
     d9c:	e1a00004 	mov	r0, r4
     da0:	e3401000 	movt	r1, #0
     da4:	eb00174c 	bl	6adc <strcmp>
=======
     d98:	e3071294 	movw	r1, #29332	; 0x7294
     d9c:	e1a00005 	mov	r0, r5
     da0:	e3401000 	movt	r1, #0
     da4:	eb00163e 	bl	66a4 <strcmp>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     da8:	e3500000 	cmp	r0, #0
     dac:	0a000037 	beq	e90 <get_num+0x1f0>
		number = 7;
	} else if(!strcmp(note, "Gs") || !strcmp(note, "Ab")){
<<<<<<< HEAD
     db0:	e30716e8 	movw	r1, #30440	; 0x76e8
     db4:	e1a00004 	mov	r0, r4
     db8:	e3401000 	movt	r1, #0
     dbc:	eb001746 	bl	6adc <strcmp>
     dc0:	e3500000 	cmp	r0, #0
     dc4:	0a00001e 	beq	e44 <get_num+0x1a4>
     dc8:	e307173c 	movw	r1, #30524	; 0x773c
     dcc:	e1a00004 	mov	r0, r4
     dd0:	e3401000 	movt	r1, #0
     dd4:	eb001740 	bl	6adc <strcmp>
=======
     db0:	e30712a8 	movw	r1, #29352	; 0x72a8
     db4:	e1a00005 	mov	r0, r5
     db8:	e3401000 	movt	r1, #0
     dbc:	eb001638 	bl	66a4 <strcmp>
     dc0:	e3500000 	cmp	r0, #0
     dc4:	0a00001e 	beq	e44 <get_num+0x1a4>
     dc8:	e30712fc 	movw	r1, #29436	; 0x72fc
     dcc:	e1a00005 	mov	r0, r5
     dd0:	e3401000 	movt	r1, #0
     dd4:	eb001632 	bl	66a4 <strcmp>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     dd8:	e3500000 	cmp	r0, #0
     ddc:	0a000018 	beq	e44 <get_num+0x1a4>
		number = 8;
	} else if(!strcmp(note, "A")){
<<<<<<< HEAD
     de0:	e30716b8 	movw	r1, #30392	; 0x76b8
     de4:	e1a00004 	mov	r0, r4
     de8:	e3401000 	movt	r1, #0
     dec:	eb00173a 	bl	6adc <strcmp>
=======
     de0:	e3071278 	movw	r1, #29304	; 0x7278
     de4:	e1a00005 	mov	r0, r5
     de8:	e3401000 	movt	r1, #0
     dec:	eb00162c 	bl	66a4 <strcmp>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     df0:	e3500000 	cmp	r0, #0
     df4:	0a000029 	beq	ea0 <get_num+0x200>
		number = 9;
	} else if(!strcmp(note, "As") || !strcmp(note, "Bb")){
<<<<<<< HEAD
     df8:	e30716e4 	movw	r1, #30436	; 0x76e4
     dfc:	e1a00004 	mov	r0, r4
     e00:	e3401000 	movt	r1, #0
     e04:	eb001734 	bl	6adc <strcmp>
     e08:	e3500000 	cmp	r0, #0
     e0c:	0a000021 	beq	e98 <get_num+0x1f8>
     e10:	e3071740 	movw	r1, #30528	; 0x7740
     e14:	e1a00004 	mov	r0, r4
     e18:	e3401000 	movt	r1, #0
     e1c:	eb00172e 	bl	6adc <strcmp>
=======
     df8:	e30712a4 	movw	r1, #29348	; 0x72a4
     dfc:	e1a00005 	mov	r0, r5
     e00:	e3401000 	movt	r1, #0
     e04:	eb001626 	bl	66a4 <strcmp>
     e08:	e3500000 	cmp	r0, #0
     e0c:	0a000020 	beq	e94 <get_num+0x1f4>
     e10:	e3071300 	movw	r1, #29440	; 0x7300
     e14:	e1a00005 	mov	r0, r5
     e18:	e3401000 	movt	r1, #0
     e1c:	eb001620 	bl	66a4 <strcmp>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     e20:	e3500000 	cmp	r0, #0
     e24:	0a00001b 	beq	e98 <get_num+0x1f8>
		number = 10;
	} else if(!strcmp(note, "B")){
<<<<<<< HEAD
     e28:	e30716c8 	movw	r1, #30408	; 0x76c8
     e2c:	e1a00004 	mov	r0, r4
     e30:	e3401000 	movt	r1, #0
     e34:	eb001728 	bl	6adc <strcmp>
=======
     e28:	e3071288 	movw	r1, #29320	; 0x7288
     e2c:	e1a00005 	mov	r0, r5
     e30:	e3401000 	movt	r1, #0
     e34:	eb00161a 	bl	66a4 <strcmp>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
     e38:	e3500000 	cmp	r0, #0
     e3c:	0a00000d 	beq	e78 <get_num+0x1d8>
     e40:	eafffffe 	b	e40 <get_num+0x1a0>
	} else if(!strcmp(note, "Fs") || !strcmp(note, "Gb")){
		number = 6;
	} else if(!strcmp(note, "G")){
		number = 7;
	} else if(!strcmp(note, "Gs") || !strcmp(note, "Ab")){
		number = 8;
     e44:	e3a00008 	mov	r0, #8
		number = 11;
	} else {
		while (1);
	}
	
	return number + ((octave + 1) * 12);
     e48:	e2851001 	add	r1, r5, #1
     e4c:	e0811081 	add	r1, r1, r1, lsl #1
}
     e50:	e0800101 	add	r0, r0, r1, lsl #2
     e54:	e8bd8038 	pop	{r3, r4, r5, pc}
int get_num(char * note, int octave){	
	int number;
	if(!strcmp(note, "C")){
		number = 0;
	} else if(!strcmp(note, "Cs") || !strcmp(note, "Db")){
		number = 1;
     e58:	e3a00001 	mov	r0, #1
     e5c:	eafffff9 	b	e48 <get_num+0x1a8>
	} else if(!strcmp(note, "D")){
		number = 2;
     e60:	e3a00002 	mov	r0, #2
     e64:	eafffff7 	b	e48 <get_num+0x1a8>
	} else if(!strcmp(note, "Ds") || !strcmp(note, "Eb")){
		number = 3;
     e68:	e3a00003 	mov	r0, #3
     e6c:	eafffff5 	b	e48 <get_num+0x1a8>
	} else if(!strcmp(note, "E")){
		number = 4;
     e70:	e3a00004 	mov	r0, #4
     e74:	eafffff3 	b	e48 <get_num+0x1a8>
	} else if(!strcmp(note, "A")){
		number = 9;
	} else if(!strcmp(note, "As") || !strcmp(note, "Bb")){
		number = 10;
	} else if(!strcmp(note, "B")){
		number = 11;
     e78:	e3a0000b 	mov	r0, #11
     e7c:	eafffff1 	b	e48 <get_num+0x1a8>
	} else if(!strcmp(note, "Ds") || !strcmp(note, "Eb")){
		number = 3;
	} else if(!strcmp(note, "E")){
		number = 4;
	} else if(!strcmp(note, "F")){
		number = 5;
     e80:	e3a00005 	mov	r0, #5
     e84:	eaffffef 	b	e48 <get_num+0x1a8>
	} else if(!strcmp(note, "Fs") || !strcmp(note, "Gb")){
		number = 6;
     e88:	e3a00006 	mov	r0, #6
     e8c:	eaffffed 	b	e48 <get_num+0x1a8>
	} else if(!strcmp(note, "G")){
		number = 7;
     e90:	e3a00007 	mov	r0, #7
     e94:	eaffffeb 	b	e48 <get_num+0x1a8>
	} else if(!strcmp(note, "Gs") || !strcmp(note, "Ab")){
		number = 8;
	} else if(!strcmp(note, "A")){
		number = 9;
	} else if(!strcmp(note, "As") || !strcmp(note, "Bb")){
		number = 10;
     e98:	e3a0000a 	mov	r0, #10
     e9c:	eaffffe9 	b	e48 <get_num+0x1a8>
	} else if(!strcmp(note, "G")){
		number = 7;
	} else if(!strcmp(note, "Gs") || !strcmp(note, "Ab")){
		number = 8;
	} else if(!strcmp(note, "A")){
		number = 9;
     ea0:	e3a00009 	mov	r0, #9
     ea4:	eaffffe7 	b	e48 <get_num+0x1a8>

00000ea8 <get_frequency>:
const double harmonic_intensities[] = {1, 0.5, 0.25};

extern struct StatusFlags status_flags;

//returns the frequency requested of the key number given
double get_frequency(char * note, int octave){
     ea8:	e92d4010 	push	{r4, lr}
	int key_number = get_num(note, octave);
     eac:	ebffff7b 	bl	ca0 <get_num>
     eb0:	e1a04000 	mov	r4, r0
	
	const double middle_A_freq = 440; //Hz
	const int middle_A_num = get_num("A", 4); //number pertaining to the middle A
<<<<<<< HEAD
     eb4:	e30706b8 	movw	r0, #30392	; 0x76b8
     eb8:	e3a01004 	mov	r1, #4
     ebc:	e3400000 	movt	r0, #0
     ec0:	ebffff76 	bl	ca0 <get_num>
	
	const double semitone_mult = pow(2, (1.0/12.0)); //change in frequency when going up or down one key
	double semitone_jump = key_number - middle_A_num; //number of jumps from key requested to middle A
     ec4:	e0600004 	rsb	r0, r0, r4
     ec8:	eb001326 	bl	5b68 <__aeabi_i2d>
     ecc:	e1a02000 	mov	r2, r0
     ed0:	e1a03001 	mov	r3, r1
	
	double change_in_freq = pow(semitone_mult, semitone_jump);
     ed4:	e3070963 	movw	r0, #31075	; 0x7963
     ed8:	e30f138f 	movw	r1, #62351	; 0xf38f
     edc:	e34902d9 	movt	r0, #37593	; 0x92d9
     ee0:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     ee4:	eb000565 	bl	2480 <pow>
	
	return change_in_freq * middle_A_freq;
     ee8:	e3a03902 	mov	r3, #32768	; 0x8000
     eec:	e3a02000 	mov	r2, #0
     ef0:	e344307b 	movt	r3, #16507	; 0x407b
     ef4:	eb001352 	bl	5c44 <__aeabi_dmul>
=======
     eb0:	e3070278 	movw	r0, #29304	; 0x7278
     eb4:	e3a01004 	mov	r1, #4
     eb8:	e3400000 	movt	r0, #0
     ebc:	ebffff77 	bl	ca0 <get_num>
	
	const double semitone_mult = pow(2, (1.0/12.0)); //change in frequency when going up or down one key
	double semitone_jump = key_number - middle_A_num; //number of jumps from key requested to middle A
     ec0:	e0600004 	rsb	r0, r0, r4
     ec4:	eb001219 	bl	5730 <__aeabi_i2d>
     ec8:	e1a02000 	mov	r2, r0
     ecc:	e1a03001 	mov	r3, r1
	
	double change_in_freq = pow(semitone_mult, semitone_jump);
     ed0:	e3070963 	movw	r0, #31075	; 0x7963
     ed4:	e30f138f 	movw	r1, #62351	; 0xf38f
     ed8:	e34902d9 	movt	r0, #37593	; 0x92d9
     edc:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     ee0:	eb00049e 	bl	2160 <pow>
	
	return change_in_freq * middle_A_freq;
     ee4:	e3a03902 	mov	r3, #32768	; 0x8000
     ee8:	e3a02000 	mov	r2, #0
     eec:	e344307b 	movt	r3, #16507	; 0x407b
     ef0:	eb001245 	bl	580c <__aeabi_dmul>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
}
     ef8:	e8bd8010 	pop	{r4, pc}

00000efc <calc_sine>:

struct MusicWave example_sine = {.waveform = (double[]) {0, 0.0627905195293134, 0.125333233564304, 0.187381314585725, 0.248689887164855, 0.309016994374947, 0.368124552684678, 0.425779291565073, 0.481753674101715, 0.535826794978997, 0.587785252292473, 0.63742398974869, 0.684547105928689, 0.728968627421412, 0.770513242775789, 0.809016994374948, 0.844327925502015, 0.876306680043864, 0.90482705246602, 0.929776485888252, 0.951056516295154, 0.968583161128631, 0.982287250728689, 0.992114701314478, 0.998026728428272, 1, 0.998026728428272, 0.992114701314478, 0.982287250728689, 0.968583161128631, 0.951056516295154, 0.929776485888251, 0.904827052466019, 0.876306680043864, 0.844327925502015, 0.809016994374948, 0.770513242775789, 0.728968627421412, 0.684547105928689, 0.637423989748691, 0.587785252292474, 0.535826794978998, 0.481753674101716, 0.425779291565074, 0.368124552684679, 0.309016994374949, 0.248689887164857, 0.187381314585727, 0.125333233564306, 0.0627905195293158, 2.34290668463255E-15, -0.0627905195293107, -0.125333233564302, -0.187381314585722, -0.248689887164852, -0.309016994374946, -0.368124552684676, -0.425779291565071, -0.481753674101714, -0.535826794978996, -0.587785252292472, -0.637423989748689, -0.684547105928688, -0.728968627421411, -0.770513242775789, -0.809016994374947, -0.844327925502015, -0.876306680043864, -0.90482705246602, -0.929776485888252, -0.951056516295154, -0.968583161128631, -0.982287250728689, -0.992114701314478, -0.998026728428272, -1, -0.998026728428271, -0.992114701314478, -0.982287250728688, -0.96858316112863, -0.951056516295153, -0.92977648588825, -0.904827052466018, -0.876306680043862, -0.844327925502013, -0.809016994374945, -0.770513242775786, -0.728968627421408, -0.684547105928685, -0.637423989748686, -0.587785252292468, -0.535826794978992, -0.48175367410171, -0.425779291565067, -0.368124552684672, -0.309016994374941, -0.248689887164848, -0.187381314585718, -0.125333233564297, -0.0627905195293053}, .length = 100};
	
//returns the value for a sine wave at the asked time and frequency
double calc_sine(double time, double frequency){
	if(*((int *) SW_BASE) == 0x200){
     efc:	e3a0c000 	mov	r12, #0
}

struct MusicWave example_sine = {.waveform = (double[]) {0, 0.0627905195293134, 0.125333233564304, 0.187381314585725, 0.248689887164855, 0.309016994374947, 0.368124552684678, 0.425779291565073, 0.481753674101715, 0.535826794978997, 0.587785252292473, 0.63742398974869, 0.684547105928689, 0.728968627421412, 0.770513242775789, 0.809016994374948, 0.844327925502015, 0.876306680043864, 0.90482705246602, 0.929776485888252, 0.951056516295154, 0.968583161128631, 0.982287250728689, 0.992114701314478, 0.998026728428272, 1, 0.998026728428272, 0.992114701314478, 0.982287250728689, 0.968583161128631, 0.951056516295154, 0.929776485888251, 0.904827052466019, 0.876306680043864, 0.844327925502015, 0.809016994374948, 0.770513242775789, 0.728968627421412, 0.684547105928689, 0.637423989748691, 0.587785252292474, 0.535826794978998, 0.481753674101716, 0.425779291565074, 0.368124552684679, 0.309016994374949, 0.248689887164857, 0.187381314585727, 0.125333233564306, 0.0627905195293158, 2.34290668463255E-15, -0.0627905195293107, -0.125333233564302, -0.187381314585722, -0.248689887164852, -0.309016994374946, -0.368124552684676, -0.425779291565071, -0.481753674101714, -0.535826794978996, -0.587785252292472, -0.637423989748689, -0.684547105928688, -0.728968627421411, -0.770513242775789, -0.809016994374947, -0.844327925502015, -0.876306680043864, -0.90482705246602, -0.929776485888252, -0.951056516295154, -0.968583161128631, -0.982287250728689, -0.992114701314478, -0.998026728428272, -1, -0.998026728428271, -0.992114701314478, -0.982287250728688, -0.96858316112863, -0.951056516295153, -0.92977648588825, -0.904827052466018, -0.876306680043862, -0.844327925502013, -0.809016994374945, -0.770513242775786, -0.728968627421408, -0.684547105928685, -0.637423989748686, -0.587785252292468, -0.535826794978992, -0.48175367410171, -0.425779291565067, -0.368124552684672, -0.309016994374941, -0.248689887164848, -0.187381314585718, -0.125333233564297, -0.0627905195293053}, .length = 100};
	
//returns the value for a sine wave at the asked time and frequency
double calc_sine(double time, double frequency){
     f00:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
	if(*((int *) SW_BASE) == 0x200){
     f04:	e34fcf20 	movt	r12, #65312	; 0xff20
}

struct MusicWave example_sine = {.waveform = (double[]) {0, 0.0627905195293134, 0.125333233564304, 0.187381314585725, 0.248689887164855, 0.309016994374947, 0.368124552684678, 0.425779291565073, 0.481753674101715, 0.535826794978997, 0.587785252292473, 0.63742398974869, 0.684547105928689, 0.728968627421412, 0.770513242775789, 0.809016994374948, 0.844327925502015, 0.876306680043864, 0.90482705246602, 0.929776485888252, 0.951056516295154, 0.968583161128631, 0.982287250728689, 0.992114701314478, 0.998026728428272, 1, 0.998026728428272, 0.992114701314478, 0.982287250728689, 0.968583161128631, 0.951056516295154, 0.929776485888251, 0.904827052466019, 0.876306680043864, 0.844327925502015, 0.809016994374948, 0.770513242775789, 0.728968627421412, 0.684547105928689, 0.637423989748691, 0.587785252292474, 0.535826794978998, 0.481753674101716, 0.425779291565074, 0.368124552684679, 0.309016994374949, 0.248689887164857, 0.187381314585727, 0.125333233564306, 0.0627905195293158, 2.34290668463255E-15, -0.0627905195293107, -0.125333233564302, -0.187381314585722, -0.248689887164852, -0.309016994374946, -0.368124552684676, -0.425779291565071, -0.481753674101714, -0.535826794978996, -0.587785252292472, -0.637423989748689, -0.684547105928688, -0.728968627421411, -0.770513242775789, -0.809016994374947, -0.844327925502015, -0.876306680043864, -0.90482705246602, -0.929776485888252, -0.951056516295154, -0.968583161128631, -0.982287250728689, -0.992114701314478, -0.998026728428272, -1, -0.998026728428271, -0.992114701314478, -0.982287250728688, -0.96858316112863, -0.951056516295153, -0.92977648588825, -0.904827052466018, -0.876306680043862, -0.844327925502013, -0.809016994374945, -0.770513242775786, -0.728968627421408, -0.684547105928685, -0.637423989748686, -0.587785252292468, -0.535826794978992, -0.48175367410171, -0.425779291565067, -0.368124552684672, -0.309016994374941, -0.248689887164848, -0.187381314585718, -0.125333233564297, -0.0627905195293053}, .length = 100};
	
//returns the value for a sine wave at the asked time and frequency
double calc_sine(double time, double frequency){
     f08:	e1a07003 	mov	r7, r3
     f0c:	e24dd014 	sub	sp, sp, #20
     f10:	e1a04000 	mov	r4, r0
	if(*((int *) SW_BASE) == 0x200){
     f14:	e59c3040 	ldr	r3, [r12, #64]	; 0x40
}

struct MusicWave example_sine = {.waveform = (double[]) {0, 0.0627905195293134, 0.125333233564304, 0.187381314585725, 0.248689887164855, 0.309016994374947, 0.368124552684678, 0.425779291565073, 0.481753674101715, 0.535826794978997, 0.587785252292473, 0.63742398974869, 0.684547105928689, 0.728968627421412, 0.770513242775789, 0.809016994374948, 0.844327925502015, 0.876306680043864, 0.90482705246602, 0.929776485888252, 0.951056516295154, 0.968583161128631, 0.982287250728689, 0.992114701314478, 0.998026728428272, 1, 0.998026728428272, 0.992114701314478, 0.982287250728689, 0.968583161128631, 0.951056516295154, 0.929776485888251, 0.904827052466019, 0.876306680043864, 0.844327925502015, 0.809016994374948, 0.770513242775789, 0.728968627421412, 0.684547105928689, 0.637423989748691, 0.587785252292474, 0.535826794978998, 0.481753674101716, 0.425779291565074, 0.368124552684679, 0.309016994374949, 0.248689887164857, 0.187381314585727, 0.125333233564306, 0.0627905195293158, 2.34290668463255E-15, -0.0627905195293107, -0.125333233564302, -0.187381314585722, -0.248689887164852, -0.309016994374946, -0.368124552684676, -0.425779291565071, -0.481753674101714, -0.535826794978996, -0.587785252292472, -0.637423989748689, -0.684547105928688, -0.728968627421411, -0.770513242775789, -0.809016994374947, -0.844327925502015, -0.876306680043864, -0.90482705246602, -0.929776485888252, -0.951056516295154, -0.968583161128631, -0.982287250728689, -0.992114701314478, -0.998026728428272, -1, -0.998026728428271, -0.992114701314478, -0.982287250728688, -0.96858316112863, -0.951056516295153, -0.92977648588825, -0.904827052466018, -0.876306680043862, -0.844327925502013, -0.809016994374945, -0.770513242775786, -0.728968627421408, -0.684547105928685, -0.637423989748686, -0.587785252292468, -0.535826794978992, -0.48175367410171, -0.425779291565067, -0.368124552684672, -0.309016994374941, -0.248689887164848, -0.187381314585718, -0.125333233564297, -0.0627905195293053}, .length = 100};
	
//returns the value for a sine wave at the asked time and frequency
double calc_sine(double time, double frequency){
     f18:	e1a05001 	mov	r5, r1
     f1c:	e1a06002 	mov	r6, r2
	if(*((int *) SW_BASE) == 0x200){
     f20:	e3530c02 	cmp	r3, #512	; 0x200
     f24:	0a00000c 	beq	f5c <calc_sine+0x60>
			return value;
		} else {
			return example_sine.waveform[index_left];
		}
	} else {
		return sin(2 * pi * frequency * time);
     f28:	e1a00002 	mov	r0, r2
     f2c:	e30231fb 	movw	r3, #8699	; 0x21fb
     f30:	e3022d18 	movw	r2, #11544	; 0x2d18
     f34:	e1a01007 	mov	r1, r7
     f38:	e3452444 	movt	r2, #21572	; 0x5444
     f3c:	e3443019 	movt	r3, #16409	; 0x4019
     f40:	eb00133f 	bl	5c44 <__aeabi_dmul>
     f44:	e1a02004 	mov	r2, r4
     f48:	e1a03005 	mov	r3, r5
     f4c:	eb00133c 	bl	5c44 <__aeabi_dmul>
	}
}
     f50:	e28dd014 	add	sp, sp, #20
     f54:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
			return value;
		} else {
			return example_sine.waveform[index_left];
		}
	} else {
		return sin(2 * pi * frequency * time);
     f58:	ea000508 	b	2380 <sin>
struct MusicWave example_sine = {.waveform = (double[]) {0, 0.0627905195293134, 0.125333233564304, 0.187381314585725, 0.248689887164855, 0.309016994374947, 0.368124552684678, 0.425779291565073, 0.481753674101715, 0.535826794978997, 0.587785252292473, 0.63742398974869, 0.684547105928689, 0.728968627421412, 0.770513242775789, 0.809016994374948, 0.844327925502015, 0.876306680043864, 0.90482705246602, 0.929776485888252, 0.951056516295154, 0.968583161128631, 0.982287250728689, 0.992114701314478, 0.998026728428272, 1, 0.998026728428272, 0.992114701314478, 0.982287250728689, 0.968583161128631, 0.951056516295154, 0.929776485888251, 0.904827052466019, 0.876306680043864, 0.844327925502015, 0.809016994374948, 0.770513242775789, 0.728968627421412, 0.684547105928689, 0.637423989748691, 0.587785252292474, 0.535826794978998, 0.481753674101716, 0.425779291565074, 0.368124552684679, 0.309016994374949, 0.248689887164857, 0.187381314585727, 0.125333233564306, 0.0627905195293158, 2.34290668463255E-15, -0.0627905195293107, -0.125333233564302, -0.187381314585722, -0.248689887164852, -0.309016994374946, -0.368124552684676, -0.425779291565071, -0.481753674101714, -0.535826794978996, -0.587785252292472, -0.637423989748689, -0.684547105928688, -0.728968627421411, -0.770513242775789, -0.809016994374947, -0.844327925502015, -0.876306680043864, -0.90482705246602, -0.929776485888252, -0.951056516295154, -0.968583161128631, -0.982287250728689, -0.992114701314478, -0.998026728428272, -1, -0.998026728428271, -0.992114701314478, -0.982287250728688, -0.96858316112863, -0.951056516295153, -0.92977648588825, -0.904827052466018, -0.876306680043862, -0.844327925502013, -0.809016994374945, -0.770513242775786, -0.728968627421408, -0.684547105928685, -0.637423989748686, -0.587785252292468, -0.535826794978992, -0.48175367410171, -0.425779291565067, -0.368124552684672, -0.309016994374941, -0.248689887164848, -0.187381314585718, -0.125333233564297, -0.0627905195293053}, .length = 100};
	
//returns the value for a sine wave at the asked time and frequency
double calc_sine(double time, double frequency){
	if(*((int *) SW_BASE) == 0x200){
		double sampling_rate = example_sine.length * frequency;
     f5c:	e305b6b8 	movw	r11, #22200	; 0x56b8
     f60:	e340b012 	movt	r11, #18
     f64:	e59b8004 	ldr	r8, [r11, #4]
     f68:	e1a00008 	mov	r0, r8
     f6c:	eb0012f4 	bl	5b44 <__aeabi_ui2d>
     f70:	e1a02006 	mov	r2, r6
     f74:	e1a03007 	mov	r3, r7
     f78:	eb001331 	bl	5c44 <__aeabi_dmul>
     f7c:	e1a06000 	mov	r6, r0
     f80:	e1a07001 	mov	r7, r1
		double period = 1 / frequency;
		
		//ensure index is within the waveform
		unsigned int index_left = ((unsigned int) floor(time * sampling_rate)) % example_sine.length;
     f84:	e1a02006 	mov	r2, r6
     f88:	e1a03007 	mov	r3, r7
     f8c:	e1a00004 	mov	r0, r4
     f90:	e1a01005 	mov	r1, r5
     f94:	eb00132a 	bl	5c44 <__aeabi_dmul>
     f98:	e58d0004 	str	r0, [sp, #4]
     f9c:	e58d1000 	str	r1, [sp]
     fa0:	eb000490 	bl	21e8 <floor>
     fa4:	eb0014b5 	bl	6280 <__aeabi_d2uiz>
     fa8:	e1a01008 	mov	r1, r8
     fac:	eb001214 	bl	5804 <__aeabi_uidivmod>
		unsigned int index_right = ((unsigned int) ceil(time * sampling_rate)) % example_sine.length;
     fb0:	e59d3000 	ldr	r3, [sp]
	if(*((int *) SW_BASE) == 0x200){
		double sampling_rate = example_sine.length * frequency;
		double period = 1 / frequency;
		
		//ensure index is within the waveform
		unsigned int index_left = ((unsigned int) floor(time * sampling_rate)) % example_sine.length;
     fb4:	e1a0a001 	mov	r10, r1
		unsigned int index_right = ((unsigned int) ceil(time * sampling_rate)) % example_sine.length;
     fb8:	e59d2004 	ldr	r2, [sp, #4]
     fbc:	e1a01003 	mov	r1, r3
     fc0:	e1a00002 	mov	r0, r2
     fc4:	eb000421 	bl	2050 <ceil>
     fc8:	eb0014ac 	bl	6280 <__aeabi_d2uiz>
     fcc:	e1a01008 	mov	r1, r8
     fd0:	eb00120b 	bl	5804 <__aeabi_uidivmod>
		
		if(index_left != index_right){
     fd4:	e15a0001 	cmp	r10, r1
			//interpolate between the two points of the example sinewave
			double delta_value = example_sine.waveform[index_right] - example_sine.waveform[index_left];
     fd8:	e59b3000 	ldr	r3, [r11]
		
		//ensure index is within the waveform
		unsigned int index_left = ((unsigned int) floor(time * sampling_rate)) % example_sine.length;
		unsigned int index_right = ((unsigned int) ceil(time * sampling_rate)) % example_sine.length;
		
		if(index_left != index_right){
     fdc:	0a000027 	beq	1080 <calc_sine+0x184>
			//interpolate between the two points of the example sinewave
			double delta_value = example_sine.waveform[index_right] - example_sine.waveform[index_left];
     fe0:	e1a0218a 	lsl	r2, r10, #3
     fe4:	e1a01181 	lsl	r1, r1, #3
     fe8:	e18380d2 	ldrd	r8, [r3, r2]
     fec:	e18100d3 	ldrd	r0, [r1, r3]
     ff0:	e1a02008 	mov	r2, r8
     ff4:	e1a03009 	mov	r3, r9
     ff8:	eb00120c 	bl	5830 <__aeabi_dsub>
     ffc:	e1cd00f8 	strd	r0, [sp, #8]
			double delta_time = 1 / sampling_rate;
    1000:	e3a01000 	mov	r1, #0
    1004:	e1a02006 	mov	r2, r6
    1008:	e1a03007 	mov	r3, r7
    100c:	e3a00000 	mov	r0, #0
    1010:	e3431ff0 	movt	r1, #16368	; 0x3ff0
    1014:	eb0013ae 	bl	5ed4 <__aeabi_ddiv>
    1018:	e1a02000 	mov	r2, r0
    101c:	e1a03001 	mov	r3, r1
			double initial_time = index_left * sampling_rate;
			double initial_value = example_sine.waveform[index_left];
			
			double value = delta_value / delta_time * (time - initial_time) + initial_value;
    1020:	e1cd00d8 	ldrd	r0, [sp, #8]
    1024:	eb0013aa 	bl	5ed4 <__aeabi_ddiv>
    1028:	e1cd00f8 	strd	r0, [sp, #8]
		
		if(index_left != index_right){
			//interpolate between the two points of the example sinewave
			double delta_value = example_sine.waveform[index_right] - example_sine.waveform[index_left];
			double delta_time = 1 / sampling_rate;
			double initial_time = index_left * sampling_rate;
    102c:	e1a0000a 	mov	r0, r10
    1030:	eb0012c3 	bl	5b44 <__aeabi_ui2d>
    1034:	e1a02006 	mov	r2, r6
    1038:	e1a03007 	mov	r3, r7
    103c:	eb001300 	bl	5c44 <__aeabi_dmul>
    1040:	e1a02000 	mov	r2, r0
    1044:	e1a03001 	mov	r3, r1
			double initial_value = example_sine.waveform[index_left];
			
			double value = delta_value / delta_time * (time - initial_time) + initial_value;
    1048:	e1a00004 	mov	r0, r4
    104c:	e1a01005 	mov	r1, r5
    1050:	eb0011f6 	bl	5830 <__aeabi_dsub>
    1054:	e1a02000 	mov	r2, r0
    1058:	e1a03001 	mov	r3, r1
    105c:	e1cd00d8 	ldrd	r0, [sp, #8]
    1060:	eb0012f7 	bl	5c44 <__aeabi_dmul>
    1064:	e1a02000 	mov	r2, r0
    1068:	e1a03001 	mov	r3, r1
    106c:	e1a00008 	mov	r0, r8
    1070:	e1a01009 	mov	r1, r9
    1074:	eb0011ee 	bl	5834 <__adddf3>
			return example_sine.waveform[index_left];
		}
	} else {
		return sin(2 * pi * frequency * time);
	}
}
    1078:	e28dd014 	add	sp, sp, #20
    107c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
			
			double value = delta_value / delta_time * (time - initial_time) + initial_value;
			
			return value;
		} else {
			return example_sine.waveform[index_left];
    1080:	e1a0a18a 	lsl	r10, r10, #3
    1084:	e18300da 	ldrd	r0, [r3, r10]
    1088:	eafffffa 	b	1078 <calc_sine+0x17c>

0000108c <get_note_wave>:
		return sin(2 * pi * frequency * time);
	}
}

//returns a dynamically allocated array representing the wave intensity of each sample for the note
struct MusicWave get_note_wave(struct MusicNote music_note){
<<<<<<< HEAD
    108c:	e24dd008 	sub	sp, sp, #8
    1090:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1094:	e24dd044 	sub	sp, sp, #68	; 0x44
    1098:	e28d1064 	add	r1, sp, #100	; 0x64
    109c:	e1a06000 	mov	r6, r0
    10a0:	e981000c 	stmib	r1, {r2, r3}
	//find the number of samples for the duration given
	unsigned int number_of_samples = (unsigned int) floor(music_note.duration * sampling_frequency);
    10a4:	e3a03901 	mov	r3, #16384	; 0x4000
    10a8:	e3a02000 	mov	r2, #0
    10ac:	e34430bf 	movt	r3, #16575	; 0x40bf
    10b0:	e1cd07d0 	ldrd	r0, [sp, #112]	; 0x70
    10b4:	eb0012e2 	bl	5c44 <__aeabi_dmul>
    10b8:	eb00044a 	bl	21e8 <floor>
    10bc:	eb00146f 	bl	6280 <__aeabi_d2uiz>
    10c0:	e59d4068 	ldr	r4, [sp, #104]	; 0x68
    10c4:	e1a08000 	mov	r8, r0
	
	//preallocate enough space for all samples
	double * wave_array = malloc(number_of_samples * sizeof(double));
    10c8:	e1a00180 	lsl	r0, r0, #3
    10cc:	e59da088 	ldr	r10, [sp, #136]	; 0x88
    10d0:	eb001498 	bl	6338 <malloc>
	
	//find the frequency for the given note and octave
	double frequency;
	if(!strcmp(music_note.note, "S")){ //if the note is silent, return an empty array
    10d4:	e30716c4 	movw	r1, #30404	; 0x76c4
=======
     ef8:	e24dd008 	sub	sp, sp, #8
     efc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     f00:	e24dd044 	sub	sp, sp, #68	; 0x44
     f04:	e28d1064 	add	r1, sp, #100	; 0x64
     f08:	e58d0020 	str	r0, [sp, #32]
     f0c:	e981000c 	stmib	r1, {r2, r3}
	//find the number of samples for the duration given
	unsigned int number_of_samples = (unsigned int) floor(music_note.duration * sampling_frequency);
     f10:	e3a03901 	mov	r3, #16384	; 0x4000
     f14:	e3a02000 	mov	r2, #0
     f18:	e34430bf 	movt	r3, #16575	; 0x40bf
     f1c:	e1cd07d0 	ldrd	r0, [sp, #112]	; 0x70
     f20:	eb001239 	bl	580c <__aeabi_dmul>
     f24:	eb0003e7 	bl	1ec8 <floor>
     f28:	eb0013c6 	bl	5e48 <__aeabi_d2uiz>
     f2c:	e59d4068 	ldr	r4, [sp, #104]	; 0x68
     f30:	e1a09000 	mov	r9, r0
	
	//preallocate enough space for all samples
	double * wave_array = malloc(number_of_samples * sizeof(double));
     f34:	e1a00180 	lsl	r0, r0, #3
     f38:	e59d8088 	ldr	r8, [sp, #136]	; 0x88
     f3c:	eb0013ef 	bl	5f00 <malloc>
	
	//find the frequency for the given note and octave
	double frequency;
	if(!strcmp(music_note.note, "S")){ //if the note is silent, return no frequency and zero the intensity
     f40:	e3071284 	movw	r1, #29316	; 0x7284
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
struct MusicWave get_note_wave(struct MusicNote music_note){
	//find the number of samples for the duration given
	unsigned int number_of_samples = (unsigned int) floor(music_note.duration * sampling_frequency);
	
	//preallocate enough space for all samples
	double * wave_array = malloc(number_of_samples * sizeof(double));
<<<<<<< HEAD
    10d8:	e1a09000 	mov	r9, r0
	
	//find the frequency for the given note and octave
	double frequency;
	if(!strcmp(music_note.note, "S")){ //if the note is silent, return an empty array
    10dc:	e3401000 	movt	r1, #0
    10e0:	e1a00004 	mov	r0, r4
    10e4:	eb00167c 	bl	6adc <strcmp>
    10e8:	e3500000 	cmp	r0, #0
    10ec:	1a000011 	bne	1138 <get_note_wave+0xac>
		for(int i = 0; i < number_of_samples; i++){
    10f0:	e3580000 	cmp	r8, #0
			wave_array[i] = 0;
    10f4:	13a02000 	movne	r2, #0
    10f8:	13a03000 	movne	r3, #0
		return sin(2 * pi * frequency * time);
	}
}

//returns a dynamically allocated array representing the wave intensity of each sample for the note
struct MusicWave get_note_wave(struct MusicNote music_note){
    10fc:	11a01000 	movne	r1, r0
	double * wave_array = malloc(number_of_samples * sizeof(double));
	
	//find the frequency for the given note and octave
	double frequency;
	if(!strcmp(music_note.note, "S")){ //if the note is silent, return an empty array
		for(int i = 0; i < number_of_samples; i++){
    1100:	0a000005 	beq	111c <get_note_wave+0x90>
    1104:	e2811001 	add	r1, r1, #1
			wave_array[i] = 0;
    1108:	e1a00180 	lsl	r0, r0, #3
	double * wave_array = malloc(number_of_samples * sizeof(double));
	
	//find the frequency for the given note and octave
	double frequency;
	if(!strcmp(music_note.note, "S")){ //if the note is silent, return an empty array
		for(int i = 0; i < number_of_samples; i++){
    110c:	e1510008 	cmp	r1, r8
			wave_array[i] = 0;
    1110:	e18920f0 	strd	r2, [r9, r0]
=======
     f44:	e58d0034 	str	r0, [sp, #52]	; 0x34
	
	//find the frequency for the given note and octave
	double frequency;
	if(!strcmp(music_note.note, "S")){ //if the note is silent, return no frequency and zero the intensity
     f48:	e3401000 	movt	r1, #0
     f4c:	e1a00004 	mov	r0, r4
     f50:	eb0015d3 	bl	66a4 <strcmp>
     f54:	e3500000 	cmp	r0, #0
		frequency = 0;
     f58:	03a06000 	moveq	r6, #0
     f5c:	03a07000 	moveq	r7, #0
	//preallocate enough space for all samples
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	double * wave_array = malloc(number_of_samples * sizeof(double));
	
	//find the frequency for the given note and octave
	double frequency;
<<<<<<< HEAD
	if(!strcmp(music_note.note, "S")){ //if the note is silent, return an empty array
		for(int i = 0; i < number_of_samples; i++){
    1114:	e1a00001 	mov	r0, r1
    1118:	1afffff9 	bne	1104 <get_note_wave+0x78>
		current_time += sampling_period;
	}
	
	//return the sampled wave
	struct MusicWave wave = {.waveform = wave_array, .length = number_of_samples};
	return wave;
    111c:	e5869000 	str	r9, [r6]
    1120:	e1a00006 	mov	r0, r6
		current_time += sampling_period;
	}
	
	//return the sampled wave
	struct MusicWave wave = {.waveform = wave_array, .length = number_of_samples};
	return wave;
    1124:	e5868004 	str	r8, [r6, #4]
    1128:	e28dd044 	add	sp, sp, #68	; 0x44
    112c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1130:	e28dd008 	add	sp, sp, #8
    1134:	e12fff1e 	bx	lr

extern struct StatusFlags status_flags;

//returns the frequency requested of the key number given
double get_frequency(char * note, int octave){
	int key_number = get_num(note, octave);
    1138:	e59d106c 	ldr	r1, [sp, #108]	; 0x6c
    113c:	e1a00004 	mov	r0, r4
    1140:	ebfffed6 	bl	ca0 <get_num>
    1144:	e1a04000 	mov	r4, r0
	
	const double middle_A_freq = 440; //Hz
	const int middle_A_num = get_num("A", 4); //number pertaining to the middle A
    1148:	e30706b8 	movw	r0, #30392	; 0x76b8
    114c:	e3a01004 	mov	r1, #4
    1150:	e3400000 	movt	r0, #0
    1154:	ebfffed1 	bl	ca0 <get_num>
	
	const double semitone_mult = pow(2, (1.0/12.0)); //change in frequency when going up or down one key
	double semitone_jump = key_number - middle_A_num; //number of jumps from key requested to middle A
    1158:	e0600004 	rsb	r0, r0, r4
    115c:	eb001281 	bl	5b68 <__aeabi_i2d>
    1160:	e1a02000 	mov	r2, r0
    1164:	e1a03001 	mov	r3, r1
	
	double change_in_freq = pow(semitone_mult, semitone_jump);
    1168:	e3070963 	movw	r0, #31075	; 0x7963
    116c:	e30f138f 	movw	r1, #62351	; 0xf38f
    1170:	e34902d9 	movt	r0, #37593	; 0x92d9
    1174:	e3431ff0 	movt	r1, #16368	; 0x3ff0
    1178:	eb0004c0 	bl	2480 <pow>
	
	return change_in_freq * middle_A_freq;
    117c:	e3a03902 	mov	r3, #32768	; 0x8000
    1180:	e3a02000 	mov	r2, #0
    1184:	e344307b 	movt	r3, #16507	; 0x407b
    1188:	eb0012ad 	bl	5c44 <__aeabi_dmul>
		return wave;
	} else {
		frequency = get_frequency(music_note.note, music_note.octave);
		
		//check for fundamental frequency overflow
		if(frequency > MAX_FREQUENCY)
    118c:	e3a03b13 	mov	r3, #19456	; 0x4c00
    1190:	e3a02000 	mov	r2, #0
    1194:	e34430ad 	movt	r3, #16557	; 0x40ad
	const double semitone_mult = pow(2, (1.0/12.0)); //change in frequency when going up or down one key
	double semitone_jump = key_number - middle_A_num; //number of jumps from key requested to middle A
	
	double change_in_freq = pow(semitone_mult, semitone_jump);
	
	return change_in_freq * middle_A_freq;
    1198:	e1cd01f0 	strd	r0, [sp, #16]
		return wave;
	} else {
		frequency = get_frequency(music_note.note, music_note.octave);
		
		//check for fundamental frequency overflow
		if(frequency > MAX_FREQUENCY)
    119c:	eb00141a 	bl	620c <__aeabi_dcmpgt>
    11a0:	e3500000 	cmp	r0, #0
=======
	if(!strcmp(music_note.note, "S")){ //if the note is silent, return no frequency and zero the intensity
     f60:	1a0000f9 	bne	134c <get_note_wave+0x454>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	//set the current time to zero at the beginning of the wave
	double current_time = 0;
	
	//find the index of the start of each stage in the adsr envelope
	unsigned int delay_start = (unsigned int) floor(music_note.adsr_envelope[0] * number_of_samples);
<<<<<<< HEAD
    11a4:	e1a00008 	mov	r0, r8
	} else {
		frequency = get_frequency(music_note.note, music_note.octave);
		
		//check for fundamental frequency overflow
		if(frequency > MAX_FREQUENCY)
			status_flags.frequency_overflow = true;
    11a8:	13063250 	movwne	r3, #25168	; 0x6250
    11ac:	13a02001 	movne	r2, #1
    11b0:	13403012 	movtne	r3, #18
    11b4:	15c32004 	strbne	r2, [r3, #4]
	
	//set the current time to zero at the beginning of the wave
	double current_time = 0;
	
	//find the index of the start of each stage in the adsr envelope
	unsigned int delay_start = (unsigned int) floor(music_note.adsr_envelope[0] * number_of_samples);
    11b8:	eb001261 	bl	5b44 <__aeabi_ui2d>
    11bc:	e1ca20d0 	ldrd	r2, [r10]
    11c0:	e1a04000 	mov	r4, r0
    11c4:	e1a05001 	mov	r5, r1
    11c8:	eb00129d 	bl	5c44 <__aeabi_dmul>
    11cc:	eb000405 	bl	21e8 <floor>
    11d0:	eb00142a 	bl	6280 <__aeabi_d2uiz>
    11d4:	e1a07000 	mov	r7, r0
	unsigned int sustain_start = (unsigned int) floor(delay_start + music_note.adsr_envelope[1] * number_of_samples);
    11d8:	eb001259 	bl	5b44 <__aeabi_ui2d>
    11dc:	e1ca20d8 	ldrd	r2, [r10, #8]
    11e0:	e1cd00f8 	strd	r0, [sp, #8]
    11e4:	e1a00004 	mov	r0, r4
    11e8:	e1a01005 	mov	r1, r5
    11ec:	eb001294 	bl	5c44 <__aeabi_dmul>
    11f0:	e1a02000 	mov	r2, r0
    11f4:	e1a03001 	mov	r3, r1
    11f8:	e1cd00d8 	ldrd	r0, [sp, #8]
    11fc:	eb00118c 	bl	5834 <__adddf3>
    1200:	eb0003f8 	bl	21e8 <floor>
    1204:	eb00141d 	bl	6280 <__aeabi_d2uiz>
    1208:	e58d0028 	str	r0, [sp, #40]	; 0x28
	unsigned int release_start = (unsigned int) floor(sustain_start + music_note.adsr_envelope[2] * number_of_samples);
    120c:	eb00124c 	bl	5b44 <__aeabi_ui2d>
    1210:	e1ca21d0 	ldrd	r2, [r10, #16]
    1214:	e1cd00f0 	strd	r0, [sp]
    1218:	e1a00004 	mov	r0, r4
    121c:	e1a01005 	mov	r1, r5
    1220:	eb001287 	bl	5c44 <__aeabi_dmul>
    1224:	e1a02000 	mov	r2, r0
    1228:	e1a03001 	mov	r3, r1
    122c:	e1cd00d0 	ldrd	r0, [sp]
    1230:	eb00117f 	bl	5834 <__adddf3>
    1234:	eb0003eb 	bl	21e8 <floor>
    1238:	eb001410 	bl	6280 <__aeabi_d2uiz>
	
	//the volumes of each part of the envelope
	double peak_volume = music_note.peak_intensity * default_amplitude;
    123c:	e306324d 	movw	r3, #25165	; 0x624d
=======
     f64:	e1a00009 	mov	r0, r9
     f68:	eb0011e7 	bl	570c <__aeabi_ui2d>
     f6c:	e1c820d0 	ldrd	r2, [r8]
     f70:	e1a04000 	mov	r4, r0
     f74:	e1a05001 	mov	r5, r1
     f78:	eb001223 	bl	580c <__aeabi_dmul>
     f7c:	eb0003d1 	bl	1ec8 <floor>
     f80:	eb0013b0 	bl	5e48 <__aeabi_d2uiz>
     f84:	e1a0b000 	mov	r11, r0
	unsigned int sustain_start = (unsigned int) floor(delay_start + music_note.adsr_envelope[1] * number_of_samples);
     f88:	eb0011df 	bl	570c <__aeabi_ui2d>
     f8c:	e1c820d8 	ldrd	r2, [r8, #8]
     f90:	e1cd01f8 	strd	r0, [sp, #24]
     f94:	e1a00004 	mov	r0, r4
     f98:	e1a01005 	mov	r1, r5
     f9c:	eb00121a 	bl	580c <__aeabi_dmul>
     fa0:	e1a02000 	mov	r2, r0
     fa4:	e1a03001 	mov	r3, r1
     fa8:	e1cd01d8 	ldrd	r0, [sp, #24]
     fac:	eb001112 	bl	53fc <__adddf3>
     fb0:	eb0003c4 	bl	1ec8 <floor>
     fb4:	eb0013a3 	bl	5e48 <__aeabi_d2uiz>
     fb8:	e58d0024 	str	r0, [sp, #36]	; 0x24
	unsigned int release_start = (unsigned int) floor(sustain_start + music_note.adsr_envelope[2] * number_of_samples);
     fbc:	eb0011d2 	bl	570c <__aeabi_ui2d>
     fc0:	e1c821d0 	ldrd	r2, [r8, #16]
     fc4:	e1cd00f0 	strd	r0, [sp]
     fc8:	e1a00004 	mov	r0, r4
     fcc:	e1a01005 	mov	r1, r5
     fd0:	eb00120d 	bl	580c <__aeabi_dmul>
     fd4:	e1a02000 	mov	r2, r0
     fd8:	e1a03001 	mov	r3, r1
     fdc:	e1cd00d0 	ldrd	r0, [sp]
     fe0:	eb001105 	bl	53fc <__adddf3>
     fe4:	eb0003b7 	bl	1ec8 <floor>
     fe8:	eb001396 	bl	5e48 <__aeabi_d2uiz>
	
	//the volumes of each part of the envelope
	double peak_volume = music_note.peak_intensity * default_amplitude;
     fec:	e306324d 	movw	r3, #25165	; 0x624d
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	double current_time = 0;
	
	//find the index of the start of each stage in the adsr envelope
	unsigned int delay_start = (unsigned int) floor(music_note.adsr_envelope[0] * number_of_samples);
	unsigned int sustain_start = (unsigned int) floor(delay_start + music_note.adsr_envelope[1] * number_of_samples);
	unsigned int release_start = (unsigned int) floor(sustain_start + music_note.adsr_envelope[2] * number_of_samples);
<<<<<<< HEAD
    1240:	e58d002c 	str	r0, [sp, #44]	; 0x2c
	
	//the volumes of each part of the envelope
	double peak_volume = music_note.peak_intensity * default_amplitude;
    1244:	e3a02103 	mov	r2, #-1073741824	; 0xc0000000
    1248:	e3443150 	movt	r3, #16720	; 0x4150
    124c:	e1cd07d8 	ldrd	r0, [sp, #120]	; 0x78
    1250:	eb00127b 	bl	5c44 <__aeabi_dmul>
	double sustain_volume = music_note.sustain_intensity * default_amplitude;
    1254:	e306324d 	movw	r3, #25165	; 0x624d
=======
     ff0:	e58d0030 	str	r0, [sp, #48]	; 0x30
	
	//the volumes of each part of the envelope
	double peak_volume = music_note.peak_intensity * default_amplitude;
     ff4:	e3a02103 	mov	r2, #-1073741824	; 0xc0000000
     ff8:	e3443150 	movt	r3, #16720	; 0x4150
     ffc:	e1cd07d8 	ldrd	r0, [sp, #120]	; 0x78
    1000:	eb001201 	bl	580c <__aeabi_dmul>
	double sustain_volume = music_note.sustain_intensity * default_amplitude;
    1004:	e306324d 	movw	r3, #25165	; 0x624d
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	unsigned int delay_start = (unsigned int) floor(music_note.adsr_envelope[0] * number_of_samples);
	unsigned int sustain_start = (unsigned int) floor(delay_start + music_note.adsr_envelope[1] * number_of_samples);
	unsigned int release_start = (unsigned int) floor(sustain_start + music_note.adsr_envelope[2] * number_of_samples);
	
	//the volumes of each part of the envelope
	double peak_volume = music_note.peak_intensity * default_amplitude;
<<<<<<< HEAD
    1258:	e1cd00f0 	strd	r0, [sp]
	double sustain_volume = music_note.sustain_intensity * default_amplitude;
    125c:	e3a02103 	mov	r2, #-1073741824	; 0xc0000000
    1260:	e1cd08d0 	ldrd	r0, [sp, #128]	; 0x80
    1264:	e3443150 	movt	r3, #16720	; 0x4150
    1268:	eb001275 	bl	5c44 <__aeabi_dmul>
=======
    1008:	e1cd01f0 	strd	r0, [sp, #16]
	double sustain_volume = music_note.sustain_intensity * default_amplitude;
    100c:	e3a02103 	mov	r2, #-1073741824	; 0xc0000000
    1010:	e1cd08d0 	ldrd	r0, [sp, #128]	; 0x80
    1014:	e3443150 	movt	r3, #16720	; 0x4150
    1018:	eb0011fb 	bl	580c <__aeabi_dmul>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	double sample_volume;
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){
<<<<<<< HEAD
    126c:	e3580000 	cmp	r8, #0
=======
    101c:	e3590000 	cmp	r9, #0
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	unsigned int sustain_start = (unsigned int) floor(delay_start + music_note.adsr_envelope[1] * number_of_samples);
	unsigned int release_start = (unsigned int) floor(sustain_start + music_note.adsr_envelope[2] * number_of_samples);
	
	//the volumes of each part of the envelope
	double peak_volume = music_note.peak_intensity * default_amplitude;
	double sustain_volume = music_note.sustain_intensity * default_amplitude;
<<<<<<< HEAD
    1270:	e1cd02f0 	strd	r0, [sp, #32]
=======
    1020:	e1cd02f8 	strd	r0, [sp, #40]	; 0x28
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	double sample_volume;
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){
<<<<<<< HEAD
    1274:	0affffa8 	beq	111c <get_note_wave+0x90>
    1278:	e3a03b13 	mov	r3, #19456	; 0x4c00
    127c:	e1cd01d0 	ldrd	r0, [sp, #16]
    1280:	e3a02000 	mov	r2, #0
    1284:	e34430ad 	movt	r3, #16557	; 0x40ad
    1288:	eb0013cd 	bl	61c4 <__aeabi_dcmplt>
    128c:	e3500000 	cmp	r0, #0
    1290:	0a000068 	beq	1438 <get_note_wave+0x3ac>
=======
    1024:	0a0000be 	beq	1324 <get_note_wave+0x42c>
		if(frequency > MAX_FREQUENCY)
			status_flags.frequency_overflow = true;
	}
	
	//set the current time to zero at the beginning of the wave
	double current_time = 0;
    1028:	e3a04000 	mov	r4, #0
    102c:	e3a05000 	mov	r5, #0
    1030:	e1cd40f0 	strd	r4, [sp]
	double peak_volume = music_note.peak_intensity * default_amplitude;
	double sustain_volume = music_note.sustain_intensity * default_amplitude;
	double sample_volume;
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){
    1034:	e3a0a000 	mov	r10, #0
	struct MusicWave wave = {.waveform = wave_array, .length = number_of_samples};
	return wave;
}

//returns a dynamically allocated array representing the wave intensity of each sample for the note
struct MusicWave get_note_wave(struct MusicNote music_note){
    1038:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
			} else if (index < sustain_start){ //part of delay
				sample_volume = peak_volume - (((peak_volume - sustain_volume) / (sustain_start - delay_start)) * (index - delay_start));
			} else if (index < release_start){ //part of sustain
				sample_volume = sustain_volume;
			} else { //part of release
				sample_volume = sustain_volume - ((sustain_volume / (number_of_samples - release_start)) * (index - release_start));
<<<<<<< HEAD
    1294:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
		if(frequency > MAX_FREQUENCY)
			status_flags.frequency_overflow = true;
	}
	
	//set the current time to zero at the beginning of the wave
	double current_time = 0;
    1298:	e3a04000 	mov	r4, #0
    129c:	e3a05000 	mov	r5, #0
=======
    103c:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
	struct MusicWave wave = {.waveform = wave_array, .length = number_of_samples};
	return wave;
}

//returns a dynamically allocated array representing the wave intensity of each sample for the note
struct MusicWave get_note_wave(struct MusicNote music_note){
    1040:	e2858010 	add	r8, r5, #16
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		if(wave_array[index] != 0){
			//check which stage the sample is part of
			if(index < delay_start){ //part of attack
				sample_volume = (peak_volume / delay_start) * index;
			} else if (index < sustain_start){ //part of delay
				sample_volume = peak_volume - (((peak_volume - sustain_volume) / (sustain_start - delay_start)) * (index - delay_start));
<<<<<<< HEAD
    12a0:	e58d701c 	str	r7, [sp, #28]
    12a4:	e58d603c 	str	r6, [sp, #60]	; 0x3c
		return sin(2 * pi * frequency * time);
	}
}

//returns a dynamically allocated array representing the wave intensity of each sample for the note
struct MusicWave get_note_wave(struct MusicNote music_note){
    12a8:	e289a018 	add	r10, r9, #24
			} else if (index < sustain_start){ //part of delay
				sample_volume = peak_volume - (((peak_volume - sustain_volume) / (sustain_start - delay_start)) * (index - delay_start));
=======
    1044:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
			} else if (index < release_start){ //part of sustain
				sample_volume = sustain_volume;
			} else { //part of release
				sample_volume = sustain_volume - ((sustain_volume / (number_of_samples - release_start)) * (index - release_start));
<<<<<<< HEAD
    12ac:	e06cc008 	rsb	r12, r12, r8
	double peak_volume = music_note.peak_intensity * default_amplitude;
	double sustain_volume = music_note.sustain_intensity * default_amplitude;
	double sample_volume;
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){
    12b0:	e3a0b000 	mov	r11, #0
			} else if (index < sustain_start){ //part of delay
				sample_volume = peak_volume - (((peak_volume - sustain_volume) / (sustain_start - delay_start)) * (index - delay_start));
			} else if (index < release_start){ //part of sustain
				sample_volume = sustain_volume;
			} else { //part of release
				sample_volume = sustain_volume - ((sustain_volume / (number_of_samples - release_start)) * (index - release_start));
    12b4:	e58dc030 	str	r12, [sp, #48]	; 0x30
=======
    1048:	e0644009 	rsb	r4, r4, r9
    104c:	e58d403c 	str	r4, [sp, #60]	; 0x3c
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		if(wave_array[index] != 0){
			//check which stage the sample is part of
			if(index < delay_start){ //part of attack
				sample_volume = (peak_volume / delay_start) * index;
			} else if (index < sustain_start){ //part of delay
				sample_volume = peak_volume - (((peak_volume - sustain_volume) / (sustain_start - delay_start)) * (index - delay_start));
<<<<<<< HEAD
    12b8:	e1a06004 	mov	r6, r4
    12bc:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    12c0:	e58d8018 	str	r8, [sp, #24]
    12c4:	e58d9038 	str	r9, [sp, #56]	; 0x38
    12c8:	e067c00c 	rsb	r12, r7, r12
    12cc:	e1a07005 	mov	r7, r5
    12d0:	e58dc034 	str	r12, [sp, #52]	; 0x34
    12d4:	ea00001f 	b	1358 <get_note_wave+0x2cc>
=======
    1050:	e06b5005 	rsb	r5, r11, r5
    1054:	e58d5038 	str	r5, [sp, #56]	; 0x38
    1058:	ea000018 	b	10c0 <get_note_wave+0x1c8>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		
		//apply an adsr envelope
		if(wave_array[index] != 0){
			//check which stage the sample is part of
			if(index < delay_start){ //part of attack
				sample_volume = (peak_volume / delay_start) * index;
<<<<<<< HEAD
    12d8:	eb0012fd 	bl	5ed4 <__aeabi_ddiv>
    12dc:	e1a04000 	mov	r4, r0
    12e0:	e1a05001 	mov	r5, r1
    12e4:	e1a0000b 	mov	r0, r11
    12e8:	eb001215 	bl	5b44 <__aeabi_ui2d>
    12ec:	e1a02000 	mov	r2, r0
    12f0:	e1a03001 	mov	r3, r1
    12f4:	e1a00004 	mov	r0, r4
    12f8:	e1a01005 	mov	r1, r5
    12fc:	eb001250 	bl	5c44 <__aeabi_dmul>
    1300:	e1a04000 	mov	r4, r0
    1304:	e1a05001 	mov	r5, r1
=======
    105c:	e1cd21d8 	ldrd	r2, [sp, #24]
    1060:	e1cd01d0 	ldrd	r0, [sp, #16]
    1064:	eb00128c 	bl	5a9c <__aeabi_ddiv>
    1068:	e1cd00f8 	strd	r0, [sp, #8]
    106c:	e1a0000a 	mov	r0, r10
    1070:	eb0011a5 	bl	570c <__aeabi_ui2d>
    1074:	e1a02000 	mov	r2, r0
    1078:	e1a03001 	mov	r3, r1
    107c:	e1cd00d8 	ldrd	r0, [sp, #8]
    1080:	eb0011e1 	bl	580c <__aeabi_dmul>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
				sample_volume = sustain_volume;
			} else { //part of release
				sample_volume = sustain_volume - ((sustain_volume / (number_of_samples - release_start)) * (index - release_start));
			}
			
			wave_array[index] *= sample_volume;
<<<<<<< HEAD
    1308:	e1a02008 	mov	r2, r8
    130c:	e1a03009 	mov	r3, r9
    1310:	e1a00004 	mov	r0, r4
    1314:	e1a01005 	mov	r1, r5
    1318:	eb001249 	bl	5c44 <__aeabi_dmul>
    131c:	e14a01f8 	strd	r0, [r10, #-24]	; 0xffffffe8
=======
    1084:	e1a02004 	mov	r2, r4
    1088:	e1a03005 	mov	r3, r5
    108c:	eb0011de 	bl	580c <__aeabi_dmul>
    1090:	e14801f0 	strd	r0, [r8, #-16]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		}
		
		//increment the current time
		current_time += sampling_period;
<<<<<<< HEAD
    1320:	e30a29fc 	movw	r2, #43516	; 0xa9fc
    1324:	e306324d 	movw	r3, #25165	; 0x624d
    1328:	e1a00006 	mov	r0, r6
    132c:	e1a01007 	mov	r1, r7
    1330:	e34d22f1 	movt	r2, #54001	; 0xd2f1
    1334:	e3433f20 	movt	r3, #16160	; 0x3f20
    1338:	eb00113d 	bl	5834 <__adddf3>
=======
    1094:	e30a29fc 	movw	r2, #43516	; 0xa9fc
    1098:	e306324d 	movw	r3, #25165	; 0x624d
    109c:	e1cd00d0 	ldrd	r0, [sp]
    10a0:	e34d22f1 	movt	r2, #54001	; 0xd2f1
    10a4:	e3433f20 	movt	r3, #16160	; 0x3f20
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	double peak_volume = music_note.peak_intensity * default_amplitude;
	double sustain_volume = music_note.sustain_intensity * default_amplitude;
	double sample_volume;
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){
<<<<<<< HEAD
    133c:	e59d4018 	ldr	r4, [sp, #24]
    1340:	e28bb001 	add	r11, r11, #1
    1344:	e28aa008 	add	r10, r10, #8
=======
    10a8:	e28aa001 	add	r10, r10, #1
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
			
			wave_array[index] *= sample_volume;
		}
		
		//increment the current time
		current_time += sampling_period;
<<<<<<< HEAD
    1348:	e1a06000 	mov	r6, r0
    134c:	e1a07001 	mov	r7, r1
=======
    10ac:	eb0010d2 	bl	53fc <__adddf3>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	double peak_volume = music_note.peak_intensity * default_amplitude;
	double sustain_volume = music_note.sustain_intensity * default_amplitude;
	double sample_volume;
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){
<<<<<<< HEAD
    1350:	e15b0004 	cmp	r11, r4
    1354:	0a00006d 	beq	1510 <get_note_wave+0x484>
		wave_array[index] = 0;
    1358:	e3a04000 	mov	r4, #0
    135c:	e3a05000 	mov	r5, #0
		
		//add each wanted harmonic of the note given
		for(unsigned int harmonic = 1; harmonic <= num_harmonics; harmonic++){
			//check for frequency overflow
			if(frequency * harmonic < MAX_FREQUENCY)
				wave_array[index] += harmonic_intensities[harmonic - 1] * calc_sine(current_time, harmonic * frequency);
    1360:	e1cd21d0 	ldrd	r2, [sp, #16]
    1364:	e1a00006 	mov	r0, r6
    1368:	e1a01007 	mov	r1, r7
=======
    10b0:	e15a0009 	cmp	r10, r9
    10b4:	e2888008 	add	r8, r8, #8
			
			wave_array[index] *= sample_volume;
		}
		
		//increment the current time
		current_time += sampling_period;
    10b8:	e1cd00f0 	strd	r0, [sp]
	double peak_volume = music_note.peak_intensity * default_amplitude;
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	double sustain_volume = music_note.sustain_intensity * default_amplitude;
	double sample_volume;
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){
<<<<<<< HEAD
		wave_array[index] = 0;
    136c:	e14a41f8 	strd	r4, [r10, #-24]	; 0xffffffe8
=======
    10bc:	0a000098 	beq	1324 <get_note_wave+0x42c>
		wave_array[index] = 0;
    10c0:	e3a04000 	mov	r4, #0
    10c4:	e3a05000 	mov	r5, #0
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		
		//add each wanted harmonic of the note given
		for(unsigned int harmonic = 1; harmonic <= num_harmonics; harmonic++){
			//check for frequency overflow
			if(frequency * harmonic < MAX_FREQUENCY)
<<<<<<< HEAD
				wave_array[index] += harmonic_intensities[harmonic - 1] * calc_sine(current_time, harmonic * frequency);
    1370:	ebfffee1 	bl	efc <calc_sine>
    1374:	e1a02004 	mov	r2, r4
    1378:	e1a03005 	mov	r3, r5
    137c:	eb00112c 	bl	5834 <__adddf3>
    1380:	e1a09001 	mov	r9, r1
    1384:	e1a08000 	mov	r8, r0
		}
		
		//apply an adsr envelope
		if(wave_array[index] != 0){
    1388:	e1a02004 	mov	r2, r4
    138c:	e1a03005 	mov	r3, r5
=======
    10c8:	e3a03b13 	mov	r3, #19456	; 0x4c00
	double sustain_volume = music_note.sustain_intensity * default_amplitude;
	double sample_volume;
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){
		wave_array[index] = 0;
    10cc:	e14841f0 	strd	r4, [r8, #-16]
		
		//add each wanted harmonic of the note given
		for(unsigned int harmonic = 1; harmonic <= num_harmonics; harmonic++){
			//check for frequency overflow
			if(frequency * harmonic < MAX_FREQUENCY)
    10d0:	e1a00006 	mov	r0, r6
    10d4:	e1a01007 	mov	r1, r7
    10d8:	e3a02000 	mov	r2, #0
    10dc:	e34430ad 	movt	r3, #16557	; 0x40ad
    10e0:	eb001329 	bl	5d8c <__aeabi_dcmplt>
    10e4:	e3500000 	cmp	r0, #0
    10e8:	f5d8f000 	pld	[r8]
    10ec:	03a04000 	moveq	r4, #0
    10f0:	03a05000 	moveq	r5, #0
    10f4:	0a00000f 	beq	1138 <get_note_wave+0x240>
				wave_array[index] += harmonic_intensities[harmonic - 1] * sin(harmonic * 2 * pi * frequency * current_time);
    10f8:	e3022d18 	movw	r2, #11544	; 0x2d18
    10fc:	e30231fb 	movw	r3, #8699	; 0x21fb
    1100:	e3452444 	movt	r2, #21572	; 0x5444
    1104:	e3443019 	movt	r3, #16409	; 0x4019
    1108:	e1a00006 	mov	r0, r6
    110c:	e1a01007 	mov	r1, r7
    1110:	eb0011bd 	bl	580c <__aeabi_dmul>
    1114:	e1cd20d0 	ldrd	r2, [sp]
    1118:	eb0011bb 	bl	580c <__aeabi_dmul>
    111c:	eb0003cf 	bl	2060 <sin>
    1120:	e1a02004 	mov	r2, r4
    1124:	e1a03005 	mov	r3, r5
    1128:	eb0010b3 	bl	53fc <__adddf3>
    112c:	e1a04000 	mov	r4, r0
    1130:	e1a05001 	mov	r5, r1
    1134:	e14841f0 	strd	r4, [r8, #-16]
		wave_array[index] = 0;
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		
		//add each wanted harmonic of the note given
		for(unsigned int harmonic = 1; harmonic <= num_harmonics; harmonic++){
			//check for frequency overflow
			if(frequency * harmonic < MAX_FREQUENCY)
<<<<<<< HEAD
				wave_array[index] += harmonic_intensities[harmonic - 1] * calc_sine(current_time, harmonic * frequency);
    1390:	e14a81f8 	strd	r8, [r10, #-24]	; 0xffffffe8
    1394:	f5daf000 	pld	[r10]
		}
		
		//apply an adsr envelope
		if(wave_array[index] != 0){
    1398:	eb001383 	bl	61ac <__aeabi_dcmpeq>
    139c:	e3500000 	cmp	r0, #0
			//check which stage the sample is part of
			if(index < delay_start){ //part of attack
				sample_volume = (peak_volume / delay_start) * index;
    13a0:	e1cd20d8 	ldrd	r2, [sp, #8]
    13a4:	e1cd00d0 	ldrd	r0, [sp]
			if(frequency * harmonic < MAX_FREQUENCY)
				wave_array[index] += harmonic_intensities[harmonic - 1] * calc_sine(current_time, harmonic * frequency);
=======
    1138:	e1a02006 	mov	r2, r6
    113c:	e1a03007 	mov	r3, r7
    1140:	e1a00006 	mov	r0, r6
    1144:	e1a01007 	mov	r1, r7
    1148:	eb0010ab 	bl	53fc <__adddf3>
    114c:	e3a03b13 	mov	r3, #19456	; 0x4c00
    1150:	e3a02000 	mov	r2, #0
    1154:	e34430ad 	movt	r3, #16557	; 0x40ad
    1158:	eb00130b 	bl	5d8c <__aeabi_dcmplt>
    115c:	e3500000 	cmp	r0, #0
    1160:	0a000015 	beq	11bc <get_note_wave+0x2c4>
				wave_array[index] += harmonic_intensities[harmonic - 1] * sin(harmonic * 2 * pi * frequency * current_time);
    1164:	e3022d18 	movw	r2, #11544	; 0x2d18
    1168:	e30231fb 	movw	r3, #8699	; 0x21fb
    116c:	e3452444 	movt	r2, #21572	; 0x5444
    1170:	e3443029 	movt	r3, #16425	; 0x4029
    1174:	e1a00006 	mov	r0, r6
    1178:	e1a01007 	mov	r1, r7
    117c:	eb0011a2 	bl	580c <__aeabi_dmul>
    1180:	e1cd20d0 	ldrd	r2, [sp]
    1184:	eb0011a0 	bl	580c <__aeabi_dmul>
    1188:	eb0003b4 	bl	2060 <sin>
    118c:	e3a03000 	mov	r3, #0
    1190:	e3a02000 	mov	r2, #0
    1194:	e3433fe0 	movt	r3, #16352	; 0x3fe0
    1198:	eb00119b 	bl	580c <__aeabi_dmul>
    119c:	e1a02000 	mov	r2, r0
    11a0:	e1a03001 	mov	r3, r1
    11a4:	e1a00004 	mov	r0, r4
    11a8:	e1a01005 	mov	r1, r5
    11ac:	eb001092 	bl	53fc <__adddf3>
    11b0:	e1a04000 	mov	r4, r0
    11b4:	e1a05001 	mov	r5, r1
    11b8:	e14841f0 	strd	r4, [r8, #-16]
		wave_array[index] = 0;
		
		//add each wanted harmonic of the note given
		for(unsigned int harmonic = 1; harmonic <= num_harmonics; harmonic++){
			//check for frequency overflow
			if(frequency * harmonic < MAX_FREQUENCY)
    11bc:	e3a03000 	mov	r3, #0
    11c0:	e3a02000 	mov	r2, #0
    11c4:	e3443008 	movt	r3, #16392	; 0x4008
    11c8:	e1a00006 	mov	r0, r6
    11cc:	e1a01007 	mov	r1, r7
    11d0:	eb00118d 	bl	580c <__aeabi_dmul>
    11d4:	e3a03b13 	mov	r3, #19456	; 0x4c00
    11d8:	e3a02000 	mov	r2, #0
    11dc:	e34430ad 	movt	r3, #16557	; 0x40ad
    11e0:	eb0012e9 	bl	5d8c <__aeabi_dcmplt>
    11e4:	e3500000 	cmp	r0, #0
    11e8:	0a000015 	beq	1244 <get_note_wave+0x34c>
				wave_array[index] += harmonic_intensities[harmonic - 1] * sin(harmonic * 2 * pi * frequency * current_time);
    11ec:	e30221d2 	movw	r2, #8658	; 0x21d2
    11f0:	e30d397c 	movw	r3, #55676	; 0xd97c
    11f4:	e3472f33 	movt	r2, #32563	; 0x7f33
    11f8:	e3443032 	movt	r3, #16434	; 0x4032
    11fc:	e1a00006 	mov	r0, r6
    1200:	e1a01007 	mov	r1, r7
    1204:	eb001180 	bl	580c <__aeabi_dmul>
    1208:	e1cd20d0 	ldrd	r2, [sp]
    120c:	eb00117e 	bl	580c <__aeabi_dmul>
    1210:	eb000392 	bl	2060 <sin>
    1214:	e3a03000 	mov	r3, #0
    1218:	e3a02000 	mov	r2, #0
    121c:	e3433fd0 	movt	r3, #16336	; 0x3fd0
    1220:	eb001179 	bl	580c <__aeabi_dmul>
    1224:	e1a02000 	mov	r2, r0
    1228:	e1a03001 	mov	r3, r1
    122c:	e1a00004 	mov	r0, r4
    1230:	e1a01005 	mov	r1, r5
    1234:	eb001070 	bl	53fc <__adddf3>
    1238:	e1a04000 	mov	r4, r0
    123c:	e1a05001 	mov	r5, r1
    1240:	e14841f0 	strd	r4, [r8, #-16]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		}
		
		//apply an adsr envelope
		if(wave_array[index] != 0){
<<<<<<< HEAD
    13a8:	1affffdc 	bne	1320 <get_note_wave+0x294>
			//check which stage the sample is part of
			if(index < delay_start){ //part of attack
    13ac:	e59d501c 	ldr	r5, [sp, #28]
    13b0:	e155000b 	cmp	r5, r11
    13b4:	8affffc7 	bhi	12d8 <get_note_wave+0x24c>
				sample_volume = (peak_volume / delay_start) * index;
			} else if (index < sustain_start){ //part of delay
    13b8:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
				sample_volume = peak_volume - (((peak_volume - sustain_volume) / (sustain_start - delay_start)) * (index - delay_start));
    13bc:	e1cd22d0 	ldrd	r2, [sp, #32]
    13c0:	e1cd00d0 	ldrd	r0, [sp]
		//apply an adsr envelope
		if(wave_array[index] != 0){
=======
    1244:	e1a00004 	mov	r0, r4
    1248:	e1a01005 	mov	r1, r5
    124c:	e3a02000 	mov	r2, #0
    1250:	e3a03000 	mov	r3, #0
    1254:	eb0012c6 	bl	5d74 <__aeabi_dcmpeq>
    1258:	e3500000 	cmp	r0, #0
    125c:	1affff8c 	bne	1094 <get_note_wave+0x19c>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
			//check which stage the sample is part of
			if(index < delay_start){ //part of attack
    1260:	e15b000a 	cmp	r11, r10
    1264:	8affff7c 	bhi	105c <get_note_wave+0x164>
				sample_volume = (peak_volume / delay_start) * index;
			} else if (index < sustain_start){ //part of delay
<<<<<<< HEAD
    13c4:	e15c000b 	cmp	r12, r11
    13c8:	9a000035 	bls	14a4 <get_note_wave+0x418>
				sample_volume = peak_volume - (((peak_volume - sustain_volume) / (sustain_start - delay_start)) * (index - delay_start));
    13cc:	eb001117 	bl	5830 <__aeabi_dsub>
    13d0:	e1a04000 	mov	r4, r0
    13d4:	e1a05001 	mov	r5, r1
    13d8:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
    13dc:	eb0011d8 	bl	5b44 <__aeabi_ui2d>
    13e0:	e1a02000 	mov	r2, r0
    13e4:	e1a03001 	mov	r3, r1
    13e8:	e1a00004 	mov	r0, r4
    13ec:	e1a01005 	mov	r1, r5
    13f0:	eb0012b7 	bl	5ed4 <__aeabi_ddiv>
    13f4:	e59dc01c 	ldr	r12, [sp, #28]
    13f8:	e1a04000 	mov	r4, r0
    13fc:	e1a05001 	mov	r5, r1
    1400:	e06c000b 	rsb	r0, r12, r11
    1404:	eb0011ce 	bl	5b44 <__aeabi_ui2d>
    1408:	e1a02000 	mov	r2, r0
    140c:	e1a03001 	mov	r3, r1
    1410:	e1a00004 	mov	r0, r4
    1414:	e1a01005 	mov	r1, r5
    1418:	eb001209 	bl	5c44 <__aeabi_dmul>
    141c:	e1a02000 	mov	r2, r0
    1420:	e1a03001 	mov	r3, r1
    1424:	e1cd00d0 	ldrd	r0, [sp]
    1428:	eb001100 	bl	5830 <__aeabi_dsub>
    142c:	e1a04000 	mov	r4, r0
    1430:	e1a05001 	mov	r5, r1
    1434:	eaffffb3 	b	1308 <get_note_wave+0x27c>
    1438:	e3580004 	cmp	r8, #4
		return sin(2 * pi * frequency * time);
	}
}

//returns a dynamically allocated array representing the wave intensity of each sample for the note
struct MusicWave get_note_wave(struct MusicNote music_note){
    143c:	e2485003 	sub	r5, r8, #3
    1440:	9a000036 	bls	1520 <get_note_wave+0x494>
    1444:	e1a00009 	mov	r0, r9
	double peak_volume = music_note.peak_intensity * default_amplitude;
	double sustain_volume = music_note.sustain_intensity * default_amplitude;
	double sample_volume;
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){
    1448:	e3a0c000 	mov	r12, #0
		wave_array[index] = 0;
    144c:	e3a02000 	mov	r2, #0
    1450:	e3a03000 	mov	r3, #0
    1454:	e28c4005 	add	r4, r12, #5
    1458:	f5d0f0e8 	pld	[r0, #232]	; 0xe8
    145c:	e1550004 	cmp	r5, r4
    1460:	e1c020f0 	strd	r2, [r0]
    1464:	e1c020f8 	strd	r2, [r0, #8]
	double peak_volume = music_note.peak_intensity * default_amplitude;
	double sustain_volume = music_note.sustain_intensity * default_amplitude;
	double sample_volume;
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){
    1468:	e28c1004 	add	r1, r12, #4
    146c:	e2800020 	add	r0, r0, #32
    1470:	e1a0c001 	mov	r12, r1
		wave_array[index] = 0;
    1474:	e14021f0 	strd	r2, [r0, #-16]
    1478:	e14020f8 	strd	r2, [r0, #-8]
    147c:	8afffff4 	bhi	1454 <get_note_wave+0x3c8>
		return sin(2 * pi * frequency * time);
	}
}

//returns a dynamically allocated array representing the wave intensity of each sample for the note
struct MusicWave get_note_wave(struct MusicNote music_note){
    1480:	e2410001 	sub	r0, r1, #1
	double sustain_volume = music_note.sustain_intensity * default_amplitude;
	double sample_volume;
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){
		wave_array[index] = 0;
    1484:	e3a02000 	mov	r2, #0
		return sin(2 * pi * frequency * time);
	}
}

//returns a dynamically allocated array representing the wave intensity of each sample for the note
struct MusicWave get_note_wave(struct MusicNote music_note){
    1488:	e0890180 	add	r0, r9, r0, lsl #3
	double sustain_volume = music_note.sustain_intensity * default_amplitude;
	double sample_volume;
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){
		wave_array[index] = 0;
    148c:	e3a03000 	mov	r3, #0
	double peak_volume = music_note.peak_intensity * default_amplitude;
	double sustain_volume = music_note.sustain_intensity * default_amplitude;
	double sample_volume;
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){
    1490:	e2811001 	add	r1, r1, #1
		wave_array[index] = 0;
    1494:	e1e020f8 	strd	r2, [r0, #8]!
	double peak_volume = music_note.peak_intensity * default_amplitude;
	double sustain_volume = music_note.sustain_intensity * default_amplitude;
	double sample_volume;
	
	//loop through the entire array, taking samples of the wave at each time given
	for(unsigned int index = 0; index < number_of_samples; index++){
    1498:	e1510008 	cmp	r1, r8
    149c:	3afffffb 	bcc	1490 <get_note_wave+0x404>
    14a0:	eaffff1d 	b	111c <get_note_wave+0x90>
			//check which stage the sample is part of
			if(index < delay_start){ //part of attack
				sample_volume = (peak_volume / delay_start) * index;
			} else if (index < sustain_start){ //part of delay
				sample_volume = peak_volume - (((peak_volume - sustain_volume) / (sustain_start - delay_start)) * (index - delay_start));
			} else if (index < release_start){ //part of sustain
    14a4:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
				sample_volume = sustain_volume;
			} else { //part of release
				sample_volume = sustain_volume - ((sustain_volume / (number_of_samples - release_start)) * (index - release_start));
    14a8:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
			//check which stage the sample is part of
			if(index < delay_start){ //part of attack
				sample_volume = (peak_volume / delay_start) * index;
			} else if (index < sustain_start){ //part of delay
				sample_volume = peak_volume - (((peak_volume - sustain_volume) / (sustain_start - delay_start)) * (index - delay_start));
			} else if (index < release_start){ //part of sustain
    14ac:	e154000b 	cmp	r4, r11
				sample_volume = sustain_volume;
    14b0:	e1cd42d0 	ldrd	r4, [sp, #32]
			//check which stage the sample is part of
=======
    1268:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    126c:	e151000a 	cmp	r1, r10
    1270:	9a000015 	bls	12cc <get_note_wave+0x3d4>
				sample_volume = peak_volume - (((peak_volume - sustain_volume) / (sustain_start - delay_start)) * (index - delay_start));
    1274:	e1cd22d8 	ldrd	r2, [sp, #40]	; 0x28
    1278:	e1cd01d0 	ldrd	r0, [sp, #16]
    127c:	eb00105d 	bl	53f8 <__aeabi_dsub>
    1280:	e1cd00f8 	strd	r0, [sp, #8]
    1284:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
    1288:	eb00111f 	bl	570c <__aeabi_ui2d>
    128c:	e1a02000 	mov	r2, r0
    1290:	e1a03001 	mov	r3, r1
    1294:	e1cd00d8 	ldrd	r0, [sp, #8]
    1298:	eb0011ff 	bl	5a9c <__aeabi_ddiv>
    129c:	e1cd00f8 	strd	r0, [sp, #8]
    12a0:	e06b000a 	rsb	r0, r11, r10
    12a4:	eb001118 	bl	570c <__aeabi_ui2d>
    12a8:	e1a02000 	mov	r2, r0
    12ac:	e1a03001 	mov	r3, r1
    12b0:	e1cd00d8 	ldrd	r0, [sp, #8]
    12b4:	eb001154 	bl	580c <__aeabi_dmul>
    12b8:	e1a02000 	mov	r2, r0
    12bc:	e1a03001 	mov	r3, r1
    12c0:	e1cd01d0 	ldrd	r0, [sp, #16]
    12c4:	eb00104b 	bl	53f8 <__aeabi_dsub>
    12c8:	eaffff6d 	b	1084 <get_note_wave+0x18c>
			} else if (index < release_start){ //part of sustain
    12cc:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    12d0:	e152000a 	cmp	r2, r10
    12d4:	8a00001a 	bhi	1344 <get_note_wave+0x44c>
				sample_volume = sustain_volume;
			} else { //part of release
				sample_volume = sustain_volume - ((sustain_volume / (number_of_samples - release_start)) * (index - release_start));
    12d8:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
    12dc:	eb00110a 	bl	570c <__aeabi_ui2d>
    12e0:	e1a02000 	mov	r2, r0
    12e4:	e1a03001 	mov	r3, r1
    12e8:	e1cd02d8 	ldrd	r0, [sp, #40]	; 0x28
    12ec:	eb0011ea 	bl	5a9c <__aeabi_ddiv>
    12f0:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
    12f4:	e1cd00f8 	strd	r0, [sp, #8]
    12f8:	e063000a 	rsb	r0, r3, r10
    12fc:	eb001102 	bl	570c <__aeabi_ui2d>
    1300:	e1a02000 	mov	r2, r0
    1304:	e1a03001 	mov	r3, r1
    1308:	e1cd00d8 	ldrd	r0, [sp, #8]
    130c:	eb00113e 	bl	580c <__aeabi_dmul>
    1310:	e1a02000 	mov	r2, r0
    1314:	e1a03001 	mov	r3, r1
    1318:	e1cd02d8 	ldrd	r0, [sp, #40]	; 0x28
    131c:	eb001035 	bl	53f8 <__aeabi_dsub>
    1320:	eaffff57 	b	1084 <get_note_wave+0x18c>
		current_time += sampling_period;
	}
	
	//return the sampled wave
	struct MusicWave wave = {.waveform = wave_array, .length = number_of_samples};
	return wave;
    1324:	e59d5020 	ldr	r5, [sp, #32]
    1328:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
    132c:	e1a00005 	mov	r0, r5
		current_time += sampling_period;
	}
	
	//return the sampled wave
	struct MusicWave wave = {.waveform = wave_array, .length = number_of_samples};
	return wave;
    1330:	e8850210 	stm	r5, {r4, r9}
    1334:	e28dd044 	add	sp, sp, #68	; 0x44
    1338:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    133c:	e28dd008 	add	sp, sp, #8
    1340:	e12fff1e 	bx	lr
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
			if(index < delay_start){ //part of attack
				sample_volume = (peak_volume / delay_start) * index;
			} else if (index < sustain_start){ //part of delay
				sample_volume = peak_volume - (((peak_volume - sustain_volume) / (sustain_start - delay_start)) * (index - delay_start));
			} else if (index < release_start){ //part of sustain
<<<<<<< HEAD
    14b4:	8affff93 	bhi	1308 <get_note_wave+0x27c>
				sample_volume = sustain_volume;
			} else { //part of release
				sample_volume = sustain_volume - ((sustain_volume / (number_of_samples - release_start)) * (index - release_start));
    14b8:	eb0011a1 	bl	5b44 <__aeabi_ui2d>
    14bc:	e1a02000 	mov	r2, r0
    14c0:	e1a03001 	mov	r3, r1
    14c4:	e1cd02d0 	ldrd	r0, [sp, #32]
    14c8:	eb001281 	bl	5ed4 <__aeabi_ddiv>
    14cc:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
    14d0:	e1a04000 	mov	r4, r0
    14d4:	e1a05001 	mov	r5, r1
    14d8:	e06c000b 	rsb	r0, r12, r11
    14dc:	eb001198 	bl	5b44 <__aeabi_ui2d>
    14e0:	e1a02000 	mov	r2, r0
    14e4:	e1a03001 	mov	r3, r1
    14e8:	e1a00004 	mov	r0, r4
    14ec:	e1a01005 	mov	r1, r5
    14f0:	eb0011d3 	bl	5c44 <__aeabi_dmul>
    14f4:	e1a02000 	mov	r2, r0
    14f8:	e1a03001 	mov	r3, r1
    14fc:	e1cd02d0 	ldrd	r0, [sp, #32]
    1500:	eb0010ca 	bl	5830 <__aeabi_dsub>
    1504:	e1a04000 	mov	r4, r0
    1508:	e1a05001 	mov	r5, r1
    150c:	eaffff7d 	b	1308 <get_note_wave+0x27c>
    1510:	e1a08004 	mov	r8, r4
    1514:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
    1518:	e59d603c 	ldr	r6, [sp, #60]	; 0x3c
    151c:	eafffefe 	b	111c <get_note_wave+0x90>
		return sin(2 * pi * frequency * time);
	}
}

//returns a dynamically allocated array representing the wave intensity of each sample for the note
struct MusicWave get_note_wave(struct MusicNote music_note){
    1520:	e3a01000 	mov	r1, #0
    1524:	eaffffd5 	b	1480 <get_note_wave+0x3f4>

00001528 <get_chord_wave>:
=======
				sample_volume = sustain_volume;
    1344:	e1cd02d8 	ldrd	r0, [sp, #40]	; 0x28
    1348:	eaffff4d 	b	1084 <get_note_wave+0x18c>

extern struct StatusFlags status_flags;

//returns the frequency requested of the key number given
double get_frequency(char * note, int octave){
	int key_number = get_num(note, octave);
    134c:	e59d106c 	ldr	r1, [sp, #108]	; 0x6c
    1350:	e1a00004 	mov	r0, r4
    1354:	ebfffe51 	bl	ca0 <get_num>
    1358:	e1a04000 	mov	r4, r0
	
	const double middle_A_freq = 440; //Hz
	const int middle_A_num = get_num("A", 4); //number pertaining to the middle A
    135c:	e3070278 	movw	r0, #29304	; 0x7278
    1360:	e3a01004 	mov	r1, #4
    1364:	e3400000 	movt	r0, #0
    1368:	ebfffe4c 	bl	ca0 <get_num>
	
	const double semitone_mult = pow(2, (1.0/12.0)); //change in frequency when going up or down one key
	double semitone_jump = key_number - middle_A_num; //number of jumps from key requested to middle A
    136c:	e0600004 	rsb	r0, r0, r4
    1370:	eb0010ee 	bl	5730 <__aeabi_i2d>
    1374:	e1a02000 	mov	r2, r0
    1378:	e1a03001 	mov	r3, r1
	
	double change_in_freq = pow(semitone_mult, semitone_jump);
    137c:	e3070963 	movw	r0, #31075	; 0x7963
    1380:	e30f138f 	movw	r1, #62351	; 0xf38f
    1384:	e34902d9 	movt	r0, #37593	; 0x92d9
    1388:	e3431ff0 	movt	r1, #16368	; 0x3ff0
    138c:	eb000373 	bl	2160 <pow>
	
	return change_in_freq * middle_A_freq;
    1390:	e3a03902 	mov	r3, #32768	; 0x8000
    1394:	e3a02000 	mov	r2, #0
    1398:	e344307b 	movt	r3, #16507	; 0x407b
    139c:	eb00111a 	bl	580c <__aeabi_dmul>
		frequency = 0;
	} else {
		frequency = get_frequency(music_note.note, music_note.octave);
		
		//check for fundamental frequency overflow
		if(frequency > MAX_FREQUENCY)
    13a0:	e3a03b13 	mov	r3, #19456	; 0x4c00
    13a4:	e3a02000 	mov	r2, #0
    13a8:	e34430ad 	movt	r3, #16557	; 0x40ad
	const double semitone_mult = pow(2, (1.0/12.0)); //change in frequency when going up or down one key
	double semitone_jump = key_number - middle_A_num; //number of jumps from key requested to middle A
	
	double change_in_freq = pow(semitone_mult, semitone_jump);
	
	return change_in_freq * middle_A_freq;
    13ac:	e1a06000 	mov	r6, r0
    13b0:	e1a07001 	mov	r7, r1
		frequency = 0;
	} else {
		frequency = get_frequency(music_note.note, music_note.octave);
		
		//check for fundamental frequency overflow
		if(frequency > MAX_FREQUENCY)
    13b4:	eb001286 	bl	5dd4 <__aeabi_dcmpgt>
    13b8:	e3500000 	cmp	r0, #0
			status_flags.frequency_overflow = true;
    13bc:	13053508 	movwne	r3, #21768	; 0x5508
    13c0:	13a02001 	movne	r2, #1
    13c4:	1340300e 	movtne	r3, #14
    13c8:	15c32004 	strbne	r2, [r3, #4]
    13cc:	eafffee4 	b	f64 <get_note_wave+0x6c>

000013d0 <get_chord_wave>:
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return number + ((octave + 1) * 12);
}

//returns a dynamically allocated array representing the wave intensity of each sample for the chord
struct MusicWave get_chord_wave(struct MusicChord music_chord){
<<<<<<< HEAD
    1528:	e24dd008 	sub	sp, sp, #8
    152c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1530:	e24dd044 	sub	sp, sp, #68	; 0x44
    1534:	e28d1064 	add	r1, sp, #100	; 0x64
    1538:	e58d0034 	str	r0, [sp, #52]	; 0x34
    153c:	e981000c 	stmib	r1, {r2, r3}
	//find the number of samples for the duration given
	unsigned int number_of_samples = (unsigned int) floor(music_chord.duration * sampling_frequency);
    1540:	e3a03901 	mov	r3, #16384	; 0x4000
    1544:	e3a02000 	mov	r2, #0
    1548:	e34430bf 	movt	r3, #16575	; 0x40bf
    154c:	e1cd07d0 	ldrd	r0, [sp, #112]	; 0x70
    1550:	eb0011bb 	bl	5c44 <__aeabi_dmul>
    1554:	eb000323 	bl	21e8 <floor>
    1558:	eb001348 	bl	6280 <__aeabi_d2uiz>
    155c:	e59dc078 	ldr	r12, [sp, #120]	; 0x78
    1560:	e58d0030 	str	r0, [sp, #48]	; 0x30
	
	//the full wave of all notes summed together
	double * wave_array = malloc(number_of_samples * sizeof(double));
    1564:	e1a00180 	lsl	r0, r0, #3
    1568:	e58dc02c 	str	r12, [sp, #44]	; 0x2c
    156c:	eb001371 	bl	6338 <malloc>
	
	//initialize the wave array to zero
	for(unsigned int i = 0; i < number_of_samples; i++){
    1570:	e59dc030 	ldr	r12, [sp, #48]	; 0x30
=======
    13d0:	e24dd008 	sub	sp, sp, #8
    13d4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    13d8:	e24dd044 	sub	sp, sp, #68	; 0x44
    13dc:	e28d1064 	add	r1, sp, #100	; 0x64
    13e0:	e58d0034 	str	r0, [sp, #52]	; 0x34
    13e4:	e981000c 	stmib	r1, {r2, r3}
	//find the number of samples for the duration given
	unsigned int number_of_samples = (unsigned int) floor(music_chord.duration * sampling_frequency);
    13e8:	e3a03901 	mov	r3, #16384	; 0x4000
    13ec:	e3a02000 	mov	r2, #0
    13f0:	e34430bf 	movt	r3, #16575	; 0x40bf
    13f4:	e1cd07d0 	ldrd	r0, [sp, #112]	; 0x70
    13f8:	eb001103 	bl	580c <__aeabi_dmul>
    13fc:	eb0002b1 	bl	1ec8 <floor>
    1400:	eb001290 	bl	5e48 <__aeabi_d2uiz>
    1404:	e59dc078 	ldr	r12, [sp, #120]	; 0x78
    1408:	e58d0030 	str	r0, [sp, #48]	; 0x30
	
	//the full wave of all notes summed together
	double * wave_array = malloc(number_of_samples * sizeof(double));
    140c:	e1a00180 	lsl	r0, r0, #3
    1410:	e58dc02c 	str	r12, [sp, #44]	; 0x2c
    1414:	eb0012b9 	bl	5f00 <malloc>
	
	//initialize the wave array to zero
	for(unsigned int i = 0; i < number_of_samples; i++){
    1418:	e59dc030 	ldr	r12, [sp, #48]	; 0x30
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
struct MusicWave get_chord_wave(struct MusicChord music_chord){
	//find the number of samples for the duration given
	unsigned int number_of_samples = (unsigned int) floor(music_chord.duration * sampling_frequency);
	
	//the full wave of all notes summed together
	double * wave_array = malloc(number_of_samples * sizeof(double));
<<<<<<< HEAD
    1574:	e58d0028 	str	r0, [sp, #40]	; 0x28
	
	//initialize the wave array to zero
	for(unsigned int i = 0; i < number_of_samples; i++){
    1578:	e35c0000 	cmp	r12, #0
    157c:	0a00001b 	beq	15f0 <get_chord_wave+0xc8>
    1580:	e35c0004 	cmp	r12, #4
=======
    141c:	e58d0028 	str	r0, [sp, #40]	; 0x28
	
	//initialize the wave array to zero
	for(unsigned int i = 0; i < number_of_samples; i++){
    1420:	e35c0000 	cmp	r12, #0
    1424:	0a00001b 	beq	1498 <get_chord_wave+0xc8>
    1428:	e35c0004 	cmp	r12, #4
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return number + ((octave + 1) * 12);
}

//returns a dynamically allocated array representing the wave intensity of each sample for the chord
struct MusicWave get_chord_wave(struct MusicChord music_chord){
<<<<<<< HEAD
    1584:	e24c5003 	sub	r5, r12, #3
    1588:	9a00006b 	bls	173c <get_chord_wave+0x214>
    158c:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
    1590:	e3a0c000 	mov	r12, #0
=======
    142c:	e24c5003 	sub	r5, r12, #3
    1430:	9a00006b 	bls	15e4 <get_chord_wave+0x214>
    1434:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
    1438:	e3a0c000 	mov	r12, #0
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//the full wave of all notes summed together
	double * wave_array = malloc(number_of_samples * sizeof(double));
	
	//initialize the wave array to zero
	for(unsigned int i = 0; i < number_of_samples; i++){
		wave_array[i] = 0;
<<<<<<< HEAD
    1594:	e3a02000 	mov	r2, #0
    1598:	e3a03000 	mov	r3, #0
    159c:	e28c4005 	add	r4, r12, #5
    15a0:	f5d0f0e8 	pld	[r0, #232]	; 0xe8
    15a4:	e1540005 	cmp	r4, r5
    15a8:	e1c020f0 	strd	r2, [r0]
    15ac:	e1c020f8 	strd	r2, [r0, #8]
=======
    143c:	e3a02000 	mov	r2, #0
    1440:	e3a03000 	mov	r3, #0
    1444:	e28c4005 	add	r4, r12, #5
    1448:	f5d0f0e8 	pld	[r0, #232]	; 0xe8
    144c:	e1540005 	cmp	r4, r5
    1450:	e1c020f0 	strd	r2, [r0]
    1454:	e1c020f8 	strd	r2, [r0, #8]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	//the full wave of all notes summed together
	double * wave_array = malloc(number_of_samples * sizeof(double));
	
	//initialize the wave array to zero
	for(unsigned int i = 0; i < number_of_samples; i++){
<<<<<<< HEAD
    15b0:	e28c1004 	add	r1, r12, #4
    15b4:	e2800020 	add	r0, r0, #32
    15b8:	e1a0c001 	mov	r12, r1
		wave_array[i] = 0;
    15bc:	e14021f0 	strd	r2, [r0, #-16]
    15c0:	e14020f8 	strd	r2, [r0, #-8]
    15c4:	3afffff4 	bcc	159c <get_chord_wave+0x74>
=======
    1458:	e28c1004 	add	r1, r12, #4
    145c:	e2800020 	add	r0, r0, #32
    1460:	e1a0c001 	mov	r12, r1
		wave_array[i] = 0;
    1464:	e14021f0 	strd	r2, [r0, #-16]
    1468:	e14020f8 	strd	r2, [r0, #-8]
    146c:	3afffff4 	bcc	1444 <get_chord_wave+0x74>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return number + ((octave + 1) * 12);
}

//returns a dynamically allocated array representing the wave intensity of each sample for the chord
struct MusicWave get_chord_wave(struct MusicChord music_chord){
<<<<<<< HEAD
    15c8:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    15cc:	e2410001 	sub	r0, r1, #1
=======
    1470:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    1474:	e2410001 	sub	r0, r1, #1
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//the full wave of all notes summed together
	double * wave_array = malloc(number_of_samples * sizeof(double));
	
	//initialize the wave array to zero
	for(unsigned int i = 0; i < number_of_samples; i++){
		wave_array[i] = 0;
<<<<<<< HEAD
    15d0:	e3a02000 	mov	r2, #0
    15d4:	e3a03000 	mov	r3, #0
=======
    1478:	e3a02000 	mov	r2, #0
    147c:	e3a03000 	mov	r3, #0
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return number + ((octave + 1) * 12);
}

//returns a dynamically allocated array representing the wave intensity of each sample for the chord
struct MusicWave get_chord_wave(struct MusicChord music_chord){
<<<<<<< HEAD
    15d8:	e08c0180 	add	r0, r12, r0, lsl #3
    15dc:	e59dc030 	ldr	r12, [sp, #48]	; 0x30
=======
    1480:	e08c0180 	add	r0, r12, r0, lsl #3
    1484:	e59dc030 	ldr	r12, [sp, #48]	; 0x30
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	//the full wave of all notes summed together
	double * wave_array = malloc(number_of_samples * sizeof(double));
	
	//initialize the wave array to zero
	for(unsigned int i = 0; i < number_of_samples; i++){
<<<<<<< HEAD
    15e0:	e2811001 	add	r1, r1, #1
		wave_array[i] = 0;
    15e4:	e1e020f8 	strd	r2, [r0, #8]!
=======
    1488:	e2811001 	add	r1, r1, #1
		wave_array[i] = 0;
    148c:	e1e020f8 	strd	r2, [r0, #8]!
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	//the full wave of all notes summed together
	double * wave_array = malloc(number_of_samples * sizeof(double));
	
	//initialize the wave array to zero
	for(unsigned int i = 0; i < number_of_samples; i++){
<<<<<<< HEAD
    15e8:	e15c0001 	cmp	r12, r1
    15ec:	8afffffb 	bhi	15e0 <get_chord_wave+0xb8>
=======
    1490:	e15c0001 	cmp	r12, r1
    1494:	8afffffb 	bhi	1488 <get_chord_wave+0xb8>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		wave_array[i] = 0;
	}
	
	//generate the music wave for each individual note and sum together
	struct MusicWave note_wave;
	for(unsigned int i = 0; i < music_chord.num_notes; i++){
<<<<<<< HEAD
    15f0:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
    15f4:	e35c0000 	cmp	r12, #0
    15f8:	0a000043 	beq	170c <get_chord_wave+0x1e4>
    15fc:	e59da068 	ldr	r10, [sp, #104]	; 0x68
    1600:	e3a0c000 	mov	r12, #0
    1604:	e58dc024 	str	r12, [sp, #36]	; 0x24
		note_wave = get_note_wave(music_chord.music_notes[i]);
    1608:	e28ae008 	add	lr, r10, #8
    160c:	e1a0c00d 	mov	r12, sp
    1610:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    1614:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1618:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
    161c:	e88c000f 	stm	r12, {r0, r1, r2, r3}
    1620:	e28d0038 	add	r0, sp, #56	; 0x38
    1624:	e89a000c 	ldm	r10, {r2, r3}
    1628:	ebfffe97 	bl	108c <get_note_wave>
    162c:	e59d703c 	ldr	r7, [sp, #60]	; 0x3c
    1630:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
		
		for(unsigned int j = 0; j < note_wave.length; j++){
    1634:	e3570000 	cmp	r7, #0
    1638:	0a000029 	beq	16e4 <get_chord_wave+0x1bc>
    163c:	e3570004 	cmp	r7, #4
=======
    1498:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
    149c:	e35c0000 	cmp	r12, #0
    14a0:	0a000043 	beq	15b4 <get_chord_wave+0x1e4>
    14a4:	e59da068 	ldr	r10, [sp, #104]	; 0x68
    14a8:	e3a0c000 	mov	r12, #0
    14ac:	e58dc024 	str	r12, [sp, #36]	; 0x24
		note_wave = get_note_wave(music_chord.music_notes[i]);
    14b0:	e28ae008 	add	lr, r10, #8
    14b4:	e1a0c00d 	mov	r12, sp
    14b8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    14bc:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    14c0:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
    14c4:	e88c000f 	stm	r12, {r0, r1, r2, r3}
    14c8:	e28d0038 	add	r0, sp, #56	; 0x38
    14cc:	e89a000c 	ldm	r10, {r2, r3}
    14d0:	ebfffe88 	bl	ef8 <get_note_wave>
    14d4:	e59d703c 	ldr	r7, [sp, #60]	; 0x3c
    14d8:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
		
		for(unsigned int j = 0; j < note_wave.length; j++){
    14dc:	e3570000 	cmp	r7, #0
    14e0:	0a000029 	beq	158c <get_chord_wave+0x1bc>
    14e4:	e3570004 	cmp	r7, #4
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return number + ((octave + 1) * 12);
}

//returns a dynamically allocated array representing the wave intensity of each sample for the chord
struct MusicWave get_chord_wave(struct MusicChord music_chord){
<<<<<<< HEAD
    1640:	e2478003 	sub	r8, r7, #3
    1644:	9a00003a 	bls	1734 <get_chord_wave+0x20c>
    1648:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    164c:	e1a06009 	mov	r6, r9
    1650:	e3a0b000 	mov	r11, #0
    1654:	e28c4080 	add	r4, r12, #128	; 0x80
=======
    14e8:	e2478003 	sub	r8, r7, #3
    14ec:	9a00003a 	bls	15dc <get_chord_wave+0x20c>
    14f0:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    14f4:	e1a06009 	mov	r6, r9
    14f8:	e3a0b000 	mov	r11, #0
    14fc:	e28c4080 	add	r4, r12, #128	; 0x80
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	struct MusicWave note_wave;
	for(unsigned int i = 0; i < music_chord.num_notes; i++){
		note_wave = get_note_wave(music_chord.music_notes[i]);
		
		for(unsigned int j = 0; j < note_wave.length; j++){
			wave_array[j] += note_wave.waveform[j];
<<<<<<< HEAD
    1658:	e1c620d0 	ldrd	r2, [r6]
    165c:	e2866020 	add	r6, r6, #32
    1660:	e14408d0 	ldrd	r0, [r4, #-128]	; 0xffffff80
    1664:	f5d4f000 	pld	[r4]
    1668:	eb001071 	bl	5834 <__adddf3>
    166c:	e14408f0 	strd	r0, [r4, #-128]	; 0xffffff80
    1670:	e2844020 	add	r4, r4, #32
    1674:	e14409d8 	ldrd	r0, [r4, #-152]	; 0xffffff68
=======
    1500:	e1c620d0 	ldrd	r2, [r6]
    1504:	e2866020 	add	r6, r6, #32
    1508:	e14408d0 	ldrd	r0, [r4, #-128]	; 0xffffff80
    150c:	f5d4f000 	pld	[r4]
    1510:	eb000fb9 	bl	53fc <__adddf3>
    1514:	e14408f0 	strd	r0, [r4, #-128]	; 0xffffff80
    1518:	e2844020 	add	r4, r4, #32
    151c:	e14409d8 	ldrd	r0, [r4, #-152]	; 0xffffff68
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//generate the music wave for each individual note and sum together
	struct MusicWave note_wave;
	for(unsigned int i = 0; i < music_chord.num_notes; i++){
		note_wave = get_note_wave(music_chord.music_notes[i]);
		
		for(unsigned int j = 0; j < note_wave.length; j++){
<<<<<<< HEAD
    1678:	e28b5004 	add	r5, r11, #4
			wave_array[j] += note_wave.waveform[j];
    167c:	e14621d8 	ldrd	r2, [r6, #-24]	; 0xffffffe8
    1680:	e28bb005 	add	r11, r11, #5
    1684:	eb00106a 	bl	5834 <__adddf3>
    1688:	e14409f8 	strd	r0, [r4, #-152]	; 0xffffff68
    168c:	e14409d0 	ldrd	r0, [r4, #-144]	; 0xffffff70
    1690:	e14621d0 	ldrd	r2, [r6, #-16]
    1694:	eb001066 	bl	5834 <__adddf3>
    1698:	e14409f0 	strd	r0, [r4, #-144]	; 0xffffff70
    169c:	e14408d8 	ldrd	r0, [r4, #-136]	; 0xffffff78
    16a0:	e14620d8 	ldrd	r2, [r6, #-8]
    16a4:	eb001062 	bl	5834 <__adddf3>
    16a8:	e158000b 	cmp	r8, r11
    16ac:	e14408f8 	strd	r0, [r4, #-136]	; 0xffffff78
=======
    1520:	e28b5004 	add	r5, r11, #4
			wave_array[j] += note_wave.waveform[j];
    1524:	e14621d8 	ldrd	r2, [r6, #-24]	; 0xffffffe8
    1528:	e28bb005 	add	r11, r11, #5
    152c:	eb000fb2 	bl	53fc <__adddf3>
    1530:	e14409f8 	strd	r0, [r4, #-152]	; 0xffffff68
    1534:	e14409d0 	ldrd	r0, [r4, #-144]	; 0xffffff70
    1538:	e14621d0 	ldrd	r2, [r6, #-16]
    153c:	eb000fae 	bl	53fc <__adddf3>
    1540:	e14409f0 	strd	r0, [r4, #-144]	; 0xffffff70
    1544:	e14408d8 	ldrd	r0, [r4, #-136]	; 0xffffff78
    1548:	e14620d8 	ldrd	r2, [r6, #-8]
    154c:	eb000faa 	bl	53fc <__adddf3>
    1550:	e158000b 	cmp	r8, r11
    1554:	e14408f8 	strd	r0, [r4, #-136]	; 0xffffff78
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//generate the music wave for each individual note and sum together
	struct MusicWave note_wave;
	for(unsigned int i = 0; i < music_chord.num_notes; i++){
		note_wave = get_note_wave(music_chord.music_notes[i]);
		
		for(unsigned int j = 0; j < note_wave.length; j++){
<<<<<<< HEAD
    16b0:	e1a0b005 	mov	r11, r5
    16b4:	8affffe7 	bhi	1658 <get_chord_wave+0x130>
=======
    1558:	e1a0b005 	mov	r11, r5
    155c:	8affffe7 	bhi	1500 <get_chord_wave+0x130>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return number + ((octave + 1) * 12);
}

//returns a dynamically allocated array representing the wave intensity of each sample for the chord
struct MusicWave get_chord_wave(struct MusicChord music_chord){
<<<<<<< HEAD
    16b8:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    16bc:	e2456001 	sub	r6, r5, #1
    16c0:	e0896186 	add	r6, r9, r6, lsl #3
    16c4:	e08c4185 	add	r4, r12, r5, lsl #3
=======
    1560:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    1564:	e2456001 	sub	r6, r5, #1
    1568:	e0896186 	add	r6, r9, r6, lsl #3
    156c:	e08c4185 	add	r4, r12, r5, lsl #3
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	struct MusicWave note_wave;
	for(unsigned int i = 0; i < music_chord.num_notes; i++){
		note_wave = get_note_wave(music_chord.music_notes[i]);
		
		for(unsigned int j = 0; j < note_wave.length; j++){
			wave_array[j] += note_wave.waveform[j];
<<<<<<< HEAD
    16c8:	e1c400d0 	ldrd	r0, [r4]
=======
    1570:	e1c400d0 	ldrd	r0, [r4]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//generate the music wave for each individual note and sum together
	struct MusicWave note_wave;
	for(unsigned int i = 0; i < music_chord.num_notes; i++){
		note_wave = get_note_wave(music_chord.music_notes[i]);
		
		for(unsigned int j = 0; j < note_wave.length; j++){
<<<<<<< HEAD
    16cc:	e2855001 	add	r5, r5, #1
			wave_array[j] += note_wave.waveform[j];
    16d0:	e1e620d8 	ldrd	r2, [r6, #8]!
    16d4:	eb001056 	bl	5834 <__adddf3>
=======
    1574:	e2855001 	add	r5, r5, #1
			wave_array[j] += note_wave.waveform[j];
    1578:	e1e620d8 	ldrd	r2, [r6, #8]!
    157c:	eb000f9e 	bl	53fc <__adddf3>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//generate the music wave for each individual note and sum together
	struct MusicWave note_wave;
	for(unsigned int i = 0; i < music_chord.num_notes; i++){
		note_wave = get_note_wave(music_chord.music_notes[i]);
		
		for(unsigned int j = 0; j < note_wave.length; j++){
<<<<<<< HEAD
    16d8:	e1570005 	cmp	r7, r5
			wave_array[j] += note_wave.waveform[j];
    16dc:	e0c400f8 	strd	r0, [r4], #8
=======
    1580:	e1570005 	cmp	r7, r5
			wave_array[j] += note_wave.waveform[j];
    1584:	e0c400f8 	strd	r0, [r4], #8
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//generate the music wave for each individual note and sum together
	struct MusicWave note_wave;
	for(unsigned int i = 0; i < music_chord.num_notes; i++){
		note_wave = get_note_wave(music_chord.music_notes[i]);
		
		for(unsigned int j = 0; j < note_wave.length; j++){
<<<<<<< HEAD
    16e0:	8afffff8 	bhi	16c8 <get_chord_wave+0x1a0>
=======
    1588:	8afffff8 	bhi	1570 <get_chord_wave+0x1a0>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		wave_array[i] = 0;
	}
	
	//generate the music wave for each individual note and sum together
	struct MusicWave note_wave;
	for(unsigned int i = 0; i < music_chord.num_notes; i++){
<<<<<<< HEAD
    16e4:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
=======
    158c:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		
		for(unsigned int j = 0; j < note_wave.length; j++){
			wave_array[j] += note_wave.waveform[j];
		}
		
		free(note_wave.waveform);
<<<<<<< HEAD
    16e8:	e1a00009 	mov	r0, r9
    16ec:	e28aa028 	add	r10, r10, #40	; 0x28
=======
    1590:	e1a00009 	mov	r0, r9
    1594:	e28aa028 	add	r10, r10, #40	; 0x28
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		wave_array[i] = 0;
	}
	
	//generate the music wave for each individual note and sum together
	struct MusicWave note_wave;
	for(unsigned int i = 0; i < music_chord.num_notes; i++){
<<<<<<< HEAD
    16f0:	e28cc001 	add	r12, r12, #1
    16f4:	e58dc024 	str	r12, [sp, #36]	; 0x24
=======
    1598:	e28cc001 	add	r12, r12, #1
    159c:	e58dc024 	str	r12, [sp, #36]	; 0x24
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		
		for(unsigned int j = 0; j < note_wave.length; j++){
			wave_array[j] += note_wave.waveform[j];
		}
		
		free(note_wave.waveform);
<<<<<<< HEAD
    16f8:	eb001316 	bl	6358 <free>
=======
    15a0:	eb00125e 	bl	5f20 <free>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		wave_array[i] = 0;
	}
	
	//generate the music wave for each individual note and sum together
	struct MusicWave note_wave;
	for(unsigned int i = 0; i < music_chord.num_notes; i++){
<<<<<<< HEAD
    16fc:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    1700:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    1704:	e15c0001 	cmp	r12, r1
    1708:	1affffbe 	bne	1608 <get_chord_wave+0xe0>
=======
    15a4:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    15a8:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    15ac:	e15c0001 	cmp	r12, r1
    15b0:	1affffbe 	bne	14b0 <get_chord_wave+0xe0>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		
		free(note_wave.waveform);
	}

	struct MusicWave wave = {.waveform = wave_array, .length = number_of_samples};
	return wave;
<<<<<<< HEAD
    170c:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
    1710:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
}
    1714:	e1a00001 	mov	r0, r1
=======
    15b4:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
    15b8:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
}
    15bc:	e1a00001 	mov	r0, r1
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		
		free(note_wave.waveform);
	}

	struct MusicWave wave = {.waveform = wave_array, .length = number_of_samples};
	return wave;
<<<<<<< HEAD
    1718:	e581c000 	str	r12, [r1]
    171c:	e59dc030 	ldr	r12, [sp, #48]	; 0x30
    1720:	e581c004 	str	r12, [r1, #4]
}
    1724:	e28dd044 	add	sp, sp, #68	; 0x44
    1728:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    172c:	e28dd008 	add	sp, sp, #8
    1730:	e12fff1e 	bx	lr
=======
    15c0:	e581c000 	str	r12, [r1]
    15c4:	e59dc030 	ldr	r12, [sp, #48]	; 0x30
    15c8:	e581c004 	str	r12, [r1, #4]
}
    15cc:	e28dd044 	add	sp, sp, #68	; 0x44
    15d0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    15d4:	e28dd008 	add	sp, sp, #8
    15d8:	e12fff1e 	bx	lr
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return number + ((octave + 1) * 12);
}

//returns a dynamically allocated array representing the wave intensity of each sample for the chord
struct MusicWave get_chord_wave(struct MusicChord music_chord){
<<<<<<< HEAD
    1734:	e3a05000 	mov	r5, #0
    1738:	eaffffde 	b	16b8 <get_chord_wave+0x190>
    173c:	e3a01000 	mov	r1, #0
    1740:	eaffffa0 	b	15c8 <get_chord_wave+0xa0>

00001744 <initialize_stream>:
=======
    15dc:	e3a05000 	mov	r5, #0
    15e0:	eaffffde 	b	1560 <get_chord_wave+0x190>
    15e4:	e3a01000 	mov	r1, #0
    15e8:	eaffffa0 	b	1470 <get_chord_wave+0xa0>

000015ec <initialize_stream>:
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate

struct AudioStream audio_stream;
extern const double sampling_period;

//initializes the stream assuming the current song is correct
void initialize_stream(){
<<<<<<< HEAD
    1744:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
	//allocate memory for the stream
	audio_stream.current_playback_locations = malloc(sizeof(unsigned int) * audio_stream.current_song->num_tracks);
    1748:	e3034f98 	movw	r4, #16280	; 0x3f98
    174c:	e3404015 	movt	r4, #21
    1750:	e5943014 	ldr	r3, [r4, #20]
    1754:	e593a004 	ldr	r10, [r3, #4]
    1758:	e1a0510a 	lsl	r5, r10, #2
    175c:	e1a00005 	mov	r0, r5
    1760:	eb0012f4 	bl	6338 <malloc>
    1764:	e1a06000 	mov	r6, r0
	audio_stream.current_process_locations = malloc(sizeof(unsigned int) * audio_stream.current_song->num_tracks);
    1768:	e1a00005 	mov	r0, r5
=======
    15ec:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
	//allocate memory for the stream
	audio_stream.current_playback_locations = malloc(sizeof(unsigned int) * audio_stream.current_song->num_tracks);
    15f0:	e3074570 	movw	r4, #30064	; 0x7570
    15f4:	e3404010 	movt	r4, #16
    15f8:	e5943014 	ldr	r3, [r4, #20]
    15fc:	e593a004 	ldr	r10, [r3, #4]
    1600:	e1a0510a 	lsl	r5, r10, #2
    1604:	e1a00005 	mov	r0, r5
    1608:	eb00123c 	bl	5f00 <malloc>
    160c:	e1a06000 	mov	r6, r0
	audio_stream.current_process_locations = malloc(sizeof(unsigned int) * audio_stream.current_song->num_tracks);
    1610:	e1a00005 	mov	r0, r5
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
extern const double sampling_period;

//initializes the stream assuming the current song is correct
void initialize_stream(){
	//allocate memory for the stream
	audio_stream.current_playback_locations = malloc(sizeof(unsigned int) * audio_stream.current_song->num_tracks);
<<<<<<< HEAD
    176c:	e5846000 	str	r6, [r4]
	audio_stream.current_process_locations = malloc(sizeof(unsigned int) * audio_stream.current_song->num_tracks);
    1770:	eb0012f0 	bl	6338 <malloc>
    1774:	e1a07000 	mov	r7, r0
	
	audio_stream.queue_fronts = malloc(sizeof(struct MusicWaveNode *) * audio_stream.current_song->num_tracks);
    1778:	e1a00005 	mov	r0, r5
=======
    1614:	e5846000 	str	r6, [r4]
	audio_stream.current_process_locations = malloc(sizeof(unsigned int) * audio_stream.current_song->num_tracks);
    1618:	eb001238 	bl	5f00 <malloc>
    161c:	e1a07000 	mov	r7, r0
	
	audio_stream.queue_fronts = malloc(sizeof(struct MusicWaveNode *) * audio_stream.current_song->num_tracks);
    1620:	e1a00005 	mov	r0, r5
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate

//initializes the stream assuming the current song is correct
void initialize_stream(){
	//allocate memory for the stream
	audio_stream.current_playback_locations = malloc(sizeof(unsigned int) * audio_stream.current_song->num_tracks);
	audio_stream.current_process_locations = malloc(sizeof(unsigned int) * audio_stream.current_song->num_tracks);
<<<<<<< HEAD
    177c:	e5847004 	str	r7, [r4, #4]
	
	audio_stream.queue_fronts = malloc(sizeof(struct MusicWaveNode *) * audio_stream.current_song->num_tracks);
    1780:	eb0012ec 	bl	6338 <malloc>
    1784:	e1a08000 	mov	r8, r0
	audio_stream.queue_backs = malloc(sizeof(struct MusicWaveNode *) * audio_stream.current_song->num_tracks);
    1788:	e1a00005 	mov	r0, r5
=======
    1624:	e5847004 	str	r7, [r4, #4]
	
	audio_stream.queue_fronts = malloc(sizeof(struct MusicWaveNode *) * audio_stream.current_song->num_tracks);
    1628:	eb001234 	bl	5f00 <malloc>
    162c:	e1a08000 	mov	r8, r0
	audio_stream.queue_backs = malloc(sizeof(struct MusicWaveNode *) * audio_stream.current_song->num_tracks);
    1630:	e1a00005 	mov	r0, r5
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
void initialize_stream(){
	//allocate memory for the stream
	audio_stream.current_playback_locations = malloc(sizeof(unsigned int) * audio_stream.current_song->num_tracks);
	audio_stream.current_process_locations = malloc(sizeof(unsigned int) * audio_stream.current_song->num_tracks);
	
	audio_stream.queue_fronts = malloc(sizeof(struct MusicWaveNode *) * audio_stream.current_song->num_tracks);
<<<<<<< HEAD
    178c:	e5848008 	str	r8, [r4, #8]
	audio_stream.queue_backs = malloc(sizeof(struct MusicWaveNode *) * audio_stream.current_song->num_tracks);
    1790:	eb0012e8 	bl	6338 <malloc>
    1794:	e584000c 	str	r0, [r4, #12]
	
	audio_stream.durations = malloc(sizeof(double) * audio_stream.current_song->num_tracks);
    1798:	e1a0018a 	lsl	r0, r10, #3
    179c:	eb0012e5 	bl	6338 <malloc>
	
	//initialize all variables
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    17a0:	e35a0000 	cmp	r10, #0
=======
    1634:	e5848008 	str	r8, [r4, #8]
	audio_stream.queue_backs = malloc(sizeof(struct MusicWaveNode *) * audio_stream.current_song->num_tracks);
    1638:	eb001230 	bl	5f00 <malloc>
    163c:	e584000c 	str	r0, [r4, #12]
	
	audio_stream.durations = malloc(sizeof(double) * audio_stream.current_song->num_tracks);
    1640:	e1a0018a 	lsl	r0, r10, #3
    1644:	eb00122d 	bl	5f00 <malloc>
	
	//initialize all variables
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    1648:	e35a0000 	cmp	r10, #0
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	audio_stream.current_process_locations = malloc(sizeof(unsigned int) * audio_stream.current_song->num_tracks);
	
	audio_stream.queue_fronts = malloc(sizeof(struct MusicWaveNode *) * audio_stream.current_song->num_tracks);
	audio_stream.queue_backs = malloc(sizeof(struct MusicWaveNode *) * audio_stream.current_song->num_tracks);
	
	audio_stream.durations = malloc(sizeof(double) * audio_stream.current_song->num_tracks);
<<<<<<< HEAD
    17a4:	e5840010 	str	r0, [r4, #16]
	
	//initialize all variables
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    17a8:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, r10, pc}
    17ac:	e3a01000 	mov	r1, #0
=======
    164c:	e5840010 	str	r0, [r4, #16]
	
	//initialize all variables
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    1650:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, r10, pc}
    1654:	e3a01000 	mov	r1, #0
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		audio_stream.current_playback_locations[i] = 0;
		audio_stream.current_process_locations[i] = 0;
		
		audio_stream.queue_fronts[i] = NULL;
		audio_stream.queue_backs[i] = NULL;
<<<<<<< HEAD
    17b0:	e1a05004 	mov	r5, r4
=======
    1658:	e1a05004 	mov	r5, r4
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	audio_stream.durations = malloc(sizeof(double) * audio_stream.current_song->num_tracks);
	
	//initialize all variables
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		audio_stream.current_playback_locations[i] = 0;
<<<<<<< HEAD
    17b4:	e1a0c001 	mov	r12, r1
=======
    165c:	e1a0c001 	mov	r12, r1
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		audio_stream.current_process_locations[i] = 0;
		
		audio_stream.queue_fronts[i] = NULL;
		audio_stream.queue_backs[i] = NULL;
		
		audio_stream.durations[i] = 0;
<<<<<<< HEAD
    17b8:	e3a02000 	mov	r2, #0
    17bc:	e3a03000 	mov	r3, #0
=======
    1660:	e3a02000 	mov	r2, #0
    1664:	e3a03000 	mov	r3, #0
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	audio_stream.durations = malloc(sizeof(double) * audio_stream.current_song->num_tracks);
	
	//initialize all variables
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		audio_stream.current_playback_locations[i] = 0;
<<<<<<< HEAD
    17c0:	e786c101 	str	r12, [r6, r1, lsl #2]
=======
    1668:	e786c101 	str	r12, [r6, r1, lsl #2]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		audio_stream.current_process_locations[i] = 0;
		
		audio_stream.queue_fronts[i] = NULL;
		audio_stream.queue_backs[i] = NULL;
		
		audio_stream.durations[i] = 0;
<<<<<<< HEAD
    17c4:	e1a06181 	lsl	r6, r1, #3
=======
    166c:	e1a06181 	lsl	r6, r1, #3
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	audio_stream.durations = malloc(sizeof(double) * audio_stream.current_song->num_tracks);
	
	//initialize all variables
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		audio_stream.current_playback_locations[i] = 0;
		audio_stream.current_process_locations[i] = 0;
<<<<<<< HEAD
    17c8:	e787c101 	str	r12, [r7, r1, lsl #2]
		
		audio_stream.queue_fronts[i] = NULL;
    17cc:	e788c101 	str	r12, [r8, r1, lsl #2]
		audio_stream.queue_backs[i] = NULL;
    17d0:	e594000c 	ldr	r0, [r4, #12]
    17d4:	e780c101 	str	r12, [r0, r1, lsl #2]
=======
    1670:	e787c101 	str	r12, [r7, r1, lsl #2]
		
		audio_stream.queue_fronts[i] = NULL;
    1674:	e788c101 	str	r12, [r8, r1, lsl #2]
		audio_stream.queue_backs[i] = NULL;
    1678:	e594000c 	ldr	r0, [r4, #12]
    167c:	e780c101 	str	r12, [r0, r1, lsl #2]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	audio_stream.queue_backs = malloc(sizeof(struct MusicWaveNode *) * audio_stream.current_song->num_tracks);
	
	audio_stream.durations = malloc(sizeof(double) * audio_stream.current_song->num_tracks);
	
	//initialize all variables
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    17d8:	e2811001 	add	r1, r1, #1
    17dc:	e5940014 	ldr	r0, [r4, #20]
=======
    1680:	e2811001 	add	r1, r1, #1
    1684:	e5940014 	ldr	r0, [r4, #20]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		audio_stream.current_process_locations[i] = 0;
		
		audio_stream.queue_fronts[i] = NULL;
		audio_stream.queue_backs[i] = NULL;
		
		audio_stream.durations[i] = 0;
<<<<<<< HEAD
    17e0:	e5947010 	ldr	r7, [r4, #16]
=======
    1688:	e5947010 	ldr	r7, [r4, #16]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	audio_stream.queue_backs = malloc(sizeof(struct MusicWaveNode *) * audio_stream.current_song->num_tracks);
	
	audio_stream.durations = malloc(sizeof(double) * audio_stream.current_song->num_tracks);
	
	//initialize all variables
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    17e4:	e5900004 	ldr	r0, [r0, #4]
=======
    168c:	e5900004 	ldr	r0, [r0, #4]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		audio_stream.current_process_locations[i] = 0;
		
		audio_stream.queue_fronts[i] = NULL;
		audio_stream.queue_backs[i] = NULL;
		
		audio_stream.durations[i] = 0;
<<<<<<< HEAD
    17e8:	e18720f6 	strd	r2, [r7, r6]
=======
    1690:	e18720f6 	strd	r2, [r7, r6]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	audio_stream.queue_backs = malloc(sizeof(struct MusicWaveNode *) * audio_stream.current_song->num_tracks);
	
	audio_stream.durations = malloc(sizeof(double) * audio_stream.current_song->num_tracks);
	
	//initialize all variables
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    17ec:	e1500001 	cmp	r0, r1
    17f0:	98bd85f8 	popls	{r3, r4, r5, r6, r7, r8, r10, pc}
    17f4:	e89501c0 	ldm	r5, {r6, r7, r8}
    17f8:	eafffff0 	b	17c0 <initialize_stream+0x7c>

000017fc <deconstruct_stream>:
=======
    1694:	e1500001 	cmp	r0, r1
    1698:	98bd85f8 	popls	{r3, r4, r5, r6, r7, r8, r10, pc}
    169c:	e89501c0 	ldm	r5, {r6, r7, r8}
    16a0:	eafffff0 	b	1668 <initialize_stream+0x7c>

000016a4 <deconstruct_stream>:
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		audio_stream.durations[i] = 0;
	}
}

//deconstructs the stream and frees all memory allocated
void deconstruct_stream(){
<<<<<<< HEAD
    17fc:	e92d4010 	push	{r4, lr}
	//assumes all queues have been cleared already
	free(audio_stream.current_playback_locations);
    1800:	e3034f98 	movw	r4, #16280	; 0x3f98
    1804:	e3404015 	movt	r4, #21
    1808:	e5940000 	ldr	r0, [r4]
    180c:	eb0012d1 	bl	6358 <free>
	free(audio_stream.current_process_locations);
    1810:	e5940004 	ldr	r0, [r4, #4]
    1814:	eb0012cf 	bl	6358 <free>
	free(audio_stream.queue_fronts);
    1818:	e5940008 	ldr	r0, [r4, #8]
    181c:	eb0012cd 	bl	6358 <free>
	free(audio_stream.queue_backs);
    1820:	e594000c 	ldr	r0, [r4, #12]
    1824:	eb0012cb 	bl	6358 <free>
	free(audio_stream.durations);
    1828:	e5940010 	ldr	r0, [r4, #16]
}
    182c:	e8bd4010 	pop	{r4, lr}
=======
    16a4:	e92d4010 	push	{r4, lr}
	//assumes all queues have been cleared already
	free(audio_stream.current_playback_locations);
    16a8:	e3074570 	movw	r4, #30064	; 0x7570
    16ac:	e3404010 	movt	r4, #16
    16b0:	e5940000 	ldr	r0, [r4]
    16b4:	eb001219 	bl	5f20 <free>
	free(audio_stream.current_process_locations);
    16b8:	e5940004 	ldr	r0, [r4, #4]
    16bc:	eb001217 	bl	5f20 <free>
	free(audio_stream.queue_fronts);
    16c0:	e5940008 	ldr	r0, [r4, #8]
    16c4:	eb001215 	bl	5f20 <free>
	free(audio_stream.queue_backs);
    16c8:	e594000c 	ldr	r0, [r4, #12]
    16cc:	eb001213 	bl	5f20 <free>
	free(audio_stream.durations);
    16d0:	e5940010 	ldr	r0, [r4, #16]
}
    16d4:	e8bd4010 	pop	{r4, lr}
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//assumes all queues have been cleared already
	free(audio_stream.current_playback_locations);
	free(audio_stream.current_process_locations);
	free(audio_stream.queue_fronts);
	free(audio_stream.queue_backs);
	free(audio_stream.durations);
<<<<<<< HEAD
    1830:	ea0012c8 	b	6358 <free>

00001834 <populate_stream>:
=======
    16d8:	ea001210 	b	5f20 <free>

000016dc <populate_stream>:
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1834:	e3032f98 	movw	r2, #16280	; 0x3f98
=======
    16dc:	e3072570 	movw	r2, #30064	; 0x7570
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	free(audio_stream.queue_backs);
	free(audio_stream.durations);
}

//processes one chord of the shortest duration track
void populate_stream(){
<<<<<<< HEAD
    1838:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
=======
    16e0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    183c:	e3402015 	movt	r2, #21
=======
    16e4:	e3402010 	movt	r2, #16
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	free(audio_stream.queue_backs);
	free(audio_stream.durations);
}

//processes one chord of the shortest duration track
void populate_stream(){
<<<<<<< HEAD
    1840:	e24dd03c 	sub	sp, sp, #60	; 0x3c
=======
    16e8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1844:	e5923014 	ldr	r3, [r2, #20]
    1848:	e58d2014 	str	r2, [sp, #20]
    184c:	e5938004 	ldr	r8, [r3, #4]
    1850:	e3580001 	cmp	r8, #1
    1854:	9a00005b 	bls	19c8 <populate_stream+0x194>
    1858:	e5939000 	ldr	r9, [r3]
=======
    16ec:	e5923014 	ldr	r3, [r2, #20]
    16f0:	e58d2014 	str	r2, [sp, #20]
    16f4:	e5938004 	ldr	r8, [r3, #4]
    16f8:	e3580001 	cmp	r8, #1
    16fc:	9a00005b 	bls	1870 <populate_stream+0x194>
    1700:	e5939000 	ldr	r9, [r3]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	return true;
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
<<<<<<< HEAD
    185c:	e3a06000 	mov	r6, #0
    1860:	e59d3014 	ldr	r3, [sp, #20]
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
    1864:	e3a04001 	mov	r4, #1
=======
    1704:	e3a06000 	mov	r6, #0
    1708:	e59d3014 	ldr	r3, [sp, #20]
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
    170c:	e3a04001 	mov	r4, #1
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	free(audio_stream.queue_backs);
	free(audio_stream.durations);
}

//processes one chord of the shortest duration track
void populate_stream(){
<<<<<<< HEAD
    1868:	e289500c 	add	r5, r9, #12
    186c:	e593b004 	ldr	r11, [r3, #4]
=======
    1710:	e289500c 	add	r5, r9, #12
    1714:	e593b004 	ldr	r11, [r3, #4]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i)
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
<<<<<<< HEAD
    1870:	e593a010 	ldr	r10, [r3, #16]
    1874:	e1a0700b 	mov	r7, r11
=======
    1718:	e593a010 	ldr	r10, [r3, #16]
    171c:	e1a0700b 	mov	r7, r11
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i)
<<<<<<< HEAD
    1878:	e5953008 	ldr	r3, [r5, #8]
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
    187c:	e1a02186 	lsl	r2, r6, #3
=======
    1720:	e5953008 	ldr	r3, [r5, #8]
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
    1724:	e1a02186 	lsl	r2, r6, #3
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
<<<<<<< HEAD
    1880:	e5b71004 	ldr	r1, [r7, #4]!
=======
    1728:	e5b71004 	ldr	r1, [r7, #4]!
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	free(audio_stream.queue_backs);
	free(audio_stream.durations);
}

//processes one chord of the shortest duration track
void populate_stream(){
<<<<<<< HEAD
    1884:	e1a00184 	lsl	r0, r4, #3
    1888:	f5d5f05c 	pld	[r5, #92]	; 0x5c
=======
    172c:	e1a00184 	lsl	r0, r4, #3
    1730:	f5d5f05c 	pld	[r5, #92]	; 0x5c
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i)
<<<<<<< HEAD
    188c:	e1510003 	cmp	r1, r3
    1890:	2a00000b 	bcs	18c4 <populate_stream+0x90>
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
    1894:	e18220da 	ldrd	r2, [r2, r10]
    1898:	e18000da 	ldrd	r0, [r0, r10]
    189c:	eb001248 	bl	61c4 <__aeabi_dcmplt>
=======
    1734:	e1510003 	cmp	r1, r3
    1738:	2a00000b 	bcs	176c <populate_stream+0x90>
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
    173c:	e18220da 	ldrd	r2, [r2, r10]
    1740:	e18000da 	ldrd	r0, [r0, r10]
    1744:	eb001190 	bl	5d8c <__aeabi_dcmplt>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
<<<<<<< HEAD
    18a0:	e0863086 	add	r3, r6, r6, lsl #1
=======
    1748:	e0863086 	add	r3, r6, r6, lsl #1
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i)
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
<<<<<<< HEAD
    18a4:	e3500000 	cmp	r0, #0
    18a8:	11a06004 	movne	r6, r4
=======
    174c:	e3500000 	cmp	r0, #0
    1750:	11a06004 	movne	r6, r4
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
<<<<<<< HEAD
    18ac:	e0893103 	add	r3, r9, r3, lsl #2
=======
    1754:	e0893103 	add	r3, r9, r3, lsl #2
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i)
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
<<<<<<< HEAD
    18b0:	1a000003 	bne	18c4 <populate_stream+0x90>
    18b4:	e79b2106 	ldr	r2, [r11, r6, lsl #2]
    18b8:	e5933008 	ldr	r3, [r3, #8]
    18bc:	e1520003 	cmp	r2, r3
    18c0:	21a06004 	movcs	r6, r4
=======
    1758:	1a000003 	bne	176c <populate_stream+0x90>
    175c:	e79b2106 	ldr	r2, [r11, r6, lsl #2]
    1760:	e5933008 	ldr	r3, [r3, #8]
    1764:	e1520003 	cmp	r2, r3
    1768:	21a06004 	movcs	r6, r4
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    18c4:	e2844001 	add	r4, r4, #1
    18c8:	e285500c 	add	r5, r5, #12
    18cc:	e1540008 	cmp	r4, r8
    18d0:	1affffe8 	bne	1878 <populate_stream+0x44>
    18d4:	e0863086 	add	r3, r6, r6, lsl #1
    18d8:	e1a07106 	lsl	r7, r6, #2
    18dc:	e1a03103 	lsl	r3, r3, #2
=======
    176c:	e2844001 	add	r4, r4, #1
    1770:	e285500c 	add	r5, r5, #12
    1774:	e1540008 	cmp	r4, r8
    1778:	1affffe8 	bne	1720 <populate_stream+0x44>
    177c:	e0863086 	add	r3, r6, r6, lsl #1
    1780:	e1a07106 	lsl	r7, r6, #2
    1784:	e1a03103 	lsl	r3, r3, #2
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
//processes one chord of the shortest duration track
void populate_stream(){
	unsigned int i = get_next_processed_track();
	
	//retrieve the current track
	struct MusicTrack current_track = audio_stream.current_song->music_tracks[i];
<<<<<<< HEAD
    18e0:	e0891003 	add	r1, r9, r3
	
	//check to make sure there is more song left for the respective track
	if(audio_stream.current_process_locations[i] >= current_track.length) return;
    18e4:	e79b2007 	ldr	r2, [r11, r7]
    18e8:	e5911008 	ldr	r1, [r1, #8]
=======
    1788:	e0891003 	add	r1, r9, r3
	
	//check to make sure there is more song left for the respective track
	if(audio_stream.current_process_locations[i] >= current_track.length) return;
    178c:	e79b2007 	ldr	r2, [r11, r7]
    1790:	e5911008 	ldr	r1, [r1, #8]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
//processes one chord of the shortest duration track
void populate_stream(){
	unsigned int i = get_next_processed_track();
	
	//retrieve the current track
	struct MusicTrack current_track = audio_stream.current_song->music_tracks[i];
<<<<<<< HEAD
    18ec:	e7993003 	ldr	r3, [r9, r3]
	
	//check to make sure there is more song left for the respective track
	if(audio_stream.current_process_locations[i] >= current_track.length) return;
    18f0:	e1520001 	cmp	r2, r1
    18f4:	3a000001 	bcc	1900 <populate_stream+0xcc>
=======
    1794:	e7993003 	ldr	r3, [r9, r3]
	
	//check to make sure there is more song left for the respective track
	if(audio_stream.current_process_locations[i] >= current_track.length) return;
    1798:	e1520001 	cmp	r2, r1
    179c:	3a000001 	bcc	17a8 <populate_stream+0xcc>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//increment the location to be the next chord to be processed
	audio_stream.current_process_locations[i]++;
	
	//increase the duration of the audio stream by the duration of the chord just processed
	audio_stream.durations[i] += current_chord.duration;
}
<<<<<<< HEAD
    18f8:	e28dd03c 	add	sp, sp, #60	; 0x3c
    18fc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
=======
    17a0:	e28dd03c 	add	sp, sp, #60	; 0x3c
    17a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	//check to make sure there is more song left for the respective track
	if(audio_stream.current_process_locations[i] >= current_track.length) return;
	
	//retrieve the current chord
	struct MusicChord current_chord = current_track.music_chords[audio_stream.current_process_locations[i]];
<<<<<<< HEAD
    1900:	e0822082 	add	r2, r2, r2, lsl #1
    1904:	e28dc020 	add	r12, sp, #32
=======
    17a8:	e0822082 	add	r2, r2, r2, lsl #1
    17ac:	e28dc020 	add	r12, sp, #32
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	//add a new node to the back of the respective queue
	struct MusicWaveNode * node = malloc(sizeof(struct MusicWaveNode));
	
	node->wave = get_chord_wave(current_chord);
<<<<<<< HEAD
    1908:	e28d8018 	add	r8, sp, #24
=======
    17b0:	e28d8018 	add	r8, sp, #24
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	//increment the location to be the next chord to be processed
	audio_stream.current_process_locations[i]++;
	
	//increase the duration of the audio stream by the duration of the chord just processed
	audio_stream.durations[i] += current_chord.duration;
<<<<<<< HEAD
    190c:	e1a06186 	lsl	r6, r6, #3
=======
    17b4:	e1a06186 	lsl	r6, r6, #3
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	//check to make sure there is more song left for the respective track
	if(audio_stream.current_process_locations[i] >= current_track.length) return;
	
	//retrieve the current chord
	struct MusicChord current_chord = current_track.music_chords[audio_stream.current_process_locations[i]];
<<<<<<< HEAD
    1910:	e0833182 	add	r3, r3, r2, lsl #3
    1914:	e1a0e003 	mov	lr, r3
    1918:	e1c340d8 	ldrd	r4, [r3, #8]
    191c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    1920:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1924:	e89e0003 	ldm	lr, {r0, r1}
    1928:	e88c0003 	stm	r12, {r0, r1}
	
	//add a new node to the back of the respective queue
	struct MusicWaveNode * node = malloc(sizeof(struct MusicWaveNode));
    192c:	e3a0000c 	mov	r0, #12
    1930:	eb001280 	bl	6338 <malloc>
	
	node->wave = get_chord_wave(current_chord);
    1934:	e28de038 	add	lr, sp, #56	; 0x38
=======
    17b8:	e0833182 	add	r3, r3, r2, lsl #3
    17bc:	e1a0e003 	mov	lr, r3
    17c0:	e1c340d8 	ldrd	r4, [r3, #8]
    17c4:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    17c8:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    17cc:	e89e0003 	ldm	lr, {r0, r1}
    17d0:	e88c0003 	stm	r12, {r0, r1}
	
	//add a new node to the back of the respective queue
	struct MusicWaveNode * node = malloc(sizeof(struct MusicWaveNode));
    17d4:	e3a0000c 	mov	r0, #12
    17d8:	eb0011c8 	bl	5f00 <malloc>
	
	node->wave = get_chord_wave(current_chord);
    17dc:	e28de038 	add	lr, sp, #56	; 0x38
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	//retrieve the current chord
	struct MusicChord current_chord = current_track.music_chords[audio_stream.current_process_locations[i]];
	
	//add a new node to the back of the respective queue
	struct MusicWaveNode * node = malloc(sizeof(struct MusicWaveNode));
<<<<<<< HEAD
    1938:	e1a09000 	mov	r9, r0
	
	node->wave = get_chord_wave(current_chord);
    193c:	e1cd42f8 	strd	r4, [sp, #40]	; 0x28
    1940:	e28dc020 	add	r12, sp, #32
    1944:	e91e000f 	ldmdb	lr, {r0, r1, r2, r3}
    1948:	e88d000f 	stm	sp, {r0, r1, r2, r3}
    194c:	e1a00008 	mov	r0, r8
    1950:	e89c000c 	ldm	r12, {r2, r3}
    1954:	ebfffef3 	bl	1528 <get_chord_wave>
=======
    17e0:	e1a09000 	mov	r9, r0
	
	node->wave = get_chord_wave(current_chord);
    17e4:	e1cd42f8 	strd	r4, [sp, #40]	; 0x28
    17e8:	e28dc020 	add	r12, sp, #32
    17ec:	e91e000f 	ldmdb	lr, {r0, r1, r2, r3}
    17f0:	e88d000f 	stm	sp, {r0, r1, r2, r3}
    17f4:	e1a00008 	mov	r0, r8
    17f8:	e89c000c 	ldm	r12, {r2, r3}
    17fc:	ebfffef3 	bl	13d0 <get_chord_wave>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	node->next = NULL;
	
	//append the node to the back of the queue
	if(audio_stream.queue_backs[i] != NULL)
<<<<<<< HEAD
    1958:	e59d2014 	ldr	r2, [sp, #20]
=======
    1800:	e59d2014 	ldr	r2, [sp, #20]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	struct MusicChord current_chord = current_track.music_chords[audio_stream.current_process_locations[i]];
	
	//add a new node to the back of the respective queue
	struct MusicWaveNode * node = malloc(sizeof(struct MusicWaveNode));
	
	node->wave = get_chord_wave(current_chord);
<<<<<<< HEAD
    195c:	e8980003 	ldm	r8, {r0, r1}
=======
    1804:	e8980003 	ldm	r8, {r0, r1}
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		audio_stream.queue_backs[i]->next = node;
	
	audio_stream.queue_backs[i] = node;
	
	//if the front of the list is null, the added node is also the front of the list
	if(audio_stream.queue_fronts[i] == NULL) audio_stream.queue_fronts[i] = node;
<<<<<<< HEAD
    1960:	e59de014 	ldr	lr, [sp, #20]
=======
    1808:	e59de014 	ldr	lr, [sp, #20]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	node->wave = get_chord_wave(current_chord);
	node->next = NULL;
	
	//append the node to the back of the queue
	if(audio_stream.queue_backs[i] != NULL)
<<<<<<< HEAD
    1964:	e592300c 	ldr	r3, [r2, #12]
=======
    180c:	e592300c 	ldr	r3, [r2, #12]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	//add a new node to the back of the respective queue
	struct MusicWaveNode * node = malloc(sizeof(struct MusicWaveNode));
	
	node->wave = get_chord_wave(current_chord);
	node->next = NULL;
<<<<<<< HEAD
    1968:	e3a02000 	mov	r2, #0
    196c:	e5892008 	str	r2, [r9, #8]
=======
    1810:	e3a02000 	mov	r2, #0
    1814:	e5892008 	str	r2, [r9, #8]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	struct MusicChord current_chord = current_track.music_chords[audio_stream.current_process_locations[i]];
	
	//add a new node to the back of the respective queue
	struct MusicWaveNode * node = malloc(sizeof(struct MusicWaveNode));
	
	node->wave = get_chord_wave(current_chord);
<<<<<<< HEAD
    1970:	e8890003 	stm	r9, {r0, r1}
=======
    1818:	e8890003 	stm	r9, {r0, r1}
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	node->next = NULL;
	
	//append the node to the back of the queue
	if(audio_stream.queue_backs[i] != NULL)
<<<<<<< HEAD
    1974:	e0832007 	add	r2, r3, r7
    1978:	e7933007 	ldr	r3, [r3, r7]
    197c:	e3530000 	cmp	r3, #0
		audio_stream.queue_backs[i]->next = node;
    1980:	15839008 	strne	r9, [r3, #8]
	
	audio_stream.queue_backs[i] = node;
    1984:	e5829000 	str	r9, [r2]
	
	//if the front of the list is null, the added node is also the front of the list
	if(audio_stream.queue_fronts[i] == NULL) audio_stream.queue_fronts[i] = node;
    1988:	e59e3008 	ldr	r3, [lr, #8]
    198c:	e7932007 	ldr	r2, [r3, r7]
    1990:	e3520000 	cmp	r2, #0
	
	//increment the location to be the next chord to be processed
	audio_stream.current_process_locations[i]++;
    1994:	e59d2014 	ldr	r2, [sp, #20]
=======
    181c:	e0832007 	add	r2, r3, r7
    1820:	e7933007 	ldr	r3, [r3, r7]
    1824:	e3530000 	cmp	r3, #0
		audio_stream.queue_backs[i]->next = node;
    1828:	15839008 	strne	r9, [r3, #8]
	
	audio_stream.queue_backs[i] = node;
    182c:	e5829000 	str	r9, [r2]
	
	//if the front of the list is null, the added node is also the front of the list
	if(audio_stream.queue_fronts[i] == NULL) audio_stream.queue_fronts[i] = node;
    1830:	e59e3008 	ldr	r3, [lr, #8]
    1834:	e7932007 	ldr	r2, [r3, r7]
    1838:	e3520000 	cmp	r2, #0
	
	//increment the location to be the next chord to be processed
	audio_stream.current_process_locations[i]++;
    183c:	e59d2014 	ldr	r2, [sp, #20]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		audio_stream.queue_backs[i]->next = node;
	
	audio_stream.queue_backs[i] = node;
	
	//if the front of the list is null, the added node is also the front of the list
	if(audio_stream.queue_fronts[i] == NULL) audio_stream.queue_fronts[i] = node;
<<<<<<< HEAD
    1998:	07839007 	streq	r9, [r3, r7]
=======
    1840:	07839007 	streq	r9, [r3, r7]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	//increment the location to be the next chord to be processed
	audio_stream.current_process_locations[i]++;
	
	//increase the duration of the audio stream by the duration of the chord just processed
	audio_stream.durations[i] += current_chord.duration;
<<<<<<< HEAD
    199c:	e1a03005 	mov	r3, r5
=======
    1844:	e1a03005 	mov	r3, r5
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	//if the front of the list is null, the added node is also the front of the list
	if(audio_stream.queue_fronts[i] == NULL) audio_stream.queue_fronts[i] = node;
	
	//increment the location to be the next chord to be processed
	audio_stream.current_process_locations[i]++;
<<<<<<< HEAD
    19a0:	e592c004 	ldr	r12, [r2, #4]
	
	//increase the duration of the audio stream by the duration of the chord just processed
	audio_stream.durations[i] += current_chord.duration;
    19a4:	e5928010 	ldr	r8, [r2, #16]
    19a8:	e1a02004 	mov	r2, r4
=======
    1848:	e592c004 	ldr	r12, [r2, #4]
	
	//increase the duration of the audio stream by the duration of the chord just processed
	audio_stream.durations[i] += current_chord.duration;
    184c:	e5928010 	ldr	r8, [r2, #16]
    1850:	e1a02004 	mov	r2, r4
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	//if the front of the list is null, the added node is also the front of the list
	if(audio_stream.queue_fronts[i] == NULL) audio_stream.queue_fronts[i] = node;
	
	//increment the location to be the next chord to be processed
	audio_stream.current_process_locations[i]++;
<<<<<<< HEAD
    19ac:	e79ce007 	ldr	lr, [r12, r7]
	
	//increase the duration of the audio stream by the duration of the chord just processed
	audio_stream.durations[i] += current_chord.duration;
    19b0:	e18800d6 	ldrd	r0, [r8, r6]
=======
    1854:	e79ce007 	ldr	lr, [r12, r7]
	
	//increase the duration of the audio stream by the duration of the chord just processed
	audio_stream.durations[i] += current_chord.duration;
    1858:	e18800d6 	ldrd	r0, [r8, r6]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	//if the front of the list is null, the added node is also the front of the list
	if(audio_stream.queue_fronts[i] == NULL) audio_stream.queue_fronts[i] = node;
	
	//increment the location to be the next chord to be processed
	audio_stream.current_process_locations[i]++;
<<<<<<< HEAD
    19b4:	e28ee001 	add	lr, lr, #1
    19b8:	e78ce007 	str	lr, [r12, r7]
	
	//increase the duration of the audio stream by the duration of the chord just processed
	audio_stream.durations[i] += current_chord.duration;
    19bc:	eb000f9c 	bl	5834 <__adddf3>
    19c0:	e18800f6 	strd	r0, [r8, r6]
    19c4:	eaffffcb 	b	18f8 <populate_stream+0xc4>
=======
    185c:	e28ee001 	add	lr, lr, #1
    1860:	e78ce007 	str	lr, [r12, r7]
	
	//increase the duration of the audio stream by the duration of the chord just processed
	audio_stream.durations[i] += current_chord.duration;
    1864:	eb000ee4 	bl	53fc <__adddf3>
    1868:	e18800f6 	strd	r0, [r8, r6]
    186c:	eaffffcb 	b	17a0 <populate_stream+0xc4>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    19c8:	e3a07000 	mov	r7, #0
    19cc:	e5939000 	ldr	r9, [r3]
    19d0:	e592b004 	ldr	r11, [r2, #4]
    19d4:	e1a03007 	mov	r3, r7
=======
    1870:	e3a07000 	mov	r7, #0
    1874:	e5939000 	ldr	r9, [r3]
    1878:	e592b004 	ldr	r11, [r2, #4]
    187c:	e1a03007 	mov	r3, r7
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	return true;
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
<<<<<<< HEAD
    19d8:	e1a06007 	mov	r6, r7
    19dc:	eaffffbf 	b	18e0 <populate_stream+0xac>

000019e0 <clear_stream>:
=======
    1880:	e1a06007 	mov	r6, r7
    1884:	eaffffbf 	b	1788 <populate_stream+0xac>

00001888 <clear_stream>:
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//increase the duration of the audio stream by the duration of the chord just processed
	audio_stream.durations[i] += current_chord.duration;
}

//clears the stream but keeps the current song the same
void clear_stream(){
<<<<<<< HEAD
    19e0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    19e4:	e303bf98 	movw	r11, #16280	; 0x3f98
    19e8:	e340b015 	movt	r11, #21
    19ec:	e59b3014 	ldr	r3, [r11, #20]
    19f0:	e5933004 	ldr	r3, [r3, #4]
    19f4:	e3530000 	cmp	r3, #0
    19f8:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
    19fc:	e3a08000 	mov	r8, #0
=======
    1888:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    188c:	e307b570 	movw	r11, #30064	; 0x7570
    1890:	e340b010 	movt	r11, #16
    1894:	e59b3014 	ldr	r3, [r11, #20]
    1898:	e5933004 	ldr	r3, [r3, #4]
    189c:	e3530000 	cmp	r3, #0
    18a0:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
    18a4:	e3a08000 	mov	r8, #0
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		
		//set all other variables pertaining to the respective track to zero
		audio_stream.queue_backs[i] = NULL;
		audio_stream.current_playback_locations[i] = 0;
		audio_stream.current_process_locations[i] = 0;
		audio_stream.durations[i] = 0;
<<<<<<< HEAD
    1a00:	e3a04000 	mov	r4, #0
    1a04:	e3a05000 	mov	r5, #0
=======
    18a8:	e3a04000 	mov	r4, #0
    18ac:	e3a05000 	mov	r5, #0
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		//advance the stream to the end
		while(audio_stream.queue_fronts[i] != NULL)
			advance_stream(&audio_stream.queue_fronts[i]);
		
		//set all other variables pertaining to the respective track to zero
		audio_stream.queue_backs[i] = NULL;
<<<<<<< HEAD
    1a08:	e1a0a008 	mov	r10, r8
=======
    18b0:	e1a0a008 	mov	r10, r8
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate

//clears the stream but keeps the current song the same
void clear_stream(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		//advance the stream to the end
		while(audio_stream.queue_fronts[i] != NULL)
<<<<<<< HEAD
    1a0c:	e59b6008 	ldr	r6, [r11, #8]
    1a10:	e1a07108 	lsl	r7, r8, #2
    1a14:	e7963108 	ldr	r3, [r6, r8, lsl #2]
    1a18:	e0866007 	add	r6, r6, r7
    1a1c:	e3530000 	cmp	r3, #0
    1a20:	0a00000a 	beq	1a50 <clear_stream+0x70>
=======
    18b4:	e59b6008 	ldr	r6, [r11, #8]
    18b8:	e1a07108 	lsl	r7, r8, #2
    18bc:	e7963108 	ldr	r3, [r6, r8, lsl #2]
    18c0:	e0866007 	add	r6, r6, r7
    18c4:	e3530000 	cmp	r3, #0
    18c8:	0a00000a 	beq	18f8 <clear_stream+0x70>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	}
}

void advance_stream(struct MusicWaveNode ** front_node){
	//save a copy of the pointer to the next node
	struct MusicWaveNode * next_node = (*front_node)->next;
<<<<<<< HEAD
    1a24:	e5939008 	ldr	r9, [r3, #8]
	
	//free the memory from both the waveform and the node
	free((*front_node)->wave.waveform);
    1a28:	e5930000 	ldr	r0, [r3]
    1a2c:	eb001249 	bl	6358 <free>
	free(*front_node);
    1a30:	e5960000 	ldr	r0, [r6]
    1a34:	eb001247 	bl	6358 <free>
	
	//reattach the rest of the queue to the front
	*front_node = next_node;
    1a38:	e5869000 	str	r9, [r6]
=======
    18cc:	e5939008 	ldr	r9, [r3, #8]
	
	//free the memory from both the waveform and the node
	free((*front_node)->wave.waveform);
    18d0:	e5930000 	ldr	r0, [r3]
    18d4:	eb001191 	bl	5f20 <free>
	free(*front_node);
    18d8:	e5960000 	ldr	r0, [r6]
    18dc:	eb00118f 	bl	5f20 <free>
	
	//reattach the rest of the queue to the front
	*front_node = next_node;
    18e0:	e5869000 	str	r9, [r6]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate

//clears the stream but keeps the current song the same
void clear_stream(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		//advance the stream to the end
		while(audio_stream.queue_fronts[i] != NULL)
<<<<<<< HEAD
    1a3c:	e59b6008 	ldr	r6, [r11, #8]
    1a40:	e7963007 	ldr	r3, [r6, r7]
    1a44:	e0866007 	add	r6, r6, r7
    1a48:	e3530000 	cmp	r3, #0
    1a4c:	1afffff4 	bne	1a24 <clear_stream+0x44>
=======
    18e4:	e59b6008 	ldr	r6, [r11, #8]
    18e8:	e7963007 	ldr	r3, [r6, r7]
    18ec:	e0866007 	add	r6, r6, r7
    18f0:	e3530000 	cmp	r3, #0
    18f4:	1afffff4 	bne	18cc <clear_stream+0x44>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
			advance_stream(&audio_stream.queue_fronts[i]);
		
		//set all other variables pertaining to the respective track to zero
		audio_stream.queue_backs[i] = NULL;
<<<<<<< HEAD
    1a50:	e59b200c 	ldr	r2, [r11, #12]
		audio_stream.current_playback_locations[i] = 0;
		audio_stream.current_process_locations[i] = 0;
		audio_stream.durations[i] = 0;
    1a54:	e1a03188 	lsl	r3, r8, #3
=======
    18f8:	e59b200c 	ldr	r2, [r11, #12]
		audio_stream.current_playback_locations[i] = 0;
		audio_stream.current_process_locations[i] = 0;
		audio_stream.durations[i] = 0;
    18fc:	e1a03188 	lsl	r3, r8, #3
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	audio_stream.durations[i] += current_chord.duration;
}

//clears the stream but keeps the current song the same
void clear_stream(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1a58:	e2888001 	add	r8, r8, #1
=======
    1900:	e2888001 	add	r8, r8, #1
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		//advance the stream to the end
		while(audio_stream.queue_fronts[i] != NULL)
			advance_stream(&audio_stream.queue_fronts[i]);
		
		//set all other variables pertaining to the respective track to zero
		audio_stream.queue_backs[i] = NULL;
<<<<<<< HEAD
    1a5c:	e782a007 	str	r10, [r2, r7]
=======
    1904:	e782a007 	str	r10, [r2, r7]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	audio_stream.durations[i] += current_chord.duration;
}

//clears the stream but keeps the current song the same
void clear_stream(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1a60:	e59b2014 	ldr	r2, [r11, #20]
=======
    1908:	e59b2014 	ldr	r2, [r11, #20]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
			advance_stream(&audio_stream.queue_fronts[i]);
		
		//set all other variables pertaining to the respective track to zero
		audio_stream.queue_backs[i] = NULL;
		audio_stream.current_playback_locations[i] = 0;
		audio_stream.current_process_locations[i] = 0;
<<<<<<< HEAD
    1a64:	e89b0003 	ldm	r11, {r0, r1}
=======
    190c:	e89b0003 	ldm	r11, {r0, r1}
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		while(audio_stream.queue_fronts[i] != NULL)
			advance_stream(&audio_stream.queue_fronts[i]);
		
		//set all other variables pertaining to the respective track to zero
		audio_stream.queue_backs[i] = NULL;
		audio_stream.current_playback_locations[i] = 0;
<<<<<<< HEAD
    1a68:	e780a007 	str	r10, [r0, r7]
		audio_stream.current_process_locations[i] = 0;
    1a6c:	e781a007 	str	r10, [r1, r7]
=======
    1910:	e780a007 	str	r10, [r0, r7]
		audio_stream.current_process_locations[i] = 0;
    1914:	e781a007 	str	r10, [r1, r7]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	audio_stream.durations[i] += current_chord.duration;
}

//clears the stream but keeps the current song the same
void clear_stream(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1a70:	e5921004 	ldr	r1, [r2, #4]
=======
    1918:	e5921004 	ldr	r1, [r2, #4]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		
		//set all other variables pertaining to the respective track to zero
		audio_stream.queue_backs[i] = NULL;
		audio_stream.current_playback_locations[i] = 0;
		audio_stream.current_process_locations[i] = 0;
		audio_stream.durations[i] = 0;
<<<<<<< HEAD
    1a74:	e59b2010 	ldr	r2, [r11, #16]
=======
    191c:	e59b2010 	ldr	r2, [r11, #16]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	audio_stream.durations[i] += current_chord.duration;
}

//clears the stream but keeps the current song the same
void clear_stream(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1a78:	e1510008 	cmp	r1, r8
=======
    1920:	e1510008 	cmp	r1, r8
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		
		//set all other variables pertaining to the respective track to zero
		audio_stream.queue_backs[i] = NULL;
		audio_stream.current_playback_locations[i] = 0;
		audio_stream.current_process_locations[i] = 0;
		audio_stream.durations[i] = 0;
<<<<<<< HEAD
    1a7c:	e18240f3 	strd	r4, [r2, r3]
=======
    1924:	e18240f3 	strd	r4, [r2, r3]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	audio_stream.durations[i] += current_chord.duration;
}

//clears the stream but keeps the current song the same
void clear_stream(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1a80:	8affffe1 	bhi	1a0c <clear_stream+0x2c>
    1a84:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

00001a88 <advance_stream>:
=======
    1928:	8affffe1 	bhi	18b4 <clear_stream+0x2c>
    192c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

00001930 <advance_stream>:
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		audio_stream.current_process_locations[i] = 0;
		audio_stream.durations[i] = 0;
	}
}

void advance_stream(struct MusicWaveNode ** front_node){
<<<<<<< HEAD
    1a88:	e92d4038 	push	{r3, r4, r5, lr}
    1a8c:	e1a04000 	mov	r4, r0
	//save a copy of the pointer to the next node
	struct MusicWaveNode * next_node = (*front_node)->next;
    1a90:	e5903000 	ldr	r3, [r0]
    1a94:	e5935008 	ldr	r5, [r3, #8]
	
	//free the memory from both the waveform and the node
	free((*front_node)->wave.waveform);
    1a98:	e5930000 	ldr	r0, [r3]
    1a9c:	eb00122d 	bl	6358 <free>
	free(*front_node);
    1aa0:	e5940000 	ldr	r0, [r4]
    1aa4:	eb00122b 	bl	6358 <free>
	
	//reattach the rest of the queue to the front
	*front_node = next_node;
    1aa8:	e5845000 	str	r5, [r4]
    1aac:	e8bd8038 	pop	{r3, r4, r5, pc}

00001ab0 <is_stream_valid>:
=======
    1930:	e92d4038 	push	{r3, r4, r5, lr}
    1934:	e1a04000 	mov	r4, r0
	//save a copy of the pointer to the next node
	struct MusicWaveNode * next_node = (*front_node)->next;
    1938:	e5903000 	ldr	r3, [r0]
    193c:	e5935008 	ldr	r5, [r3, #8]
	
	//free the memory from both the waveform and the node
	free((*front_node)->wave.waveform);
    1940:	e5930000 	ldr	r0, [r3]
    1944:	eb001175 	bl	5f20 <free>
	free(*front_node);
    1948:	e5940000 	ldr	r0, [r4]
    194c:	eb001173 	bl	5f20 <free>
	
	//reattach the rest of the queue to the front
	*front_node = next_node;
    1950:	e5845000 	str	r5, [r4]
    1954:	e8bd8038 	pop	{r3, r4, r5, pc}

00001958 <is_stream_valid>:
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
}

bool is_stream_valid(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1ab0:	e3033f98 	movw	r3, #16280	; 0x3f98
=======
    1958:	e3073570 	movw	r3, #30064	; 0x7570
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	//reattach the rest of the queue to the front
	*front_node = next_node;
}

bool is_stream_valid(){
<<<<<<< HEAD
    1ab4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
	//stream is invalid if any one of the queues are empty and the track for that queue is not fully processed yet
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    1ab8:	e3403015 	movt	r3, #21
    1abc:	e5937014 	ldr	r7, [r3, #20]
    1ac0:	e597c004 	ldr	r12, [r7, #4]
    1ac4:	e35c0000 	cmp	r12, #0
    1ac8:	0a00001f 	beq	1b4c <is_stream_valid+0x9c>
=======
    195c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    1960:	e3403010 	movt	r3, #16
    1964:	e5937014 	ldr	r7, [r3, #20]
    1968:	e597c004 	ldr	r12, [r7, #4]
    196c:	e35c0000 	cmp	r12, #0
    1970:	0a000015 	beq	19cc <is_stream_valid+0x74>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
<<<<<<< HEAD
    1acc:	e3a01000 	mov	r1, #0
    1ad0:	e5934008 	ldr	r4, [r3, #8]
    1ad4:	e5938004 	ldr	r8, [r3, #4]
=======
    1974:	e3a01000 	mov	r1, #0
    1978:	e5934008 	ldr	r4, [r3, #8]
    197c:	e5938004 	ldr	r8, [r3, #4]
	//reattach the rest of the queue to the front
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	*front_node = next_node;
}

bool is_stream_valid(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1ad8:	e1a02001 	mov	r2, r1
=======
    1980:	e1a02001 	mov	r2, r1
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
<<<<<<< HEAD
    1adc:	e1a03001 	mov	r3, r1
    1ae0:	ea000003 	b	1af4 <is_stream_valid+0x44>
=======
    1984:	e1a03001 	mov	r3, r1
    1988:	ea000003 	b	199c <is_stream_valid+0x44>
	//reattach the rest of the queue to the front
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	*front_node = next_node;
}

bool is_stream_valid(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1ae4:	e152000c 	cmp	r2, r12
    1ae8:	e2833004 	add	r3, r3, #4
    1aec:	e281100c 	add	r1, r1, #12
    1af0:	0a00000b 	beq	1b24 <is_stream_valid+0x74>
		if(audio_stream.queue_fronts[i] == NULL && !is_track_fully_processed(i)) return false;
    1af4:	e7940003 	ldr	r0, [r4, r3]
=======
    198c:	e152000c 	cmp	r2, r12
    1990:	e2833004 	add	r3, r3, #4
    1994:	e281100c 	add	r1, r1, #12
    1998:	0a00000b 	beq	19cc <is_stream_valid+0x74>
		if(audio_stream.queue_fronts[i] == NULL && !is_track_fully_processed(i)) return false;
    199c:	e7940003 	ldr	r0, [r4, r3]
	//reattach the rest of the queue to the front
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	*front_node = next_node;
}

bool is_stream_valid(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1af8:	e2822001 	add	r2, r2, #1
		if(audio_stream.queue_fronts[i] == NULL && !is_track_fully_processed(i)) return false;
    1afc:	e3500000 	cmp	r0, #0
    1b00:	1afffff7 	bne	1ae4 <is_stream_valid+0x34>
=======
    19a0:	e2822001 	add	r2, r2, #1
		if(audio_stream.queue_fronts[i] == NULL && !is_track_fully_processed(i)) return false;
    19a4:	e3500000 	cmp	r0, #0
    19a8:	1afffff7 	bne	198c <is_stream_valid+0x34>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
<<<<<<< HEAD
    1b04:	e5975000 	ldr	r5, [r7]
=======
    19ac:	e5975000 	ldr	r5, [r7]
	*front_node = next_node;
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
}

bool is_stream_valid(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		if(audio_stream.queue_fronts[i] == NULL && !is_track_fully_processed(i)) return false;
<<<<<<< HEAD
    1b08:	e7986003 	ldr	r6, [r8, r3]
=======
    19b0:	e7986003 	ldr	r6, [r8, r3]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
<<<<<<< HEAD
    1b0c:	e0855001 	add	r5, r5, r1
=======
    19b4:	e0855001 	add	r5, r5, r1
	*front_node = next_node;
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
}

bool is_stream_valid(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		if(audio_stream.queue_fronts[i] == NULL && !is_track_fully_processed(i)) return false;
<<<<<<< HEAD
    1b10:	e5955008 	ldr	r5, [r5, #8]
    1b14:	e1560005 	cmp	r6, r5
    1b18:	2afffff1 	bcs	1ae4 <is_stream_valid+0x34>
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		if(audio_stream.queue_fronts[i] != NULL) return true;
=======
    19b8:	e5955008 	ldr	r5, [r5, #8]
    19bc:	e1560005 	cmp	r6, r5
    19c0:	2afffff1 	bcs	198c <is_stream_valid+0x34>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	}
	
	return true;
}
<<<<<<< HEAD
    1b1c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    1b20:	e12fff1e 	bx	lr
		if(audio_stream.queue_fronts[i] == NULL && !is_track_fully_processed(i)) return false;
	}
	
	//or if all the queues are empty
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		if(audio_stream.queue_fronts[i] != NULL) return true;
    1b24:	e5943000 	ldr	r3, [r4]
    1b28:	e3530000 	cmp	r3, #0
    1b2c:	0a000003 	beq	1b40 <is_stream_valid+0x90>
    1b30:	ea000007 	b	1b54 <is_stream_valid+0xa4>
    1b34:	e5b42004 	ldr	r2, [r4, #4]!
    1b38:	e3520000 	cmp	r2, #0
    1b3c:	1a000004 	bne	1b54 <is_stream_valid+0xa4>
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		if(audio_stream.queue_fronts[i] == NULL && !is_track_fully_processed(i)) return false;
	}
	
	//or if all the queues are empty
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    1b40:	e2833001 	add	r3, r3, #1
    1b44:	e153000c 	cmp	r3, r12
    1b48:	1afffff9 	bne	1b34 <is_stream_valid+0x84>
		if(audio_stream.queue_fronts[i] != NULL) return true;
	}
	
	return false;
    1b4c:	e3a00000 	mov	r0, #0
    1b50:	eafffff1 	b	1b1c <is_stream_valid+0x6c>
		if(audio_stream.queue_fronts[i] == NULL && !is_track_fully_processed(i)) return false;
	}
	
	//or if all the queues are empty
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		if(audio_stream.queue_fronts[i] != NULL) return true;
    1b54:	e3a00001 	mov	r0, #1
    1b58:	eaffffef 	b	1b1c <is_stream_valid+0x6c>

00001b5c <is_track_fully_processed>:
	
	return false;
=======
    19c4:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    19c8:	e12fff1e 	bx	lr
bool is_stream_valid(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		if(audio_stream.queue_fronts[i] == NULL && !is_track_fully_processed(i)) return false;
	}
	
	return true;
    19cc:	e3a00001 	mov	r0, #1
    19d0:	eafffffb 	b	19c4 <is_stream_valid+0x6c>

000019d4 <is_track_fully_processed>:
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
}

bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
<<<<<<< HEAD
    1b5c:	e3033f98 	movw	r3, #16280	; 0x3f98
    1b60:	e0802080 	add	r2, r0, r0, lsl #1
    1b64:	e3403015 	movt	r3, #21
    1b68:	e593c014 	ldr	r12, [r3, #20]
    1b6c:	e5931004 	ldr	r1, [r3, #4]
    1b70:	e59c3000 	ldr	r3, [r12]
    1b74:	e7910100 	ldr	r0, [r1, r0, lsl #2]
    1b78:	e0833102 	add	r3, r3, r2, lsl #2
    1b7c:	e5933008 	ldr	r3, [r3, #8]
}
    1b80:	e1500003 	cmp	r0, r3
    1b84:	33a00000 	movcc	r0, #0
    1b88:	23a00001 	movcs	r0, #1
    1b8c:	e12fff1e 	bx	lr

00001b90 <is_stream_fully_processed>:

bool is_stream_fully_processed(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    1b90:	e3033f98 	movw	r3, #16280	; 0x3f98
=======
    19d4:	e3073570 	movw	r3, #30064	; 0x7570
    19d8:	e0802080 	add	r2, r0, r0, lsl #1
    19dc:	e3403010 	movt	r3, #16
    19e0:	e593c014 	ldr	r12, [r3, #20]
    19e4:	e5931004 	ldr	r1, [r3, #4]
    19e8:	e59c3000 	ldr	r3, [r12]
    19ec:	e7910100 	ldr	r0, [r1, r0, lsl #2]
    19f0:	e0833102 	add	r3, r3, r2, lsl #2
    19f4:	e5933008 	ldr	r3, [r3, #8]
}
    19f8:	e1500003 	cmp	r0, r3
    19fc:	33a00000 	movcc	r0, #0
    1a00:	23a00001 	movcs	r0, #1
    1a04:	e12fff1e 	bx	lr

00001a08 <is_stream_fully_processed>:

bool is_stream_fully_processed(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    1a08:	e3073570 	movw	r3, #30064	; 0x7570
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate

bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
}

bool is_stream_fully_processed(){
<<<<<<< HEAD
    1b94:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    1b98:	e3403015 	movt	r3, #21
    1b9c:	e5932014 	ldr	r2, [r3, #20]
    1ba0:	e5924004 	ldr	r4, [r2, #4]
    1ba4:	e3540000 	cmp	r4, #0
    1ba8:	0a00000f 	beq	1bec <is_stream_fully_processed+0x5c>
=======
    1a0c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
    1a10:	e3403010 	movt	r3, #16
    1a14:	e5932014 	ldr	r2, [r3, #20]
    1a18:	e5924004 	ldr	r4, [r2, #4]
    1a1c:	e3540000 	cmp	r4, #0
    1a20:	0a00000f 	beq	1a64 <is_stream_fully_processed+0x5c>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
<<<<<<< HEAD
    1bac:	e5931004 	ldr	r1, [r3, #4]
    1bb0:	e5922000 	ldr	r2, [r2]
=======
    1a24:	e5931004 	ldr	r1, [r3, #4]
    1a28:	e5922000 	ldr	r2, [r2]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
}

bool is_stream_fully_processed(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i))
<<<<<<< HEAD
    1bb4:	e5910000 	ldr	r0, [r1]
    1bb8:	e5923008 	ldr	r3, [r2, #8]
    1bbc:	e1500003 	cmp	r0, r3
    1bc0:	3a00000c 	bcc	1bf8 <is_stream_fully_processed+0x68>
=======
    1a2c:	e5910000 	ldr	r0, [r1]
    1a30:	e5923008 	ldr	r3, [r2, #8]
    1a34:	e1500003 	cmp	r0, r3
    1a38:	3a00000c 	bcc	1a70 <is_stream_fully_processed+0x68>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
}

bool is_stream_fully_processed(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1bc4:	e3a03000 	mov	r3, #0
    1bc8:	ea000003 	b	1bdc <is_stream_fully_processed+0x4c>
=======
    1a3c:	e3a03000 	mov	r3, #0
    1a40:	ea000003 	b	1a54 <is_stream_fully_processed+0x4c>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
<<<<<<< HEAD
    1bcc:	e5b1c004 	ldr	r12, [r1, #4]!
=======
    1a44:	e5b1c004 	ldr	r12, [r1, #4]!
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
}

bool is_stream_fully_processed(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i))
<<<<<<< HEAD
    1bd0:	e5920008 	ldr	r0, [r2, #8]
    1bd4:	e15c0000 	cmp	r12, r0
    1bd8:	3a000006 	bcc	1bf8 <is_stream_fully_processed+0x68>
=======
    1a48:	e5920008 	ldr	r0, [r2, #8]
    1a4c:	e15c0000 	cmp	r12, r0
    1a50:	3a000006 	bcc	1a70 <is_stream_fully_processed+0x68>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
}

bool is_stream_fully_processed(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1bdc:	e2833001 	add	r3, r3, #1
    1be0:	e282200c 	add	r2, r2, #12
    1be4:	e1530004 	cmp	r3, r4
    1be8:	1afffff7 	bne	1bcc <is_stream_fully_processed+0x3c>
=======
    1a54:	e2833001 	add	r3, r3, #1
    1a58:	e282200c 	add	r2, r2, #12
    1a5c:	e1530004 	cmp	r3, r4
    1a60:	1afffff7 	bne	1a44 <is_stream_fully_processed+0x3c>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		if(!is_track_fully_processed(i))
			return false;
	}
	
	return true;
<<<<<<< HEAD
    1bec:	e3a00001 	mov	r0, #1
}
    1bf0:	e8bd0010 	ldmfd	sp!, {r4}
    1bf4:	e12fff1e 	bx	lr
=======
    1a64:	e3a00001 	mov	r0, #1
}
    1a68:	e8bd0010 	ldmfd	sp!, {r4}
    1a6c:	e12fff1e 	bx	lr
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
}

bool is_stream_fully_processed(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i))
			return false;
<<<<<<< HEAD
    1bf8:	e3a00000 	mov	r0, #0
    1bfc:	eafffffb 	b	1bf0 <is_stream_fully_processed+0x60>

00001c00 <get_next_processed_track>:
=======
    1a70:	e3a00000 	mov	r0, #0
    1a74:	eafffffb 	b	1a68 <is_stream_fully_processed+0x60>

00001a78 <get_next_processed_track>:
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
<<<<<<< HEAD
    1c00:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
    1c04:	e3033f98 	movw	r3, #16280	; 0x3f98
    1c08:	e3403015 	movt	r3, #21
    1c0c:	e5932014 	ldr	r2, [r3, #20]
    1c10:	e5928004 	ldr	r8, [r2, #4]
    1c14:	e3580001 	cmp	r8, #1
    1c18:	9a00001f 	bls	1c9c <get_next_processed_track+0x9c>
    1c1c:	e5939004 	ldr	r9, [r3, #4]
    1c20:	e3a04001 	mov	r4, #1
    1c24:	e592a000 	ldr	r10, [r2]
=======
    1a78:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
    1a7c:	e3073570 	movw	r3, #30064	; 0x7570
    1a80:	e3403010 	movt	r3, #16
    1a84:	e5932014 	ldr	r2, [r3, #20]
    1a88:	e5928004 	ldr	r8, [r2, #4]
    1a8c:	e3580001 	cmp	r8, #1
    1a90:	9a00001f 	bls	1b14 <get_next_processed_track+0x9c>
    1a94:	e5939004 	ldr	r9, [r3, #4]
    1a98:	e3a04001 	mov	r4, #1
    1a9c:	e592a000 	ldr	r10, [r2]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	return true;
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
<<<<<<< HEAD
    1c28:	e3a06000 	mov	r6, #0
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i)
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
    1c2c:	e593b010 	ldr	r11, [r3, #16]
    1c30:	e1a07009 	mov	r7, r9
=======
    1aa0:	e3a06000 	mov	r6, #0
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i)
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
    1aa4:	e593b010 	ldr	r11, [r3, #16]
    1aa8:	e1a07009 	mov	r7, r9
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
<<<<<<< HEAD
    1c34:	e28a500c 	add	r5, r10, #12
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i)
    1c38:	e5953008 	ldr	r3, [r5, #8]
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
    1c3c:	e1a0c186 	lsl	r12, r6, #3
=======
    1aac:	e28a500c 	add	r5, r10, #12
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i)
    1ab0:	e5953008 	ldr	r3, [r5, #8]
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
    1ab4:	e1a0c186 	lsl	r12, r6, #3
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
<<<<<<< HEAD
    1c40:	e5b72004 	ldr	r2, [r7, #4]!
=======
    1ab8:	e5b72004 	ldr	r2, [r7, #4]!
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
<<<<<<< HEAD
    1c44:	e1a01184 	lsl	r1, r4, #3
    1c48:	f5d5f05c 	pld	[r5, #92]	; 0x5c
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i)
    1c4c:	e1520003 	cmp	r2, r3
    1c50:	2a00000b 	bcs	1c84 <get_next_processed_track+0x84>
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
    1c54:	e18b20dc 	ldrd	r2, [r11, r12]
    1c58:	e18100db 	ldrd	r0, [r1, r11]
    1c5c:	eb001158 	bl	61c4 <__aeabi_dcmplt>
=======
    1abc:	e1a01184 	lsl	r1, r4, #3
    1ac0:	f5d5f05c 	pld	[r5, #92]	; 0x5c
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i)
    1ac4:	e1520003 	cmp	r2, r3
    1ac8:	2a00000b 	bcs	1afc <get_next_processed_track+0x84>
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
    1acc:	e18b20dc 	ldrd	r2, [r11, r12]
    1ad0:	e18100db 	ldrd	r0, [r1, r11]
    1ad4:	eb0010ac 	bl	5d8c <__aeabi_dcmplt>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
<<<<<<< HEAD
    1c60:	e0863086 	add	r3, r6, r6, lsl #1
=======
    1ad8:	e0863086 	add	r3, r6, r6, lsl #1
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i)
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
<<<<<<< HEAD
    1c64:	e3500000 	cmp	r0, #0
    1c68:	11a06004 	movne	r6, r4
=======
    1adc:	e3500000 	cmp	r0, #0
    1ae0:	11a06004 	movne	r6, r4
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
<<<<<<< HEAD
    1c6c:	e08a3103 	add	r3, r10, r3, lsl #2
=======
    1ae4:	e08a3103 	add	r3, r10, r3, lsl #2
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i)
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
<<<<<<< HEAD
    1c70:	1a000003 	bne	1c84 <get_next_processed_track+0x84>
    1c74:	e7992106 	ldr	r2, [r9, r6, lsl #2]
    1c78:	e5933008 	ldr	r3, [r3, #8]
    1c7c:	e1520003 	cmp	r2, r3
    1c80:	21a06004 	movcs	r6, r4
=======
    1ae8:	1a000003 	bne	1afc <get_next_processed_track+0x84>
    1aec:	e7992106 	ldr	r2, [r9, r6, lsl #2]
    1af0:	e5933008 	ldr	r3, [r3, #8]
    1af4:	e1520003 	cmp	r2, r3
    1af8:	21a06004 	movcs	r6, r4
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1c84:	e2844001 	add	r4, r4, #1
    1c88:	e285500c 	add	r5, r5, #12
    1c8c:	e1540008 	cmp	r4, r8
    1c90:	1affffe8 	bne	1c38 <get_next_processed_track+0x38>
=======
    1afc:	e2844001 	add	r4, r4, #1
    1b00:	e285500c 	add	r5, r5, #12
    1b04:	e1540008 	cmp	r4, r8
    1b08:	1affffe8 	bne	1ab0 <get_next_processed_track+0x38>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
			shortest_duration_index = i;
		}
	}
	
	return shortest_duration_index;
}
<<<<<<< HEAD
    1c94:	e1a00006 	mov	r0, r6
    1c98:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
=======
    1b0c:	e1a00006 	mov	r0, r6
    1b10:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	return true;
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
<<<<<<< HEAD
    1c9c:	e3a06000 	mov	r6, #0
    1ca0:	eafffffb 	b	1c94 <get_next_processed_track+0x94>

00001ca4 <get_time_left>:
=======
    1b14:	e3a06000 	mov	r6, #0
    1b18:	eafffffb 	b	1b0c <get_next_processed_track+0x94>

00001b1c <get_time_left>:
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return shortest_duration_index;
}

//finds the track with the least processed time if still processing or most processed time if finished processing and returns the duration of it
double get_time_left(){
<<<<<<< HEAD
    1ca4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
=======
    1b1c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
}

bool is_stream_fully_processed(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1ca8:	e3034f98 	movw	r4, #16280	; 0x3f98
    1cac:	e3404015 	movt	r4, #21
=======
    1b20:	e3074570 	movw	r4, #30064	; 0x7570
    1b24:	e3404010 	movt	r4, #16
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return shortest_duration_index;
}

//finds the track with the least processed time if still processing or most processed time if finished processing and returns the duration of it
double get_time_left(){
<<<<<<< HEAD
    1cb0:	e24dd014 	sub	sp, sp, #20
=======
    1b28:	e24dd014 	sub	sp, sp, #20
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
}

bool is_stream_fully_processed(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1cb4:	e5943014 	ldr	r3, [r4, #20]
    1cb8:	e593b004 	ldr	r11, [r3, #4]
    1cbc:	e35b0000 	cmp	r11, #0
    1cc0:	0a000085 	beq	1edc <get_time_left+0x238>
=======
    1b2c:	e5943014 	ldr	r3, [r4, #20]
    1b30:	e593b004 	ldr	r11, [r3, #4]
    1b34:	e35b0000 	cmp	r11, #0
    1b38:	0a000085 	beq	1d54 <get_time_left+0x238>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
<<<<<<< HEAD
    1cc4:	e5940004 	ldr	r0, [r4, #4]
    1cc8:	e5935000 	ldr	r5, [r3]
=======
    1b3c:	e5940004 	ldr	r0, [r4, #4]
    1b40:	e5935000 	ldr	r5, [r3]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
}

bool is_stream_fully_processed(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i))
<<<<<<< HEAD
    1ccc:	e5902000 	ldr	r2, [r0]
    1cd0:	e5953008 	ldr	r3, [r5, #8]
=======
    1b44:	e5902000 	ldr	r2, [r0]
    1b48:	e5953008 	ldr	r3, [r5, #8]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
<<<<<<< HEAD
    1cd4:	e58d0008 	str	r0, [sp, #8]
=======
    1b4c:	e58d0008 	str	r0, [sp, #8]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
}

bool is_stream_fully_processed(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i))
<<<<<<< HEAD
    1cd8:	e1520003 	cmp	r2, r3
    1cdc:	21a01000 	movcs	r1, r0
    1ce0:	21a02005 	movcs	r2, r5
    1ce4:	23a03000 	movcs	r3, #0
    1ce8:	2a000004 	bcs	1d00 <get_time_left+0x5c>
    1cec:	ea000052 	b	1e3c <get_time_left+0x198>
=======
    1b50:	e1520003 	cmp	r2, r3
    1b54:	21a01000 	movcs	r1, r0
    1b58:	21a02005 	movcs	r2, r5
    1b5c:	23a03000 	movcs	r3, #0
    1b60:	2a000004 	bcs	1b78 <get_time_left+0x5c>
    1b64:	ea000052 	b	1cb4 <get_time_left+0x198>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
<<<<<<< HEAD
    1cf0:	e5b1c004 	ldr	r12, [r1, #4]!
=======
    1b68:	e5b1c004 	ldr	r12, [r1, #4]!
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
}

bool is_stream_fully_processed(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i))
<<<<<<< HEAD
    1cf4:	e5920008 	ldr	r0, [r2, #8]
    1cf8:	e15c0000 	cmp	r12, r0
    1cfc:	3a00004e 	bcc	1e3c <get_time_left+0x198>
=======
    1b6c:	e5920008 	ldr	r0, [r2, #8]
    1b70:	e15c0000 	cmp	r12, r0
    1b74:	3a00004e 	bcc	1cb4 <get_time_left+0x198>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
}

bool is_stream_fully_processed(){
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1d00:	e2833001 	add	r3, r3, #1
    1d04:	e282200c 	add	r2, r2, #12
    1d08:	e153000b 	cmp	r3, r11
    1d0c:	1afffff7 	bne	1cf0 <get_time_left+0x4c>
=======
    1b78:	e2833001 	add	r3, r3, #1
    1b7c:	e282200c 	add	r2, r2, #12
    1b80:	e153000b 	cmp	r3, r11
    1b84:	1afffff7 	bne	1b68 <get_time_left+0x4c>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate

//finds the track with the least processed time if still processing or most processed time if finished processing and returns the duration of it
double get_time_left(){
	unsigned int track_index = 0;
	if(is_stream_fully_processed()){
		for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1d10:	e3530001 	cmp	r3, #1
    1d14:	0a000070 	beq	1edc <get_time_left+0x238>
    1d18:	e5944010 	ldr	r4, [r4, #16]
    1d1c:	e35b0005 	cmp	r11, #5
=======
    1b88:	e3530001 	cmp	r3, #1
    1b8c:	0a000070 	beq	1d54 <get_time_left+0x238>
    1b90:	e5944010 	ldr	r4, [r4, #16]
    1b94:	e35b0005 	cmp	r11, #5
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return shortest_duration_index;
}

//finds the track with the least processed time if still processing or most processed time if finished processing and returns the duration of it
double get_time_left(){
<<<<<<< HEAD
    1d20:	e24b9003 	sub	r9, r11, #3
    1d24:	93a05001 	movls	r5, #1
    1d28:	e58d4000 	str	r4, [sp]
    1d2c:	e1c460d0 	ldrd	r6, [r4]
    1d30:	9a00002c 	bls	1de8 <get_time_left+0x144>
    1d34:	e1a08004 	mov	r8, r4
    1d38:	e3a0a001 	mov	r10, #1
=======
    1b98:	e24b9003 	sub	r9, r11, #3
    1b9c:	93a05001 	movls	r5, #1
    1ba0:	e58d4000 	str	r4, [sp]
    1ba4:	e1c460d0 	ldrd	r6, [r4]
    1ba8:	9a00002c 	bls	1c60 <get_time_left+0x144>
    1bac:	e1a08004 	mov	r8, r4
    1bb0:	e3a0a001 	mov	r10, #1
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	unsigned int track_index = 0;
	if(is_stream_fully_processed()){
		for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
			if(audio_stream.durations[i] > audio_stream.durations[track_index]){
<<<<<<< HEAD
    1d3c:	e1c840d8 	ldrd	r4, [r8, #8]
    1d40:	e1a02006 	mov	r2, r6
    1d44:	e1a03007 	mov	r3, r7
    1d48:	f5d8f0c0 	pld	[r8, #192]	; 0xc0
    1d4c:	e2888020 	add	r8, r8, #32
    1d50:	e1a01005 	mov	r1, r5
    1d54:	e1a00004 	mov	r0, r4
    1d58:	eb00112b 	bl	620c <__aeabi_dcmpgt>
    1d5c:	e3500000 	cmp	r0, #0
    1d60:	11a06004 	movne	r6, r4
    1d64:	11a07005 	movne	r7, r5
    1d68:	e14841d0 	ldrd	r4, [r8, #-16]
    1d6c:	e1a02006 	mov	r2, r6
    1d70:	e1a03007 	mov	r3, r7
    1d74:	e1a01005 	mov	r1, r5
    1d78:	e1a00004 	mov	r0, r4
    1d7c:	eb001122 	bl	620c <__aeabi_dcmpgt>
    1d80:	e3500000 	cmp	r0, #0
    1d84:	11a06004 	movne	r6, r4
    1d88:	11a07005 	movne	r7, r5
    1d8c:	e14840d8 	ldrd	r4, [r8, #-8]
    1d90:	e1a01007 	mov	r1, r7
    1d94:	e1a00006 	mov	r0, r6
    1d98:	e1a02004 	mov	r2, r4
    1d9c:	e1a03005 	mov	r3, r5
    1da0:	eb001107 	bl	61c4 <__aeabi_dcmplt>
    1da4:	e3500000 	cmp	r0, #0
    1da8:	11a06004 	movne	r6, r4
    1dac:	11a07005 	movne	r7, r5
    1db0:	e1c840d0 	ldrd	r4, [r8]
    1db4:	e1a00006 	mov	r0, r6
    1db8:	e1a01007 	mov	r1, r7
    1dbc:	e1a03005 	mov	r3, r5
    1dc0:	e1a02004 	mov	r2, r4
    1dc4:	eb0010fe 	bl	61c4 <__aeabi_dcmplt>
    1dc8:	e28a3005 	add	r3, r10, #5
    1dcc:	e3500000 	cmp	r0, #0
    1dd0:	11a07005 	movne	r7, r5
    1dd4:	11a06004 	movne	r6, r4
    1dd8:	e1590003 	cmp	r9, r3
=======
    1bb4:	e1c840d8 	ldrd	r4, [r8, #8]
    1bb8:	e1a02006 	mov	r2, r6
    1bbc:	e1a03007 	mov	r3, r7
    1bc0:	f5d8f0c0 	pld	[r8, #192]	; 0xc0
    1bc4:	e2888020 	add	r8, r8, #32
    1bc8:	e1a01005 	mov	r1, r5
    1bcc:	e1a00004 	mov	r0, r4
    1bd0:	eb00107f 	bl	5dd4 <__aeabi_dcmpgt>
    1bd4:	e3500000 	cmp	r0, #0
    1bd8:	11a06004 	movne	r6, r4
    1bdc:	11a07005 	movne	r7, r5
    1be0:	e14841d0 	ldrd	r4, [r8, #-16]
    1be4:	e1a02006 	mov	r2, r6
    1be8:	e1a03007 	mov	r3, r7
    1bec:	e1a01005 	mov	r1, r5
    1bf0:	e1a00004 	mov	r0, r4
    1bf4:	eb001076 	bl	5dd4 <__aeabi_dcmpgt>
    1bf8:	e3500000 	cmp	r0, #0
    1bfc:	11a06004 	movne	r6, r4
    1c00:	11a07005 	movne	r7, r5
    1c04:	e14840d8 	ldrd	r4, [r8, #-8]
    1c08:	e1a01007 	mov	r1, r7
    1c0c:	e1a00006 	mov	r0, r6
    1c10:	e1a02004 	mov	r2, r4
    1c14:	e1a03005 	mov	r3, r5
    1c18:	eb00105b 	bl	5d8c <__aeabi_dcmplt>
    1c1c:	e3500000 	cmp	r0, #0
    1c20:	11a06004 	movne	r6, r4
    1c24:	11a07005 	movne	r7, r5
    1c28:	e1c840d0 	ldrd	r4, [r8]
    1c2c:	e1a00006 	mov	r0, r6
    1c30:	e1a01007 	mov	r1, r7
    1c34:	e1a03005 	mov	r3, r5
    1c38:	e1a02004 	mov	r2, r4
    1c3c:	eb001052 	bl	5d8c <__aeabi_dcmplt>
    1c40:	e28a3005 	add	r3, r10, #5
    1c44:	e3500000 	cmp	r0, #0
    1c48:	11a07005 	movne	r7, r5
    1c4c:	11a06004 	movne	r6, r4
    1c50:	e1590003 	cmp	r9, r3
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate

//finds the track with the least processed time if still processing or most processed time if finished processing and returns the duration of it
double get_time_left(){
	unsigned int track_index = 0;
	if(is_stream_fully_processed()){
		for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1ddc:	e28a5004 	add	r5, r10, #4
    1de0:	e1a0a005 	mov	r10, r5
    1de4:	8affffd4 	bhi	1d3c <get_time_left+0x98>
=======
    1c54:	e28a5004 	add	r5, r10, #4
    1c58:	e1a0a005 	mov	r10, r5
    1c5c:	8affffd4 	bhi	1bb4 <get_time_left+0x98>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return shortest_duration_index;
}

//finds the track with the least processed time if still processing or most processed time if finished processing and returns the duration of it
double get_time_left(){
<<<<<<< HEAD
    1de8:	e59d1000 	ldr	r1, [sp]
    1dec:	e2454001 	sub	r4, r5, #1
    1df0:	e0814184 	add	r4, r1, r4, lsl #3
=======
    1c60:	e59d1000 	ldr	r1, [sp]
    1c64:	e2454001 	sub	r4, r5, #1
    1c68:	e0814184 	add	r4, r1, r4, lsl #3
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	unsigned int track_index = 0;
	if(is_stream_fully_processed()){
		for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
			if(audio_stream.durations[i] > audio_stream.durations[track_index]){
<<<<<<< HEAD
    1df4:	e1e480d8 	ldrd	r8, [r4, #8]!
    1df8:	e1a02006 	mov	r2, r6
    1dfc:	e1a03007 	mov	r3, r7
=======
    1c6c:	e1e480d8 	ldrd	r8, [r4, #8]!
    1c70:	e1a02006 	mov	r2, r6
    1c74:	e1a03007 	mov	r3, r7
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate

//finds the track with the least processed time if still processing or most processed time if finished processing and returns the duration of it
double get_time_left(){
	unsigned int track_index = 0;
	if(is_stream_fully_processed()){
		for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1e00:	e2855001 	add	r5, r5, #1
    1e04:	e1a00008 	mov	r0, r8
    1e08:	e1a01009 	mov	r1, r9
    1e0c:	eb0010fe 	bl	620c <__aeabi_dcmpgt>
    1e10:	e3500000 	cmp	r0, #0
    1e14:	01a08006 	moveq	r8, r6
    1e18:	01a09007 	moveq	r9, r7
    1e1c:	e15b0005 	cmp	r11, r5
    1e20:	e1a06008 	mov	r6, r8
    1e24:	e1a07009 	mov	r7, r9
    1e28:	8afffff1 	bhi	1df4 <get_time_left+0x150>
=======
    1c78:	e2855001 	add	r5, r5, #1
    1c7c:	e1a00008 	mov	r0, r8
    1c80:	e1a01009 	mov	r1, r9
    1c84:	eb001052 	bl	5dd4 <__aeabi_dcmpgt>
    1c88:	e3500000 	cmp	r0, #0
    1c8c:	01a08006 	moveq	r8, r6
    1c90:	01a09007 	moveq	r9, r7
    1c94:	e15b0005 	cmp	r11, r5
    1c98:	e1a06008 	mov	r6, r8
    1c9c:	e1a07009 	mov	r7, r9
    1ca0:	8afffff1 	bhi	1c6c <get_time_left+0x150>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	} else {
		track_index = get_next_processed_track();
	}
	
	return audio_stream.durations[track_index];
}
<<<<<<< HEAD
    1e2c:	e1a00006 	mov	r0, r6
    1e30:	e1a01007 	mov	r1, r7
    1e34:	e28dd014 	add	sp, sp, #20
    1e38:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
=======
    1ca4:	e1a00006 	mov	r0, r6
    1ca8:	e1a01007 	mov	r1, r7
    1cac:	e28dd014 	add	sp, sp, #20
    1cb0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1e3c:	e35b0001 	cmp	r11, #1
    1e40:	9a000025 	bls	1edc <get_time_left+0x238>
    1e44:	e5949010 	ldr	r9, [r4, #16]
    1e48:	e3a04000 	mov	r4, #0
    1e4c:	e59dc008 	ldr	r12, [sp, #8]
    1e50:	e1a0a005 	mov	r10, r5
    1e54:	e58d500c 	str	r5, [sp, #12]
    1e58:	e3a08001 	mov	r8, #1
    1e5c:	e1a05004 	mov	r5, r4
    1e60:	e1c960d0 	ldrd	r6, [r9]
    1e64:	e1a0400c 	mov	r4, r12
    1e68:	ea00000a 	b	1e98 <get_time_left+0x1f4>
		if(!is_track_fully_processed(i)
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
    1e6c:	e59d0008 	ldr	r0, [sp, #8]
    1e70:	e5933008 	ldr	r3, [r3, #8]
    1e74:	e7902105 	ldr	r2, [r0, r5, lsl #2]
    1e78:	e1520003 	cmp	r2, r3
    1e7c:	21cd60d0 	ldrdcs	r6, [sp]
    1e80:	21a05008 	movcs	r5, r8
=======
    1cb4:	e35b0001 	cmp	r11, #1
    1cb8:	9a000025 	bls	1d54 <get_time_left+0x238>
    1cbc:	e5949010 	ldr	r9, [r4, #16]
    1cc0:	e3a04000 	mov	r4, #0
    1cc4:	e59dc008 	ldr	r12, [sp, #8]
    1cc8:	e1a0a005 	mov	r10, r5
    1ccc:	e58d500c 	str	r5, [sp, #12]
    1cd0:	e3a08001 	mov	r8, #1
    1cd4:	e1a05004 	mov	r5, r4
    1cd8:	e1c960d0 	ldrd	r6, [r9]
    1cdc:	e1a0400c 	mov	r4, r12
    1ce0:	ea00000a 	b	1d10 <get_time_left+0x1f4>
		if(!is_track_fully_processed(i)
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
    1ce4:	e59d0008 	ldr	r0, [sp, #8]
    1ce8:	e5933008 	ldr	r3, [r3, #8]
    1cec:	e7902105 	ldr	r2, [r0, r5, lsl #2]
    1cf0:	e1520003 	cmp	r2, r3
    1cf4:	21cd60d0 	ldrdcs	r6, [sp]
    1cf8:	21a05008 	movcs	r5, r8
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
}

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1e84:	e2888001 	add	r8, r8, #1
    1e88:	e28aa00c 	add	r10, r10, #12
    1e8c:	e158000b 	cmp	r8, r11
    1e90:	e2899008 	add	r9, r9, #8
    1e94:	0affffe4 	beq	1e2c <get_time_left+0x188>
		if(!is_track_fully_processed(i)
    1e98:	e59a1014 	ldr	r1, [r10, #20]
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
    1e9c:	e1a02006 	mov	r2, r6
=======
    1cfc:	e2888001 	add	r8, r8, #1
    1d00:	e28aa00c 	add	r10, r10, #12
    1d04:	e158000b 	cmp	r8, r11
    1d08:	e2899008 	add	r9, r9, #8
    1d0c:	0affffe4 	beq	1ca4 <get_time_left+0x188>
		if(!is_track_fully_processed(i)
    1d10:	e59a1014 	ldr	r1, [r10, #20]
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
    1d14:	e1a02006 	mov	r2, r6
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
<<<<<<< HEAD
    1ea0:	e5b40004 	ldr	r0, [r4, #4]!
=======
    1d18:	e5b40004 	ldr	r0, [r4, #4]!
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i)
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
<<<<<<< HEAD
    1ea4:	e1a03007 	mov	r3, r7
=======
    1d1c:	e1a03007 	mov	r3, r7
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate

//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i)
<<<<<<< HEAD
    1ea8:	e1500001 	cmp	r0, r1
    1eac:	2afffff4 	bcs	1e84 <get_time_left+0x1e0>
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
    1eb0:	e1c900d8 	ldrd	r0, [r9, #8]
    1eb4:	e1cd00f0 	strd	r0, [sp]
    1eb8:	eb0010c1 	bl	61c4 <__aeabi_dcmplt>
=======
    1d20:	e1500001 	cmp	r0, r1
    1d24:	2afffff4 	bcs	1cfc <get_time_left+0x1e0>
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
    1d28:	e1c900d8 	ldrd	r0, [r9, #8]
    1d2c:	e1cd00f0 	strd	r0, [sp]
    1d30:	eb001015 	bl	5d8c <__aeabi_dcmplt>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
<<<<<<< HEAD
    1ebc:	e59d100c 	ldr	r1, [sp, #12]
    1ec0:	e0853085 	add	r3, r5, r5, lsl #1
=======
    1d34:	e59d100c 	ldr	r1, [sp, #12]
    1d38:	e0853085 	add	r3, r5, r5, lsl #1
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i)
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
<<<<<<< HEAD
    1ec4:	e3500000 	cmp	r0, #0
=======
    1d3c:	e3500000 	cmp	r0, #0
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return true;
}

bool is_track_fully_processed(unsigned int track_num){
	return audio_stream.current_process_locations[track_num] >= audio_stream.current_song->music_tracks[track_num].length;
<<<<<<< HEAD
    1ec8:	e0813103 	add	r3, r1, r3, lsl #2
=======
    1d40:	e0813103 	add	r3, r1, r3, lsl #2
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
//finds the next valid track with least processed time
unsigned int get_next_processed_track(){
	unsigned int shortest_duration_index = 0;
	for(unsigned int i = 1; i < audio_stream.current_song->num_tracks; i++){
		if(!is_track_fully_processed(i)
			&& (audio_stream.durations[i] < audio_stream.durations[shortest_duration_index] || is_track_fully_processed(shortest_duration_index))){
<<<<<<< HEAD
    1ecc:	0affffe6 	beq	1e6c <get_time_left+0x1c8>
    1ed0:	e1cd60d0 	ldrd	r6, [sp]
    1ed4:	e1a05008 	mov	r5, r8
    1ed8:	eaffffe9 	b	1e84 <get_time_left+0x1e0>
    1edc:	e5943010 	ldr	r3, [r4, #16]
    1ee0:	e1c360d0 	ldrd	r6, [r3]
    1ee4:	eaffffd0 	b	1e2c <get_time_left+0x188>

00001ee8 <get_sample>:
=======
    1d44:	0affffe6 	beq	1ce4 <get_time_left+0x1c8>
    1d48:	e1cd60d0 	ldrd	r6, [sp]
    1d4c:	e1a05008 	mov	r5, r8
    1d50:	eaffffe9 	b	1cfc <get_time_left+0x1e0>
    1d54:	e5943010 	ldr	r3, [r4, #16]
    1d58:	e1c360d0 	ldrd	r6, [r3]
    1d5c:	eaffffd0 	b	1ca4 <get_time_left+0x188>

00001d60 <get_sample>:
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
double get_sample(char playback_type){
	//store the sample to be returned
	double to_return = 0;
	
	//check each track to see if it is to be placed on the playback type requested
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1ee8:	e303cf98 	movw	r12, #16280	; 0x3f98
=======
    1d60:	e307c570 	movw	r12, #30064	; 0x7570
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return audio_stream.durations[track_index];
}

//retrieve the current sample for all tracks of the provided playback type
double get_sample(char playback_type){
<<<<<<< HEAD
    1eec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
=======
    1d64:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//store the sample to be returned
	double to_return = 0;
	
	//check each track to see if it is to be placed on the playback type requested
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1ef0:	e340c015 	movt	r12, #21
=======
    1d68:	e340c010 	movt	r12, #16
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	return audio_stream.durations[track_index];
}

//retrieve the current sample for all tracks of the provided playback type
double get_sample(char playback_type){
<<<<<<< HEAD
    1ef4:	e24dd024 	sub	sp, sp, #36	; 0x24
    1ef8:	e1a09000 	mov	r9, r0
=======
    1d6c:	e24dd024 	sub	sp, sp, #36	; 0x24
    1d70:	e1a09000 	mov	r9, r0
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//store the sample to be returned
	double to_return = 0;
	
	//check each track to see if it is to be placed on the playback type requested
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1efc:	e59c3014 	ldr	r3, [r12, #20]
    1f00:	e5932004 	ldr	r2, [r3, #4]
    1f04:	e3520000 	cmp	r2, #0
    1f08:	0a000049 	beq	2034 <get_sample+0x14c>
    1f0c:	e3a01000 	mov	r1, #0
    1f10:	e3a00000 	mov	r0, #0
    1f14:	e1cd00f8 	strd	r0, [sp, #8]
=======
    1d74:	e59c3014 	ldr	r3, [r12, #20]
    1d78:	e5932004 	ldr	r2, [r3, #4]
    1d7c:	e3520000 	cmp	r2, #0
    1d80:	0a000049 	beq	1eac <get_sample+0x14c>
    1d84:	e3a01000 	mov	r1, #0
    1d88:	e3a00000 	mov	r0, #0
    1d8c:	e1cd00f8 	strd	r0, [sp, #8]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
			
			//increment the next sample location
			audio_stream.current_playback_locations[i]++;
			
			//decrement the duration of the track played
			audio_stream.durations[i] -= sampling_period;
<<<<<<< HEAD
    1f18:	e3071718 	movw	r1, #30488	; 0x7718
    1f1c:	e3401000 	movt	r1, #0
=======
    1d90:	e30712d8 	movw	r1, #29400	; 0x72d8
    1d94:	e3401000 	movt	r1, #0
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
double get_sample(char playback_type){
	//store the sample to be returned
	double to_return = 0;
	
	//check each track to see if it is to be placed on the playback type requested
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1f20:	e3a04000 	mov	r4, #0
		struct MusicTrack current_track = audio_stream.current_song->music_tracks[i];
		
		if(current_track.playback_type == playback_type && audio_stream.queue_fronts[i] != NULL){
    1f24:	e1a0b00c 	mov	r11, r12
=======
    1d98:	e3a04000 	mov	r4, #0
		struct MusicTrack current_track = audio_stream.current_song->music_tracks[i];
		
		if(current_track.playback_type == playback_type && audio_stream.queue_fronts[i] != NULL){
    1d9c:	e1a0b00c 	mov	r11, r12
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
			
			//increment the next sample location
			audio_stream.current_playback_locations[i]++;
			
			//decrement the duration of the track played
			audio_stream.durations[i] -= sampling_period;
<<<<<<< HEAD
    1f28:	e58d1014 	str	r1, [sp, #20]
=======
    1da0:	e58d1014 	str	r1, [sp, #20]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
			
			//if the current wave has reached the end, advance and reset location
			if(audio_stream.current_playback_locations[i] == audio_stream.queue_fronts[i]->wave.length){
				advance_stream(&audio_stream.queue_fronts[i]);
				audio_stream.current_playback_locations[i] = 0;
<<<<<<< HEAD
    1f2c:	e58dc01c 	str	r12, [sp, #28]
    1f30:	ea000002 	b	1f40 <get_sample+0x58>
=======
    1da4:	e58dc01c 	str	r12, [sp, #28]
    1da8:	ea000002 	b	1db8 <get_sample+0x58>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
double get_sample(char playback_type){
	//store the sample to be returned
	double to_return = 0;
	
	//check each track to see if it is to be placed on the playback type requested
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1f34:	e2844001 	add	r4, r4, #1
    1f38:	e1540002 	cmp	r4, r2
    1f3c:	2a000029 	bcs	1fe8 <get_sample+0x100>
		struct MusicTrack current_track = audio_stream.current_song->music_tracks[i];
    1f40:	e5931000 	ldr	r1, [r3]
    1f44:	e0840084 	add	r0, r4, r4, lsl #1
    1f48:	e0811100 	add	r1, r1, r0, lsl #2
		
		if(current_track.playback_type == playback_type && audio_stream.queue_fronts[i] != NULL){
    1f4c:	e5d11004 	ldrb	r1, [r1, #4]
    1f50:	e1510009 	cmp	r1, r9
    1f54:	1afffff6 	bne	1f34 <get_sample+0x4c>
    1f58:	e59dc01c 	ldr	r12, [sp, #28]
=======
    1dac:	e2844001 	add	r4, r4, #1
    1db0:	e1540002 	cmp	r4, r2
    1db4:	2a000029 	bcs	1e60 <get_sample+0x100>
		struct MusicTrack current_track = audio_stream.current_song->music_tracks[i];
    1db8:	e5931000 	ldr	r1, [r3]
    1dbc:	e0840084 	add	r0, r4, r4, lsl #1
    1dc0:	e0811100 	add	r1, r1, r0, lsl #2
		
		if(current_track.playback_type == playback_type && audio_stream.queue_fronts[i] != NULL){
    1dc4:	e5d11004 	ldrb	r1, [r1, #4]
    1dc8:	e1510009 	cmp	r1, r9
    1dcc:	1afffff6 	bne	1dac <get_sample+0x4c>
    1dd0:	e59dc01c 	ldr	r12, [sp, #28]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
			
			//increment the next sample location
			audio_stream.current_playback_locations[i]++;
			
			//decrement the duration of the track played
			audio_stream.durations[i] -= sampling_period;
<<<<<<< HEAD
    1f5c:	e1a06184 	lsl	r6, r4, #3
=======
    1dd4:	e1a06184 	lsl	r6, r4, #3
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//check each track to see if it is to be placed on the playback type requested
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		struct MusicTrack current_track = audio_stream.current_song->music_tracks[i];
		
		if(current_track.playback_type == playback_type && audio_stream.queue_fronts[i] != NULL){
			to_return += audio_stream.queue_fronts[i]->wave.waveform[audio_stream.current_playback_locations[i]];
<<<<<<< HEAD
    1f60:	e1cd00d8 	ldrd	r0, [sp, #8]
=======
    1dd8:	e1cd00d8 	ldrd	r0, [sp, #8]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	
	//check each track to see if it is to be placed on the playback type requested
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		struct MusicTrack current_track = audio_stream.current_song->music_tracks[i];
		
		if(current_track.playback_type == playback_type && audio_stream.queue_fronts[i] != NULL){
<<<<<<< HEAD
    1f64:	e59cc008 	ldr	r12, [r12, #8]
    1f68:	e58dc010 	str	r12, [sp, #16]
    1f6c:	e1a0c104 	lsl	r12, r4, #2
    1f70:	e58dc018 	str	r12, [sp, #24]
    1f74:	e59dc010 	ldr	r12, [sp, #16]
    1f78:	e79c5104 	ldr	r5, [r12, r4, lsl #2]
    1f7c:	e3550000 	cmp	r5, #0
    1f80:	0affffeb 	beq	1f34 <get_sample+0x4c>
			to_return += audio_stream.queue_fronts[i]->wave.waveform[audio_stream.current_playback_locations[i]];
    1f84:	e59ba000 	ldr	r10, [r11]
    1f88:	e595c000 	ldr	r12, [r5]
    1f8c:	e79a3104 	ldr	r3, [r10, r4, lsl #2]
			
			//increment the next sample location
			audio_stream.current_playback_locations[i]++;
    1f90:	e2837001 	add	r7, r3, #1
=======
    1ddc:	e59cc008 	ldr	r12, [r12, #8]
    1de0:	e58dc010 	str	r12, [sp, #16]
    1de4:	e1a0c104 	lsl	r12, r4, #2
    1de8:	e58dc018 	str	r12, [sp, #24]
    1dec:	e59dc010 	ldr	r12, [sp, #16]
    1df0:	e79c5104 	ldr	r5, [r12, r4, lsl #2]
    1df4:	e3550000 	cmp	r5, #0
    1df8:	0affffeb 	beq	1dac <get_sample+0x4c>
			to_return += audio_stream.queue_fronts[i]->wave.waveform[audio_stream.current_playback_locations[i]];
    1dfc:	e59ba000 	ldr	r10, [r11]
    1e00:	e595c000 	ldr	r12, [r5]
    1e04:	e79a3104 	ldr	r3, [r10, r4, lsl #2]
			
			//increment the next sample location
			audio_stream.current_playback_locations[i]++;
    1e08:	e2837001 	add	r7, r3, #1
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//check each track to see if it is to be placed on the playback type requested
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
		struct MusicTrack current_track = audio_stream.current_song->music_tracks[i];
		
		if(current_track.playback_type == playback_type && audio_stream.queue_fronts[i] != NULL){
			to_return += audio_stream.queue_fronts[i]->wave.waveform[audio_stream.current_playback_locations[i]];
<<<<<<< HEAD
    1f94:	e1a03183 	lsl	r3, r3, #3
    1f98:	e18320dc 	ldrd	r2, [r3, r12]
    1f9c:	e58dc004 	str	r12, [sp, #4]
    1fa0:	eb000e23 	bl	5834 <__adddf3>
    1fa4:	e1cd00f8 	strd	r0, [sp, #8]
=======
    1e0c:	e1a03183 	lsl	r3, r3, #3
    1e10:	e18320dc 	ldrd	r2, [r3, r12]
    1e14:	e58dc004 	str	r12, [sp, #4]
    1e18:	eb000d77 	bl	53fc <__adddf3>
    1e1c:	e1cd00f8 	strd	r0, [sp, #8]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
			
			//increment the next sample location
			audio_stream.current_playback_locations[i]++;
			
			//decrement the duration of the track played
			audio_stream.durations[i] -= sampling_period;
<<<<<<< HEAD
    1fa8:	e59d0014 	ldr	r0, [sp, #20]
    1fac:	e59b8010 	ldr	r8, [r11, #16]
=======
    1e20:	e59d0014 	ldr	r0, [sp, #20]
    1e24:	e59b8010 	ldr	r8, [r11, #16]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
		
		if(current_track.playback_type == playback_type && audio_stream.queue_fronts[i] != NULL){
			to_return += audio_stream.queue_fronts[i]->wave.waveform[audio_stream.current_playback_locations[i]];
			
			//increment the next sample location
			audio_stream.current_playback_locations[i]++;
<<<<<<< HEAD
    1fb0:	e78a7104 	str	r7, [r10, r4, lsl #2]
			
			//decrement the duration of the track played
			audio_stream.durations[i] -= sampling_period;
    1fb4:	e1c020d0 	ldrd	r2, [r0]
    1fb8:	e18800d6 	ldrd	r0, [r8, r6]
    1fbc:	eb000e1b 	bl	5830 <__aeabi_dsub>
			
			//if the current wave has reached the end, advance and reset location
			if(audio_stream.current_playback_locations[i] == audio_stream.queue_fronts[i]->wave.length){
    1fc0:	e5953004 	ldr	r3, [r5, #4]
    1fc4:	e59dc004 	ldr	r12, [sp, #4]
=======
    1e28:	e78a7104 	str	r7, [r10, r4, lsl #2]
			
			//decrement the duration of the track played
			audio_stream.durations[i] -= sampling_period;
    1e2c:	e1c020d0 	ldrd	r2, [r0]
    1e30:	e18800d6 	ldrd	r0, [r8, r6]
    1e34:	eb000d6f 	bl	53f8 <__aeabi_dsub>
			
			//if the current wave has reached the end, advance and reset location
			if(audio_stream.current_playback_locations[i] == audio_stream.queue_fronts[i]->wave.length){
    1e38:	e5953004 	ldr	r3, [r5, #4]
    1e3c:	e59dc004 	ldr	r12, [sp, #4]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
			
			//increment the next sample location
			audio_stream.current_playback_locations[i]++;
			
			//decrement the duration of the track played
			audio_stream.durations[i] -= sampling_period;
<<<<<<< HEAD
    1fc8:	e18800f6 	strd	r0, [r8, r6]
			
			//if the current wave has reached the end, advance and reset location
			if(audio_stream.current_playback_locations[i] == audio_stream.queue_fronts[i]->wave.length){
    1fcc:	e1570003 	cmp	r7, r3
    1fd0:	0a000007 	beq	1ff4 <get_sample+0x10c>
    1fd4:	e59b3014 	ldr	r3, [r11, #20]
=======
    1e40:	e18800f6 	strd	r0, [r8, r6]
			
			//if the current wave has reached the end, advance and reset location
			if(audio_stream.current_playback_locations[i] == audio_stream.queue_fronts[i]->wave.length){
    1e44:	e1570003 	cmp	r7, r3
    1e48:	0a000007 	beq	1e6c <get_sample+0x10c>
    1e4c:	e59b3014 	ldr	r3, [r11, #20]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
double get_sample(char playback_type){
	//store the sample to be returned
	double to_return = 0;
	
	//check each track to see if it is to be placed on the playback type requested
	for(unsigned int i = 0; i < audio_stream.current_song->num_tracks; i++){
<<<<<<< HEAD
    1fd8:	e2844001 	add	r4, r4, #1
    1fdc:	e5932004 	ldr	r2, [r3, #4]
    1fe0:	e1540002 	cmp	r4, r2
    1fe4:	3affffd5 	bcc	1f40 <get_sample+0x58>
    1fe8:	e1cd00d8 	ldrd	r0, [sp, #8]
=======
    1e50:	e2844001 	add	r4, r4, #1
    1e54:	e5932004 	ldr	r2, [r3, #4]
    1e58:	e1540002 	cmp	r4, r2
    1e5c:	3affffd5 	bcc	1db8 <get_sample+0x58>
    1e60:	e1cd00d8 	ldrd	r0, [sp, #8]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
			}
		}
	}
	
	return to_return;	
<<<<<<< HEAD
    1fec:	e28dd024 	add	sp, sp, #36	; 0x24
    1ff0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
=======
    1e64:	e28dd024 	add	sp, sp, #36	; 0x24
    1e68:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
void advance_stream(struct MusicWaveNode ** front_node){
	//save a copy of the pointer to the next node
	struct MusicWaveNode * next_node = (*front_node)->next;
	
	//free the memory from both the waveform and the node
	free((*front_node)->wave.waveform);
<<<<<<< HEAD
    1ff4:	e1a0000c 	mov	r0, r12
=======
    1e6c:	e1a0000c 	mov	r0, r12
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	}
}

void advance_stream(struct MusicWaveNode ** front_node){
	//save a copy of the pointer to the next node
	struct MusicWaveNode * next_node = (*front_node)->next;
<<<<<<< HEAD
    1ff8:	e5955008 	ldr	r5, [r5, #8]
	
	//free the memory from both the waveform and the node
	free((*front_node)->wave.waveform);
    1ffc:	eb0010d5 	bl	6358 <free>
	free(*front_node);
    2000:	e59d1010 	ldr	r1, [sp, #16]
    2004:	e59dc018 	ldr	r12, [sp, #24]
    2008:	e791000c 	ldr	r0, [r1, r12]
    200c:	eb0010d1 	bl	6358 <free>
	
	//reattach the rest of the queue to the front
	*front_node = next_node;
    2010:	e59dc018 	ldr	r12, [sp, #24]
=======
    1e70:	e5955008 	ldr	r5, [r5, #8]
	
	//free the memory from both the waveform and the node
	free((*front_node)->wave.waveform);
    1e74:	eb001029 	bl	5f20 <free>
	free(*front_node);
    1e78:	e59d1010 	ldr	r1, [sp, #16]
    1e7c:	e59dc018 	ldr	r12, [sp, #24]
    1e80:	e791000c 	ldr	r0, [r1, r12]
    1e84:	eb001025 	bl	5f20 <free>
	
	//reattach the rest of the queue to the front
	*front_node = next_node;
    1e88:	e59dc018 	ldr	r12, [sp, #24]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
			audio_stream.durations[i] -= sampling_period;
			
			//if the current wave has reached the end, advance and reset location
			if(audio_stream.current_playback_locations[i] == audio_stream.queue_fronts[i]->wave.length){
				advance_stream(&audio_stream.queue_fronts[i]);
				audio_stream.current_playback_locations[i] = 0;
<<<<<<< HEAD
    2014:	e3a01000 	mov	r1, #0
=======
    1e8c:	e3a01000 	mov	r1, #0
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
	//free the memory from both the waveform and the node
	free((*front_node)->wave.waveform);
	free(*front_node);
	
	//reattach the rest of the queue to the front
	*front_node = next_node;
<<<<<<< HEAD
    2018:	e59d0010 	ldr	r0, [sp, #16]
    201c:	e780500c 	str	r5, [r0, r12]
=======
    1e90:	e59d0010 	ldr	r0, [sp, #16]
    1e94:	e780500c 	str	r5, [r0, r12]
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
			audio_stream.durations[i] -= sampling_period;
			
			//if the current wave has reached the end, advance and reset location
			if(audio_stream.current_playback_locations[i] == audio_stream.queue_fronts[i]->wave.length){
				advance_stream(&audio_stream.queue_fronts[i]);
				audio_stream.current_playback_locations[i] = 0;
<<<<<<< HEAD
    2020:	e59b2000 	ldr	r2, [r11]
    2024:	e59b3014 	ldr	r3, [r11, #20]
    2028:	e782100c 	str	r1, [r2, r12]
    202c:	e5932004 	ldr	r2, [r3, #4]
    2030:	eaffffbf 	b	1f34 <get_sample+0x4c>
=======
    1e98:	e59b2000 	ldr	r2, [r11]
    1e9c:	e59b3014 	ldr	r3, [r11, #20]
    1ea0:	e782100c 	str	r1, [r2, r12]
    1ea4:	e5932004 	ldr	r2, [r3, #4]
    1ea8:	eaffffbf 	b	1dac <get_sample+0x4c>
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
}

//retrieve the current sample for all tracks of the provided playback type
double get_sample(char playback_type){
	//store the sample to be returned
	double to_return = 0;
<<<<<<< HEAD
    2034:	e3a02000 	mov	r2, #0
    2038:	e3a03000 	mov	r3, #0
    203c:	e1cd20f8 	strd	r2, [sp, #8]
    2040:	e1a00002 	mov	r0, r2
    2044:	e1a01003 	mov	r1, r3
    2048:	eaffffe7 	b	1fec <get_sample+0x104>
    204c:	00000000 	andeq	r0, r0, r0

00002050 <ceil>:
    2050:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2054:	e1a0a081 	lsl	r10, r1, #1
    2058:	e1a0aaaa 	lsr	r10, r10, #21
    205c:	e24a6fff 	sub	r6, r10, #1020	; 0x3fc
    2060:	e2466003 	sub	r6, r6, #3
    2064:	e3560013 	cmp	r6, #19
    2068:	e1a02000 	mov	r2, r0
    206c:	e1a03001 	mov	r3, r1
    2070:	e1a04000 	mov	r4, r0
    2074:	e1a05001 	mov	r5, r1
    2078:	e1a07001 	mov	r7, r1
    207c:	e1a09001 	mov	r9, r1
    2080:	e1a08000 	mov	r8, r0
    2084:	ca000019 	bgt	20f0 <ceil+0xa0>
    2088:	e3560000 	cmp	r6, #0
    208c:	ba00003d 	blt	2188 <ceil+0x138>
    2090:	e59f4148 	ldr	r4, [pc, #328]	; 21e0 <ceil+0x190>
    2094:	e1a04654 	asr	r4, r4, r6
    2098:	e004c001 	and	r12, r4, r1
    209c:	e19cc000 	orrs	r12, r12, r0
    20a0:	0a00000e 	beq	20e0 <ceil+0x90>
    20a4:	e28f3f4b 	add	r3, pc, #300	; 0x12c
    20a8:	e893000c 	ldm	r3, {r2, r3}
    20ac:	eb000de0 	bl	5834 <__adddf3>
    20b0:	e3a02000 	mov	r2, #0
    20b4:	e3a03000 	mov	r3, #0
    20b8:	eb001053 	bl	620c <__aeabi_dcmpgt>
    20bc:	e3500000 	cmp	r0, #0
    20c0:	0a000004 	beq	20d8 <ceil+0x88>
    20c4:	e3550000 	cmp	r5, #0
    20c8:	c3a03601 	movgt	r3, #1048576	; 0x100000
    20cc:	c0859653 	addgt	r9, r5, r3, asr r6
    20d0:	e3a08000 	mov	r8, #0
    20d4:	e1c97004 	bic	r7, r9, r4
    20d8:	e1a03007 	mov	r3, r7
    20dc:	e1a02008 	mov	r2, r8
    20e0:	e1a00002 	mov	r0, r2
    20e4:	e1a01003 	mov	r1, r3
    20e8:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
    20ec:	e12fff1e 	bx	lr
    20f0:	e3560033 	cmp	r6, #51	; 0x33
    20f4:	da000005 	ble	2110 <ceil+0xc0>
    20f8:	e3560b01 	cmp	r6, #1024	; 0x400
    20fc:	1afffff7 	bne	20e0 <ceil+0x90>
    2100:	eb000dcb 	bl	5834 <__adddf3>
    2104:	e1a02000 	mov	r2, r0
    2108:	e1a03001 	mov	r3, r1
    210c:	eafffff3 	b	20e0 <ceil+0x90>
    2110:	e24abe41 	sub	r11, r10, #1040	; 0x410
    2114:	e24bb003 	sub	r11, r11, #3
    2118:	e3e0c000 	mvn	r12, #0
    211c:	e1a0bb3c 	lsr	r11, r12, r11
    2120:	e11b0000 	tst	r11, r0
    2124:	0affffed 	beq	20e0 <ceil+0x90>
    2128:	e28f30a8 	add	r3, pc, #168	; 0xa8
    212c:	e893000c 	ldm	r3, {r2, r3}
    2130:	eb000dbf 	bl	5834 <__adddf3>
    2134:	e3a02000 	mov	r2, #0
    2138:	e3a03000 	mov	r3, #0
    213c:	eb001032 	bl	620c <__aeabi_dcmpgt>
    2140:	e3500000 	cmp	r0, #0
    2144:	0affffe3 	beq	20d8 <ceil+0x88>
    2148:	e3550000 	cmp	r5, #0
    214c:	da000008 	ble	2174 <ceil+0x124>
    2150:	e3560014 	cmp	r6, #20
    2154:	0a000005 	beq	2170 <ceil+0x120>
    2158:	e26aae43 	rsb	r10, r10, #1072	; 0x430
    215c:	e28aa003 	add	r10, r10, #3
    2160:	e3a04001 	mov	r4, #1
    2164:	e0884a14 	add	r4, r8, r4, lsl r10
    2168:	e1580004 	cmp	r8, r4
    216c:	9a000000 	bls	2174 <ceil+0x124>
    2170:	e2899001 	add	r9, r9, #1
    2174:	e1c4800b 	bic	r8, r4, r11
    2178:	e1a07009 	mov	r7, r9
    217c:	e1a03007 	mov	r3, r7
    2180:	e1a02008 	mov	r2, r8
    2184:	eaffffd5 	b	20e0 <ceil+0x90>
    2188:	e28f3048 	add	r3, pc, #72	; 0x48
    218c:	e893000c 	ldm	r3, {r2, r3}
    2190:	eb000da7 	bl	5834 <__adddf3>
    2194:	e3a02000 	mov	r2, #0
    2198:	e3a03000 	mov	r3, #0
    219c:	eb00101a 	bl	620c <__aeabi_dcmpgt>
    21a0:	e3500000 	cmp	r0, #0
    21a4:	0affffcb 	beq	20d8 <ceil+0x88>
    21a8:	e3550000 	cmp	r5, #0
    21ac:	ba000005 	blt	21c8 <ceil+0x178>
    21b0:	e1843005 	orr	r3, r4, r5
    21b4:	e3530000 	cmp	r3, #0
    21b8:	e59f3024 	ldr	r3, [pc, #36]	; 21e4 <ceil+0x194>
    21bc:	13a08000 	movne	r8, #0
    21c0:	11a07003 	movne	r7, r3
    21c4:	eaffffc3 	b	20d8 <ceil+0x88>
    21c8:	e3a08000 	mov	r8, #0
    21cc:	e3a07102 	mov	r7, #-2147483648	; 0x80000000
    21d0:	eaffffc0 	b	20d8 <ceil+0x88>
    21d4:	e1a00000 	nop			; (mov r0, r0)
    21d8:	8800759c 	.word	0x8800759c
    21dc:	7e37e43c 	.word	0x7e37e43c
    21e0:	000fffff 	.word	0x000fffff
    21e4:	3ff00000 	.word	0x3ff00000

000021e8 <floor>:
    21e8:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    21ec:	e1a08081 	lsl	r8, r1, #1
    21f0:	e1a08aa8 	lsr	r8, r8, #21
    21f4:	e2486fff 	sub	r6, r8, #1020	; 0x3fc
    21f8:	e2466003 	sub	r6, r6, #3
    21fc:	e3560013 	cmp	r6, #19
    2200:	e1a02000 	mov	r2, r0
    2204:	e1a03001 	mov	r3, r1
    2208:	e1a04000 	mov	r4, r0
    220c:	e1a05001 	mov	r5, r1
    2210:	e1a07001 	mov	r7, r1
    2214:	ca000019 	bgt	2280 <floor+0x98>
    2218:	e3560000 	cmp	r6, #0
    221c:	ba000034 	blt	22f4 <floor+0x10c>
    2220:	e59f8150 	ldr	r8, [pc, #336]	; 2378 <floor+0x190>
    2224:	e1a08658 	asr	r8, r8, r6
    2228:	e008c001 	and	r12, r8, r1
    222c:	e19cc000 	orrs	r12, r12, r0
    2230:	0a00000e 	beq	2270 <floor+0x88>
    2234:	e28f3f4d 	add	r3, pc, #308	; 0x134
    2238:	e893000c 	ldm	r3, {r2, r3}
    223c:	eb000d7c 	bl	5834 <__adddf3>
    2240:	e3a02000 	mov	r2, #0
    2244:	e3a03000 	mov	r3, #0
    2248:	eb000fef 	bl	620c <__aeabi_dcmpgt>
    224c:	e3500000 	cmp	r0, #0
    2250:	0a000004 	beq	2268 <floor+0x80>
    2254:	e3550000 	cmp	r5, #0
    2258:	b3a03601 	movlt	r3, #1048576	; 0x100000
    225c:	b0855653 	addlt	r5, r5, r3, asr r6
    2260:	e3a04000 	mov	r4, #0
    2264:	e1c57008 	bic	r7, r5, r8
    2268:	e1a03007 	mov	r3, r7
    226c:	e1a02004 	mov	r2, r4
    2270:	e1a00002 	mov	r0, r2
    2274:	e1a01003 	mov	r1, r3
    2278:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    227c:	e12fff1e 	bx	lr
    2280:	e3560033 	cmp	r6, #51	; 0x33
    2284:	da000005 	ble	22a0 <floor+0xb8>
    2288:	e3560b01 	cmp	r6, #1024	; 0x400
    228c:	1afffff7 	bne	2270 <floor+0x88>
    2290:	eb000d67 	bl	5834 <__adddf3>
    2294:	e1a02000 	mov	r2, r0
    2298:	e1a03001 	mov	r3, r1
    229c:	eafffff3 	b	2270 <floor+0x88>
    22a0:	e248ae41 	sub	r10, r8, #1040	; 0x410
    22a4:	e24aa003 	sub	r10, r10, #3
    22a8:	e3e0c000 	mvn	r12, #0
    22ac:	e1a0aa3c 	lsr	r10, r12, r10
    22b0:	e11a0000 	tst	r10, r0
    22b4:	0affffed 	beq	2270 <floor+0x88>
    22b8:	e28f30b0 	add	r3, pc, #176	; 0xb0
    22bc:	e893000c 	ldm	r3, {r2, r3}
    22c0:	eb000d5b 	bl	5834 <__adddf3>
    22c4:	e3a02000 	mov	r2, #0
    22c8:	e3a03000 	mov	r3, #0
    22cc:	eb000fce 	bl	620c <__aeabi_dcmpgt>
    22d0:	e3500000 	cmp	r0, #0
    22d4:	0affffe3 	beq	2268 <floor+0x80>
    22d8:	e3550000 	cmp	r5, #0
    22dc:	ba000017 	blt	2340 <floor+0x158>
    22e0:	e1c4400a 	bic	r4, r4, r10
    22e4:	e1a07005 	mov	r7, r5
    22e8:	e1a03007 	mov	r3, r7
    22ec:	e1a02004 	mov	r2, r4
    22f0:	eaffffde 	b	2270 <floor+0x88>
    22f4:	e28f3074 	add	r3, pc, #116	; 0x74
    22f8:	e893000c 	ldm	r3, {r2, r3}
    22fc:	eb000d4c 	bl	5834 <__adddf3>
    2300:	e3a02000 	mov	r2, #0
    2304:	e3a03000 	mov	r3, #0
    2308:	eb000fbf 	bl	620c <__aeabi_dcmpgt>
    230c:	e3500000 	cmp	r0, #0
    2310:	0affffd4 	beq	2268 <floor+0x80>
    2314:	e3550000 	cmp	r5, #0
    2318:	a3a04000 	movge	r4, #0
    231c:	a1a07004 	movge	r7, r4
    2320:	aaffffd0 	bge	2268 <floor+0x80>
    2324:	e3c73102 	bic	r3, r7, #-2147483648	; 0x80000000
    2328:	e1833004 	orr	r3, r3, r4
    232c:	e3530000 	cmp	r3, #0
    2330:	e59f3044 	ldr	r3, [pc, #68]	; 237c <floor+0x194>
    2334:	13a04000 	movne	r4, #0
    2338:	11a07003 	movne	r7, r3
    233c:	eaffffc9 	b	2268 <floor+0x80>
    2340:	e3560014 	cmp	r6, #20
    2344:	02855001 	addeq	r5, r5, #1
    2348:	0affffe4 	beq	22e0 <floor+0xf8>
    234c:	e2688e43 	rsb	r8, r8, #1072	; 0x430
    2350:	e2888003 	add	r8, r8, #3
    2354:	e3a03001 	mov	r3, #1
    2358:	e0843813 	add	r3, r4, r3, lsl r8
    235c:	e1540003 	cmp	r4, r3
    2360:	82855001 	addhi	r5, r5, #1
    2364:	e1a04003 	mov	r4, r3
    2368:	eaffffdc 	b	22e0 <floor+0xf8>
    236c:	e1a00000 	nop			; (mov r0, r0)
    2370:	8800759c 	.word	0x8800759c
    2374:	7e37e43c 	.word	0x7e37e43c
    2378:	000fffff 	.word	0x000fffff
    237c:	bff00000 	.word	0xbff00000

00002380 <sin>:
    2380:	e92d4030 	push	{r4, r5, lr}
    2384:	e59fe0ec 	ldr	lr, [pc, #236]	; 2478 <sin+0xf8>
    2388:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    238c:	e15c000e 	cmp	r12, lr
    2390:	e24dd01c 	sub	sp, sp, #28
    2394:	e1a02000 	mov	r2, r0
    2398:	e1a03001 	mov	r3, r1
    239c:	e1a04000 	mov	r4, r0
    23a0:	e1a05001 	mov	r5, r1
    23a4:	da000017 	ble	2408 <sin+0x88>
    23a8:	e59fe0cc 	ldr	lr, [pc, #204]	; 247c <sin+0xfc>
    23ac:	e15c000e 	cmp	r12, lr
    23b0:	da000003 	ble	23c4 <sin+0x44>
    23b4:	eb000d1d 	bl	5830 <__aeabi_dsub>
    23b8:	e28dd01c 	add	sp, sp, #28
    23bc:	e8bd4030 	pop	{r4, r5, lr}
    23c0:	e12fff1e 	bx	lr
    23c4:	e28d2008 	add	r2, sp, #8
    23c8:	eb00056c 	bl	3980 <__ieee754_rem_pio2>
    23cc:	e2000003 	and	r0, r0, #3
    23d0:	e3500001 	cmp	r0, #1
    23d4:	0a00001a 	beq	2444 <sin+0xc4>
    23d8:	e3500002 	cmp	r0, #2
    23dc:	0a00000f 	beq	2420 <sin+0xa0>
    23e0:	e3500000 	cmp	r0, #0
    23e4:	1a00001c 	bne	245c <sin+0xdc>
    23e8:	e3a03001 	mov	r3, #1
    23ec:	e58d3000 	str	r3, [sp]
    23f0:	e28d1008 	add	r1, sp, #8
    23f4:	e8910003 	ldm	r1, {r0, r1}
    23f8:	e28d3010 	add	r3, sp, #16
    23fc:	e893000c 	ldm	r3, {r2, r3}
    2400:	eb000b3c 	bl	50f8 <__kernel_sin>
    2404:	eaffffeb 	b	23b8 <sin+0x38>
    2408:	e3a03000 	mov	r3, #0
    240c:	e58d3000 	str	r3, [sp]
    2410:	e3a02000 	mov	r2, #0
    2414:	e3a03000 	mov	r3, #0
    2418:	eb000b36 	bl	50f8 <__kernel_sin>
    241c:	eaffffe5 	b	23b8 <sin+0x38>
    2420:	e3a03001 	mov	r3, #1
    2424:	e58d3000 	str	r3, [sp]
    2428:	e28d1008 	add	r1, sp, #8
    242c:	e8910003 	ldm	r1, {r0, r1}
    2430:	e28d3010 	add	r3, sp, #16
    2434:	e893000c 	ldm	r3, {r2, r3}
    2438:	eb000b2e 	bl	50f8 <__kernel_sin>
    243c:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    2440:	eaffffdc 	b	23b8 <sin+0x38>
    2444:	e28d1008 	add	r1, sp, #8
    2448:	e8910003 	ldm	r1, {r0, r1}
    244c:	e28d3010 	add	r3, sp, #16
    2450:	e893000c 	ldm	r3, {r2, r3}
    2454:	eb00076f 	bl	4218 <__kernel_cos>
    2458:	eaffffd6 	b	23b8 <sin+0x38>
    245c:	e28d1008 	add	r1, sp, #8
    2460:	e8910003 	ldm	r1, {r0, r1}
    2464:	e28d3010 	add	r3, sp, #16
    2468:	e893000c 	ldm	r3, {r2, r3}
    246c:	eb000769 	bl	4218 <__kernel_cos>
    2470:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    2474:	eaffffcf 	b	23b8 <sin+0x38>
    2478:	3fe921fb 	.word	0x3fe921fb
    247c:	7fefffff 	.word	0x7fefffff

00002480 <pow>:
    2480:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2484:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    2488:	e1a07003 	mov	r7, r3
    248c:	e1a08000 	mov	r8, r0
    2490:	e1a09001 	mov	r9, r1
    2494:	e1a06002 	mov	r6, r2
    2498:	eb000138 	bl	2980 <__ieee754_pow>
    249c:	e59fb4bc 	ldr	r11, [pc, #1212]	; 2960 <pow+0x4e0>
    24a0:	e1db30d0 	ldrsb	r3, [r11]
    24a4:	e3730001 	cmn	r3, #1
    24a8:	e1a04000 	mov	r4, r0
    24ac:	e1a05001 	mov	r5, r1
    24b0:	0a000004 	beq	24c8 <pow+0x48>
    24b4:	e1a00006 	mov	r0, r6
    24b8:	e1a01007 	mov	r1, r7
    24bc:	eb000b9b 	bl	5330 <__fpclassifyd>
    24c0:	e3500000 	cmp	r0, #0
    24c4:	1a000004 	bne	24dc <pow+0x5c>
    24c8:	e1a00004 	mov	r0, r4
    24cc:	e1a01005 	mov	r1, r5
    24d0:	e28dd02c 	add	sp, sp, #44	; 0x2c
    24d4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    24d8:	e12fff1e 	bx	lr
    24dc:	e1a00008 	mov	r0, r8
    24e0:	e1a01009 	mov	r1, r9
    24e4:	eb000b91 	bl	5330 <__fpclassifyd>
    24e8:	e250a000 	subs	r10, r0, #0
    24ec:	1a00001a 	bne	255c <pow+0xdc>
    24f0:	e1a00006 	mov	r0, r6
    24f4:	e1a01007 	mov	r1, r7
    24f8:	e3a02000 	mov	r2, #0
    24fc:	e3a03000 	mov	r3, #0
    2500:	eb000f29 	bl	61ac <__aeabi_dcmpeq>
    2504:	e3500000 	cmp	r0, #0
    2508:	0affffee 	beq	24c8 <pow+0x48>
    250c:	e1db30d0 	ldrsb	r3, [r11]
    2510:	e3730001 	cmn	r3, #1
    2514:	13530002 	cmpne	r3, #2
    2518:	e3a03001 	mov	r3, #1
    251c:	e58d3000 	str	r3, [sp]
    2520:	e59f343c 	ldr	r3, [pc, #1084]	; 2964 <pow+0x4e4>
    2524:	e58d3004 	str	r3, [sp, #4]
    2528:	e59f3438 	ldr	r3, [pc, #1080]	; 2968 <pow+0x4e8>
    252c:	e3a02000 	mov	r2, #0
    2530:	e58da020 	str	r10, [sp, #32]
    2534:	e58d8008 	str	r8, [sp, #8]
    2538:	e58d900c 	str	r9, [sp, #12]
    253c:	e58d6010 	str	r6, [sp, #16]
    2540:	e58d7014 	str	r7, [sp, #20]
    2544:	e58d2018 	str	r2, [sp, #24]
    2548:	e58d301c 	str	r3, [sp, #28]
    254c:	1a000025 	bne	25e8 <pow+0x168>
    2550:	e28d5018 	add	r5, sp, #24
    2554:	e8950030 	ldm	r5, {r4, r5}
    2558:	eaffffda 	b	24c8 <pow+0x48>
    255c:	e1a00008 	mov	r0, r8
    2560:	e1a01009 	mov	r1, r9
    2564:	e3a02000 	mov	r2, #0
    2568:	e3a03000 	mov	r3, #0
    256c:	eb000f0e 	bl	61ac <__aeabi_dcmpeq>
    2570:	e3500000 	cmp	r0, #0
    2574:	0a000026 	beq	2614 <pow+0x194>
    2578:	e1a00006 	mov	r0, r6
    257c:	e1a01007 	mov	r1, r7
    2580:	e3a02000 	mov	r2, #0
    2584:	e3a03000 	mov	r3, #0
    2588:	eb000f07 	bl	61ac <__aeabi_dcmpeq>
    258c:	e3500000 	cmp	r0, #0
    2590:	0a00004e 	beq	26d0 <pow+0x250>
    2594:	e1db30d0 	ldrsb	r3, [r11]
    2598:	e3530000 	cmp	r3, #0
    259c:	e3a03001 	mov	r3, #1
    25a0:	e58d3000 	str	r3, [sp]
    25a4:	e59f33b8 	ldr	r3, [pc, #952]	; 2964 <pow+0x4e4>
    25a8:	e58d3004 	str	r3, [sp, #4]
    25ac:	e3a03000 	mov	r3, #0
    25b0:	e58d3020 	str	r3, [sp, #32]
    25b4:	e3a04000 	mov	r4, #0
    25b8:	e3a03000 	mov	r3, #0
    25bc:	e58d8008 	str	r8, [sp, #8]
    25c0:	e58d900c 	str	r9, [sp, #12]
    25c4:	e58d6010 	str	r6, [sp, #16]
    25c8:	e58d7014 	str	r7, [sp, #20]
    25cc:	e58d3018 	str	r3, [sp, #24]
    25d0:	e58d401c 	str	r4, [sp, #28]
    25d4:	159f338c 	ldrne	r3, [pc, #908]	; 2968 <pow+0x4e8>
    25d8:	13a02000 	movne	r2, #0
    25dc:	158d2018 	strne	r2, [sp, #24]
    25e0:	158d301c 	strne	r3, [sp, #28]
    25e4:	1affffd9 	bne	2550 <pow+0xd0>
    25e8:	e1a0000d 	mov	r0, sp
    25ec:	eb000b6a 	bl	539c <matherr>
    25f0:	e3500000 	cmp	r0, #0
    25f4:	0a000058 	beq	275c <pow+0x2dc>
    25f8:	e59d3020 	ldr	r3, [sp, #32]
    25fc:	e3530000 	cmp	r3, #0
    2600:	0affffd2 	beq	2550 <pow+0xd0>
    2604:	eb000f3a 	bl	62f4 <__errno>
    2608:	e59d3020 	ldr	r3, [sp, #32]
    260c:	e5803000 	str	r3, [r0]
    2610:	eaffffce 	b	2550 <pow+0xd0>
    2614:	e1a00004 	mov	r0, r4
    2618:	e1a01005 	mov	r1, r5
    261c:	eb000b3f 	bl	5320 <finite>
    2620:	e250a000 	subs	r10, r0, #0
    2624:	0a000050 	beq	276c <pow+0x2ec>
    2628:	e1a00004 	mov	r0, r4
    262c:	e1a01005 	mov	r1, r5
    2630:	e3a02000 	mov	r2, #0
    2634:	e3a03000 	mov	r3, #0
    2638:	eb000edb 	bl	61ac <__aeabi_dcmpeq>
    263c:	e3500000 	cmp	r0, #0
    2640:	0affffa0 	beq	24c8 <pow+0x48>
    2644:	e1a00008 	mov	r0, r8
    2648:	e1a01009 	mov	r1, r9
    264c:	eb000b33 	bl	5320 <finite>
    2650:	e3500000 	cmp	r0, #0
    2654:	0affff9b 	beq	24c8 <pow+0x48>
    2658:	e1a00006 	mov	r0, r6
    265c:	e1a01007 	mov	r1, r7
    2660:	eb000b2e 	bl	5320 <finite>
    2664:	e3500000 	cmp	r0, #0
    2668:	0affff96 	beq	24c8 <pow+0x48>
    266c:	e1db30d0 	ldrsb	r3, [r11]
    2670:	e3530002 	cmp	r3, #2
    2674:	e3a03004 	mov	r3, #4
    2678:	e58d3000 	str	r3, [sp]
    267c:	e59f32e0 	ldr	r3, [pc, #736]	; 2964 <pow+0x4e4>
    2680:	e58d3004 	str	r3, [sp, #4]
    2684:	e3a03000 	mov	r3, #0
    2688:	e58d3020 	str	r3, [sp, #32]
    268c:	e3a04000 	mov	r4, #0
    2690:	e3a03000 	mov	r3, #0
    2694:	e58d8008 	str	r8, [sp, #8]
    2698:	e58d900c 	str	r9, [sp, #12]
    269c:	e58d6010 	str	r6, [sp, #16]
    26a0:	e58d7014 	str	r7, [sp, #20]
    26a4:	e58d3018 	str	r3, [sp, #24]
    26a8:	e58d401c 	str	r4, [sp, #28]
    26ac:	0a00005c 	beq	2824 <pow+0x3a4>
    26b0:	e1a0000d 	mov	r0, sp
    26b4:	eb000b38 	bl	539c <matherr>
    26b8:	e3500000 	cmp	r0, #0
    26bc:	0a000058 	beq	2824 <pow+0x3a4>
    26c0:	e59d3020 	ldr	r3, [sp, #32]
    26c4:	e3530000 	cmp	r3, #0
    26c8:	0affffa0 	beq	2550 <pow+0xd0>
    26cc:	eaffffcc 	b	2604 <pow+0x184>
    26d0:	e1a00006 	mov	r0, r6
    26d4:	e1a01007 	mov	r1, r7
    26d8:	eb000b10 	bl	5320 <finite>
    26dc:	e3500000 	cmp	r0, #0
    26e0:	0affff78 	beq	24c8 <pow+0x48>
    26e4:	e1a00006 	mov	r0, r6
    26e8:	e1a01007 	mov	r1, r7
    26ec:	e3a02000 	mov	r2, #0
    26f0:	e3a03000 	mov	r3, #0
    26f4:	eb000eb2 	bl	61c4 <__aeabi_dcmplt>
    26f8:	e3500000 	cmp	r0, #0
    26fc:	0affff71 	beq	24c8 <pow+0x48>
    2700:	e3a02001 	mov	r2, #1
    2704:	e5db3000 	ldrb	r3, [r11]
    2708:	e58d2000 	str	r2, [sp]
    270c:	e59f2250 	ldr	r2, [pc, #592]	; 2964 <pow+0x4e4>
    2710:	e3530000 	cmp	r3, #0
    2714:	e58d2004 	str	r2, [sp, #4]
    2718:	e3a02000 	mov	r2, #0
    271c:	e58d2020 	str	r2, [sp, #32]
    2720:	e58d8008 	str	r8, [sp, #8]
    2724:	e58d900c 	str	r9, [sp, #12]
    2728:	e58d6010 	str	r6, [sp, #16]
    272c:	e58d7014 	str	r7, [sp, #20]
    2730:	0a000036 	beq	2810 <pow+0x390>
    2734:	e3530002 	cmp	r3, #2
    2738:	e59f322c 	ldr	r3, [pc, #556]	; 296c <pow+0x4ec>
    273c:	e3a02000 	mov	r2, #0
    2740:	e58d2018 	str	r2, [sp, #24]
    2744:	e58d301c 	str	r3, [sp, #28]
    2748:	1a00002b 	bne	27fc <pow+0x37c>
    274c:	eb000ee8 	bl	62f4 <__errno>
    2750:	e3a03021 	mov	r3, #33	; 0x21
    2754:	e5803000 	str	r3, [r0]
    2758:	eaffffd8 	b	26c0 <pow+0x240>
    275c:	eb000ee4 	bl	62f4 <__errno>
    2760:	e3a03021 	mov	r3, #33	; 0x21
    2764:	e5803000 	str	r3, [r0]
    2768:	eaffffa2 	b	25f8 <pow+0x178>
    276c:	e1a00008 	mov	r0, r8
    2770:	e1a01009 	mov	r1, r9
    2774:	eb000ae9 	bl	5320 <finite>
    2778:	e3500000 	cmp	r0, #0
    277c:	0affffa9 	beq	2628 <pow+0x1a8>
    2780:	e1a00006 	mov	r0, r6
    2784:	e1a01007 	mov	r1, r7
    2788:	eb000ae4 	bl	5320 <finite>
    278c:	e3500000 	cmp	r0, #0
    2790:	0affffa4 	beq	2628 <pow+0x1a8>
    2794:	e1a00004 	mov	r0, r4
    2798:	e1a01005 	mov	r1, r5
    279c:	eb000ae3 	bl	5330 <__fpclassifyd>
    27a0:	e3500000 	cmp	r0, #0
    27a4:	1a000022 	bne	2834 <pow+0x3b4>
    27a8:	e3a03001 	mov	r3, #1
    27ac:	e5db4000 	ldrb	r4, [r11]
    27b0:	e58d3000 	str	r3, [sp]
    27b4:	e59f31a8 	ldr	r3, [pc, #424]	; 2964 <pow+0x4e4>
    27b8:	e3540000 	cmp	r4, #0
    27bc:	e58d3004 	str	r3, [sp, #4]
    27c0:	e58d0020 	str	r0, [sp, #32]
    27c4:	e58d8008 	str	r8, [sp, #8]
    27c8:	e58d900c 	str	r9, [sp, #12]
    27cc:	e58d6010 	str	r6, [sp, #16]
    27d0:	e58d7014 	str	r7, [sp, #20]
    27d4:	0a00000d 	beq	2810 <pow+0x390>
    27d8:	e3a00000 	mov	r0, #0
    27dc:	e3a01000 	mov	r1, #0
    27e0:	e1a02000 	mov	r2, r0
    27e4:	e1a03001 	mov	r3, r1
    27e8:	eb000db9 	bl	5ed4 <__aeabi_ddiv>
    27ec:	e3540002 	cmp	r4, #2
    27f0:	e58d0018 	str	r0, [sp, #24]
    27f4:	e58d101c 	str	r1, [sp, #28]
    27f8:	0affffd3 	beq	274c <pow+0x2cc>
    27fc:	e1a0000d 	mov	r0, sp
    2800:	eb000ae5 	bl	539c <matherr>
    2804:	e3500000 	cmp	r0, #0
    2808:	1affffac 	bne	26c0 <pow+0x240>
    280c:	eaffffce 	b	274c <pow+0x2cc>
    2810:	e3a03000 	mov	r3, #0
    2814:	e3a04000 	mov	r4, #0
    2818:	e58d3018 	str	r3, [sp, #24]
    281c:	e58d401c 	str	r4, [sp, #28]
    2820:	eafffff5 	b	27fc <pow+0x37c>
    2824:	eb000eb2 	bl	62f4 <__errno>
    2828:	e3a03022 	mov	r3, #34	; 0x22
    282c:	e5803000 	str	r3, [r0]
    2830:	eaffffa2 	b	26c0 <pow+0x240>
    2834:	e1db20d0 	ldrsb	r2, [r11]
    2838:	e3520000 	cmp	r2, #0
    283c:	e3a02003 	mov	r2, #3
    2840:	e58d2000 	str	r2, [sp]
    2844:	e59f2118 	ldr	r2, [pc, #280]	; 2964 <pow+0x4e4>
    2848:	e1a00008 	mov	r0, r8
    284c:	e58d2004 	str	r2, [sp, #4]
    2850:	e1a01009 	mov	r1, r9
    2854:	e58da020 	str	r10, [sp, #32]
    2858:	e58d8008 	str	r8, [sp, #8]
    285c:	e58d900c 	str	r9, [sp, #12]
    2860:	e58d6010 	str	r6, [sp, #16]
    2864:	e58d7014 	str	r7, [sp, #20]
    2868:	e3a02000 	mov	r2, #0
    286c:	e3a03000 	mov	r3, #0
    2870:	1a000011 	bne	28bc <pow+0x43c>
    2874:	e59f50f4 	ldr	r5, [pc, #244]	; 2970 <pow+0x4f0>
    2878:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    287c:	e58d4018 	str	r4, [sp, #24]
    2880:	e58d501c 	str	r5, [sp, #28]
    2884:	eb000e4e 	bl	61c4 <__aeabi_dcmplt>
    2888:	e3500000 	cmp	r0, #0
    288c:	1a000022 	bne	291c <pow+0x49c>
    2890:	e1db30d0 	ldrsb	r3, [r11]
    2894:	e3530002 	cmp	r3, #2
    2898:	0a000003 	beq	28ac <pow+0x42c>
    289c:	e1a0000d 	mov	r0, sp
    28a0:	eb000abd 	bl	539c <matherr>
    28a4:	e3500000 	cmp	r0, #0
    28a8:	1affff52 	bne	25f8 <pow+0x178>
    28ac:	eb000e90 	bl	62f4 <__errno>
    28b0:	e3a03022 	mov	r3, #34	; 0x22
    28b4:	e5803000 	str	r3, [r0]
    28b8:	eaffff4e 	b	25f8 <pow+0x178>
    28bc:	e59f50b0 	ldr	r5, [pc, #176]	; 2974 <pow+0x4f4>
    28c0:	e3a04000 	mov	r4, #0
    28c4:	e58d4018 	str	r4, [sp, #24]
    28c8:	e58d501c 	str	r5, [sp, #28]
    28cc:	eb000e3c 	bl	61c4 <__aeabi_dcmplt>
    28d0:	e3500000 	cmp	r0, #0
    28d4:	0affffed 	beq	2890 <pow+0x410>
    28d8:	e3a02000 	mov	r2, #0
    28dc:	e59f3094 	ldr	r3, [pc, #148]	; 2978 <pow+0x4f8>
    28e0:	e1a00006 	mov	r0, r6
    28e4:	e1a01007 	mov	r1, r7
    28e8:	eb000cd5 	bl	5c44 <__aeabi_dmul>
    28ec:	e1a04000 	mov	r4, r0
    28f0:	e1a05001 	mov	r5, r1
    28f4:	eb000aae 	bl	53b4 <rint>
    28f8:	e1a02004 	mov	r2, r4
    28fc:	e1a03005 	mov	r3, r5
    2900:	eb000e29 	bl	61ac <__aeabi_dcmpeq>
    2904:	e3500000 	cmp	r0, #0
    2908:	059f305c 	ldreq	r3, [pc, #92]	; 296c <pow+0x4ec>
    290c:	03a02000 	moveq	r2, #0
    2910:	058d2018 	streq	r2, [sp, #24]
    2914:	058d301c 	streq	r3, [sp, #28]
    2918:	eaffffdc 	b	2890 <pow+0x410>
    291c:	e3a02000 	mov	r2, #0
    2920:	e59f3050 	ldr	r3, [pc, #80]	; 2978 <pow+0x4f8>
    2924:	e1a00006 	mov	r0, r6
    2928:	e1a01007 	mov	r1, r7
    292c:	eb000cc4 	bl	5c44 <__aeabi_dmul>
    2930:	e1a04000 	mov	r4, r0
    2934:	e1a05001 	mov	r5, r1
    2938:	eb000a9d 	bl	53b4 <rint>
    293c:	e1a02004 	mov	r2, r4
    2940:	e1a03005 	mov	r3, r5
    2944:	eb000e18 	bl	61ac <__aeabi_dcmpeq>
    2948:	e3500000 	cmp	r0, #0
    294c:	059f3028 	ldreq	r3, [pc, #40]	; 297c <pow+0x4fc>
    2950:	03a0220e 	moveq	r2, #-536870912	; 0xe0000000
    2954:	058d2018 	streq	r2, [sp, #24]
    2958:	058d301c 	streq	r3, [sp, #28]
    295c:	eaffffcb 	b	2890 <pow+0x410>
    2960:	001259e0 	.word	0x001259e0
    2964:	00007744 	.word	0x00007744
    2968:	3ff00000 	.word	0x3ff00000
    296c:	fff00000 	.word	0xfff00000
    2970:	47efffff 	.word	0x47efffff
    2974:	7ff00000 	.word	0x7ff00000
    2978:	3fe00000 	.word	0x3fe00000
    297c:	c7efffff 	.word	0xc7efffff

00002980 <__ieee754_pow>:
    2980:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2984:	e1a0b003 	mov	r11, r3
    2988:	e1a0a002 	mov	r10, r2
    298c:	e3cb6102 	bic	r6, r11, #-2147483648	; 0x80000000
    2990:	e1a08001 	mov	r8, r1
    2994:	e24dd044 	sub	sp, sp, #68	; 0x44
    2998:	e196100a 	orrs	r1, r6, r10
    299c:	e1a04002 	mov	r4, r2
    29a0:	e1a07000 	mov	r7, r0
    29a4:	e1a05003 	mov	r5, r3
    29a8:	e1a0c00a 	mov	r12, r10
    29ac:	e58d8010 	str	r8, [sp, #16]
    29b0:	e1a09000 	mov	r9, r0
    29b4:	0a000060 	beq	2b3c <__ieee754_pow+0x1bc>
    29b8:	e59f12d0 	ldr	r1, [pc, #720]	; 2c90 <__ieee754_pow+0x310>
    29bc:	e3c80102 	bic	r0, r8, #-2147483648	; 0x80000000
    29c0:	e1500001 	cmp	r0, r1
    29c4:	e58d0008 	str	r0, [sp, #8]
    29c8:	da00000b 	ble	29fc <__ieee754_pow+0x7c>
    29cc:	e59d4008 	ldr	r4, [sp, #8]
    29d0:	e284a103 	add	r10, r4, #-1073741824	; 0xc0000000
    29d4:	e28aa601 	add	r10, r10, #1048576	; 0x100000
    29d8:	e19a9009 	orrs	r9, r10, r9
    29dc:	01a0a009 	moveq	r10, r9
    29e0:	059fb2d4 	ldreq	r11, [pc, #724]	; 2cbc <__ieee754_pow+0x33c>
    29e4:	1a000057 	bne	2b48 <__ieee754_pow+0x1c8>
    29e8:	e1a0000a 	mov	r0, r10
    29ec:	e1a0100b 	mov	r1, r11
    29f0:	e28dd044 	add	sp, sp, #68	; 0x44
    29f4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    29f8:	e12fff1e 	bx	lr
    29fc:	13a00000 	movne	r0, #0
    2a00:	03a00001 	moveq	r0, #1
    2a04:	e58d0018 	str	r0, [sp, #24]
    2a08:	e3570000 	cmp	r7, #0
    2a0c:	03a00000 	moveq	r0, #0
    2a10:	12000001 	andne	r0, r0, #1
    2a14:	e3500000 	cmp	r0, #0
    2a18:	1affffeb 	bne	29cc <__ieee754_pow+0x4c>
    2a1c:	e1560001 	cmp	r6, r1
    2a20:	caffffe9 	bgt	29cc <__ieee754_pow+0x4c>
    2a24:	13a01000 	movne	r1, #0
    2a28:	03a01001 	moveq	r1, #1
    2a2c:	e58d1028 	str	r1, [sp, #40]	; 0x28
    2a30:	e35a0000 	cmp	r10, #0
    2a34:	03a01000 	moveq	r1, #0
    2a38:	12011001 	andne	r1, r1, #1
    2a3c:	e3510000 	cmp	r1, #0
    2a40:	1affffe1 	bne	29cc <__ieee754_pow+0x4c>
    2a44:	e59d0010 	ldr	r0, [sp, #16]
    2a48:	e3500000 	cmp	r0, #0
    2a4c:	e58d8020 	str	r8, [sp, #32]
    2a50:	e1a0400b 	mov	r4, r11
    2a54:	ba000040 	blt	2b5c <__ieee754_pow+0x1dc>
    2a58:	e58d1030 	str	r1, [sp, #48]	; 0x30
    2a5c:	e35c0000 	cmp	r12, #0
    2a60:	1a00000c 	bne	2a98 <__ieee754_pow+0x118>
    2a64:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    2a68:	e3530000 	cmp	r3, #0
    2a6c:	1a00004e 	bne	2bac <__ieee754_pow+0x22c>
    2a70:	e59f3244 	ldr	r3, [pc, #580]	; 2cbc <__ieee754_pow+0x33c>
    2a74:	e1560003 	cmp	r6, r3
    2a78:	0a000073 	beq	2c4c <__ieee754_pow+0x2cc>
    2a7c:	e3540101 	cmp	r4, #1073741824	; 0x40000000
    2a80:	01a00007 	moveq	r0, r7
    2a84:	01a01008 	moveq	r1, r8
    2a88:	0a000025 	beq	2b24 <__ieee754_pow+0x1a4>
    2a8c:	e59f3200 	ldr	r3, [pc, #512]	; 2c94 <__ieee754_pow+0x314>
    2a90:	e1540003 	cmp	r4, r3
    2a94:	0a0002c7 	beq	35b8 <__ieee754_pow+0xc38>
    2a98:	e1a00007 	mov	r0, r7
    2a9c:	e1a01008 	mov	r1, r8
    2aa0:	eb000a1c 	bl	5318 <fabs>
    2aa4:	e3590000 	cmp	r9, #0
    2aa8:	1a000008 	bne	2ad0 <__ieee754_pow+0x150>
    2aac:	e59d3018 	ldr	r3, [sp, #24]
    2ab0:	e59d2008 	ldr	r2, [sp, #8]
    2ab4:	e3520000 	cmp	r2, #0
    2ab8:	03833001 	orreq	r3, r3, #1
    2abc:	e3530000 	cmp	r3, #0
    2ac0:	1a000046 	bne	2be0 <__ieee754_pow+0x260>
    2ac4:	e59f31f0 	ldr	r3, [pc, #496]	; 2cbc <__ieee754_pow+0x33c>
    2ac8:	e1520003 	cmp	r2, r3
    2acc:	0a000043 	beq	2be0 <__ieee754_pow+0x260>
    2ad0:	e59d2010 	ldr	r2, [sp, #16]
    2ad4:	e1a03fa2 	lsr	r3, r2, #31
    2ad8:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    2adc:	e2433001 	sub	r3, r3, #1
    2ae0:	e1922003 	orrs	r2, r2, r3
    2ae4:	e58d3010 	str	r3, [sp, #16]
    2ae8:	0a000052 	beq	2c38 <__ieee754_pow+0x2b8>
    2aec:	e59f31a4 	ldr	r3, [pc, #420]	; 2c98 <__ieee754_pow+0x318>
    2af0:	e1560003 	cmp	r6, r3
    2af4:	da000071 	ble	2cc0 <__ieee754_pow+0x340>
    2af8:	e2833621 	add	r3, r3, #34603008	; 0x2100000
    2afc:	e1560003 	cmp	r6, r3
    2b00:	da00030e 	ble	3740 <__ieee754_pow+0xdc0>
    2b04:	e59d0008 	ldr	r0, [sp, #8]
    2b08:	e2433341 	sub	r3, r3, #67108865	; 0x4000001
    2b0c:	e1500003 	cmp	r0, r3
    2b10:	da0002b4 	ble	35e8 <__ieee754_pow+0xc68>
    2b14:	e3540000 	cmp	r4, #0
    2b18:	da00002d 	ble	2bd4 <__ieee754_pow+0x254>
    2b1c:	e28f1f59 	add	r1, pc, #356	; 0x164
    2b20:	e8910003 	ldm	r1, {r0, r1}
    2b24:	e1a02000 	mov	r2, r0
    2b28:	e1a03001 	mov	r3, r1
    2b2c:	eb000c44 	bl	5c44 <__aeabi_dmul>
    2b30:	e1a0a000 	mov	r10, r0
    2b34:	e1a0b001 	mov	r11, r1
    2b38:	eaffffaa 	b	29e8 <__ieee754_pow+0x68>
    2b3c:	e1a0a001 	mov	r10, r1
    2b40:	e59fb174 	ldr	r11, [pc, #372]	; 2cbc <__ieee754_pow+0x33c>
    2b44:	eaffffa7 	b	29e8 <__ieee754_pow+0x68>
    2b48:	e59f014c 	ldr	r0, [pc, #332]	; 2c9c <__ieee754_pow+0x31c>
    2b4c:	eb000a14 	bl	53a4 <nan>
    2b50:	e1a0a000 	mov	r10, r0
    2b54:	e1a0b001 	mov	r11, r1
    2b58:	eaffffa2 	b	29e8 <__ieee754_pow+0x68>
    2b5c:	e59f313c 	ldr	r3, [pc, #316]	; 2ca0 <__ieee754_pow+0x320>
    2b60:	e1560003 	cmp	r6, r3
    2b64:	ca000044 	bgt	2c7c <__ieee754_pow+0x2fc>
    2b68:	e2433635 	sub	r3, r3, #55574528	; 0x3500000
    2b6c:	e1560003 	cmp	r6, r3
    2b70:	daffffb8 	ble	2a58 <__ieee754_pow+0xd8>
    2b74:	e59f2128 	ldr	r2, [pc, #296]	; 2ca4 <__ieee754_pow+0x324>
    2b78:	e1a03a46 	asr	r3, r6, #20
    2b7c:	e1530002 	cmp	r3, r2
    2b80:	da00034b 	ble	38b4 <__ieee754_pow+0xf34>
    2b84:	e2633e43 	rsb	r3, r3, #1072	; 0x430
    2b88:	e2832003 	add	r2, r3, #3
    2b8c:	e1a0323a 	lsr	r3, r10, r2
    2b90:	e15a0213 	cmp	r10, r3, lsl r2
    2b94:	02033001 	andeq	r3, r3, #1
    2b98:	02633002 	rsbeq	r3, r3, #2
    2b9c:	058d3030 	streq	r3, [sp, #48]	; 0x30
    2ba0:	13a02000 	movne	r2, #0
    2ba4:	158d2030 	strne	r2, [sp, #48]	; 0x30
    2ba8:	eaffffab 	b	2a5c <__ieee754_pow+0xdc>
    2bac:	e59d0008 	ldr	r0, [sp, #8]
    2bb0:	e2803103 	add	r3, r0, #-1073741824	; 0xc0000000
    2bb4:	e2833601 	add	r3, r3, #1048576	; 0x100000
    2bb8:	e1933009 	orrs	r3, r3, r9
    2bbc:	0a000286 	beq	35dc <__ieee754_pow+0xc5c>
    2bc0:	e59f30e0 	ldr	r3, [pc, #224]	; 2ca8 <__ieee754_pow+0x328>
    2bc4:	e1500003 	cmp	r0, r3
    2bc8:	da0002c4 	ble	36e0 <__ieee754_pow+0xd60>
    2bcc:	e3540000 	cmp	r4, #0
    2bd0:	aaffff84 	bge	29e8 <__ieee754_pow+0x68>
    2bd4:	e3a0a000 	mov	r10, #0
    2bd8:	e1a0b00a 	mov	r11, r10
    2bdc:	eaffff81 	b	29e8 <__ieee754_pow+0x68>
    2be0:	e3540000 	cmp	r4, #0
    2be4:	ba000321 	blt	3870 <__ieee754_pow+0xef0>
    2be8:	e59d4020 	ldr	r4, [sp, #32]
    2bec:	e3540000 	cmp	r4, #0
    2bf0:	aaffffce 	bge	2b30 <__ieee754_pow+0x1b0>
    2bf4:	e59d4008 	ldr	r4, [sp, #8]
    2bf8:	e2843103 	add	r3, r4, #-1073741824	; 0xc0000000
    2bfc:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    2c00:	e2833601 	add	r3, r3, #1048576	; 0x100000
    2c04:	e1944003 	orrs	r4, r4, r3
    2c08:	1a000335 	bne	38e4 <__ieee754_pow+0xf64>
    2c0c:	e1a04000 	mov	r4, r0
    2c10:	e1a02000 	mov	r2, r0
    2c14:	e1a05001 	mov	r5, r1
    2c18:	e1a03001 	mov	r3, r1
    2c1c:	eb000b03 	bl	5830 <__aeabi_dsub>
    2c20:	e1a02000 	mov	r2, r0
    2c24:	e1a03001 	mov	r3, r1
    2c28:	eb000ca9 	bl	5ed4 <__aeabi_ddiv>
    2c2c:	e1a0a000 	mov	r10, r0
    2c30:	e1a0b001 	mov	r11, r1
    2c34:	eaffff6b 	b	29e8 <__ieee754_pow+0x68>
    2c38:	e1a00007 	mov	r0, r7
    2c3c:	e1a01008 	mov	r1, r8
    2c40:	e1a02007 	mov	r2, r7
    2c44:	e1a03008 	mov	r3, r8
    2c48:	eafffff3 	b	2c1c <__ieee754_pow+0x29c>
    2c4c:	e3540000 	cmp	r4, #0
    2c50:	a1a0a007 	movge	r10, r7
    2c54:	a1a0b008 	movge	r11, r8
    2c58:	aaffff62 	bge	29e8 <__ieee754_pow+0x68>
    2c5c:	e1a02007 	mov	r2, r7
    2c60:	e1a03008 	mov	r3, r8
    2c64:	e3a00000 	mov	r0, #0
    2c68:	e59f104c 	ldr	r1, [pc, #76]	; 2cbc <__ieee754_pow+0x33c>
    2c6c:	eb000c98 	bl	5ed4 <__aeabi_ddiv>
    2c70:	e1a0a000 	mov	r10, r0
    2c74:	e1a0b001 	mov	r11, r1
    2c78:	eaffff5a 	b	29e8 <__ieee754_pow+0x68>
    2c7c:	e3a01002 	mov	r1, #2
    2c80:	eaffff74 	b	2a58 <__ieee754_pow+0xd8>
    2c84:	e1a00000 	nop			; (mov r0, r0)
    2c88:	8800759c 	.word	0x8800759c
    2c8c:	7e37e43c 	.word	0x7e37e43c
    2c90:	7ff00000 	.word	0x7ff00000
    2c94:	3fe00000 	.word	0x3fe00000
    2c98:	41e00000 	.word	0x41e00000
    2c9c:	00007778 	.word	0x00007778
    2ca0:	433fffff 	.word	0x433fffff
    2ca4:	00000413 	.word	0x00000413
    2ca8:	3fefffff 	.word	0x3fefffff
    2cac:	43400000 	.word	0x43400000
    2cb0:	0003988e 	.word	0x0003988e
    2cb4:	000bb679 	.word	0x000bb679
    2cb8:	00007748 	.word	0x00007748
    2cbc:	3ff00000 	.word	0x3ff00000
    2cc0:	e59d4008 	ldr	r4, [sp, #8]
    2cc4:	e3540601 	cmp	r4, #1048576	; 0x100000
    2cc8:	a3a02000 	movge	r2, #0
    2ccc:	aa000004 	bge	2ce4 <__ieee754_pow+0x364>
    2cd0:	e3a02000 	mov	r2, #0
    2cd4:	e51f3030 	ldr	r3, [pc, #-48]	; 2cac <__ieee754_pow+0x32c>
    2cd8:	eb000bd9 	bl	5c44 <__aeabi_dmul>
    2cdc:	e58d1008 	str	r1, [sp, #8]
    2ce0:	e3e02034 	mvn	r2, #52	; 0x34
    2ce4:	e59d4008 	ldr	r4, [sp, #8]
    2ce8:	e51fe040 	ldr	lr, [pc, #-64]	; 2cb0 <__ieee754_pow+0x330>
    2cec:	e3c434ff 	bic	r3, r4, #-16777216	; 0xff000000
    2cf0:	e1a0ca44 	asr	r12, r4, #20
    2cf4:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
    2cf8:	e153000e 	cmp	r3, lr
    2cfc:	e24ccfff 	sub	r12, r12, #1020	; 0x3fc
    2d00:	e24cc003 	sub	r12, r12, #3
    2d04:	e38345ff 	orr	r4, r3, #1069547520	; 0x3fc00000
    2d08:	d3a05000 	movle	r5, #0
    2d0c:	e08cc002 	add	r12, r12, r2
    2d10:	e3844603 	orr	r4, r4, #3145728	; 0x300000
    2d14:	d1a0e005 	movle	lr, r5
    2d18:	da000007 	ble	2d3c <__ieee754_pow+0x3bc>
    2d1c:	e51f2070 	ldr	r2, [pc, #-112]	; 2cb4 <__ieee754_pow+0x334>
    2d20:	e1530002 	cmp	r3, r2
    2d24:	c3a05000 	movgt	r5, #0
    2d28:	c28cc001 	addgt	r12, r12, #1
    2d2c:	c2444601 	subgt	r4, r4, #1048576	; 0x100000
    2d30:	c1a0e005 	movgt	lr, r5
    2d34:	d3a05701 	movle	r5, #262144	; 0x40000
    2d38:	d3a0e001 	movle	lr, #1
    2d3c:	e51f108c 	ldr	r1, [pc, #-140]	; 2cb8 <__ieee754_pow+0x338>
    2d40:	e081118e 	add	r1, r1, lr, lsl #3
    2d44:	e1a02000 	mov	r2, r0
    2d48:	e58d1034 	str	r1, [sp, #52]	; 0x34
    2d4c:	e8910003 	ldm	r1, {r0, r1}
    2d50:	e1a03004 	mov	r3, r4
    2d54:	e58d0028 	str	r0, [sp, #40]	; 0x28
    2d58:	e58d102c 	str	r1, [sp, #44]	; 0x2c
    2d5c:	e58d2020 	str	r2, [sp, #32]
    2d60:	e58d3024 	str	r3, [sp, #36]	; 0x24
    2d64:	e1a00002 	mov	r0, r2
    2d68:	e1a01004 	mov	r1, r4
    2d6c:	e28d3028 	add	r3, sp, #40	; 0x28
    2d70:	e893000c 	ldm	r3, {r2, r3}
    2d74:	e58dc004 	str	r12, [sp, #4]
    2d78:	eb000aac 	bl	5830 <__aeabi_dsub>
    2d7c:	e28d3028 	add	r3, sp, #40	; 0x28
    2d80:	e893000c 	ldm	r3, {r2, r3}
    2d84:	e1a06000 	mov	r6, r0
    2d88:	e1a07001 	mov	r7, r1
    2d8c:	e28d1020 	add	r1, sp, #32
    2d90:	e8910003 	ldm	r1, {r0, r1}
    2d94:	eb000aa6 	bl	5834 <__adddf3>
    2d98:	e1a02000 	mov	r2, r0
    2d9c:	e1a03001 	mov	r3, r1
    2da0:	e3a00000 	mov	r0, #0
    2da4:	e51f10f0 	ldr	r1, [pc, #-240]	; 2cbc <__ieee754_pow+0x33c>
    2da8:	eb000c49 	bl	5ed4 <__aeabi_ddiv>
    2dac:	e58d0038 	str	r0, [sp, #56]	; 0x38
    2db0:	e58d103c 	str	r1, [sp, #60]	; 0x3c
    2db4:	e28d3038 	add	r3, sp, #56	; 0x38
    2db8:	e893000c 	ldm	r3, {r2, r3}
    2dbc:	e1a00006 	mov	r0, r6
    2dc0:	e1a01007 	mov	r1, r7
    2dc4:	eb000b9e 	bl	5c44 <__aeabi_dmul>
    2dc8:	e58d0018 	str	r0, [sp, #24]
    2dcc:	e58d101c 	str	r1, [sp, #28]
    2dd0:	e28d3018 	add	r3, sp, #24
    2dd4:	e893000c 	ldm	r3, {r2, r3}
    2dd8:	e1a010c4 	asr	r1, r4, #1
    2ddc:	e3a04000 	mov	r4, #0
    2de0:	e58d2008 	str	r2, [sp, #8]
    2de4:	e58d300c 	str	r3, [sp, #12]
    2de8:	e58d4008 	str	r4, [sp, #8]
    2dec:	e28d9008 	add	r9, sp, #8
    2df0:	e8990300 	ldm	r9, {r8, r9}
    2df4:	e3811202 	orr	r1, r1, #536870912	; 0x20000000
    2df8:	e2811702 	add	r1, r1, #524288	; 0x80000
    2dfc:	e0853001 	add	r3, r5, r1
    2e00:	e3a02000 	mov	r2, #0
    2e04:	e1a00008 	mov	r0, r8
    2e08:	e1a01009 	mov	r1, r9
    2e0c:	e1a04002 	mov	r4, r2
    2e10:	e1a05003 	mov	r5, r3
    2e14:	eb000b8a 	bl	5c44 <__aeabi_dmul>
    2e18:	e1a02000 	mov	r2, r0
    2e1c:	e1a03001 	mov	r3, r1
    2e20:	e1a00006 	mov	r0, r6
    2e24:	e1a01007 	mov	r1, r7
    2e28:	eb000a80 	bl	5830 <__aeabi_dsub>
    2e2c:	e28d3028 	add	r3, sp, #40	; 0x28
    2e30:	e893000c 	ldm	r3, {r2, r3}
    2e34:	e1a06000 	mov	r6, r0
    2e38:	e1a07001 	mov	r7, r1
    2e3c:	e1a00004 	mov	r0, r4
    2e40:	e1a01005 	mov	r1, r5
    2e44:	eb000a79 	bl	5830 <__aeabi_dsub>
    2e48:	e1a02000 	mov	r2, r0
    2e4c:	e1a03001 	mov	r3, r1
    2e50:	e28d1020 	add	r1, sp, #32
    2e54:	e8910003 	ldm	r1, {r0, r1}
    2e58:	eb000a74 	bl	5830 <__aeabi_dsub>
    2e5c:	e1a02000 	mov	r2, r0
    2e60:	e1a03001 	mov	r3, r1
    2e64:	e1a00008 	mov	r0, r8
    2e68:	e1a01009 	mov	r1, r9
    2e6c:	eb000b74 	bl	5c44 <__aeabi_dmul>
    2e70:	e1a02000 	mov	r2, r0
    2e74:	e1a03001 	mov	r3, r1
    2e78:	e1a00006 	mov	r0, r6
    2e7c:	e1a01007 	mov	r1, r7
    2e80:	eb000a6a 	bl	5830 <__aeabi_dsub>
    2e84:	e28d3038 	add	r3, sp, #56	; 0x38
    2e88:	e893000c 	ldm	r3, {r2, r3}
    2e8c:	eb000b6c 	bl	5c44 <__aeabi_dmul>
    2e90:	e1a06000 	mov	r6, r0
    2e94:	e1a07001 	mov	r7, r1
    2e98:	e28d1018 	add	r1, sp, #24
    2e9c:	e8910003 	ldm	r1, {r0, r1}
    2ea0:	e1a02000 	mov	r2, r0
    2ea4:	e1a03001 	mov	r3, r1
    2ea8:	eb000b65 	bl	5c44 <__aeabi_dmul>
    2eac:	e1a02000 	mov	r2, r0
    2eb0:	e1a03001 	mov	r3, r1
    2eb4:	e1a04000 	mov	r4, r0
    2eb8:	e1a05001 	mov	r5, r1
    2ebc:	eb000b60 	bl	5c44 <__aeabi_dmul>
    2ec0:	e28f3e3f 	add	r3, pc, #1008	; 0x3f0
    2ec4:	e893000c 	ldm	r3, {r2, r3}
    2ec8:	e58d0020 	str	r0, [sp, #32]
    2ecc:	e58d1024 	str	r1, [sp, #36]	; 0x24
    2ed0:	e1a00004 	mov	r0, r4
    2ed4:	e1a01005 	mov	r1, r5
    2ed8:	eb000b59 	bl	5c44 <__aeabi_dmul>
    2edc:	e28f3ff7 	add	r3, pc, #988	; 0x3dc
    2ee0:	e893000c 	ldm	r3, {r2, r3}
    2ee4:	eb000a52 	bl	5834 <__adddf3>
    2ee8:	e1a02004 	mov	r2, r4
    2eec:	e1a03005 	mov	r3, r5
    2ef0:	eb000b53 	bl	5c44 <__aeabi_dmul>
    2ef4:	e28f3ff3 	add	r3, pc, #972	; 0x3cc
    2ef8:	e893000c 	ldm	r3, {r2, r3}
    2efc:	eb000a4c 	bl	5834 <__adddf3>
    2f00:	e1a02004 	mov	r2, r4
    2f04:	e1a03005 	mov	r3, r5
    2f08:	eb000b4d 	bl	5c44 <__aeabi_dmul>
    2f0c:	e28f3fef 	add	r3, pc, #956	; 0x3bc
    2f10:	e893000c 	ldm	r3, {r2, r3}
    2f14:	eb000a46 	bl	5834 <__adddf3>
    2f18:	e1a02004 	mov	r2, r4
    2f1c:	e1a03005 	mov	r3, r5
    2f20:	eb000b47 	bl	5c44 <__aeabi_dmul>
    2f24:	e28f3feb 	add	r3, pc, #940	; 0x3ac
    2f28:	e893000c 	ldm	r3, {r2, r3}
    2f2c:	eb000a40 	bl	5834 <__adddf3>
    2f30:	e1a02004 	mov	r2, r4
    2f34:	e1a03005 	mov	r3, r5
    2f38:	eb000b41 	bl	5c44 <__aeabi_dmul>
    2f3c:	e28f3fe7 	add	r3, pc, #924	; 0x39c
    2f40:	e893000c 	ldm	r3, {r2, r3}
    2f44:	eb000a3a 	bl	5834 <__adddf3>
    2f48:	e1a02000 	mov	r2, r0
    2f4c:	e1a03001 	mov	r3, r1
    2f50:	e28d1020 	add	r1, sp, #32
    2f54:	e8910003 	ldm	r1, {r0, r1}
    2f58:	eb000b39 	bl	5c44 <__aeabi_dmul>
    2f5c:	e28d3018 	add	r3, sp, #24
    2f60:	e893000c 	ldm	r3, {r2, r3}
    2f64:	e1a04000 	mov	r4, r0
    2f68:	e1a05001 	mov	r5, r1
    2f6c:	e1a00008 	mov	r0, r8
    2f70:	e1a01009 	mov	r1, r9
    2f74:	eb000a2e 	bl	5834 <__adddf3>
    2f78:	e1a02006 	mov	r2, r6
    2f7c:	e1a03007 	mov	r3, r7
    2f80:	eb000b2f 	bl	5c44 <__aeabi_dmul>
    2f84:	e1a02004 	mov	r2, r4
    2f88:	e1a03005 	mov	r3, r5
    2f8c:	eb000a28 	bl	5834 <__adddf3>
    2f90:	e1a02008 	mov	r2, r8
    2f94:	e58d0020 	str	r0, [sp, #32]
    2f98:	e58d1024 	str	r1, [sp, #36]	; 0x24
    2f9c:	e1a03009 	mov	r3, r9
    2fa0:	e1a00008 	mov	r0, r8
    2fa4:	e1a01009 	mov	r1, r9
    2fa8:	eb000b25 	bl	5c44 <__aeabi_dmul>
    2fac:	e3a02000 	mov	r2, #0
    2fb0:	e59f3348 	ldr	r3, [pc, #840]	; 3300 <__ieee754_pow+0x980>
    2fb4:	e58d0028 	str	r0, [sp, #40]	; 0x28
    2fb8:	e58d102c 	str	r1, [sp, #44]	; 0x2c
    2fbc:	eb000a1c 	bl	5834 <__adddf3>
    2fc0:	e28d3020 	add	r3, sp, #32
    2fc4:	e893000c 	ldm	r3, {r2, r3}
    2fc8:	eb000a19 	bl	5834 <__adddf3>
    2fcc:	e59de008 	ldr	lr, [sp, #8]
    2fd0:	e1a05001 	mov	r5, r1
    2fd4:	e1a0200e 	mov	r2, lr
    2fd8:	e1a03005 	mov	r3, r5
    2fdc:	e1a00008 	mov	r0, r8
    2fe0:	e1a01009 	mov	r1, r9
    2fe4:	e1a0400e 	mov	r4, lr
    2fe8:	eb000b15 	bl	5c44 <__aeabi_dmul>
    2fec:	e1a02004 	mov	r2, r4
    2ff0:	e1a08000 	mov	r8, r0
    2ff4:	e1a09001 	mov	r9, r1
    2ff8:	e1a03005 	mov	r3, r5
    2ffc:	e1a00006 	mov	r0, r6
    3000:	e1a01007 	mov	r1, r7
    3004:	eb000b0e 	bl	5c44 <__aeabi_dmul>
    3008:	e3a02000 	mov	r2, #0
    300c:	e1a06000 	mov	r6, r0
    3010:	e1a07001 	mov	r7, r1
    3014:	e1a00004 	mov	r0, r4
    3018:	e1a01005 	mov	r1, r5
    301c:	e59f32dc 	ldr	r3, [pc, #732]	; 3300 <__ieee754_pow+0x980>
    3020:	eb000a02 	bl	5830 <__aeabi_dsub>
    3024:	e28d3028 	add	r3, sp, #40	; 0x28
    3028:	e893000c 	ldm	r3, {r2, r3}
    302c:	eb0009ff 	bl	5830 <__aeabi_dsub>
    3030:	e1a02000 	mov	r2, r0
    3034:	e1a03001 	mov	r3, r1
    3038:	e28d1020 	add	r1, sp, #32
    303c:	e8910003 	ldm	r1, {r0, r1}
    3040:	eb0009fa 	bl	5830 <__aeabi_dsub>
    3044:	e28d3018 	add	r3, sp, #24
    3048:	e893000c 	ldm	r3, {r2, r3}
    304c:	eb000afc 	bl	5c44 <__aeabi_dmul>
    3050:	e1a02000 	mov	r2, r0
    3054:	e1a03001 	mov	r3, r1
    3058:	e1a00006 	mov	r0, r6
    305c:	e1a01007 	mov	r1, r7
    3060:	eb0009f3 	bl	5834 <__adddf3>
    3064:	e1a06000 	mov	r6, r0
    3068:	e1a07001 	mov	r7, r1
    306c:	e1a02006 	mov	r2, r6
    3070:	e1a03007 	mov	r3, r7
    3074:	e1a00008 	mov	r0, r8
    3078:	e1a01009 	mov	r1, r9
    307c:	eb0009ec 	bl	5834 <__adddf3>
    3080:	e59d2008 	ldr	r2, [sp, #8]
    3084:	e59f3278 	ldr	r3, [pc, #632]	; 3304 <__ieee754_pow+0x984>
    3088:	e1a04002 	mov	r4, r2
    308c:	e1a00002 	mov	r0, r2
    3090:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    3094:	e1a05001 	mov	r5, r1
    3098:	eb000ae9 	bl	5c44 <__aeabi_dmul>
    309c:	e28f3f91 	add	r3, pc, #580	; 0x244
    30a0:	e893000c 	ldm	r3, {r2, r3}
    30a4:	e58d0018 	str	r0, [sp, #24]
    30a8:	e58d101c 	str	r1, [sp, #28]
    30ac:	e1a00004 	mov	r0, r4
    30b0:	e1a01005 	mov	r1, r5
    30b4:	eb000ae2 	bl	5c44 <__aeabi_dmul>
    30b8:	e1a02008 	mov	r2, r8
    30bc:	e58d0020 	str	r0, [sp, #32]
    30c0:	e58d1024 	str	r1, [sp, #36]	; 0x24
    30c4:	e1a03009 	mov	r3, r9
    30c8:	e1a00004 	mov	r0, r4
    30cc:	e1a01005 	mov	r1, r5
    30d0:	eb0009d6 	bl	5830 <__aeabi_dsub>
    30d4:	e1a02000 	mov	r2, r0
    30d8:	e1a03001 	mov	r3, r1
    30dc:	e1a00006 	mov	r0, r6
    30e0:	e1a01007 	mov	r1, r7
    30e4:	eb0009d1 	bl	5830 <__aeabi_dsub>
    30e8:	e28f3c02 	add	r3, pc, #512	; 0x200
    30ec:	e893000c 	ldm	r3, {r2, r3}
    30f0:	eb000ad3 	bl	5c44 <__aeabi_dmul>
    30f4:	e1a02000 	mov	r2, r0
    30f8:	e1a03001 	mov	r3, r1
    30fc:	e28d1020 	add	r1, sp, #32
    3100:	e8910003 	ldm	r1, {r0, r1}
    3104:	eb0009ca 	bl	5834 <__adddf3>
    3108:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
    310c:	e2843010 	add	r3, r4, #16
    3110:	e893000c 	ldm	r3, {r2, r3}
    3114:	eb0009c6 	bl	5834 <__adddf3>
    3118:	e59dc004 	ldr	r12, [sp, #4]
    311c:	e1a04000 	mov	r4, r0
    3120:	e1a0000c 	mov	r0, r12
    3124:	e1a05001 	mov	r5, r1
    3128:	eb000a8e 	bl	5b68 <__aeabi_i2d>
    312c:	e59de034 	ldr	lr, [sp, #52]	; 0x34
    3130:	e28e9020 	add	r9, lr, #32
    3134:	e8990300 	ldm	r9, {r8, r9}
    3138:	e1a06000 	mov	r6, r0
    313c:	e1a07001 	mov	r7, r1
    3140:	e1a02004 	mov	r2, r4
    3144:	e28d1018 	add	r1, sp, #24
    3148:	e8910003 	ldm	r1, {r0, r1}
    314c:	e1a03005 	mov	r3, r5
    3150:	eb0009b7 	bl	5834 <__adddf3>
    3154:	e1a02008 	mov	r2, r8
    3158:	e1a03009 	mov	r3, r9
    315c:	eb0009b4 	bl	5834 <__adddf3>
    3160:	e1a02006 	mov	r2, r6
    3164:	e1a03007 	mov	r3, r7
    3168:	eb0009b1 	bl	5834 <__adddf3>
    316c:	e59d2008 	ldr	r2, [sp, #8]
    3170:	e1a03007 	mov	r3, r7
    3174:	e1a00002 	mov	r0, r2
    3178:	e1a02006 	mov	r2, r6
    317c:	e58d0008 	str	r0, [sp, #8]
    3180:	e58d100c 	str	r1, [sp, #12]
    3184:	eb0009a9 	bl	5830 <__aeabi_dsub>
    3188:	e1a02008 	mov	r2, r8
    318c:	e1a03009 	mov	r3, r9
    3190:	eb0009a6 	bl	5830 <__aeabi_dsub>
    3194:	e28d3018 	add	r3, sp, #24
    3198:	e893000c 	ldm	r3, {r2, r3}
    319c:	eb0009a3 	bl	5830 <__aeabi_dsub>
    31a0:	e1a03001 	mov	r3, r1
    31a4:	e1a02000 	mov	r2, r0
    31a8:	e1a01005 	mov	r1, r5
    31ac:	e1a00004 	mov	r0, r4
    31b0:	eb00099e 	bl	5830 <__aeabi_dsub>
    31b4:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    31b8:	e2443001 	sub	r3, r4, #1
    31bc:	e59d4010 	ldr	r4, [sp, #16]
    31c0:	e1934004 	orrs	r4, r3, r4
    31c4:	e1a08000 	mov	r8, r0
    31c8:	e1a09001 	mov	r9, r1
    31cc:	1a00013e 	bne	36cc <__ieee754_pow+0xd4c>
    31d0:	e59f1130 	ldr	r1, [pc, #304]	; 3308 <__ieee754_pow+0x988>
    31d4:	e3a00000 	mov	r0, #0
    31d8:	e58d0010 	str	r0, [sp, #16]
    31dc:	e58d1014 	str	r1, [sp, #20]
    31e0:	e3a06000 	mov	r6, #0
    31e4:	e1a02006 	mov	r2, r6
    31e8:	e1a0300b 	mov	r3, r11
    31ec:	e1a0000a 	mov	r0, r10
    31f0:	e1a0100b 	mov	r1, r11
    31f4:	eb00098d 	bl	5830 <__aeabi_dsub>
    31f8:	e28d3008 	add	r3, sp, #8
    31fc:	e893000c 	ldm	r3, {r2, r3}
    3200:	eb000a8f 	bl	5c44 <__aeabi_dmul>
    3204:	e1a03009 	mov	r3, r9
    3208:	e1a04000 	mov	r4, r0
    320c:	e1a05001 	mov	r5, r1
    3210:	e1a0000a 	mov	r0, r10
    3214:	e1a0100b 	mov	r1, r11
    3218:	e1a02008 	mov	r2, r8
    321c:	eb000a88 	bl	5c44 <__aeabi_dmul>
    3220:	e1a02000 	mov	r2, r0
    3224:	e1a03001 	mov	r3, r1
    3228:	e1a00004 	mov	r0, r4
    322c:	e1a01005 	mov	r1, r5
    3230:	eb00097f 	bl	5834 <__adddf3>
    3234:	e1a0700b 	mov	r7, r11
    3238:	e28d3008 	add	r3, sp, #8
    323c:	e893000c 	ldm	r3, {r2, r3}
    3240:	e1a0a000 	mov	r10, r0
    3244:	e1a0b001 	mov	r11, r1
    3248:	e1a00006 	mov	r0, r6
    324c:	e1a01007 	mov	r1, r7
    3250:	eb000a7b 	bl	5c44 <__aeabi_dmul>
    3254:	e1a04000 	mov	r4, r0
    3258:	e1a05001 	mov	r5, r1
    325c:	e1a0000a 	mov	r0, r10
    3260:	e1a0100b 	mov	r1, r11
    3264:	e1a02004 	mov	r2, r4
    3268:	e1a03005 	mov	r3, r5
    326c:	eb000970 	bl	5834 <__adddf3>
    3270:	e59fc094 	ldr	r12, [pc, #148]	; 330c <__ieee754_pow+0x98c>
    3274:	e151000c 	cmp	r1, r12
    3278:	e1a06000 	mov	r6, r0
    327c:	e1a07001 	mov	r7, r1
    3280:	e1a09001 	mov	r9, r1
    3284:	da0000da 	ble	35f4 <__ieee754_pow+0xc74>
    3288:	e28134bf 	add	r3, r1, #-1090519040	; 0xbf000000
    328c:	e2833607 	add	r3, r3, #7340032	; 0x700000
    3290:	e1933000 	orrs	r3, r3, r0
    3294:	1a00017b 	bne	3888 <__ieee754_pow+0xf08>
    3298:	e28f3058 	add	r3, pc, #88	; 0x58
    329c:	e893000c 	ldm	r3, {r2, r3}
    32a0:	e1a0000a 	mov	r0, r10
    32a4:	e1a0100b 	mov	r1, r11
    32a8:	eb000961 	bl	5834 <__adddf3>
    32ac:	e1a02004 	mov	r2, r4
    32b0:	ea000018 	b	3318 <__ieee754_pow+0x998>
    32b4:	e1a00000 	nop			; (mov r0, r0)
    32b8:	4a454eef 	.word	0x4a454eef
    32bc:	3fca7e28 	.word	0x3fca7e28
    32c0:	93c9db65 	.word	0x93c9db65
    32c4:	3fcd864a 	.word	0x3fcd864a
    32c8:	a91d4101 	.word	0xa91d4101
    32cc:	3fd17460 	.word	0x3fd17460
    32d0:	518f264d 	.word	0x518f264d
    32d4:	3fd55555 	.word	0x3fd55555
    32d8:	db6fabff 	.word	0xdb6fabff
    32dc:	3fdb6db6 	.word	0x3fdb6db6
    32e0:	33333303 	.word	0x33333303
    32e4:	3fe33333 	.word	0x3fe33333
    32e8:	145b01f5 	.word	0x145b01f5
    32ec:	be3e2fe0 	.word	0xbe3e2fe0
    32f0:	dc3a03fd 	.word	0xdc3a03fd
    32f4:	3feec709 	.word	0x3feec709
    32f8:	652b82fe 	.word	0x652b82fe
    32fc:	3c971547 	.word	0x3c971547
    3300:	40080000 	.word	0x40080000
    3304:	3feec709 	.word	0x3feec709
    3308:	bff00000 	.word	0xbff00000
    330c:	408fffff 	.word	0x408fffff
    3310:	3fe00000 	.word	0x3fe00000
    3314:	3fe62e43 	.word	0x3fe62e43
    3318:	e58d0008 	str	r0, [sp, #8]
    331c:	e58d100c 	str	r1, [sp, #12]
    3320:	e1a03005 	mov	r3, r5
    3324:	e1a00006 	mov	r0, r6
    3328:	e1a01007 	mov	r1, r7
    332c:	eb00093f 	bl	5830 <__aeabi_dsub>
    3330:	e1a02000 	mov	r2, r0
    3334:	e1a03001 	mov	r3, r1
    3338:	e28d1008 	add	r1, sp, #8
    333c:	e8910003 	ldm	r1, {r0, r1}
    3340:	eb000bb1 	bl	620c <__aeabi_dcmpgt>
    3344:	e3500000 	cmp	r0, #0
    3348:	03c78102 	biceq	r8, r7, #-2147483648	; 0x80000000
    334c:	1a00014d 	bne	3888 <__ieee754_pow+0xf08>
    3350:	e51f3048 	ldr	r3, [pc, #-72]	; 3310 <__ieee754_pow+0x990>
    3354:	e1580003 	cmp	r8, r3
    3358:	d3a0c000 	movle	r12, #0
    335c:	d58dc008 	strle	r12, [sp, #8]
    3360:	ca0000b5 	bgt	363c <__ieee754_pow+0xcbc>
    3364:	e3a06000 	mov	r6, #0
    3368:	e1a00006 	mov	r0, r6
    336c:	e1a01007 	mov	r1, r7
    3370:	e3a02000 	mov	r2, #0
    3374:	e51f3068 	ldr	r3, [pc, #-104]	; 3314 <__ieee754_pow+0x994>
    3378:	e58dc004 	str	r12, [sp, #4]
    337c:	eb000a30 	bl	5c44 <__aeabi_dmul>
    3380:	e1a02004 	mov	r2, r4
    3384:	e1a08000 	mov	r8, r0
    3388:	e1a09001 	mov	r9, r1
    338c:	e1a03005 	mov	r3, r5
    3390:	e1a00006 	mov	r0, r6
    3394:	e1a01007 	mov	r1, r7
    3398:	eb000924 	bl	5830 <__aeabi_dsub>
    339c:	e1a02000 	mov	r2, r0
    33a0:	e1a03001 	mov	r3, r1
    33a4:	e1a0000a 	mov	r0, r10
    33a8:	e1a0100b 	mov	r1, r11
    33ac:	eb00091f 	bl	5830 <__aeabi_dsub>
    33b0:	e28f3fce 	add	r3, pc, #824	; 0x338
    33b4:	e893000c 	ldm	r3, {r2, r3}
    33b8:	eb000a21 	bl	5c44 <__aeabi_dmul>
    33bc:	e28f3fcd 	add	r3, pc, #820	; 0x334
    33c0:	e893000c 	ldm	r3, {r2, r3}
    33c4:	e1a04000 	mov	r4, r0
    33c8:	e1a05001 	mov	r5, r1
    33cc:	e1a00006 	mov	r0, r6
    33d0:	e1a01007 	mov	r1, r7
    33d4:	eb000a1a 	bl	5c44 <__aeabi_dmul>
    33d8:	e1a02000 	mov	r2, r0
    33dc:	e1a03001 	mov	r3, r1
    33e0:	e1a00004 	mov	r0, r4
    33e4:	e1a01005 	mov	r1, r5
    33e8:	eb000911 	bl	5834 <__adddf3>
    33ec:	e1a04000 	mov	r4, r0
    33f0:	e1a05001 	mov	r5, r1
    33f4:	e1a02004 	mov	r2, r4
    33f8:	e1a03005 	mov	r3, r5
    33fc:	e1a00008 	mov	r0, r8
    3400:	e1a01009 	mov	r1, r9
    3404:	eb00090a 	bl	5834 <__adddf3>
    3408:	e1a02008 	mov	r2, r8
    340c:	e1a03009 	mov	r3, r9
    3410:	e1a0a000 	mov	r10, r0
    3414:	e1a0b001 	mov	r11, r1
    3418:	eb000904 	bl	5830 <__aeabi_dsub>
    341c:	e1a02000 	mov	r2, r0
    3420:	e1a03001 	mov	r3, r1
    3424:	e1a00004 	mov	r0, r4
    3428:	e1a01005 	mov	r1, r5
    342c:	eb0008ff 	bl	5830 <__aeabi_dsub>
    3430:	e1a0200a 	mov	r2, r10
    3434:	e1a08000 	mov	r8, r0
    3438:	e1a09001 	mov	r9, r1
    343c:	e1a0300b 	mov	r3, r11
    3440:	e1a0000a 	mov	r0, r10
    3444:	e1a0100b 	mov	r1, r11
    3448:	eb0009fd 	bl	5c44 <__aeabi_dmul>
    344c:	e28f3fab 	add	r3, pc, #684	; 0x2ac
    3450:	e893000c 	ldm	r3, {r2, r3}
    3454:	e1a04000 	mov	r4, r0
    3458:	e1a05001 	mov	r5, r1
    345c:	eb0009f8 	bl	5c44 <__aeabi_dmul>
    3460:	e28f3e2a 	add	r3, pc, #672	; 0x2a0
    3464:	e893000c 	ldm	r3, {r2, r3}
    3468:	eb0008f0 	bl	5830 <__aeabi_dsub>
    346c:	e1a02004 	mov	r2, r4
    3470:	e1a03005 	mov	r3, r5
    3474:	eb0009f2 	bl	5c44 <__aeabi_dmul>
    3478:	e28f3e29 	add	r3, pc, #656	; 0x290
    347c:	e893000c 	ldm	r3, {r2, r3}
    3480:	eb0008eb 	bl	5834 <__adddf3>
    3484:	e1a02004 	mov	r2, r4
    3488:	e1a03005 	mov	r3, r5
    348c:	eb0009ec 	bl	5c44 <__aeabi_dmul>
    3490:	e28f3d0a 	add	r3, pc, #640	; 0x280
    3494:	e893000c 	ldm	r3, {r2, r3}
    3498:	eb0008e4 	bl	5830 <__aeabi_dsub>
    349c:	e1a02004 	mov	r2, r4
    34a0:	e1a03005 	mov	r3, r5
    34a4:	eb0009e6 	bl	5c44 <__aeabi_dmul>
    34a8:	e28f3e27 	add	r3, pc, #624	; 0x270
    34ac:	e893000c 	ldm	r3, {r2, r3}
    34b0:	eb0008df 	bl	5834 <__adddf3>
    34b4:	e1a02004 	mov	r2, r4
    34b8:	e1a03005 	mov	r3, r5
    34bc:	eb0009e0 	bl	5c44 <__aeabi_dmul>
    34c0:	e1a02000 	mov	r2, r0
    34c4:	e1a03001 	mov	r3, r1
    34c8:	e1a0000a 	mov	r0, r10
    34cc:	e1a0100b 	mov	r1, r11
    34d0:	eb0008d6 	bl	5830 <__aeabi_dsub>
    34d4:	e1a04000 	mov	r4, r0
    34d8:	e1a05001 	mov	r5, r1
    34dc:	e1a02004 	mov	r2, r4
    34e0:	e1a03005 	mov	r3, r5
    34e4:	e1a0000a 	mov	r0, r10
    34e8:	e1a0100b 	mov	r1, r11
    34ec:	eb0009d4 	bl	5c44 <__aeabi_dmul>
    34f0:	e3a02000 	mov	r2, #0
    34f4:	e1a06000 	mov	r6, r0
    34f8:	e1a07001 	mov	r7, r1
    34fc:	e1a00004 	mov	r0, r4
    3500:	e1a01005 	mov	r1, r5
    3504:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    3508:	eb0008c8 	bl	5830 <__aeabi_dsub>
    350c:	e1a02000 	mov	r2, r0
    3510:	e1a03001 	mov	r3, r1
    3514:	e1a00006 	mov	r0, r6
    3518:	e1a01007 	mov	r1, r7
    351c:	eb000a6c 	bl	5ed4 <__aeabi_ddiv>
    3520:	e1a02008 	mov	r2, r8
    3524:	e1a04000 	mov	r4, r0
    3528:	e1a05001 	mov	r5, r1
    352c:	e1a03009 	mov	r3, r9
    3530:	e1a0000a 	mov	r0, r10
    3534:	e1a0100b 	mov	r1, r11
    3538:	eb0009c1 	bl	5c44 <__aeabi_dmul>
    353c:	e1a02008 	mov	r2, r8
    3540:	e1a03009 	mov	r3, r9
    3544:	eb0008ba 	bl	5834 <__adddf3>
    3548:	e1a02000 	mov	r2, r0
    354c:	e1a03001 	mov	r3, r1
    3550:	e1a00004 	mov	r0, r4
    3554:	e1a01005 	mov	r1, r5
    3558:	eb0008b4 	bl	5830 <__aeabi_dsub>
    355c:	e1a0200a 	mov	r2, r10
    3560:	e1a0300b 	mov	r3, r11
    3564:	eb0008b1 	bl	5830 <__aeabi_dsub>
    3568:	e1a02000 	mov	r2, r0
    356c:	e1a03001 	mov	r3, r1
    3570:	e3a00000 	mov	r0, #0
    3574:	e59f11bc 	ldr	r1, [pc, #444]	; 3738 <__ieee754_pow+0xdb8>
    3578:	eb0008ac 	bl	5830 <__aeabi_dsub>
    357c:	e59dc004 	ldr	r12, [sp, #4]
    3580:	e08ce001 	add	lr, r12, r1
    3584:	e35e0601 	cmp	lr, #1048576	; 0x100000
    3588:	e1a03001 	mov	r3, r1
    358c:	e1a02000 	mov	r2, r0
    3590:	e1a04000 	mov	r4, r0
    3594:	e1a05001 	mov	r5, r1
    3598:	a1a0300e 	movge	r3, lr
    359c:	ba0000e4 	blt	3934 <__ieee754_pow+0xfb4>
    35a0:	e28d1010 	add	r1, sp, #16
    35a4:	e8910003 	ldm	r1, {r0, r1}
    35a8:	eb0009a5 	bl	5c44 <__aeabi_dmul>
    35ac:	e1a0a000 	mov	r10, r0
    35b0:	e1a0b001 	mov	r11, r1
    35b4:	eafffd0b 	b	29e8 <__ieee754_pow+0x68>
    35b8:	e59d1020 	ldr	r1, [sp, #32]
    35bc:	e3510000 	cmp	r1, #0
    35c0:	bafffd34 	blt	2a98 <__ieee754_pow+0x118>
    35c4:	e1a00007 	mov	r0, r7
    35c8:	e1a01008 	mov	r1, r8
    35cc:	eb000281 	bl	3fd8 <__ieee754_sqrt>
    35d0:	e1a0a000 	mov	r10, r0
    35d4:	e1a0b001 	mov	r11, r1
    35d8:	eafffd02 	b	29e8 <__ieee754_pow+0x68>
    35dc:	e1a0a003 	mov	r10, r3
    35e0:	e59fb150 	ldr	r11, [pc, #336]	; 3738 <__ieee754_pow+0xdb8>
    35e4:	eafffcff 	b	29e8 <__ieee754_pow+0x68>
    35e8:	e3540000 	cmp	r4, #0
    35ec:	aafffd78 	bge	2bd4 <__ieee754_pow+0x254>
    35f0:	eafffd49 	b	2b1c <__ieee754_pow+0x19c>
    35f4:	e59f312c 	ldr	r3, [pc, #300]	; 3728 <__ieee754_pow+0xda8>
    35f8:	e3c18102 	bic	r8, r1, #-2147483648	; 0x80000000
    35fc:	e1580003 	cmp	r8, r3
    3600:	daffff52 	ble	3350 <__ieee754_pow+0x9d0>
    3604:	e59f3120 	ldr	r3, [pc, #288]	; 372c <__ieee754_pow+0xdac>
    3608:	e0813003 	add	r3, r1, r3
    360c:	e1933000 	orrs	r3, r3, r0
    3610:	1a0000b9 	bne	38fc <__ieee754_pow+0xf7c>
    3614:	e1a02004 	mov	r2, r4
    3618:	e1a03005 	mov	r3, r5
    361c:	eb000883 	bl	5830 <__aeabi_dsub>
    3620:	e1a02000 	mov	r2, r0
    3624:	e1a03001 	mov	r3, r1
    3628:	e1a0000a 	mov	r0, r10
    362c:	e1a0100b 	mov	r1, r11
    3630:	eb000ae9 	bl	61dc <__aeabi_dcmple>
    3634:	e3500000 	cmp	r0, #0
    3638:	1a0000af 	bne	38fc <__ieee754_pow+0xf7c>
    363c:	e1a03a48 	asr	r3, r8, #20
    3640:	e2433fff 	sub	r3, r3, #1020	; 0x3fc
    3644:	e2433002 	sub	r3, r3, #2
    3648:	e3a01601 	mov	r1, #1048576	; 0x100000
    364c:	e0891351 	add	r1, r9, r1, asr r3
    3650:	e3c10102 	bic	r0, r1, #-2147483648	; 0x80000000
    3654:	e1a00a40 	asr	r0, r0, #20
    3658:	e240efff 	sub	lr, r0, #1020	; 0x3fc
    365c:	e59f60cc 	ldr	r6, [pc, #204]	; 3730 <__ieee754_pow+0xdb0>
    3660:	e24ee003 	sub	lr, lr, #3
    3664:	e1c13e56 	bic	r3, r1, r6, asr lr
    3668:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    366c:	e3c1e60f 	bic	lr, r1, #15728640	; 0xf00000
    3670:	e2601e41 	rsb	r1, r0, #1040	; 0x410
    3674:	e38ee601 	orr	lr, lr, #1048576	; 0x100000
    3678:	e2811003 	add	r1, r1, #3
    367c:	e1a0115e 	asr	r1, lr, r1
    3680:	e3590000 	cmp	r9, #0
    3684:	e58d1008 	str	r1, [sp, #8]
    3688:	b2611000 	rsblt	r1, r1, #0
    368c:	b58d1008 	strlt	r1, [sp, #8]
    3690:	e3a02000 	mov	r2, #0
    3694:	e1a00004 	mov	r0, r4
    3698:	e1a01005 	mov	r1, r5
    369c:	eb000863 	bl	5830 <__aeabi_dsub>
    36a0:	e1a04000 	mov	r4, r0
    36a4:	e1a05001 	mov	r5, r1
    36a8:	e1a02004 	mov	r2, r4
    36ac:	e1a0000a 	mov	r0, r10
    36b0:	e1a0100b 	mov	r1, r11
    36b4:	e1a03005 	mov	r3, r5
    36b8:	eb00085d 	bl	5834 <__adddf3>
    36bc:	e59d2008 	ldr	r2, [sp, #8]
    36c0:	e1a07001 	mov	r7, r1
    36c4:	e1a0ca02 	lsl	r12, r2, #20
    36c8:	eaffff25 	b	3364 <__ieee754_pow+0x9e4>
    36cc:	e59f2064 	ldr	r2, [pc, #100]	; 3738 <__ieee754_pow+0xdb8>
    36d0:	e3a01000 	mov	r1, #0
    36d4:	e58d1010 	str	r1, [sp, #16]
    36d8:	e58d2014 	str	r2, [sp, #20]
    36dc:	eafffebf 	b	31e0 <__ieee754_pow+0x860>
    36e0:	e3540000 	cmp	r4, #0
    36e4:	b28bb102 	addlt	r11, r11, #-2147483648	; 0x80000000
    36e8:	aafffd39 	bge	2bd4 <__ieee754_pow+0x254>
    36ec:	eafffcbd 	b	29e8 <__ieee754_pow+0x68>
    36f0:	fefa39ef 	.word	0xfefa39ef
    36f4:	3fe62e42 	.word	0x3fe62e42
    36f8:	0ca86c39 	.word	0x0ca86c39
    36fc:	be205c61 	.word	0xbe205c61
    3700:	72bea4d0 	.word	0x72bea4d0
    3704:	3e663769 	.word	0x3e663769
    3708:	c5d26bf1 	.word	0xc5d26bf1
    370c:	3ebbbd41 	.word	0x3ebbbd41
    3710:	af25de2c 	.word	0xaf25de2c
    3714:	3f11566a 	.word	0x3f11566a
    3718:	16bebd93 	.word	0x16bebd93
    371c:	3f66c16c 	.word	0x3f66c16c
    3720:	5555553e 	.word	0x5555553e
    3724:	3fc55555 	.word	0x3fc55555
    3728:	4090cbff 	.word	0x4090cbff
    372c:	3f6f3400 	.word	0x3f6f3400
    3730:	000fffff 	.word	0x000fffff
    3734:	3feffffe 	.word	0x3feffffe
    3738:	3ff00000 	.word	0x3ff00000
    373c:	3ff71547 	.word	0x3ff71547
    3740:	e51f3014 	ldr	r3, [pc, #-20]	; 3734 <__ieee754_pow+0xdb4>
    3744:	e59d2008 	ldr	r2, [sp, #8]
    3748:	e1520003 	cmp	r2, r3
    374c:	daffffa5 	ble	35e8 <__ieee754_pow+0xc68>
    3750:	e51f3020 	ldr	r3, [pc, #-32]	; 3738 <__ieee754_pow+0xdb8>
    3754:	e59d2008 	ldr	r2, [sp, #8]
    3758:	e1520003 	cmp	r2, r3
    375c:	cafffcec 	bgt	2b14 <__ieee754_pow+0x194>
    3760:	e3a02000 	mov	r2, #0
    3764:	e51f3034 	ldr	r3, [pc, #-52]	; 3738 <__ieee754_pow+0xdb8>
    3768:	eb000830 	bl	5830 <__aeabi_dsub>
    376c:	e3a02206 	mov	r2, #1610612736	; 0x60000000
    3770:	e51f303c 	ldr	r3, [pc, #-60]	; 373c <__ieee754_pow+0xdbc>
    3774:	e1a04000 	mov	r4, r0
    3778:	e1a05001 	mov	r5, r1
    377c:	eb000930 	bl	5c44 <__aeabi_dmul>
    3780:	e28f3d07 	add	r3, pc, #448	; 0x1c0
    3784:	e893000c 	ldm	r3, {r2, r3}
    3788:	e1a06000 	mov	r6, r0
    378c:	e1a07001 	mov	r7, r1
    3790:	e1a00004 	mov	r0, r4
    3794:	e1a01005 	mov	r1, r5
    3798:	eb000929 	bl	5c44 <__aeabi_dmul>
    379c:	e1a02004 	mov	r2, r4
    37a0:	e58d0008 	str	r0, [sp, #8]
    37a4:	e58d100c 	str	r1, [sp, #12]
    37a8:	e1a03005 	mov	r3, r5
    37ac:	e1a00004 	mov	r0, r4
    37b0:	e1a01005 	mov	r1, r5
    37b4:	eb000922 	bl	5c44 <__aeabi_dmul>
    37b8:	e3a02000 	mov	r2, #0
    37bc:	e1a08000 	mov	r8, r0
    37c0:	e1a09001 	mov	r9, r1
    37c4:	e1a00004 	mov	r0, r4
    37c8:	e1a01005 	mov	r1, r5
    37cc:	e59f319c 	ldr	r3, [pc, #412]	; 3970 <__ieee754_pow+0xff0>
    37d0:	eb00091b 	bl	5c44 <__aeabi_dmul>
    37d4:	e1a02000 	mov	r2, r0
    37d8:	e1a03001 	mov	r3, r1
    37dc:	e28f1f5b 	add	r1, pc, #364	; 0x16c
    37e0:	e8910003 	ldm	r1, {r0, r1}
    37e4:	eb000811 	bl	5830 <__aeabi_dsub>
    37e8:	e1a02004 	mov	r2, r4
    37ec:	e1a03005 	mov	r3, r5
    37f0:	eb000913 	bl	5c44 <__aeabi_dmul>
    37f4:	e1a02000 	mov	r2, r0
    37f8:	e1a03001 	mov	r3, r1
    37fc:	e3a00000 	mov	r0, #0
    3800:	e59f116c 	ldr	r1, [pc, #364]	; 3974 <__ieee754_pow+0xff4>
    3804:	eb000809 	bl	5830 <__aeabi_dsub>
    3808:	e1a02000 	mov	r2, r0
    380c:	e1a03001 	mov	r3, r1
    3810:	e1a00008 	mov	r0, r8
    3814:	e1a01009 	mov	r1, r9
    3818:	eb000909 	bl	5c44 <__aeabi_dmul>
    381c:	e28f3f4d 	add	r3, pc, #308	; 0x134
    3820:	e893000c 	ldm	r3, {r2, r3}
    3824:	eb000906 	bl	5c44 <__aeabi_dmul>
    3828:	e1a02000 	mov	r2, r0
    382c:	e1a03001 	mov	r3, r1
    3830:	e28d1008 	add	r1, sp, #8
    3834:	e8910003 	ldm	r1, {r0, r1}
    3838:	eb0007fc 	bl	5830 <__aeabi_dsub>
    383c:	e1a04000 	mov	r4, r0
    3840:	e1a05001 	mov	r5, r1
    3844:	e1a02004 	mov	r2, r4
    3848:	e1a03005 	mov	r3, r5
    384c:	e1a00006 	mov	r0, r6
    3850:	e1a01007 	mov	r1, r7
    3854:	eb0007f6 	bl	5834 <__adddf3>
    3858:	e3a00000 	mov	r0, #0
    385c:	e58d0008 	str	r0, [sp, #8]
    3860:	e58d100c 	str	r1, [sp, #12]
    3864:	e1a02006 	mov	r2, r6
    3868:	e1a03007 	mov	r3, r7
    386c:	eafffe4a 	b	319c <__ieee754_pow+0x81c>
    3870:	e1a02000 	mov	r2, r0
    3874:	e1a03001 	mov	r3, r1
    3878:	e3a00000 	mov	r0, #0
    387c:	e59f10f4 	ldr	r1, [pc, #244]	; 3978 <__ieee754_pow+0xff8>
    3880:	eb000993 	bl	5ed4 <__aeabi_ddiv>
    3884:	eafffcd7 	b	2be8 <__ieee754_pow+0x268>
    3888:	e28f30d0 	add	r3, pc, #208	; 0xd0
    388c:	e893000c 	ldm	r3, {r2, r3}
    3890:	e28d1010 	add	r1, sp, #16
    3894:	e8910003 	ldm	r1, {r0, r1}
    3898:	eb0008e9 	bl	5c44 <__aeabi_dmul>
    389c:	e28f30bc 	add	r3, pc, #188	; 0xbc
    38a0:	e893000c 	ldm	r3, {r2, r3}
    38a4:	eb0008e6 	bl	5c44 <__aeabi_dmul>
    38a8:	e1a0a000 	mov	r10, r0
    38ac:	e1a0b001 	mov	r11, r1
    38b0:	eafffc4c 	b	29e8 <__ieee754_pow+0x68>
    38b4:	e35a0000 	cmp	r10, #0
    38b8:	1a00001a 	bne	3928 <__ieee754_pow+0xfa8>
    38bc:	e2633e41 	rsb	r3, r3, #1040	; 0x410
    38c0:	e2832003 	add	r2, r3, #3
    38c4:	e1a03256 	asr	r3, r6, r2
    38c8:	e1560213 	cmp	r6, r3, lsl r2
    38cc:	02033001 	andeq	r3, r3, #1
    38d0:	02633002 	rsbeq	r3, r3, #2
    38d4:	058d3030 	streq	r3, [sp, #48]	; 0x30
    38d8:	13a03000 	movne	r3, #0
    38dc:	158d3030 	strne	r3, [sp, #48]	; 0x30
    38e0:	eafffc5f 	b	2a64 <__ieee754_pow+0xe4>
    38e4:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    38e8:	e3540001 	cmp	r4, #1
    38ec:	e1a0a000 	mov	r10, r0
    38f0:	0281b102 	addeq	r11, r1, #-2147483648	; 0x80000000
    38f4:	1afffc8e 	bne	2b34 <__ieee754_pow+0x1b4>
    38f8:	eafffc3a 	b	29e8 <__ieee754_pow+0x68>
    38fc:	e28f3064 	add	r3, pc, #100	; 0x64
    3900:	e893000c 	ldm	r3, {r2, r3}
    3904:	e28d1010 	add	r1, sp, #16
    3908:	e8910003 	ldm	r1, {r0, r1}
    390c:	eb0008cc 	bl	5c44 <__aeabi_dmul>
    3910:	e28f3050 	add	r3, pc, #80	; 0x50
    3914:	e893000c 	ldm	r3, {r2, r3}
    3918:	eb0008c9 	bl	5c44 <__aeabi_dmul>
    391c:	e1a0a000 	mov	r10, r0
    3920:	e1a0b001 	mov	r11, r1
    3924:	eafffc2f 	b	29e8 <__ieee754_pow+0x68>
    3928:	e3a02000 	mov	r2, #0
    392c:	e58d2030 	str	r2, [sp, #48]	; 0x30
    3930:	eafffc58 	b	2a98 <__ieee754_pow+0x118>
    3934:	e59d2008 	ldr	r2, [sp, #8]
    3938:	eb000706 	bl	5558 <scalbn>
    393c:	e1a02000 	mov	r2, r0
    3940:	e1a03001 	mov	r3, r1
    3944:	eaffff15 	b	35a0 <__ieee754_pow+0xc20>
    3948:	f85ddf44 	.word	0xf85ddf44
    394c:	3e54ae0b 	.word	0x3e54ae0b
    3950:	55555555 	.word	0x55555555
    3954:	3fd55555 	.word	0x3fd55555
    3958:	652b82fe 	.word	0x652b82fe
    395c:	3ff71547 	.word	0x3ff71547
    3960:	8800759c 	.word	0x8800759c
    3964:	7e37e43c 	.word	0x7e37e43c
    3968:	c2f8f359 	.word	0xc2f8f359
    396c:	01a56e1f 	.word	0x01a56e1f
    3970:	3fd00000 	.word	0x3fd00000
    3974:	3fe00000 	.word	0x3fe00000
    3978:	3ff00000 	.word	0x3ff00000
    397c:	e1a00000 	nop			; (mov r0, r0)

00003980 <__ieee754_rem_pio2>:
    3980:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3984:	e59fc3bc 	ldr	r12, [pc, #956]	; 3d48 <__ieee754_rem_pio2+0x3c8>
    3988:	e3c17102 	bic	r7, r1, #-2147483648	; 0x80000000
    398c:	e157000c 	cmp	r7, r12
    3990:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    3994:	e1a04000 	mov	r4, r0
    3998:	e1a05001 	mov	r5, r1
    399c:	e1a0a000 	mov	r10, r0
    39a0:	e1a0b001 	mov	r11, r1
    39a4:	e1a08002 	mov	r8, r2
    39a8:	da00005b 	ble	3b1c <__ieee754_rem_pio2+0x19c>
    39ac:	e59f2398 	ldr	r2, [pc, #920]	; 3d4c <__ieee754_rem_pio2+0x3cc>
    39b0:	e1570002 	cmp	r7, r2
    39b4:	e1a09001 	mov	r9, r1
    39b8:	ca000019 	bgt	3a24 <__ieee754_rem_pio2+0xa4>
    39bc:	e3510000 	cmp	r1, #0
    39c0:	e28f3fd6 	add	r3, pc, #856	; 0x358
    39c4:	e893000c 	ldm	r3, {r2, r3}
    39c8:	da000149 	ble	3ef4 <__ieee754_rem_pio2+0x574>
    39cc:	eb000797 	bl	5830 <__aeabi_dsub>
    39d0:	e59f3378 	ldr	r3, [pc, #888]	; 3d50 <__ieee754_rem_pio2+0x3d0>
    39d4:	e1570003 	cmp	r7, r3
    39d8:	e1a0a000 	mov	r10, r0
    39dc:	e1a0b001 	mov	r11, r1
    39e0:	0a00005f 	beq	3b64 <__ieee754_rem_pio2+0x1e4>
    39e4:	e28f3fcf 	add	r3, pc, #828	; 0x33c
    39e8:	e893000c 	ldm	r3, {r2, r3}
    39ec:	eb00078f 	bl	5830 <__aeabi_dsub>
    39f0:	e1a02000 	mov	r2, r0
    39f4:	e1a03001 	mov	r3, r1
    39f8:	e8880003 	stm	r8, {r0, r1}
    39fc:	e1a0000a 	mov	r0, r10
    3a00:	e1a0100b 	mov	r1, r11
    3a04:	eb000789 	bl	5830 <__aeabi_dsub>
    3a08:	e28f3fc6 	add	r3, pc, #792	; 0x318
    3a0c:	e893000c 	ldm	r3, {r2, r3}
    3a10:	eb000786 	bl	5830 <__aeabi_dsub>
    3a14:	e3a06001 	mov	r6, #1
    3a18:	e5880008 	str	r0, [r8, #8]
    3a1c:	e588100c 	str	r1, [r8, #12]
    3a20:	ea000043 	b	3b34 <__ieee754_rem_pio2+0x1b4>
    3a24:	e59f3328 	ldr	r3, [pc, #808]	; 3d54 <__ieee754_rem_pio2+0x3d4>
    3a28:	e1570003 	cmp	r7, r3
    3a2c:	da000075 	ble	3c08 <__ieee754_rem_pio2+0x288>
    3a30:	e59f3320 	ldr	r3, [pc, #800]	; 3d58 <__ieee754_rem_pio2+0x3d8>
    3a34:	e1570003 	cmp	r7, r3
    3a38:	ca000041 	bgt	3b44 <__ieee754_rem_pio2+0x1c4>
    3a3c:	e1a0aa47 	asr	r10, r7, #20
    3a40:	e24aae41 	sub	r10, r10, #1040	; 0x410
    3a44:	e24aa006 	sub	r10, r10, #6
    3a48:	e0475a0a 	sub	r5, r7, r10, lsl #20
    3a4c:	e1a01005 	mov	r1, r5
    3a50:	e1a04000 	mov	r4, r0
    3a54:	eb0009f2 	bl	6224 <__aeabi_d2iz>
    3a58:	eb000842 	bl	5b68 <__aeabi_i2d>
    3a5c:	e1a06000 	mov	r6, r0
    3a60:	e1a07001 	mov	r7, r1
    3a64:	e1a02000 	mov	r2, r0
    3a68:	e1a03001 	mov	r3, r1
    3a6c:	e1a00004 	mov	r0, r4
    3a70:	e1a01005 	mov	r1, r5
    3a74:	e58d6020 	str	r6, [sp, #32]
    3a78:	e58d7024 	str	r7, [sp, #36]	; 0x24
    3a7c:	eb00076b 	bl	5830 <__aeabi_dsub>
    3a80:	e3a02000 	mov	r2, #0
    3a84:	e59f32d0 	ldr	r3, [pc, #720]	; 3d5c <__ieee754_rem_pio2+0x3dc>
    3a88:	eb00086d 	bl	5c44 <__aeabi_dmul>
    3a8c:	e1a06000 	mov	r6, r0
    3a90:	e1a07001 	mov	r7, r1
    3a94:	eb0009e2 	bl	6224 <__aeabi_d2iz>
    3a98:	eb000832 	bl	5b68 <__aeabi_i2d>
    3a9c:	e1a02000 	mov	r2, r0
    3aa0:	e1a03001 	mov	r3, r1
    3aa4:	e1a04000 	mov	r4, r0
    3aa8:	e1a05001 	mov	r5, r1
    3aac:	e1a00006 	mov	r0, r6
    3ab0:	e1a01007 	mov	r1, r7
    3ab4:	e58d4028 	str	r4, [sp, #40]	; 0x28
    3ab8:	e58d502c 	str	r5, [sp, #44]	; 0x2c
    3abc:	eb00075b 	bl	5830 <__aeabi_dsub>
    3ac0:	e3a02000 	mov	r2, #0
    3ac4:	e59f3290 	ldr	r3, [pc, #656]	; 3d5c <__ieee754_rem_pio2+0x3dc>
    3ac8:	eb00085d 	bl	5c44 <__aeabi_dmul>
    3acc:	e3a02000 	mov	r2, #0
    3ad0:	e3a03000 	mov	r3, #0
    3ad4:	e58d0030 	str	r0, [sp, #48]	; 0x30
    3ad8:	e58d1034 	str	r1, [sp, #52]	; 0x34
    3adc:	eb0009b2 	bl	61ac <__aeabi_dcmpeq>
    3ae0:	e3500000 	cmp	r0, #0
    3ae4:	03a06003 	moveq	r6, #3
    3ae8:	0a000032 	beq	3bb8 <__ieee754_rem_pio2+0x238>
    3aec:	e28d7028 	add	r7, sp, #40	; 0x28
    3af0:	e3a06003 	mov	r6, #3
    3af4:	e1a00004 	mov	r0, r4
    3af8:	e1a01005 	mov	r1, r5
    3afc:	e3a02000 	mov	r2, #0
    3b00:	e3a03000 	mov	r3, #0
    3b04:	eb0009a8 	bl	61ac <__aeabi_dcmpeq>
    3b08:	e3500000 	cmp	r0, #0
    3b0c:	e2466001 	sub	r6, r6, #1
    3b10:	0a000028 	beq	3bb8 <__ieee754_rem_pio2+0x238>
    3b14:	e9370003 	ldmdb	r7!, {r0, r1}
    3b18:	eafffff7 	b	3afc <__ieee754_rem_pio2+0x17c>
    3b1c:	e8820030 	stm	r2, {r4, r5}
    3b20:	e3a03000 	mov	r3, #0
    3b24:	e3a02000 	mov	r2, #0
    3b28:	e5882008 	str	r2, [r8, #8]
    3b2c:	e588300c 	str	r3, [r8, #12]
    3b30:	e3a06000 	mov	r6, #0
    3b34:	e1a00006 	mov	r0, r6
    3b38:	e28dd03c 	add	sp, sp, #60	; 0x3c
    3b3c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3b40:	e12fff1e 	bx	lr
    3b44:	e1a02000 	mov	r2, r0
    3b48:	e1a03001 	mov	r3, r1
    3b4c:	eb000737 	bl	5830 <__aeabi_dsub>
    3b50:	e3a06000 	mov	r6, #0
    3b54:	e5880008 	str	r0, [r8, #8]
    3b58:	e588100c 	str	r1, [r8, #12]
    3b5c:	e8880003 	stm	r8, {r0, r1}
    3b60:	eafffff3 	b	3b34 <__ieee754_rem_pio2+0x1b4>
    3b64:	e28f3f71 	add	r3, pc, #452	; 0x1c4
    3b68:	e893000c 	ldm	r3, {r2, r3}
    3b6c:	eb00072f 	bl	5830 <__aeabi_dsub>
    3b70:	e28f3d07 	add	r3, pc, #448	; 0x1c0
    3b74:	e893000c 	ldm	r3, {r2, r3}
    3b78:	e1a06000 	mov	r6, r0
    3b7c:	e1a07001 	mov	r7, r1
    3b80:	eb00072a 	bl	5830 <__aeabi_dsub>
    3b84:	e1a02000 	mov	r2, r0
    3b88:	e1a03001 	mov	r3, r1
    3b8c:	e8880003 	stm	r8, {r0, r1}
    3b90:	e1a00006 	mov	r0, r6
    3b94:	e1a01007 	mov	r1, r7
    3b98:	eb000724 	bl	5830 <__aeabi_dsub>
    3b9c:	e28f3f65 	add	r3, pc, #404	; 0x194
    3ba0:	e893000c 	ldm	r3, {r2, r3}
    3ba4:	eb000721 	bl	5830 <__aeabi_dsub>
    3ba8:	e3a06001 	mov	r6, #1
    3bac:	e5880008 	str	r0, [r8, #8]
    3bb0:	e588100c 	str	r1, [r8, #12]
    3bb4:	eaffffde 	b	3b34 <__ieee754_rem_pio2+0x1b4>
    3bb8:	e3a03002 	mov	r3, #2
    3bbc:	e58d3000 	str	r3, [sp]
    3bc0:	e59f3198 	ldr	r3, [pc, #408]	; 3d60 <__ieee754_rem_pio2+0x3e0>
    3bc4:	e28d0020 	add	r0, sp, #32
    3bc8:	e58d3004 	str	r3, [sp, #4]
    3bcc:	e1a01008 	mov	r1, r8
    3bd0:	e1a03006 	mov	r3, r6
    3bd4:	e1a0200a 	mov	r2, r10
    3bd8:	eb000260 	bl	4560 <__kernel_rem_pio2>
    3bdc:	e3590000 	cmp	r9, #0
    3be0:	e1a06000 	mov	r6, r0
    3be4:	aaffffd2 	bge	3b34 <__ieee754_rem_pio2+0x1b4>
    3be8:	e5982004 	ldr	r2, [r8, #4]
    3bec:	e598300c 	ldr	r3, [r8, #12]
    3bf0:	e2822102 	add	r2, r2, #-2147483648	; 0x80000000
    3bf4:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
    3bf8:	e5882004 	str	r2, [r8, #4]
    3bfc:	e588300c 	str	r3, [r8, #12]
    3c00:	e2606000 	rsb	r6, r0, #0
    3c04:	eaffffca 	b	3b34 <__ieee754_rem_pio2+0x1b4>
    3c08:	eb0005c2 	bl	5318 <fabs>
    3c0c:	e28f3f4b 	add	r3, pc, #300	; 0x12c
    3c10:	e893000c 	ldm	r3, {r2, r3}
    3c14:	e1a04000 	mov	r4, r0
    3c18:	e1a05001 	mov	r5, r1
    3c1c:	eb000808 	bl	5c44 <__aeabi_dmul>
    3c20:	e3a02000 	mov	r2, #0
    3c24:	e59f3138 	ldr	r3, [pc, #312]	; 3d64 <__ieee754_rem_pio2+0x3e4>
    3c28:	eb000701 	bl	5834 <__adddf3>
    3c2c:	eb00097c 	bl	6224 <__aeabi_d2iz>
    3c30:	e1a06000 	mov	r6, r0
    3c34:	eb0007cb 	bl	5b68 <__aeabi_i2d>
    3c38:	e28f30e0 	add	r3, pc, #224	; 0xe0
    3c3c:	e893000c 	ldm	r3, {r2, r3}
    3c40:	e58d0010 	str	r0, [sp, #16]
    3c44:	e58d1014 	str	r1, [sp, #20]
    3c48:	eb0007fd 	bl	5c44 <__aeabi_dmul>
    3c4c:	e1a02000 	mov	r2, r0
    3c50:	e1a03001 	mov	r3, r1
    3c54:	e1a00004 	mov	r0, r4
    3c58:	e1a01005 	mov	r1, r5
    3c5c:	eb0006f3 	bl	5830 <__aeabi_dsub>
    3c60:	e28f30c0 	add	r3, pc, #192	; 0xc0
    3c64:	e893000c 	ldm	r3, {r2, r3}
    3c68:	e1a0a000 	mov	r10, r0
    3c6c:	e1a0b001 	mov	r11, r1
    3c70:	e28d1010 	add	r1, sp, #16
    3c74:	e8910003 	ldm	r1, {r0, r1}
    3c78:	eb0007f1 	bl	5c44 <__aeabi_dmul>
    3c7c:	e356001f 	cmp	r6, #31
    3c80:	e58d0008 	str	r0, [sp, #8]
    3c84:	e58d100c 	str	r1, [sp, #12]
    3c88:	e1a0000a 	mov	r0, r10
    3c8c:	e1a0100b 	mov	r1, r11
    3c90:	ca000035 	bgt	3d6c <__ieee754_rem_pio2+0x3ec>
    3c94:	e59f30cc 	ldr	r3, [pc, #204]	; 3d68 <__ieee754_rem_pio2+0x3e8>
    3c98:	e2462001 	sub	r2, r6, #1
    3c9c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    3ca0:	e1530007 	cmp	r3, r7
    3ca4:	0a000030 	beq	3d6c <__ieee754_rem_pio2+0x3ec>
    3ca8:	e28d3008 	add	r3, sp, #8
    3cac:	e893000c 	ldm	r3, {r2, r3}
    3cb0:	eb0006de 	bl	5830 <__aeabi_dsub>
    3cb4:	e1a02000 	mov	r2, r0
    3cb8:	e1a03001 	mov	r3, r1
    3cbc:	e888000c 	stm	r8, {r2, r3}
    3cc0:	e1a05000 	mov	r5, r0
    3cc4:	e1a04001 	mov	r4, r1
    3cc8:	e1a02005 	mov	r2, r5
    3ccc:	e1a03004 	mov	r3, r4
    3cd0:	e1a0000a 	mov	r0, r10
    3cd4:	e1a0100b 	mov	r1, r11
    3cd8:	eb0006d4 	bl	5830 <__aeabi_dsub>
    3cdc:	e28d3008 	add	r3, sp, #8
    3ce0:	e893000c 	ldm	r3, {r2, r3}
    3ce4:	eb0006d1 	bl	5830 <__aeabi_dsub>
    3ce8:	e3590000 	cmp	r9, #0
    3cec:	e1a02000 	mov	r2, r0
    3cf0:	e1a03001 	mov	r3, r1
    3cf4:	e5882008 	str	r2, [r8, #8]
    3cf8:	e588300c 	str	r3, [r8, #12]
    3cfc:	aaffff8c 	bge	3b34 <__ieee754_rem_pio2+0x1b4>
    3d00:	e2844102 	add	r4, r4, #-2147483648	; 0x80000000
    3d04:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    3d08:	e5885000 	str	r5, [r8]
    3d0c:	e5884004 	str	r4, [r8, #4]
    3d10:	e5880008 	str	r0, [r8, #8]
    3d14:	e588100c 	str	r1, [r8, #12]
    3d18:	e2666000 	rsb	r6, r6, #0
    3d1c:	eaffff84 	b	3b34 <__ieee754_rem_pio2+0x1b4>
    3d20:	54400000 	.word	0x54400000
    3d24:	3ff921fb 	.word	0x3ff921fb
    3d28:	1a626331 	.word	0x1a626331
    3d2c:	3dd0b461 	.word	0x3dd0b461
    3d30:	1a600000 	.word	0x1a600000
    3d34:	3dd0b461 	.word	0x3dd0b461
    3d38:	2e037073 	.word	0x2e037073
    3d3c:	3ba3198a 	.word	0x3ba3198a
    3d40:	6dc9c883 	.word	0x6dc9c883
    3d44:	3fe45f30 	.word	0x3fe45f30
    3d48:	3fe921fb 	.word	0x3fe921fb
    3d4c:	4002d97b 	.word	0x4002d97b
    3d50:	3ff921fb 	.word	0x3ff921fb
    3d54:	413921fb 	.word	0x413921fb
    3d58:	7fefffff 	.word	0x7fefffff
    3d5c:	41700000 	.word	0x41700000
    3d60:	000077fc 	.word	0x000077fc
    3d64:	3fe00000 	.word	0x3fe00000
    3d68:	0000777c 	.word	0x0000777c
    3d6c:	e28d3008 	add	r3, sp, #8
    3d70:	e893000c 	ldm	r3, {r2, r3}
    3d74:	eb0006ad 	bl	5830 <__aeabi_dsub>
    3d78:	e1a07a47 	asr	r7, r7, #20
    3d7c:	e1a04001 	mov	r4, r1
    3d80:	e1a01081 	lsl	r1, r1, #1
    3d84:	e1a05000 	mov	r5, r0
    3d88:	e0471aa1 	sub	r1, r7, r1, lsr #21
    3d8c:	e1a02005 	mov	r2, r5
    3d90:	e1a03004 	mov	r3, r4
    3d94:	e3510010 	cmp	r1, #16
    3d98:	e888000c 	stm	r8, {r2, r3}
    3d9c:	daffffc9 	ble	3cc8 <__ieee754_rem_pio2+0x348>
    3da0:	e28f3f82 	add	r3, pc, #520	; 0x208
    3da4:	e893000c 	ldm	r3, {r2, r3}
    3da8:	e28d1010 	add	r1, sp, #16
    3dac:	e8910003 	ldm	r1, {r0, r1}
    3db0:	eb0007a3 	bl	5c44 <__aeabi_dmul>
    3db4:	e1a04000 	mov	r4, r0
    3db8:	e1a05001 	mov	r5, r1
    3dbc:	e1a02004 	mov	r2, r4
    3dc0:	e1a03005 	mov	r3, r5
    3dc4:	e1a0000a 	mov	r0, r10
    3dc8:	e1a0100b 	mov	r1, r11
    3dcc:	eb000697 	bl	5830 <__aeabi_dsub>
    3dd0:	e58d0018 	str	r0, [sp, #24]
    3dd4:	e58d101c 	str	r1, [sp, #28]
    3dd8:	e28d3018 	add	r3, sp, #24
    3ddc:	e893000c 	ldm	r3, {r2, r3}
    3de0:	e1a0000a 	mov	r0, r10
    3de4:	e1a0100b 	mov	r1, r11
    3de8:	eb000690 	bl	5830 <__aeabi_dsub>
    3dec:	e1a02004 	mov	r2, r4
    3df0:	e1a03005 	mov	r3, r5
    3df4:	eb00068d 	bl	5830 <__aeabi_dsub>
    3df8:	e28f3f6e 	add	r3, pc, #440	; 0x1b8
    3dfc:	e893000c 	ldm	r3, {r2, r3}
    3e00:	e1a04000 	mov	r4, r0
    3e04:	e1a05001 	mov	r5, r1
    3e08:	e28d1010 	add	r1, sp, #16
    3e0c:	e8910003 	ldm	r1, {r0, r1}
    3e10:	eb00078b 	bl	5c44 <__aeabi_dmul>
    3e14:	e1a02004 	mov	r2, r4
    3e18:	e1a03005 	mov	r3, r5
    3e1c:	eb000683 	bl	5830 <__aeabi_dsub>
    3e20:	e58d0008 	str	r0, [sp, #8]
    3e24:	e58d100c 	str	r1, [sp, #12]
    3e28:	e28d3008 	add	r3, sp, #8
    3e2c:	e893000c 	ldm	r3, {r2, r3}
    3e30:	e28d1018 	add	r1, sp, #24
    3e34:	e8910003 	ldm	r1, {r0, r1}
    3e38:	eb00067c 	bl	5830 <__aeabi_dsub>
    3e3c:	e1a04001 	mov	r4, r1
    3e40:	e1a01081 	lsl	r1, r1, #1
    3e44:	e1a05000 	mov	r5, r0
    3e48:	e0477aa1 	sub	r7, r7, r1, lsr #21
    3e4c:	e1a02005 	mov	r2, r5
    3e50:	e1a03004 	mov	r3, r4
    3e54:	e3570031 	cmp	r7, #49	; 0x31
    3e58:	e888000c 	stm	r8, {r2, r3}
    3e5c:	da00004f 	ble	3fa0 <__ieee754_rem_pio2+0x620>
    3e60:	e3a0242e 	mov	r2, #771751936	; 0x2e000000
    3e64:	e59f3164 	ldr	r3, [pc, #356]	; 3fd0 <__ieee754_rem_pio2+0x650>
    3e68:	e28d1010 	add	r1, sp, #16
    3e6c:	e8910003 	ldm	r1, {r0, r1}
    3e70:	eb000773 	bl	5c44 <__aeabi_dmul>
    3e74:	e1a04000 	mov	r4, r0
    3e78:	e1a05001 	mov	r5, r1
    3e7c:	e1a02004 	mov	r2, r4
    3e80:	e1a03005 	mov	r3, r5
    3e84:	e28d1018 	add	r1, sp, #24
    3e88:	e8910003 	ldm	r1, {r0, r1}
    3e8c:	eb000667 	bl	5830 <__aeabi_dsub>
    3e90:	e1a0a000 	mov	r10, r0
    3e94:	e1a0b001 	mov	r11, r1
    3e98:	e1a0200a 	mov	r2, r10
    3e9c:	e1a0300b 	mov	r3, r11
    3ea0:	e28d1018 	add	r1, sp, #24
    3ea4:	e8910003 	ldm	r1, {r0, r1}
    3ea8:	eb000660 	bl	5830 <__aeabi_dsub>
    3eac:	e1a02004 	mov	r2, r4
    3eb0:	e1a03005 	mov	r3, r5
    3eb4:	eb00065d 	bl	5830 <__aeabi_dsub>
    3eb8:	e28f3c01 	add	r3, pc, #256	; 0x100
    3ebc:	e893000c 	ldm	r3, {r2, r3}
    3ec0:	e1a04000 	mov	r4, r0
    3ec4:	e1a05001 	mov	r5, r1
    3ec8:	e28d1010 	add	r1, sp, #16
    3ecc:	e8910003 	ldm	r1, {r0, r1}
    3ed0:	eb00075b 	bl	5c44 <__aeabi_dmul>
    3ed4:	e1a02004 	mov	r2, r4
    3ed8:	e1a03005 	mov	r3, r5
    3edc:	eb000653 	bl	5830 <__aeabi_dsub>
    3ee0:	e58d0008 	str	r0, [sp, #8]
    3ee4:	e58d100c 	str	r1, [sp, #12]
    3ee8:	e1a0000a 	mov	r0, r10
    3eec:	e1a0100b 	mov	r1, r11
    3ef0:	eaffff6c 	b	3ca8 <__ieee754_rem_pio2+0x328>
    3ef4:	eb00064e 	bl	5834 <__adddf3>
    3ef8:	e59f30d4 	ldr	r3, [pc, #212]	; 3fd4 <__ieee754_rem_pio2+0x654>
    3efc:	e1570003 	cmp	r7, r3
    3f00:	e1a0a000 	mov	r10, r0
    3f04:	e1a0b001 	mov	r11, r1
    3f08:	0a00000f 	beq	3f4c <__ieee754_rem_pio2+0x5cc>
    3f0c:	e28f30b4 	add	r3, pc, #180	; 0xb4
    3f10:	e893000c 	ldm	r3, {r2, r3}
    3f14:	eb000646 	bl	5834 <__adddf3>
    3f18:	e1a02000 	mov	r2, r0
    3f1c:	e1a03001 	mov	r3, r1
    3f20:	e8880003 	stm	r8, {r0, r1}
    3f24:	e1a0000a 	mov	r0, r10
    3f28:	e1a0100b 	mov	r1, r11
    3f2c:	eb00063f 	bl	5830 <__aeabi_dsub>
    3f30:	e28f3090 	add	r3, pc, #144	; 0x90
    3f34:	e893000c 	ldm	r3, {r2, r3}
    3f38:	eb00063d 	bl	5834 <__adddf3>
    3f3c:	e3e06000 	mvn	r6, #0
    3f40:	e5880008 	str	r0, [r8, #8]
    3f44:	e588100c 	str	r1, [r8, #12]
    3f48:	eafffef9 	b	3b34 <__ieee754_rem_pio2+0x1b4>
    3f4c:	e28f305c 	add	r3, pc, #92	; 0x5c
    3f50:	e893000c 	ldm	r3, {r2, r3}
    3f54:	eb000636 	bl	5834 <__adddf3>
    3f58:	e28f3058 	add	r3, pc, #88	; 0x58
    3f5c:	e893000c 	ldm	r3, {r2, r3}
    3f60:	e1a06000 	mov	r6, r0
    3f64:	e1a07001 	mov	r7, r1
    3f68:	eb000631 	bl	5834 <__adddf3>
    3f6c:	e1a02000 	mov	r2, r0
    3f70:	e1a03001 	mov	r3, r1
    3f74:	e8880003 	stm	r8, {r0, r1}
    3f78:	e1a00006 	mov	r0, r6
    3f7c:	e1a01007 	mov	r1, r7
    3f80:	eb00062a 	bl	5830 <__aeabi_dsub>
    3f84:	e28f302c 	add	r3, pc, #44	; 0x2c
    3f88:	e893000c 	ldm	r3, {r2, r3}
    3f8c:	eb000628 	bl	5834 <__adddf3>
    3f90:	e3e06000 	mvn	r6, #0
    3f94:	e5880008 	str	r0, [r8, #8]
    3f98:	e588100c 	str	r1, [r8, #12]
    3f9c:	eafffee4 	b	3b34 <__ieee754_rem_pio2+0x1b4>
    3fa0:	e28db018 	add	r11, sp, #24
    3fa4:	e89b0c00 	ldm	r11, {r10, r11}
    3fa8:	eaffff46 	b	3cc8 <__ieee754_rem_pio2+0x348>
    3fac:	e1a00000 	nop			; (mov r0, r0)
    3fb0:	1a600000 	.word	0x1a600000
    3fb4:	3dd0b461 	.word	0x3dd0b461
    3fb8:	2e037073 	.word	0x2e037073
    3fbc:	3ba3198a 	.word	0x3ba3198a
    3fc0:	252049c1 	.word	0x252049c1
    3fc4:	397b839a 	.word	0x397b839a
    3fc8:	1a626331 	.word	0x1a626331
    3fcc:	3dd0b461 	.word	0x3dd0b461
    3fd0:	3ba3198a 	.word	0x3ba3198a
    3fd4:	3ff921fb 	.word	0x3ff921fb

00003fd8 <__ieee754_sqrt>:
    3fd8:	e59fc230 	ldr	r12, [pc, #560]	; 4210 <__ieee754_sqrt+0x238>
    3fdc:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    3fe0:	e59f7228 	ldr	r7, [pc, #552]	; 4210 <__ieee754_sqrt+0x238>
    3fe4:	e001c00c 	and	r12, r1, r12
    3fe8:	e15c0007 	cmp	r12, r7
    3fec:	e1a04000 	mov	r4, r0
    3ff0:	e1a05001 	mov	r5, r1
    3ff4:	e1a02000 	mov	r2, r0
    3ff8:	e1a03001 	mov	r3, r1
    3ffc:	e1a06001 	mov	r6, r1
    4000:	e1a0c001 	mov	r12, r1
    4004:	e1a08000 	mov	r8, r0
    4008:	0a00006a 	beq	41b8 <__ieee754_sqrt+0x1e0>
    400c:	e3510000 	cmp	r1, #0
    4010:	da000051 	ble	415c <__ieee754_sqrt+0x184>
    4014:	e1b02a41 	asrs	r2, r1, #20
    4018:	0a00005a 	beq	4188 <__ieee754_sqrt+0x1b0>
    401c:	e3cc34ff 	bic	r3, r12, #-16777216	; 0xff000000
    4020:	e3120001 	tst	r2, #1
    4024:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
    4028:	e2426fff 	sub	r6, r2, #1020	; 0x3fc
    402c:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    4030:	01a02fa8 	lsreq	r2, r8, #31
    4034:	01a08088 	lsleq	r8, r8, #1
    4038:	00823083 	addeq	r3, r2, r3, lsl #1
    403c:	e2466003 	sub	r6, r6, #3
    4040:	e1a02fa8 	lsr	r2, r8, #31
    4044:	e3a07000 	mov	r7, #0
    4048:	e0823083 	add	r3, r2, r3, lsl #1
    404c:	e1a060c6 	asr	r6, r6, #1
    4050:	e1a02088 	lsl	r2, r8, #1
    4054:	e3a0c016 	mov	r12, #22
    4058:	e1a00007 	mov	r0, r7
    405c:	e3a01602 	mov	r1, #2097152	; 0x200000
    4060:	e0804001 	add	r4, r0, r1
    4064:	e1540003 	cmp	r4, r3
    4068:	e1a05fa2 	lsr	r5, r2, #31
    406c:	d0840001 	addle	r0, r4, r1
    4070:	d0643003 	rsble	r3, r4, r3
    4074:	d0877001 	addle	r7, r7, r1
    4078:	e25cc001 	subs	r12, r12, #1
    407c:	e0853083 	add	r3, r5, r3, lsl #1
    4080:	e1a02082 	lsl	r2, r2, #1
    4084:	e1a010a1 	lsr	r1, r1, #1
    4088:	1afffff4 	bne	4060 <__ieee754_sqrt+0x88>
    408c:	e3a05020 	mov	r5, #32
    4090:	e1a0800c 	mov	r8, r12
    4094:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    4098:	ea00000c 	b	40d0 <__ieee754_sqrt+0xf8>
    409c:	e1a0a000 	mov	r10, r0
    40a0:	e1540002 	cmp	r4, r2
    40a4:	e0603003 	rsb	r3, r0, r3
    40a8:	82433001 	subhi	r3, r3, #1
    40ac:	e0642002 	rsb	r2, r4, r2
    40b0:	e08cc001 	add	r12, r12, r1
    40b4:	e1a0000a 	mov	r0, r10
    40b8:	e1a04fa2 	lsr	r4, r2, #31
    40bc:	e2555001 	subs	r5, r5, #1
    40c0:	e0843083 	add	r3, r4, r3, lsl #1
    40c4:	e1a02082 	lsl	r2, r2, #1
    40c8:	e1a010a1 	lsr	r1, r1, #1
    40cc:	0a00000d 	beq	4108 <__ieee754_sqrt+0x130>
    40d0:	e1500003 	cmp	r0, r3
    40d4:	e0814008 	add	r4, r1, r8
    40d8:	ba000002 	blt	40e8 <__ieee754_sqrt+0x110>
    40dc:	e1540002 	cmp	r4, r2
    40e0:	91530000 	cmpls	r3, r0
    40e4:	1afffff3 	bne	40b8 <__ieee754_sqrt+0xe0>
    40e8:	e2048102 	and	r8, r4, #-2147483648	; 0x80000000
    40ec:	e3580102 	cmp	r8, #-2147483648	; 0x80000000
    40f0:	e0848001 	add	r8, r4, r1
    40f4:	1affffe8 	bne	409c <__ieee754_sqrt+0xc4>
    40f8:	e3580000 	cmp	r8, #0
    40fc:	a280a001 	addge	r10, r0, #1
    4100:	aaffffe6 	bge	40a0 <__ieee754_sqrt+0xc8>
    4104:	eaffffe4 	b	409c <__ieee754_sqrt+0xc4>
    4108:	e1923003 	orrs	r3, r2, r3
    410c:	1a00000b 	bne	4140 <__ieee754_sqrt+0x168>
    4110:	e1a0c0ac 	lsr	r12, r12, #1
    4114:	e1a030c7 	asr	r3, r7, #1
    4118:	e28335ff 	add	r3, r3, #1069547520	; 0x3fc00000
    411c:	e3170001 	tst	r7, #1
    4120:	e2833602 	add	r3, r3, #2097152	; 0x200000
    4124:	138cc102 	orrne	r12, r12, #-2147483648	; 0x80000000
    4128:	e0835a06 	add	r5, r3, r6, lsl #20
    412c:	e1a0400c 	mov	r4, r12
    4130:	e1a00004 	mov	r0, r4
    4134:	e1a01005 	mov	r1, r5
    4138:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    413c:	e12fff1e 	bx	lr
    4140:	e37c0001 	cmn	r12, #1
    4144:	02877001 	addeq	r7, r7, #1
    4148:	01a0c005 	moveq	r12, r5
    414c:	0afffff0 	beq	4114 <__ieee754_sqrt+0x13c>
    4150:	e20c3001 	and	r3, r12, #1
    4154:	e083c00c 	add	r12, r3, r12
    4158:	eaffffec 	b	4110 <__ieee754_sqrt+0x138>
    415c:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    4160:	e19cc000 	orrs	r12, r12, r0
    4164:	0afffff1 	beq	4130 <__ieee754_sqrt+0x158>
    4168:	e3510000 	cmp	r1, #0
    416c:	01a02001 	moveq	r2, r1
    4170:	1a00001d 	bne	41ec <__ieee754_sqrt+0x214>
    4174:	e1a0c5a8 	lsr	r12, r8, #11
    4178:	e35c0000 	cmp	r12, #0
    417c:	e2422015 	sub	r2, r2, #21
    4180:	e1a08a88 	lsl	r8, r8, #21
    4184:	0afffffa 	beq	4174 <__ieee754_sqrt+0x19c>
    4188:	e21c3601 	ands	r3, r12, #1048576	; 0x100000
    418c:	1a000012 	bne	41dc <__ieee754_sqrt+0x204>
    4190:	e1a0c08c 	lsl	r12, r12, #1
    4194:	e31c0601 	tst	r12, #1048576	; 0x100000
    4198:	e2833001 	add	r3, r3, #1
    419c:	0afffffb 	beq	4190 <__ieee754_sqrt+0x1b8>
    41a0:	e2631001 	rsb	r1, r3, #1
    41a4:	e2630020 	rsb	r0, r3, #32
    41a8:	e18cc038 	orr	r12, r12, r8, lsr r0
    41ac:	e0822001 	add	r2, r2, r1
    41b0:	e1a08318 	lsl	r8, r8, r3
    41b4:	eaffff98 	b	401c <__ieee754_sqrt+0x44>
    41b8:	eb0006a1 	bl	5c44 <__aeabi_dmul>
    41bc:	e1a02000 	mov	r2, r0
    41c0:	e1a03001 	mov	r3, r1
    41c4:	e1a00004 	mov	r0, r4
    41c8:	e1a01005 	mov	r1, r5
    41cc:	eb000598 	bl	5834 <__adddf3>
    41d0:	e1a04000 	mov	r4, r0
    41d4:	e1a05001 	mov	r5, r1
    41d8:	eaffffd4 	b	4130 <__ieee754_sqrt+0x158>
    41dc:	e3a00020 	mov	r0, #32
    41e0:	e3a01001 	mov	r1, #1
    41e4:	e3a03000 	mov	r3, #0
    41e8:	eaffffee 	b	41a8 <__ieee754_sqrt+0x1d0>
    41ec:	e1a02000 	mov	r2, r0
    41f0:	e1a03001 	mov	r3, r1
    41f4:	eb00058d 	bl	5830 <__aeabi_dsub>
    41f8:	e1a02000 	mov	r2, r0
    41fc:	e1a03001 	mov	r3, r1
    4200:	eb000733 	bl	5ed4 <__aeabi_ddiv>
    4204:	e1a04000 	mov	r4, r0
    4208:	e1a05001 	mov	r5, r1
    420c:	eaffffc7 	b	4130 <__ieee754_sqrt+0x158>
    4210:	7ff00000 	.word	0x7ff00000
    4214:	00000000 	.word	0x00000000

00004218 <__kernel_cos>:
    4218:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    421c:	e3c19102 	bic	r9, r1, #-2147483648	; 0x80000000
    4220:	e35905f9 	cmp	r9, #1044381696	; 0x3e400000
    4224:	e24dd014 	sub	sp, sp, #20
    4228:	e1a06000 	mov	r6, r0
    422c:	e1a07001 	mov	r7, r1
    4230:	e1a04000 	mov	r4, r0
    4234:	e1a05001 	mov	r5, r1
    4238:	e1a0a002 	mov	r10, r2
    423c:	e1a0b003 	mov	r11, r3
    4240:	aa00004d 	bge	437c <__kernel_cos+0x164>
    4244:	eb0007f6 	bl	6224 <__aeabi_d2iz>
    4248:	e3500000 	cmp	r0, #0
    424c:	0a0000ae 	beq	450c <__kernel_cos+0x2f4>
    4250:	e1a02006 	mov	r2, r6
    4254:	e1a03007 	mov	r3, r7
    4258:	e1a00006 	mov	r0, r6
    425c:	e1a01007 	mov	r1, r7
    4260:	eb000677 	bl	5c44 <__aeabi_dmul>
    4264:	e28f3fab 	add	r3, pc, #684	; 0x2ac
    4268:	e893000c 	ldm	r3, {r2, r3}
    426c:	e1a04000 	mov	r4, r0
    4270:	e1a05001 	mov	r5, r1
    4274:	eb000672 	bl	5c44 <__aeabi_dmul>
    4278:	e28f3e2a 	add	r3, pc, #672	; 0x2a0
    427c:	e893000c 	ldm	r3, {r2, r3}
    4280:	eb00056b 	bl	5834 <__adddf3>
    4284:	e1a02004 	mov	r2, r4
    4288:	e1a03005 	mov	r3, r5
    428c:	eb00066c 	bl	5c44 <__aeabi_dmul>
    4290:	e28f3e29 	add	r3, pc, #656	; 0x290
    4294:	e893000c 	ldm	r3, {r2, r3}
    4298:	eb000564 	bl	5830 <__aeabi_dsub>
    429c:	e1a02004 	mov	r2, r4
    42a0:	e1a03005 	mov	r3, r5
    42a4:	eb000666 	bl	5c44 <__aeabi_dmul>
    42a8:	e28f3d0a 	add	r3, pc, #640	; 0x280
    42ac:	e893000c 	ldm	r3, {r2, r3}
    42b0:	eb00055f 	bl	5834 <__adddf3>
    42b4:	e1a02004 	mov	r2, r4
    42b8:	e1a03005 	mov	r3, r5
    42bc:	eb000660 	bl	5c44 <__aeabi_dmul>
    42c0:	e28f3e27 	add	r3, pc, #624	; 0x270
    42c4:	e893000c 	ldm	r3, {r2, r3}
    42c8:	eb000558 	bl	5830 <__aeabi_dsub>
    42cc:	e1a02004 	mov	r2, r4
    42d0:	e1a03005 	mov	r3, r5
    42d4:	eb00065a 	bl	5c44 <__aeabi_dmul>
    42d8:	e28f3e26 	add	r3, pc, #608	; 0x260
    42dc:	e893000c 	ldm	r3, {r2, r3}
    42e0:	eb000553 	bl	5834 <__adddf3>
    42e4:	e1a02004 	mov	r2, r4
    42e8:	e1a03005 	mov	r3, r5
    42ec:	eb000654 	bl	5c44 <__aeabi_dmul>
    42f0:	e88d0003 	stm	sp, {r0, r1}
    42f4:	e1a00004 	mov	r0, r4
    42f8:	e1a01005 	mov	r1, r5
    42fc:	e3a02000 	mov	r2, #0
    4300:	e59f3240 	ldr	r3, [pc, #576]	; 4548 <__kernel_cos+0x330>
    4304:	eb00064e 	bl	5c44 <__aeabi_dmul>
    4308:	e89d000c 	ldm	sp, {r2, r3}
    430c:	e1a08000 	mov	r8, r0
    4310:	e1a09001 	mov	r9, r1
    4314:	e1a00004 	mov	r0, r4
    4318:	e1a01005 	mov	r1, r5
    431c:	eb000648 	bl	5c44 <__aeabi_dmul>
    4320:	e1a0200a 	mov	r2, r10
    4324:	e1a04000 	mov	r4, r0
    4328:	e1a05001 	mov	r5, r1
    432c:	e1a0300b 	mov	r3, r11
    4330:	e1a00006 	mov	r0, r6
    4334:	e1a01007 	mov	r1, r7
    4338:	eb000641 	bl	5c44 <__aeabi_dmul>
    433c:	e1a02000 	mov	r2, r0
    4340:	e1a03001 	mov	r3, r1
    4344:	e1a00004 	mov	r0, r4
    4348:	e1a01005 	mov	r1, r5
    434c:	eb000537 	bl	5830 <__aeabi_dsub>
    4350:	e1a02000 	mov	r2, r0
    4354:	e1a03001 	mov	r3, r1
    4358:	e1a00008 	mov	r0, r8
    435c:	e1a01009 	mov	r1, r9
    4360:	eb000532 	bl	5830 <__aeabi_dsub>
    4364:	e1a02000 	mov	r2, r0
    4368:	e1a03001 	mov	r3, r1
    436c:	e3a00000 	mov	r0, #0
    4370:	e59f11d4 	ldr	r1, [pc, #468]	; 454c <__kernel_cos+0x334>
    4374:	eb00052d 	bl	5830 <__aeabi_dsub>
    4378:	ea00005a 	b	44e8 <__kernel_cos+0x2d0>
    437c:	e1a02000 	mov	r2, r0
    4380:	e1a03001 	mov	r3, r1
    4384:	eb00062e 	bl	5c44 <__aeabi_dmul>
    4388:	e28f3f62 	add	r3, pc, #392	; 0x188
    438c:	e893000c 	ldm	r3, {r2, r3}
    4390:	e1a04000 	mov	r4, r0
    4394:	e1a05001 	mov	r5, r1
    4398:	eb000629 	bl	5c44 <__aeabi_dmul>
    439c:	e28f3f5f 	add	r3, pc, #380	; 0x17c
    43a0:	e893000c 	ldm	r3, {r2, r3}
    43a4:	eb000522 	bl	5834 <__adddf3>
    43a8:	e1a02004 	mov	r2, r4
    43ac:	e1a03005 	mov	r3, r5
    43b0:	eb000623 	bl	5c44 <__aeabi_dmul>
    43b4:	e28f3f5b 	add	r3, pc, #364	; 0x16c
    43b8:	e893000c 	ldm	r3, {r2, r3}
    43bc:	eb00051b 	bl	5830 <__aeabi_dsub>
    43c0:	e1a02004 	mov	r2, r4
    43c4:	e1a03005 	mov	r3, r5
    43c8:	eb00061d 	bl	5c44 <__aeabi_dmul>
    43cc:	e28f3f57 	add	r3, pc, #348	; 0x15c
    43d0:	e893000c 	ldm	r3, {r2, r3}
    43d4:	eb000516 	bl	5834 <__adddf3>
    43d8:	e1a02004 	mov	r2, r4
    43dc:	e1a03005 	mov	r3, r5
    43e0:	eb000617 	bl	5c44 <__aeabi_dmul>
    43e4:	e28f3f53 	add	r3, pc, #332	; 0x14c
    43e8:	e893000c 	ldm	r3, {r2, r3}
    43ec:	eb00050f 	bl	5830 <__aeabi_dsub>
    43f0:	e1a02004 	mov	r2, r4
    43f4:	e1a03005 	mov	r3, r5
    43f8:	eb000611 	bl	5c44 <__aeabi_dmul>
    43fc:	e28f3f4f 	add	r3, pc, #316	; 0x13c
    4400:	e893000c 	ldm	r3, {r2, r3}
    4404:	eb00050a 	bl	5834 <__adddf3>
    4408:	e1a03005 	mov	r3, r5
    440c:	e1a02004 	mov	r2, r4
    4410:	eb00060b 	bl	5c44 <__aeabi_dmul>
    4414:	e59f3134 	ldr	r3, [pc, #308]	; 4550 <__kernel_cos+0x338>
    4418:	e1590003 	cmp	r9, r3
    441c:	e88d0003 	stm	sp, {r0, r1}
    4420:	daffffb3 	ble	42f4 <__kernel_cos+0xdc>
    4424:	e59f3128 	ldr	r3, [pc, #296]	; 4554 <__kernel_cos+0x33c>
    4428:	e1590003 	cmp	r9, r3
    442c:	e3a02000 	mov	r2, #0
    4430:	ca00002f 	bgt	44f4 <__kernel_cos+0x2dc>
    4434:	e2493602 	sub	r3, r9, #2097152	; 0x200000
    4438:	e3a02000 	mov	r2, #0
    443c:	e3a00000 	mov	r0, #0
    4440:	e59f1104 	ldr	r1, [pc, #260]	; 454c <__kernel_cos+0x334>
    4444:	e1a08002 	mov	r8, r2
    4448:	e1a09003 	mov	r9, r3
    444c:	eb0004f7 	bl	5830 <__aeabi_dsub>
    4450:	e58d0008 	str	r0, [sp, #8]
    4454:	e58d100c 	str	r1, [sp, #12]
    4458:	e1a00004 	mov	r0, r4
    445c:	e1a01005 	mov	r1, r5
    4460:	e3a02000 	mov	r2, #0
    4464:	e59f30dc 	ldr	r3, [pc, #220]	; 4548 <__kernel_cos+0x330>
    4468:	eb0005f5 	bl	5c44 <__aeabi_dmul>
    446c:	e1a02008 	mov	r2, r8
    4470:	e1a03009 	mov	r3, r9
    4474:	eb0004ed 	bl	5830 <__aeabi_dsub>
    4478:	e89d000c 	ldm	sp, {r2, r3}
    447c:	e1a08000 	mov	r8, r0
    4480:	e1a09001 	mov	r9, r1
    4484:	e1a00004 	mov	r0, r4
    4488:	e1a01005 	mov	r1, r5
    448c:	eb0005ec 	bl	5c44 <__aeabi_dmul>
    4490:	e1a0200a 	mov	r2, r10
    4494:	e1a04000 	mov	r4, r0
    4498:	e1a05001 	mov	r5, r1
    449c:	e1a0300b 	mov	r3, r11
    44a0:	e1a00006 	mov	r0, r6
    44a4:	e1a01007 	mov	r1, r7
    44a8:	eb0005e5 	bl	5c44 <__aeabi_dmul>
    44ac:	e1a02000 	mov	r2, r0
    44b0:	e1a03001 	mov	r3, r1
    44b4:	e1a00004 	mov	r0, r4
    44b8:	e1a01005 	mov	r1, r5
    44bc:	eb0004db 	bl	5830 <__aeabi_dsub>
    44c0:	e1a02000 	mov	r2, r0
    44c4:	e1a03001 	mov	r3, r1
    44c8:	e1a00008 	mov	r0, r8
    44cc:	e1a01009 	mov	r1, r9
    44d0:	eb0004d6 	bl	5830 <__aeabi_dsub>
    44d4:	e1a02000 	mov	r2, r0
    44d8:	e1a03001 	mov	r3, r1
    44dc:	e28d1008 	add	r1, sp, #8
    44e0:	e8910003 	ldm	r1, {r0, r1}
    44e4:	eb0004d1 	bl	5830 <__aeabi_dsub>
    44e8:	e28dd014 	add	sp, sp, #20
    44ec:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    44f0:	e12fff1e 	bx	lr
    44f4:	e59f305c 	ldr	r3, [pc, #92]	; 4558 <__kernel_cos+0x340>
    44f8:	e3a08000 	mov	r8, #0
    44fc:	e58d2008 	str	r2, [sp, #8]
    4500:	e58d300c 	str	r3, [sp, #12]
    4504:	e59f9050 	ldr	r9, [pc, #80]	; 455c <__kernel_cos+0x344>
    4508:	eaffffd2 	b	4458 <__kernel_cos+0x240>
    450c:	e3a00000 	mov	r0, #0
    4510:	e59f1034 	ldr	r1, [pc, #52]	; 454c <__kernel_cos+0x334>
    4514:	eafffff3 	b	44e8 <__kernel_cos+0x2d0>
    4518:	be8838d4 	.word	0xbe8838d4
    451c:	bda8fae9 	.word	0xbda8fae9
    4520:	bdb4b1c4 	.word	0xbdb4b1c4
    4524:	3e21ee9e 	.word	0x3e21ee9e
    4528:	809c52ad 	.word	0x809c52ad
    452c:	3e927e4f 	.word	0x3e927e4f
    4530:	19cb1590 	.word	0x19cb1590
    4534:	3efa01a0 	.word	0x3efa01a0
    4538:	16c15177 	.word	0x16c15177
    453c:	3f56c16c 	.word	0x3f56c16c
    4540:	5555554c 	.word	0x5555554c
    4544:	3fa55555 	.word	0x3fa55555
    4548:	3fe00000 	.word	0x3fe00000
    454c:	3ff00000 	.word	0x3ff00000
    4550:	3fd33332 	.word	0x3fd33332
    4554:	3fe90000 	.word	0x3fe90000
    4558:	3fe70000 	.word	0x3fe70000
    455c:	3fd20000 	.word	0x3fd20000

00004560 <__kernel_rem_pio2>:
    4560:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    4564:	e59feb6c 	ldr	lr, [pc, #2924]	; 50d8 <__kernel_rem_pio2+0xb78>
    4568:	e242c003 	sub	r12, r2, #3
    456c:	e0ce4e9c 	smull	r4, lr, r12, lr
    4570:	e1a0cfcc 	asr	r12, r12, #31
    4574:	e06cc14e 	rsb	r12, r12, lr, asr #2
    4578:	e24ddf99 	sub	sp, sp, #612	; 0x264
    457c:	e1cccfcc 	bic	r12, r12, r12, asr #31
    4580:	e58dc028 	str	r12, [sp, #40]	; 0x28
    4584:	e1a0b003 	mov	r11, r3
    4588:	e59dc288 	ldr	r12, [sp, #648]	; 0x288
    458c:	e59f3b48 	ldr	r3, [pc, #2888]	; 50dc <__kernel_rem_pio2+0xb7c>
    4590:	e793310c 	ldr	r3, [r3, r12, lsl #2]
    4594:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    4598:	e58d3020 	str	r3, [sp, #32]
    459c:	e59de020 	ldr	lr, [sp, #32]
    45a0:	e1e0300c 	mvn	r3, r12
    45a4:	e24b4001 	sub	r4, r11, #1
    45a8:	e0833083 	add	r3, r3, r3, lsl #1
    45ac:	e58d0010 	str	r0, [sp, #16]
    45b0:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
    45b4:	e0823183 	add	r3, r2, r3, lsl #3
    45b8:	e094c00e 	adds	r12, r4, lr
    45bc:	e58d400c 	str	r4, [sp, #12]
    45c0:	e58d101c 	str	r1, [sp, #28]
    45c4:	e58d3018 	str	r3, [sp, #24]
    45c8:	e0646000 	rsb	r6, r4, r0
    45cc:	4a000012 	bmi	461c <__kernel_rem_pio2+0xbc>
    45d0:	e086c00c 	add	r12, r6, r12
    45d4:	e28c4001 	add	r4, r12, #1
    45d8:	e59dc28c 	ldr	r12, [sp, #652]	; 0x28c
    45dc:	e28d8080 	add	r8, sp, #128	; 0x80
    45e0:	e08c5106 	add	r5, r12, r6, lsl #2
    45e4:	e3a07000 	mov	r7, #0
    45e8:	ea000006 	b	4608 <__kernel_rem_pio2+0xa8>
    45ec:	e7950007 	ldr	r0, [r5, r7]
    45f0:	eb00055c 	bl	5b68 <__aeabi_i2d>
    45f4:	e2866001 	add	r6, r6, #1
    45f8:	e1560004 	cmp	r6, r4
    45fc:	e8a80003 	stmia	r8!, {r0, r1}
    4600:	e2877004 	add	r7, r7, #4
    4604:	0a000004 	beq	461c <__kernel_rem_pio2+0xbc>
    4608:	e3560000 	cmp	r6, #0
    460c:	aafffff6 	bge	45ec <__kernel_rem_pio2+0x8c>
    4610:	e3a00000 	mov	r0, #0
    4614:	e3a01000 	mov	r1, #0
    4618:	eafffff5 	b	45f4 <__kernel_rem_pio2+0x94>
    461c:	e59d4020 	ldr	r4, [sp, #32]
    4620:	e3540000 	cmp	r4, #0
    4624:	ba000020 	blt	46ac <__kernel_rem_pio2+0x14c>
    4628:	e59d4020 	ldr	r4, [sp, #32]
    462c:	e28dcf72 	add	r12, sp, #456	; 0x1c8
    4630:	e08cc184 	add	r12, r12, r4, lsl #3
    4634:	e58dc004 	str	r12, [sp, #4]
    4638:	e28dad07 	add	r10, sp, #448	; 0x1c0
    463c:	e1a0800b 	mov	r8, r11
    4640:	e59dc00c 	ldr	r12, [sp, #12]
    4644:	e35c0000 	cmp	r12, #0
    4648:	ba000130 	blt	4b10 <__kernel_rem_pio2+0x5b0>
    464c:	e28de080 	add	lr, sp, #128	; 0x80
    4650:	e59d9010 	ldr	r9, [sp, #16]
    4654:	e08e7188 	add	r7, lr, r8, lsl #3
    4658:	e3a04000 	mov	r4, #0
    465c:	e3a05000 	mov	r5, #0
    4660:	e3a06000 	mov	r6, #0
    4664:	e937000c 	ldmdb	r7!, {r2, r3}
    4668:	e8b90003 	ldm	r9!, {r0, r1}
    466c:	eb000574 	bl	5c44 <__aeabi_dmul>
    4670:	e1a02000 	mov	r2, r0
    4674:	e1a03001 	mov	r3, r1
    4678:	e1a00004 	mov	r0, r4
    467c:	e1a01005 	mov	r1, r5
    4680:	eb00046b 	bl	5834 <__adddf3>
    4684:	e2866001 	add	r6, r6, #1
    4688:	e156000b 	cmp	r6, r11
    468c:	e1a04000 	mov	r4, r0
    4690:	e1a05001 	mov	r5, r1
    4694:	1afffff2 	bne	4664 <__kernel_rem_pio2+0x104>
    4698:	e8aa0030 	stmia	r10!, {r4, r5}
    469c:	e59d4004 	ldr	r4, [sp, #4]
    46a0:	e15a0004 	cmp	r10, r4
    46a4:	e2888001 	add	r8, r8, #1
    46a8:	1affffe4 	bne	4640 <__kernel_rem_pio2+0xe0>
    46ac:	e59dc020 	ldr	r12, [sp, #32]
    46b0:	e28d4030 	add	r4, sp, #48	; 0x30
    46b4:	e084410c 	add	r4, r4, r12, lsl #2
    46b8:	e58d402c 	str	r4, [sp, #44]	; 0x2c
    46bc:	e58dc004 	str	r12, [sp, #4]
    46c0:	e59d4004 	ldr	r4, [sp, #4]
    46c4:	e28dce26 	add	r12, sp, #608	; 0x260
    46c8:	e1a0a184 	lsl	r10, r4, #3
    46cc:	e08c300a 	add	r3, r12, r10
    46d0:	e3540000 	cmp	r4, #0
    46d4:	e24350a0 	sub	r5, r3, #160	; 0xa0
    46d8:	e8950030 	ldm	r5, {r4, r5}
    46dc:	da00001f 	ble	4760 <__kernel_rem_pio2+0x200>
    46e0:	e59dc004 	ldr	r12, [sp, #4]
    46e4:	e28d802c 	add	r8, sp, #44	; 0x2c
    46e8:	e28ded07 	add	lr, sp, #448	; 0x1c0
    46ec:	e08ea00a 	add	r10, lr, r10
    46f0:	e088910c 	add	r9, r8, r12, lsl #2
    46f4:	e3a02000 	mov	r2, #0
    46f8:	e59f39e0 	ldr	r3, [pc, #2528]	; 50e0 <__kernel_rem_pio2+0xb80>
    46fc:	e1a00004 	mov	r0, r4
    4700:	e1a01005 	mov	r1, r5
    4704:	eb00054e 	bl	5c44 <__aeabi_dmul>
    4708:	eb0006c5 	bl	6224 <__aeabi_d2iz>
    470c:	eb000515 	bl	5b68 <__aeabi_i2d>
    4710:	e3a02000 	mov	r2, #0
    4714:	e59f39c8 	ldr	r3, [pc, #2504]	; 50e4 <__kernel_rem_pio2+0xb84>
    4718:	e1a06000 	mov	r6, r0
    471c:	e1a07001 	mov	r7, r1
    4720:	eb000547 	bl	5c44 <__aeabi_dmul>
    4724:	e1a02000 	mov	r2, r0
    4728:	e1a03001 	mov	r3, r1
    472c:	e1a00004 	mov	r0, r4
    4730:	e1a01005 	mov	r1, r5
    4734:	eb00043d 	bl	5830 <__aeabi_dsub>
    4738:	eb0006b9 	bl	6224 <__aeabi_d2iz>
    473c:	e1a02006 	mov	r2, r6
    4740:	e5a80004 	str	r0, [r8, #4]!
    4744:	e1a03007 	mov	r3, r7
    4748:	e93a0003 	ldmdb	r10!, {r0, r1}
    474c:	eb000438 	bl	5834 <__adddf3>
    4750:	e1580009 	cmp	r8, r9
    4754:	e1a04000 	mov	r4, r0
    4758:	e1a05001 	mov	r5, r1
    475c:	1affffe4 	bne	46f4 <__kernel_rem_pio2+0x194>
    4760:	e59d2018 	ldr	r2, [sp, #24]
    4764:	e1a00004 	mov	r0, r4
    4768:	e1a01005 	mov	r1, r5
    476c:	eb000379 	bl	5558 <scalbn>
    4770:	e3a02000 	mov	r2, #0
    4774:	e3a035ff 	mov	r3, #1069547520	; 0x3fc00000
    4778:	e1a04000 	mov	r4, r0
    477c:	e1a05001 	mov	r5, r1
    4780:	eb00052f 	bl	5c44 <__aeabi_dmul>
    4784:	ebfff697 	bl	21e8 <floor>
    4788:	e3a02000 	mov	r2, #0
    478c:	e59f3954 	ldr	r3, [pc, #2388]	; 50e8 <__kernel_rem_pio2+0xb88>
    4790:	eb00052b 	bl	5c44 <__aeabi_dmul>
    4794:	e1a02000 	mov	r2, r0
    4798:	e1a03001 	mov	r3, r1
    479c:	e1a00004 	mov	r0, r4
    47a0:	e1a01005 	mov	r1, r5
    47a4:	eb000421 	bl	5830 <__aeabi_dsub>
    47a8:	e1a04000 	mov	r4, r0
    47ac:	e1a05001 	mov	r5, r1
    47b0:	eb00069b 	bl	6224 <__aeabi_d2iz>
    47b4:	e1a08000 	mov	r8, r0
    47b8:	eb0004ea 	bl	5b68 <__aeabi_i2d>
    47bc:	e1a02000 	mov	r2, r0
    47c0:	e1a03001 	mov	r3, r1
    47c4:	e1a00004 	mov	r0, r4
    47c8:	e1a01005 	mov	r1, r5
    47cc:	eb000417 	bl	5830 <__aeabi_dsub>
    47d0:	e59d4018 	ldr	r4, [sp, #24]
    47d4:	e3540000 	cmp	r4, #0
    47d8:	e1a06000 	mov	r6, r0
    47dc:	e1a07001 	mov	r7, r1
    47e0:	da0000ad 	ble	4a9c <__kernel_rem_pio2+0x53c>
    47e4:	e59dc004 	ldr	r12, [sp, #4]
    47e8:	e28dee26 	add	lr, sp, #608	; 0x260
    47ec:	e24c2001 	sub	r2, r12, #1
    47f0:	e08e2102 	add	r2, lr, r2, lsl #2
    47f4:	e5120230 	ldr	r0, [r2, #-560]	; 0xfffffdd0
    47f8:	e2643018 	rsb	r3, r4, #24
    47fc:	e1a01350 	asr	r1, r0, r3
    4800:	e0403311 	sub	r3, r0, r1, lsl r3
    4804:	e2645017 	rsb	r5, r4, #23
    4808:	e1a05553 	asr	r5, r3, r5
    480c:	e5023230 	str	r3, [r2, #-560]	; 0xfffffdd0
    4810:	e0888001 	add	r8, r8, r1
    4814:	e3550000 	cmp	r5, #0
    4818:	da000027 	ble	48bc <__kernel_rem_pio2+0x35c>
    481c:	e59d4004 	ldr	r4, [sp, #4]
    4820:	e3540000 	cmp	r4, #0
    4824:	e2888001 	add	r8, r8, #1
    4828:	da0000b6 	ble	4b08 <__kernel_rem_pio2+0x5a8>
    482c:	e28d3030 	add	r3, sp, #48	; 0x30
    4830:	e0830104 	add	r0, r3, r4, lsl #2
    4834:	e3a04000 	mov	r4, #0
    4838:	ea000005 	b	4854 <__kernel_rem_pio2+0x2f4>
    483c:	e3520000 	cmp	r2, #0
    4840:	12622401 	rsbne	r2, r2, #16777216	; 0x1000000
    4844:	15032004 	strne	r2, [r3, #-4]
    4848:	13a04001 	movne	r4, #1
    484c:	e1530000 	cmp	r3, r0
    4850:	0a000008 	beq	4878 <__kernel_rem_pio2+0x318>
    4854:	e3540000 	cmp	r4, #0
    4858:	e4932004 	ldr	r2, [r3], #4
    485c:	0afffff6 	beq	483c <__kernel_rem_pio2+0x2dc>
    4860:	e3e014ff 	mvn	r1, #-16777216	; 0xff000000
    4864:	e0621001 	rsb	r1, r2, r1
    4868:	e1530000 	cmp	r3, r0
    486c:	e5031004 	str	r1, [r3, #-4]
    4870:	e3a04001 	mov	r4, #1
    4874:	1afffff6 	bne	4854 <__kernel_rem_pio2+0x2f4>
    4878:	e59dc018 	ldr	r12, [sp, #24]
    487c:	e35c0000 	cmp	r12, #0
    4880:	da00000b 	ble	48b4 <__kernel_rem_pio2+0x354>
    4884:	e35c0001 	cmp	r12, #1
    4888:	0a00008a 	beq	4ab8 <__kernel_rem_pio2+0x558>
    488c:	e35c0002 	cmp	r12, #2
    4890:	1a000007 	bne	48b4 <__kernel_rem_pio2+0x354>
    4894:	e59dc004 	ldr	r12, [sp, #4]
    4898:	e28dee26 	add	lr, sp, #608	; 0x260
    489c:	e24c3001 	sub	r3, r12, #1
    48a0:	e08e3103 	add	r3, lr, r3, lsl #2
    48a4:	e5132230 	ldr	r2, [r3, #-560]	; 0xfffffdd0
    48a8:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
    48ac:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000
    48b0:	e5032230 	str	r2, [r3, #-560]	; 0xfffffdd0
    48b4:	e3550002 	cmp	r5, #2
    48b8:	0a000062 	beq	4a48 <__kernel_rem_pio2+0x4e8>
    48bc:	e1a00006 	mov	r0, r6
    48c0:	e1a01007 	mov	r1, r7
    48c4:	e3a02000 	mov	r2, #0
    48c8:	e3a03000 	mov	r3, #0
    48cc:	eb000636 	bl	61ac <__aeabi_dcmpeq>
    48d0:	e3500000 	cmp	r0, #0
    48d4:	0a000090 	beq	4b1c <__kernel_rem_pio2+0x5bc>
    48d8:	e59d4004 	ldr	r4, [sp, #4]
    48dc:	e59dc020 	ldr	r12, [sp, #32]
    48e0:	e2440001 	sub	r0, r4, #1
    48e4:	e15c0000 	cmp	r12, r0
    48e8:	ca000009 	bgt	4914 <__kernel_rem_pio2+0x3b4>
    48ec:	e28de030 	add	lr, sp, #48	; 0x30
    48f0:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
    48f4:	e08e3104 	add	r3, lr, r4, lsl #2
    48f8:	e3a02000 	mov	r2, #0
    48fc:	e5331004 	ldr	r1, [r3, #-4]!
    4900:	e153000c 	cmp	r3, r12
    4904:	e1822001 	orr	r2, r2, r1
    4908:	1afffffb 	bne	48fc <__kernel_rem_pio2+0x39c>
    490c:	e3520000 	cmp	r2, #0
    4910:	1a0001c9 	bne	503c <__kernel_rem_pio2+0xadc>
    4914:	e59d4020 	ldr	r4, [sp, #32]
    4918:	e2442001 	sub	r2, r4, #1
    491c:	e1a02102 	lsl	r2, r2, #2
    4920:	e28dce26 	add	r12, sp, #608	; 0x260
    4924:	e08c3002 	add	r3, r12, r2
    4928:	e5133230 	ldr	r3, [r3, #-560]	; 0xfffffdd0
    492c:	e3530000 	cmp	r3, #0
    4930:	1a0001d9 	bne	509c <__kernel_rem_pio2+0xb3c>
    4934:	e28de030 	add	lr, sp, #48	; 0x30
    4938:	e08e2002 	add	r2, lr, r2
    493c:	e3a03001 	mov	r3, #1
    4940:	e5321004 	ldr	r1, [r2, #-4]!
    4944:	e3510000 	cmp	r1, #0
    4948:	e2833001 	add	r3, r3, #1
    494c:	0afffffb 	beq	4940 <__kernel_rem_pio2+0x3e0>
    4950:	e59d4004 	ldr	r4, [sp, #4]
    4954:	e0843003 	add	r3, r4, r3
    4958:	e2848001 	add	r8, r4, #1
    495c:	e1580003 	cmp	r8, r3
    4960:	e58d3024 	str	r3, [sp, #36]	; 0x24
    4964:	ca000031 	bgt	4a30 <__kernel_rem_pio2+0x4d0>
    4968:	e59d4004 	ldr	r4, [sp, #4]
    496c:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    4970:	e084300c 	add	r3, r4, r12
    4974:	e59dc28c 	ldr	r12, [sp, #652]	; 0x28c
    4978:	e59d400c 	ldr	r4, [sp, #12]
    497c:	e08c3103 	add	r3, r12, r3, lsl #2
    4980:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    4984:	e0849008 	add	r9, r4, r8
    4988:	e28d4d07 	add	r4, sp, #448	; 0x1c0
    498c:	e0844188 	add	r4, r4, r8, lsl #3
    4990:	e28cc001 	add	r12, r12, #1
    4994:	e28de080 	add	lr, sp, #128	; 0x80
    4998:	e98d0018 	stmib	sp, {r3, r4}
    499c:	e58dc014 	str	r12, [sp, #20]
    49a0:	e08e9189 	add	r9, lr, r9, lsl #3
    49a4:	e59d4004 	ldr	r4, [sp, #4]
    49a8:	e5b40004 	ldr	r0, [r4, #4]!
    49ac:	e58d4004 	str	r4, [sp, #4]
    49b0:	eb00046c 	bl	5b68 <__aeabi_i2d>
    49b4:	e59dc00c 	ldr	r12, [sp, #12]
    49b8:	e35c0000 	cmp	r12, #0
    49bc:	e8a90003 	stmia	r9!, {r0, r1}
    49c0:	ba00001d 	blt	4a3c <__kernel_rem_pio2+0x4dc>
    49c4:	e088700b 	add	r7, r8, r11
    49c8:	e28de080 	add	lr, sp, #128	; 0x80
    49cc:	e59da010 	ldr	r10, [sp, #16]
    49d0:	e08e7187 	add	r7, lr, r7, lsl #3
    49d4:	e3a04000 	mov	r4, #0
    49d8:	e3a05000 	mov	r5, #0
    49dc:	e3a06000 	mov	r6, #0
    49e0:	e937000c 	ldmdb	r7!, {r2, r3}
    49e4:	e8ba0003 	ldm	r10!, {r0, r1}
    49e8:	eb000495 	bl	5c44 <__aeabi_dmul>
    49ec:	e1a02000 	mov	r2, r0
    49f0:	e1a03001 	mov	r3, r1
    49f4:	e1a00004 	mov	r0, r4
    49f8:	e1a01005 	mov	r1, r5
    49fc:	eb00038c 	bl	5834 <__adddf3>
    4a00:	e2866001 	add	r6, r6, #1
    4a04:	e156000b 	cmp	r6, r11
    4a08:	e1a04000 	mov	r4, r0
    4a0c:	e1a05001 	mov	r5, r1
    4a10:	1afffff2 	bne	49e0 <__kernel_rem_pio2+0x480>
    4a14:	e59dc014 	ldr	r12, [sp, #20]
    4a18:	e2888001 	add	r8, r8, #1
    4a1c:	e158000c 	cmp	r8, r12
    4a20:	e59dc008 	ldr	r12, [sp, #8]
    4a24:	e8ac0030 	stmia	r12!, {r4, r5}
    4a28:	e58dc008 	str	r12, [sp, #8]
    4a2c:	1affffdc 	bne	49a4 <__kernel_rem_pio2+0x444>
    4a30:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    4a34:	e58dc004 	str	r12, [sp, #4]
    4a38:	eaffff20 	b	46c0 <__kernel_rem_pio2+0x160>
    4a3c:	e3a04000 	mov	r4, #0
    4a40:	e3a05000 	mov	r5, #0
    4a44:	eafffff2 	b	4a14 <__kernel_rem_pio2+0x4b4>
    4a48:	e1a02006 	mov	r2, r6
    4a4c:	e1a03007 	mov	r3, r7
    4a50:	e3a00000 	mov	r0, #0
    4a54:	e59f1690 	ldr	r1, [pc, #1680]	; 50ec <__kernel_rem_pio2+0xb8c>
    4a58:	eb000374 	bl	5830 <__aeabi_dsub>
    4a5c:	e3540000 	cmp	r4, #0
    4a60:	e1a06000 	mov	r6, r0
    4a64:	e1a07001 	mov	r7, r1
    4a68:	0affff93 	beq	48bc <__kernel_rem_pio2+0x35c>
    4a6c:	e59d2018 	ldr	r2, [sp, #24]
    4a70:	e3a00000 	mov	r0, #0
    4a74:	e59f1670 	ldr	r1, [pc, #1648]	; 50ec <__kernel_rem_pio2+0xb8c>
    4a78:	eb0002b6 	bl	5558 <scalbn>
    4a7c:	e1a02000 	mov	r2, r0
    4a80:	e1a03001 	mov	r3, r1
    4a84:	e1a00006 	mov	r0, r6
    4a88:	e1a01007 	mov	r1, r7
    4a8c:	eb000367 	bl	5830 <__aeabi_dsub>
    4a90:	e1a06000 	mov	r6, r0
    4a94:	e1a07001 	mov	r7, r1
    4a98:	eaffff87 	b	48bc <__kernel_rem_pio2+0x35c>
    4a9c:	1a00000e 	bne	4adc <__kernel_rem_pio2+0x57c>
    4aa0:	e59d4004 	ldr	r4, [sp, #4]
    4aa4:	e28dce26 	add	r12, sp, #608	; 0x260
    4aa8:	e08c3104 	add	r3, r12, r4, lsl #2
    4aac:	e5135234 	ldr	r5, [r3, #-564]	; 0xfffffdcc
    4ab0:	e1a05bc5 	asr	r5, r5, #23
    4ab4:	eaffff56 	b	4814 <__kernel_rem_pio2+0x2b4>
    4ab8:	e59dc004 	ldr	r12, [sp, #4]
    4abc:	e28dee26 	add	lr, sp, #608	; 0x260
    4ac0:	e24c3001 	sub	r3, r12, #1
    4ac4:	e08e3103 	add	r3, lr, r3, lsl #2
    4ac8:	e5132230 	ldr	r2, [r3, #-560]	; 0xfffffdd0
    4acc:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
    4ad0:	e3c22502 	bic	r2, r2, #8388608	; 0x800000
    4ad4:	e5032230 	str	r2, [r3, #-560]	; 0xfffffdd0
    4ad8:	eaffff75 	b	48b4 <__kernel_rem_pio2+0x354>
    4adc:	e3a02000 	mov	r2, #0
    4ae0:	e59f3608 	ldr	r3, [pc, #1544]	; 50f0 <__kernel_rem_pio2+0xb90>
    4ae4:	eb0005c2 	bl	61f4 <__aeabi_dcmpge>
    4ae8:	e3500000 	cmp	r0, #0
    4aec:	03a05000 	moveq	r5, #0
    4af0:	0affff71 	beq	48bc <__kernel_rem_pio2+0x35c>
    4af4:	e59d4004 	ldr	r4, [sp, #4]
    4af8:	e3540000 	cmp	r4, #0
    4afc:	e3a05002 	mov	r5, #2
    4b00:	e2888001 	add	r8, r8, #1
    4b04:	caffff48 	bgt	482c <__kernel_rem_pio2+0x2cc>
    4b08:	e3a04000 	mov	r4, #0
    4b0c:	eaffff59 	b	4878 <__kernel_rem_pio2+0x318>
    4b10:	e3a04000 	mov	r4, #0
    4b14:	e3a05000 	mov	r5, #0
    4b18:	eafffede 	b	4698 <__kernel_rem_pio2+0x138>
    4b1c:	e59d4018 	ldr	r4, [sp, #24]
    4b20:	e1a00006 	mov	r0, r6
    4b24:	e2642000 	rsb	r2, r4, #0
    4b28:	e1a01007 	mov	r1, r7
    4b2c:	e58d500c 	str	r5, [sp, #12]
    4b30:	e58d8010 	str	r8, [sp, #16]
    4b34:	eb000287 	bl	5558 <scalbn>
    4b38:	e3a02000 	mov	r2, #0
    4b3c:	e59f35a0 	ldr	r3, [pc, #1440]	; 50e4 <__kernel_rem_pio2+0xb84>
    4b40:	e1a04000 	mov	r4, r0
    4b44:	e1a05001 	mov	r5, r1
    4b48:	eb0005a9 	bl	61f4 <__aeabi_dcmpge>
    4b4c:	e3500000 	cmp	r0, #0
    4b50:	0a000153 	beq	50a4 <__kernel_rem_pio2+0xb44>
    4b54:	e3a02000 	mov	r2, #0
    4b58:	e59f3580 	ldr	r3, [pc, #1408]	; 50e0 <__kernel_rem_pio2+0xb80>
    4b5c:	e1a00004 	mov	r0, r4
    4b60:	e1a01005 	mov	r1, r5
    4b64:	eb000436 	bl	5c44 <__aeabi_dmul>
    4b68:	eb0005ad 	bl	6224 <__aeabi_d2iz>
    4b6c:	eb0003fd 	bl	5b68 <__aeabi_i2d>
    4b70:	e3a02000 	mov	r2, #0
    4b74:	e59f3568 	ldr	r3, [pc, #1384]	; 50e4 <__kernel_rem_pio2+0xb84>
    4b78:	e1a06000 	mov	r6, r0
    4b7c:	e1a07001 	mov	r7, r1
    4b80:	eb00042f 	bl	5c44 <__aeabi_dmul>
    4b84:	e1a02000 	mov	r2, r0
    4b88:	e1a03001 	mov	r3, r1
    4b8c:	e1a00004 	mov	r0, r4
    4b90:	e1a01005 	mov	r1, r5
    4b94:	eb000325 	bl	5830 <__aeabi_dsub>
    4b98:	eb0005a1 	bl	6224 <__aeabi_d2iz>
    4b9c:	e59d4004 	ldr	r4, [sp, #4]
    4ba0:	e28dce26 	add	r12, sp, #608	; 0x260
    4ba4:	e08c3104 	add	r3, r12, r4, lsl #2
    4ba8:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    4bac:	e1a01007 	mov	r1, r7
    4bb0:	e1a00006 	mov	r0, r6
    4bb4:	eb00059a 	bl	6224 <__aeabi_d2iz>
    4bb8:	e2844001 	add	r4, r4, #1
    4bbc:	e28dee26 	add	lr, sp, #608	; 0x260
    4bc0:	e08e3104 	add	r3, lr, r4, lsl #2
    4bc4:	e58d4004 	str	r4, [sp, #4]
    4bc8:	e59d4018 	ldr	r4, [sp, #24]
    4bcc:	e2844018 	add	r4, r4, #24
    4bd0:	e58d4018 	str	r4, [sp, #24]
    4bd4:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    4bd8:	e3a00000 	mov	r0, #0
    4bdc:	e59f1508 	ldr	r1, [pc, #1288]	; 50ec <__kernel_rem_pio2+0xb8c>
    4be0:	e59d2018 	ldr	r2, [sp, #24]
    4be4:	eb00025b 	bl	5558 <scalbn>
    4be8:	e59dc004 	ldr	r12, [sp, #4]
    4bec:	e35c0000 	cmp	r12, #0
    4bf0:	e1a04000 	mov	r4, r0
    4bf4:	e1a05001 	mov	r5, r1
    4bf8:	ba00003b 	blt	4cec <__kernel_rem_pio2+0x78c>
    4bfc:	e28c6001 	add	r6, r12, #1
    4c00:	e28d9d07 	add	r9, sp, #448	; 0x1c0
    4c04:	e28de030 	add	lr, sp, #48	; 0x30
    4c08:	e08e7106 	add	r7, lr, r6, lsl #2
    4c0c:	e0896186 	add	r6, r9, r6, lsl #3
    4c10:	e5370004 	ldr	r0, [r7, #-4]!
    4c14:	eb0003d3 	bl	5b68 <__aeabi_i2d>
    4c18:	e1a02004 	mov	r2, r4
    4c1c:	e1a03005 	mov	r3, r5
    4c20:	eb000407 	bl	5c44 <__aeabi_dmul>
    4c24:	e3a02000 	mov	r2, #0
    4c28:	e9260003 	stmdb	r6!, {r0, r1}
    4c2c:	e59f34ac 	ldr	r3, [pc, #1196]	; 50e0 <__kernel_rem_pio2+0xb80>
    4c30:	e1a00004 	mov	r0, r4
    4c34:	e1a01005 	mov	r1, r5
    4c38:	eb000401 	bl	5c44 <__aeabi_dmul>
    4c3c:	e1560009 	cmp	r6, r9
    4c40:	e1a04000 	mov	r4, r0
    4c44:	e1a05001 	mov	r5, r1
    4c48:	1afffff0 	bne	4c10 <__kernel_rem_pio2+0x6b0>
    4c4c:	e59da004 	ldr	r10, [sp, #4]
    4c50:	e59db020 	ldr	r11, [sp, #32]
    4c54:	e58da008 	str	r10, [sp, #8]
    4c58:	e3a08000 	mov	r8, #0
    4c5c:	e35b0000 	cmp	r11, #0
    4c60:	b3a04000 	movlt	r4, #0
    4c64:	b3a05000 	movlt	r5, #0
    4c68:	ba000015 	blt	4cc4 <__kernel_rem_pio2+0x764>
    4c6c:	e59d4008 	ldr	r4, [sp, #8]
    4c70:	e59fa47c 	ldr	r10, [pc, #1148]	; 50f4 <__kernel_rem_pio2+0xb94>
    4c74:	e0897184 	add	r7, r9, r4, lsl #3
    4c78:	e3a05000 	mov	r5, #0
    4c7c:	e3a04000 	mov	r4, #0
    4c80:	e3a06000 	mov	r6, #0
    4c84:	ea000001 	b	4c90 <__kernel_rem_pio2+0x730>
    4c88:	e1560008 	cmp	r6, r8
    4c8c:	ca00000c 	bgt	4cc4 <__kernel_rem_pio2+0x764>
    4c90:	e8b7000c 	ldm	r7!, {r2, r3}
    4c94:	e8ba0003 	ldm	r10!, {r0, r1}
    4c98:	eb0003e9 	bl	5c44 <__aeabi_dmul>
    4c9c:	e1a02000 	mov	r2, r0
    4ca0:	e1a03001 	mov	r3, r1
    4ca4:	e1a00004 	mov	r0, r4
    4ca8:	e1a01005 	mov	r1, r5
    4cac:	eb0002e0 	bl	5834 <__adddf3>
    4cb0:	e2866001 	add	r6, r6, #1
    4cb4:	e15b0006 	cmp	r11, r6
    4cb8:	e1a04000 	mov	r4, r0
    4cbc:	e1a05001 	mov	r5, r1
    4cc0:	aafffff0 	bge	4c88 <__kernel_rem_pio2+0x728>
    4cc4:	e59dc008 	ldr	r12, [sp, #8]
    4cc8:	e28d0e26 	add	r0, sp, #608	; 0x260
    4ccc:	e24cc001 	sub	r12, r12, #1
    4cd0:	e0803188 	add	r3, r0, r8, lsl #3
    4cd4:	e37c0001 	cmn	r12, #1
    4cd8:	e58dc008 	str	r12, [sp, #8]
    4cdc:	e5034140 	str	r4, [r3, #-320]	; 0xfffffec0
    4ce0:	e503513c 	str	r5, [r3, #-316]	; 0xfffffec4
    4ce4:	e2888001 	add	r8, r8, #1
    4ce8:	1affffdb 	bne	4c5c <__kernel_rem_pio2+0x6fc>
    4cec:	e59dc288 	ldr	r12, [sp, #648]	; 0x288
    4cf0:	e35c0003 	cmp	r12, #3
    4cf4:	979ff10c 	ldrls	pc, [pc, r12, lsl #2]
    4cf8:	ea000015 	b	4d54 <__kernel_rem_pio2+0x7f4>
    4cfc:	00004fdc 	.word	0x00004fdc
    4d00:	00004ef8 	.word	0x00004ef8
    4d04:	00004ef8 	.word	0x00004ef8
    4d08:	00004d68 	.word	0x00004d68
    4d0c:	e59d000c 	ldr	r0, [sp, #12]
    4d10:	e3a0c000 	mov	r12, #0
    4d14:	e3500000 	cmp	r0, #0
    4d18:	e1a0400c 	mov	r4, r12
    4d1c:	0a000068 	beq	4ec4 <__kernel_rem_pio2+0x964>
    4d20:	e59d2124 	ldr	r2, [sp, #292]	; 0x124
    4d24:	e59d001c 	ldr	r0, [sp, #28]
    4d28:	e59d1120 	ldr	r1, [sp, #288]	; 0x120
    4d2c:	e2822102 	add	r2, r2, #-2147483648	; 0x80000000
    4d30:	e59d312c 	ldr	r3, [sp, #300]	; 0x12c
    4d34:	e8800006 	stm	r0, {r1, r2}
    4d38:	e59d2128 	ldr	r2, [sp, #296]	; 0x128
    4d3c:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
    4d40:	e2844102 	add	r4, r4, #-2147483648	; 0x80000000
    4d44:	e5802008 	str	r2, [r0, #8]
    4d48:	e580300c 	str	r3, [r0, #12]
    4d4c:	e580c010 	str	r12, [r0, #16]
    4d50:	e5804014 	str	r4, [r0, #20]
    4d54:	e59d4010 	ldr	r4, [sp, #16]
    4d58:	e2040007 	and	r0, r4, #7
    4d5c:	e28ddf99 	add	sp, sp, #612	; 0x264
    4d60:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    4d64:	e12fff1e 	bx	lr
    4d68:	e59d4004 	ldr	r4, [sp, #4]
    4d6c:	e3540000 	cmp	r4, #0
    4d70:	daffffe5 	ble	4d0c <__kernel_rem_pio2+0x7ac>
    4d74:	e59d4004 	ldr	r4, [sp, #4]
    4d78:	e28dbe12 	add	r11, sp, #288	; 0x120
    4d7c:	e08ba184 	add	r10, r11, r4, lsl #3
    4d80:	e58da008 	str	r10, [sp, #8]
    4d84:	e58da014 	str	r10, [sp, #20]
    4d88:	e93a0300 	ldmdb	r10!, {r8, r9}
    4d8c:	e28a7008 	add	r7, r10, #8
    4d90:	e89700c0 	ldm	r7, {r6, r7}
    4d94:	e1a00008 	mov	r0, r8
    4d98:	e1a02006 	mov	r2, r6
    4d9c:	e1a03007 	mov	r3, r7
    4da0:	e1a01009 	mov	r1, r9
    4da4:	eb0002a2 	bl	5834 <__adddf3>
    4da8:	e1a04000 	mov	r4, r0
    4dac:	e1a05001 	mov	r5, r1
    4db0:	e1a02004 	mov	r2, r4
    4db4:	e1a03005 	mov	r3, r5
    4db8:	e1a00008 	mov	r0, r8
    4dbc:	e1a01009 	mov	r1, r9
    4dc0:	eb00029a 	bl	5830 <__aeabi_dsub>
    4dc4:	e1a02000 	mov	r2, r0
    4dc8:	e1a03001 	mov	r3, r1
    4dcc:	e1a00006 	mov	r0, r6
    4dd0:	e1a01007 	mov	r1, r7
    4dd4:	eb000296 	bl	5834 <__adddf3>
    4dd8:	e59dc008 	ldr	r12, [sp, #8]
    4ddc:	e58a0008 	str	r0, [r10, #8]
    4de0:	e58a100c 	str	r1, [r10, #12]
    4de4:	e92c0030 	stmdb	r12!, {r4, r5}
    4de8:	e15a000b 	cmp	r10, r11
    4dec:	e58dc008 	str	r12, [sp, #8]
    4df0:	1affffe4 	bne	4d88 <__kernel_rem_pio2+0x828>
    4df4:	e59d4004 	ldr	r4, [sp, #4]
    4df8:	e3540001 	cmp	r4, #1
    4dfc:	e59da014 	ldr	r10, [sp, #20]
    4e00:	daffffc1 	ble	4d0c <__kernel_rem_pio2+0x7ac>
    4e04:	e28bc008 	add	r12, r11, #8
    4e08:	e58dc008 	str	r12, [sp, #8]
    4e0c:	e1a0c00a 	mov	r12, r10
    4e10:	e93a0300 	ldmdb	r10!, {r8, r9}
    4e14:	e28a7008 	add	r7, r10, #8
    4e18:	e89700c0 	ldm	r7, {r6, r7}
    4e1c:	e1a00008 	mov	r0, r8
    4e20:	e1a02006 	mov	r2, r6
    4e24:	e1a03007 	mov	r3, r7
    4e28:	e1a01009 	mov	r1, r9
    4e2c:	e58dc000 	str	r12, [sp]
    4e30:	eb00027f 	bl	5834 <__adddf3>
    4e34:	e1a04000 	mov	r4, r0
    4e38:	e1a05001 	mov	r5, r1
    4e3c:	e1a02004 	mov	r2, r4
    4e40:	e1a03005 	mov	r3, r5
    4e44:	e1a00008 	mov	r0, r8
    4e48:	e1a01009 	mov	r1, r9
    4e4c:	eb000277 	bl	5830 <__aeabi_dsub>
    4e50:	e1a02000 	mov	r2, r0
    4e54:	e1a03001 	mov	r3, r1
    4e58:	e1a00006 	mov	r0, r6
    4e5c:	e1a01007 	mov	r1, r7
    4e60:	eb000273 	bl	5834 <__adddf3>
    4e64:	e59de008 	ldr	lr, [sp, #8]
    4e68:	e59dc000 	ldr	r12, [sp]
    4e6c:	e15a000e 	cmp	r10, lr
    4e70:	e58a0008 	str	r0, [r10, #8]
    4e74:	e58a100c 	str	r1, [r10, #12]
    4e78:	e92c0030 	stmdb	r12!, {r4, r5}
    4e7c:	1affffe3 	bne	4e10 <__kernel_rem_pio2+0x8b0>
    4e80:	e59d4004 	ldr	r4, [sp, #4]
    4e84:	e3a0c000 	mov	r12, #0
    4e88:	e2845001 	add	r5, r4, #1
    4e8c:	e08b5185 	add	r5, r11, r5, lsl #3
    4e90:	e1a0400c 	mov	r4, r12
    4e94:	e28bb010 	add	r11, r11, #16
    4e98:	e1a0000c 	mov	r0, r12
    4e9c:	e1a01004 	mov	r1, r4
    4ea0:	e935000c 	ldmdb	r5!, {r2, r3}
    4ea4:	eb000262 	bl	5834 <__adddf3>
    4ea8:	e155000b 	cmp	r5, r11
    4eac:	e1a0c000 	mov	r12, r0
    4eb0:	e1a04001 	mov	r4, r1
    4eb4:	1afffff7 	bne	4e98 <__kernel_rem_pio2+0x938>
    4eb8:	e59d000c 	ldr	r0, [sp, #12]
    4ebc:	e3500000 	cmp	r0, #0
    4ec0:	1affff96 	bne	4d20 <__kernel_rem_pio2+0x7c0>
    4ec4:	e1a03004 	mov	r3, r4
    4ec8:	e28d1e12 	add	r1, sp, #288	; 0x120
    4ecc:	e8910003 	ldm	r1, {r0, r1}
    4ed0:	e59d401c 	ldr	r4, [sp, #28]
    4ed4:	e8840003 	stm	r4, {r0, r1}
    4ed8:	e28d1f4a 	add	r1, sp, #296	; 0x128
    4edc:	e8910003 	ldm	r1, {r0, r1}
    4ee0:	e1a0200c 	mov	r2, r12
    4ee4:	e5840008 	str	r0, [r4, #8]
    4ee8:	e584100c 	str	r1, [r4, #12]
    4eec:	e5842010 	str	r2, [r4, #16]
    4ef0:	e5843014 	str	r3, [r4, #20]
    4ef4:	eaffff96 	b	4d54 <__kernel_rem_pio2+0x7f4>
    4ef8:	e59dc004 	ldr	r12, [sp, #4]
    4efc:	e35c0000 	cmp	r12, #0
    4f00:	b3a0e000 	movlt	lr, #0
    4f04:	b1a0c00e 	movlt	r12, lr
    4f08:	ba00000d 	blt	4f44 <__kernel_rem_pio2+0x9e4>
    4f0c:	e59dc004 	ldr	r12, [sp, #4]
    4f10:	e28d5e12 	add	r5, sp, #288	; 0x120
    4f14:	e28c4001 	add	r4, r12, #1
    4f18:	e3a0e000 	mov	lr, #0
    4f1c:	e0854184 	add	r4, r5, r4, lsl #3
    4f20:	e1a0c00e 	mov	r12, lr
    4f24:	e1a0000e 	mov	r0, lr
    4f28:	e1a0100c 	mov	r1, r12
    4f2c:	e934000c 	ldmdb	r4!, {r2, r3}
    4f30:	eb00023f 	bl	5834 <__adddf3>
    4f34:	e1540005 	cmp	r4, r5
    4f38:	e1a0e000 	mov	lr, r0
    4f3c:	e1a0c001 	mov	r12, r1
    4f40:	1afffff7 	bne	4f24 <__kernel_rem_pio2+0x9c4>
    4f44:	e59d400c 	ldr	r4, [sp, #12]
    4f48:	e3540000 	cmp	r4, #0
    4f4c:	128c3102 	addne	r3, r12, #-2147483648	; 0x80000000
    4f50:	01a0300c 	moveq	r3, r12
    4f54:	e1a01003 	mov	r1, r3
    4f58:	e1a0300c 	mov	r3, r12
    4f5c:	e59dc01c 	ldr	r12, [sp, #28]
    4f60:	e1a0000e 	mov	r0, lr
    4f64:	e88c0003 	stm	r12, {r0, r1}
    4f68:	e1a0200e 	mov	r2, lr
    4f6c:	e28d1e12 	add	r1, sp, #288	; 0x120
    4f70:	e8910003 	ldm	r1, {r0, r1}
    4f74:	eb00022d 	bl	5830 <__aeabi_dsub>
    4f78:	e59d4004 	ldr	r4, [sp, #4]
    4f7c:	e3540000 	cmp	r4, #0
    4f80:	e1a05000 	mov	r5, r0
    4f84:	e1a0c001 	mov	r12, r1
    4f88:	da00000a 	ble	4fb8 <__kernel_rem_pio2+0xa58>
    4f8c:	e59de004 	ldr	lr, [sp, #4]
    4f90:	e28d4f4a 	add	r4, sp, #296	; 0x128
    4f94:	e084618e 	add	r6, r4, lr, lsl #3
    4f98:	e1a00005 	mov	r0, r5
    4f9c:	e1a0100c 	mov	r1, r12
    4fa0:	e8b4000c 	ldm	r4!, {r2, r3}
    4fa4:	eb000222 	bl	5834 <__adddf3>
    4fa8:	e1540006 	cmp	r4, r6
    4fac:	e1a05000 	mov	r5, r0
    4fb0:	e1a0c001 	mov	r12, r1
    4fb4:	1afffff7 	bne	4f98 <__kernel_rem_pio2+0xa38>
    4fb8:	e59d400c 	ldr	r4, [sp, #12]
    4fbc:	e3540000 	cmp	r4, #0
    4fc0:	128cc102 	addne	r12, r12, #-2147483648	; 0x80000000
    4fc4:	e1a0300c 	mov	r3, r12
    4fc8:	e59dc01c 	ldr	r12, [sp, #28]
    4fcc:	e1a02005 	mov	r2, r5
    4fd0:	e58c2008 	str	r2, [r12, #8]
    4fd4:	e58c300c 	str	r3, [r12, #12]
    4fd8:	eaffff5d 	b	4d54 <__kernel_rem_pio2+0x7f4>
    4fdc:	e59d4004 	ldr	r4, [sp, #4]
    4fe0:	e3540000 	cmp	r4, #0
    4fe4:	ba000038 	blt	50cc <__kernel_rem_pio2+0xb6c>
    4fe8:	e2846001 	add	r6, r4, #1
    4fec:	e28d5e12 	add	r5, sp, #288	; 0x120
    4ff0:	e3a04000 	mov	r4, #0
    4ff4:	e0856186 	add	r6, r5, r6, lsl #3
    4ff8:	e1a0c004 	mov	r12, r4
    4ffc:	e1a00004 	mov	r0, r4
    5000:	e1a0100c 	mov	r1, r12
    5004:	e936000c 	ldmdb	r6!, {r2, r3}
    5008:	eb000209 	bl	5834 <__adddf3>
    500c:	e1560005 	cmp	r6, r5
    5010:	e1a04000 	mov	r4, r0
    5014:	e1a0c001 	mov	r12, r1
    5018:	1afffff7 	bne	4ffc <__kernel_rem_pio2+0xa9c>
    501c:	e59d000c 	ldr	r0, [sp, #12]
    5020:	e3500000 	cmp	r0, #0
    5024:	e1a02004 	mov	r2, r4
    5028:	128cc102 	addne	r12, r12, #-2147483648	; 0x80000000
    502c:	e59d401c 	ldr	r4, [sp, #28]
    5030:	e1a0300c 	mov	r3, r12
    5034:	e884000c 	stm	r4, {r2, r3}
    5038:	eaffff45 	b	4d54 <__kernel_rem_pio2+0x7f4>
    503c:	e1a03100 	lsl	r3, r0, #2
    5040:	e28dce26 	add	r12, sp, #608	; 0x260
    5044:	e08c2003 	add	r2, r12, r3
    5048:	e59d4018 	ldr	r4, [sp, #24]
    504c:	e5122230 	ldr	r2, [r2, #-560]	; 0xfffffdd0
    5050:	e2444018 	sub	r4, r4, #24
    5054:	e3520000 	cmp	r2, #0
    5058:	e58d8010 	str	r8, [sp, #16]
    505c:	e58d500c 	str	r5, [sp, #12]
    5060:	e58d4018 	str	r4, [sp, #24]
    5064:	1a000016 	bne	50c4 <__kernel_rem_pio2+0xb64>
    5068:	e28dc030 	add	r12, sp, #48	; 0x30
    506c:	e58d0004 	str	r0, [sp, #4]
    5070:	e08c3003 	add	r3, r12, r3
    5074:	e1a02000 	mov	r2, r0
    5078:	e1a01004 	mov	r1, r4
    507c:	e5330004 	ldr	r0, [r3, #-4]!
    5080:	e3500000 	cmp	r0, #0
    5084:	e2422001 	sub	r2, r2, #1
    5088:	e2411018 	sub	r1, r1, #24
    508c:	0afffffa 	beq	507c <__kernel_rem_pio2+0xb1c>
    5090:	e58d2004 	str	r2, [sp, #4]
    5094:	e58d1018 	str	r1, [sp, #24]
    5098:	eafffece 	b	4bd8 <__kernel_rem_pio2+0x678>
    509c:	e3a03001 	mov	r3, #1
    50a0:	eafffe2a 	b	4950 <__kernel_rem_pio2+0x3f0>
    50a4:	e1a00004 	mov	r0, r4
    50a8:	e1a01005 	mov	r1, r5
    50ac:	eb00045c 	bl	6224 <__aeabi_d2iz>
    50b0:	e59dc004 	ldr	r12, [sp, #4]
    50b4:	e28dee26 	add	lr, sp, #608	; 0x260
    50b8:	e08e310c 	add	r3, lr, r12, lsl #2
    50bc:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    50c0:	eafffec4 	b	4bd8 <__kernel_rem_pio2+0x678>
    50c4:	e58d0004 	str	r0, [sp, #4]
    50c8:	eafffec2 	b	4bd8 <__kernel_rem_pio2+0x678>
    50cc:	e3a04000 	mov	r4, #0
    50d0:	e1a0c004 	mov	r12, r4
    50d4:	eaffffd0 	b	501c <__kernel_rem_pio2+0xabc>
    50d8:	2aaaaaab 	.word	0x2aaaaaab
    50dc:	00007908 	.word	0x00007908
    50e0:	3e700000 	.word	0x3e700000
    50e4:	41700000 	.word	0x41700000
    50e8:	40200000 	.word	0x40200000
    50ec:	3ff00000 	.word	0x3ff00000
    50f0:	3fe00000 	.word	0x3fe00000
    50f4:	00007918 	.word	0x00007918

000050f8 <__kernel_sin>:
    50f8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    50fc:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    5100:	e35c05f9 	cmp	r12, #1044381696	; 0x3e400000
    5104:	e24dd014 	sub	sp, sp, #20
    5108:	e1a04000 	mov	r4, r0
    510c:	e1a05001 	mov	r5, r1
    5110:	e1a06000 	mov	r6, r0
    5114:	e1a07001 	mov	r7, r1
    5118:	e1a08002 	mov	r8, r2
    511c:	e1a09003 	mov	r9, r3
    5120:	aa000002 	bge	5130 <__kernel_sin+0x38>
    5124:	eb00043e 	bl	6224 <__aeabi_d2iz>
    5128:	e3500000 	cmp	r0, #0
    512c:	0a000052 	beq	527c <__kernel_sin+0x184>
    5130:	e1a02004 	mov	r2, r4
    5134:	e1a03005 	mov	r3, r5
    5138:	e1a00004 	mov	r0, r4
    513c:	e1a01005 	mov	r1, r5
    5140:	eb0002bf 	bl	5c44 <__aeabi_dmul>
    5144:	e1a02004 	mov	r2, r4
    5148:	e1a03005 	mov	r3, r5
    514c:	e1a06000 	mov	r6, r0
    5150:	e1a07001 	mov	r7, r1
    5154:	eb0002ba 	bl	5c44 <__aeabi_dmul>
    5158:	e28f3d06 	add	r3, pc, #384	; 0x180
    515c:	e893000c 	ldm	r3, {r2, r3}
    5160:	e1a0a000 	mov	r10, r0
    5164:	e1a0b001 	mov	r11, r1
    5168:	e1a00006 	mov	r0, r6
    516c:	e1a01007 	mov	r1, r7
    5170:	eb0002b3 	bl	5c44 <__aeabi_dmul>
    5174:	e28f3f5b 	add	r3, pc, #364	; 0x16c
    5178:	e893000c 	ldm	r3, {r2, r3}
    517c:	eb0001ab 	bl	5830 <__aeabi_dsub>
    5180:	e1a02006 	mov	r2, r6
    5184:	e1a03007 	mov	r3, r7
    5188:	eb0002ad 	bl	5c44 <__aeabi_dmul>
    518c:	e28f3f57 	add	r3, pc, #348	; 0x15c
    5190:	e893000c 	ldm	r3, {r2, r3}
    5194:	eb0001a6 	bl	5834 <__adddf3>
    5198:	e1a02006 	mov	r2, r6
    519c:	e1a03007 	mov	r3, r7
    51a0:	eb0002a7 	bl	5c44 <__aeabi_dmul>
    51a4:	e28f3f53 	add	r3, pc, #332	; 0x14c
    51a8:	e893000c 	ldm	r3, {r2, r3}
    51ac:	eb00019f 	bl	5830 <__aeabi_dsub>
    51b0:	e1a02006 	mov	r2, r6
    51b4:	e1a03007 	mov	r3, r7
    51b8:	eb0002a1 	bl	5c44 <__aeabi_dmul>
    51bc:	e28f3f4f 	add	r3, pc, #316	; 0x13c
    51c0:	e893000c 	ldm	r3, {r2, r3}
    51c4:	eb00019a 	bl	5834 <__adddf3>
    51c8:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    51cc:	e3530000 	cmp	r3, #0
    51d0:	e88d0003 	stm	sp, {r0, r1}
    51d4:	0a00002d 	beq	5290 <__kernel_sin+0x198>
    51d8:	e3a02000 	mov	r2, #0
    51dc:	e59f312c 	ldr	r3, [pc, #300]	; 5310 <__kernel_sin+0x218>
    51e0:	e1a00008 	mov	r0, r8
    51e4:	e1a01009 	mov	r1, r9
    51e8:	eb000295 	bl	5c44 <__aeabi_dmul>
    51ec:	e89d000c 	ldm	sp, {r2, r3}
    51f0:	e58d0008 	str	r0, [sp, #8]
    51f4:	e58d100c 	str	r1, [sp, #12]
    51f8:	e1a0000a 	mov	r0, r10
    51fc:	e1a0100b 	mov	r1, r11
    5200:	eb00028f 	bl	5c44 <__aeabi_dmul>
    5204:	e1a02000 	mov	r2, r0
    5208:	e1a03001 	mov	r3, r1
    520c:	e28d1008 	add	r1, sp, #8
    5210:	e8910003 	ldm	r1, {r0, r1}
    5214:	eb000185 	bl	5830 <__aeabi_dsub>
    5218:	e1a02006 	mov	r2, r6
    521c:	e1a03007 	mov	r3, r7
    5220:	eb000287 	bl	5c44 <__aeabi_dmul>
    5224:	e1a02008 	mov	r2, r8
    5228:	e1a03009 	mov	r3, r9
    522c:	eb00017f 	bl	5830 <__aeabi_dsub>
    5230:	e28f30d0 	add	r3, pc, #208	; 0xd0
    5234:	e893000c 	ldm	r3, {r2, r3}
    5238:	e1a06000 	mov	r6, r0
    523c:	e1a07001 	mov	r7, r1
    5240:	e1a0000a 	mov	r0, r10
    5244:	e1a0100b 	mov	r1, r11
    5248:	eb00027d 	bl	5c44 <__aeabi_dmul>
    524c:	e1a02000 	mov	r2, r0
    5250:	e1a03001 	mov	r3, r1
    5254:	e1a00006 	mov	r0, r6
    5258:	e1a01007 	mov	r1, r7
    525c:	eb000174 	bl	5834 <__adddf3>
    5260:	e1a02000 	mov	r2, r0
    5264:	e1a03001 	mov	r3, r1
    5268:	e1a00004 	mov	r0, r4
    526c:	e1a01005 	mov	r1, r5
    5270:	eb00016e 	bl	5830 <__aeabi_dsub>
    5274:	e1a04000 	mov	r4, r0
    5278:	e1a05001 	mov	r5, r1
    527c:	e1a00004 	mov	r0, r4
    5280:	e1a01005 	mov	r1, r5
    5284:	e28dd014 	add	sp, sp, #20
    5288:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    528c:	e12fff1e 	bx	lr
    5290:	e1a02000 	mov	r2, r0
    5294:	e1a03001 	mov	r3, r1
    5298:	e1a00006 	mov	r0, r6
    529c:	e1a01007 	mov	r1, r7
    52a0:	eb000267 	bl	5c44 <__aeabi_dmul>
    52a4:	e28f305c 	add	r3, pc, #92	; 0x5c
    52a8:	e893000c 	ldm	r3, {r2, r3}
    52ac:	eb00015f 	bl	5830 <__aeabi_dsub>
    52b0:	e1a0200a 	mov	r2, r10
    52b4:	e1a0300b 	mov	r3, r11
    52b8:	eb000261 	bl	5c44 <__aeabi_dmul>
    52bc:	e1a02000 	mov	r2, r0
    52c0:	e1a03001 	mov	r3, r1
    52c4:	e1a00004 	mov	r0, r4
    52c8:	e1a01005 	mov	r1, r5
    52cc:	eb000158 	bl	5834 <__adddf3>
    52d0:	e1a04000 	mov	r4, r0
    52d4:	e1a05001 	mov	r5, r1
    52d8:	eaffffe7 	b	527c <__kernel_sin+0x184>
    52dc:	e1a00000 	nop			; (mov r0, r0)
    52e0:	5acfd57c 	.word	0x5acfd57c
    52e4:	3de5d93a 	.word	0x3de5d93a
    52e8:	8a2b9ceb 	.word	0x8a2b9ceb
    52ec:	3e5ae5e6 	.word	0x3e5ae5e6
    52f0:	57b1fe7d 	.word	0x57b1fe7d
    52f4:	3ec71de3 	.word	0x3ec71de3
    52f8:	19c161d5 	.word	0x19c161d5
    52fc:	3f2a01a0 	.word	0x3f2a01a0
    5300:	1110f8a6 	.word	0x1110f8a6
    5304:	3f811111 	.word	0x3f811111
    5308:	55555549 	.word	0x55555549
    530c:	3fc55555 	.word	0x3fc55555
    5310:	3fe00000 	.word	0x3fe00000
    5314:	e1a00000 	nop			; (mov r0, r0)

00005318 <fabs>:
    5318:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    531c:	e12fff1e 	bx	lr

00005320 <finite>:
    5320:	e3811102 	orr	r1, r1, #-2147483648	; 0x80000000
    5324:	e2810601 	add	r0, r1, #1048576	; 0x100000
    5328:	e1a00fa0 	lsr	r0, r0, #31
    532c:	e12fff1e 	bx	lr

00005330 <__fpclassifyd>:
    5330:	e1902001 	orrs	r2, r0, r1
    5334:	1a000001 	bne	5340 <__fpclassifyd+0x10>
    5338:	e3a00002 	mov	r0, #2
    533c:	e12fff1e 	bx	lr
    5340:	e2702001 	rsbs	r2, r0, #1
    5344:	33a02000 	movcc	r2, #0
    5348:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    534c:	03500000 	cmpeq	r0, #0
    5350:	0afffff8 	beq	5338 <__fpclassifyd+0x8>
    5354:	e3c13102 	bic	r3, r1, #-2147483648	; 0x80000000
    5358:	e59f1034 	ldr	r1, [pc, #52]	; 5394 <__fpclassifyd+0x64>
    535c:	e2430601 	sub	r0, r3, #1048576	; 0x100000
    5360:	e1500001 	cmp	r0, r1
    5364:	8a000001 	bhi	5370 <__fpclassifyd+0x40>
    5368:	e3a00004 	mov	r0, #4
    536c:	e12fff1e 	bx	lr
    5370:	e3530601 	cmp	r3, #1048576	; 0x100000
    5374:	2a000001 	bcs	5380 <__fpclassifyd+0x50>
    5378:	e3a00003 	mov	r0, #3
    537c:	e12fff1e 	bx	lr
    5380:	e59f0010 	ldr	r0, [pc, #16]	; 5398 <__fpclassifyd+0x68>
    5384:	e1530000 	cmp	r3, r0
    5388:	13a00000 	movne	r0, #0
    538c:	02020001 	andeq	r0, r2, #1
    5390:	e12fff1e 	bx	lr
    5394:	7fdfffff 	.word	0x7fdfffff
    5398:	7ff00000 	.word	0x7ff00000

0000539c <matherr>:
    539c:	e3a00000 	mov	r0, #0
    53a0:	e12fff1e 	bx	lr

000053a4 <nan>:
    53a4:	e3a00000 	mov	r0, #0
    53a8:	e59f1000 	ldr	r1, [pc]	; 53b0 <nan+0xc>
    53ac:	e12fff1e 	bx	lr
    53b0:	7ff80000 	.word	0x7ff80000

000053b4 <rint>:
    53b4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    53b8:	e1a07081 	lsl	r7, r1, #1
    53bc:	e1a07aa7 	lsr	r7, r7, #21
    53c0:	e247cfff 	sub	r12, r7, #1020	; 0x3fc
    53c4:	e24cc003 	sub	r12, r12, #3
    53c8:	e35c0013 	cmp	r12, #19
    53cc:	e24dd00c 	sub	sp, sp, #12
    53d0:	e1a02000 	mov	r2, r0
    53d4:	e1a03001 	mov	r3, r1
    53d8:	e1a04000 	mov	r4, r0
    53dc:	e1a05001 	mov	r5, r1
    53e0:	e1a06001 	mov	r6, r1
    53e4:	e1a08fa1 	lsr	r8, r1, #31
    53e8:	ca000026 	bgt	5488 <rint+0xd4>
    53ec:	e35c0000 	cmp	r12, #0
    53f0:	ba000038 	blt	54d8 <rint+0x124>
    53f4:	e59f1150 	ldr	r1, [pc, #336]	; 554c <rint+0x198>
    53f8:	e1a01c51 	asr	r1, r1, r12
    53fc:	e0010003 	and	r0, r1, r3
    5400:	e1900002 	orrs	r0, r0, r2
    5404:	0a00001a 	beq	5474 <rint+0xc0>
    5408:	e1a010a1 	lsr	r1, r1, #1
    540c:	e0013003 	and	r3, r1, r3
    5410:	e1934002 	orrs	r4, r3, r2
    5414:	0a000005 	beq	5430 <rint+0x7c>
    5418:	e1c51001 	bic	r1, r5, r1
    541c:	e3a05701 	mov	r5, #262144	; 0x40000
    5420:	e1815c55 	orr	r5, r1, r5, asr r12
    5424:	e35c0013 	cmp	r12, #19
    5428:	03a04102 	moveq	r4, #-2147483648	; 0x80000000
    542c:	13a04000 	movne	r4, #0
    5430:	e59f3118 	ldr	r3, [pc, #280]	; 5550 <rint+0x19c>
    5434:	e0838188 	add	r8, r3, r8, lsl #3
    5438:	e8980300 	ldm	r8, {r8, r9}
    543c:	e1a02004 	mov	r2, r4
    5440:	e1a03005 	mov	r3, r5
    5444:	e1a00008 	mov	r0, r8
    5448:	e1a01009 	mov	r1, r9
    544c:	eb0000f8 	bl	5834 <__adddf3>
    5450:	e88d0003 	stm	sp, {r0, r1}
    5454:	e1a02008 	mov	r2, r8
    5458:	e1a03009 	mov	r3, r9
    545c:	e89d0003 	ldm	sp, {r0, r1}
    5460:	eb0000f2 	bl	5830 <__aeabi_dsub>
    5464:	e1a07005 	mov	r7, r5
    5468:	e1a06004 	mov	r6, r4
    546c:	e1a02000 	mov	r2, r0
    5470:	e1a03001 	mov	r3, r1
    5474:	e1a00002 	mov	r0, r2
    5478:	e1a01003 	mov	r1, r3
    547c:	e28dd00c 	add	sp, sp, #12
    5480:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
    5484:	e12fff1e 	bx	lr
    5488:	e35c0033 	cmp	r12, #51	; 0x33
    548c:	da000005 	ble	54a8 <rint+0xf4>
    5490:	e35c0b01 	cmp	r12, #1024	; 0x400
    5494:	1afffff6 	bne	5474 <rint+0xc0>
    5498:	eb0000e5 	bl	5834 <__adddf3>
    549c:	e1a02000 	mov	r2, r0
    54a0:	e1a03001 	mov	r3, r1
    54a4:	eafffff2 	b	5474 <rint+0xc0>
    54a8:	e2477e41 	sub	r7, r7, #1040	; 0x410
    54ac:	e2477003 	sub	r7, r7, #3
    54b0:	e3e01000 	mvn	r1, #0
    54b4:	e1a01731 	lsr	r1, r1, r7
    54b8:	e1110000 	tst	r1, r0
    54bc:	0affffec 	beq	5474 <rint+0xc0>
    54c0:	e1a010a1 	lsr	r1, r1, #1
    54c4:	e1110000 	tst	r1, r0
    54c8:	11c04001 	bicne	r4, r0, r1
    54cc:	13a03101 	movne	r3, #1073741824	; 0x40000000
    54d0:	11844753 	orrne	r4, r4, r3, asr r7
    54d4:	eaffffd5 	b	5430 <rint+0x7c>
    54d8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    54dc:	e1911000 	orrs	r1, r1, r0
    54e0:	0affffe3 	beq	5474 <rint+0xc0>
    54e4:	e3c314ff 	bic	r1, r3, #-16777216	; 0xff000000
    54e8:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    54ec:	e1814000 	orr	r4, r1, r0
    54f0:	e59f0058 	ldr	r0, [pc, #88]	; 5550 <rint+0x19c>
    54f4:	e2641000 	rsb	r1, r4, #0
    54f8:	e1814004 	orr	r4, r1, r4
    54fc:	e0800188 	add	r0, r0, r8, lsl #3
    5500:	e1a01624 	lsr	r1, r4, #12
    5504:	e8900030 	ldm	r0, {r4, r5}
    5508:	e2011702 	and	r1, r1, #524288	; 0x80000
    550c:	e1a068a3 	lsr	r6, r3, #17
    5510:	e1813886 	orr	r3, r1, r6, lsl #17
    5514:	e1a00004 	mov	r0, r4
    5518:	e1a01005 	mov	r1, r5
    551c:	eb0000c4 	bl	5834 <__adddf3>
    5520:	e88d0003 	stm	sp, {r0, r1}
    5524:	e1a02004 	mov	r2, r4
    5528:	e1a03005 	mov	r3, r5
    552c:	e89d0003 	ldm	sp, {r0, r1}
    5530:	eb0000be 	bl	5830 <__aeabi_dsub>
    5534:	e1a05001 	mov	r5, r1
    5538:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    553c:	e1a04000 	mov	r4, r0
    5540:	e1a02000 	mov	r2, r0
    5544:	e1813f88 	orr	r3, r1, r8, lsl #31
    5548:	eaffffc9 	b	5474 <rint+0xc0>
    554c:	000fffff 	.word	0x000fffff
    5550:	00007958 	.word	0x00007958
    5554:	00000000 	.word	0x00000000

00005558 <scalbn>:
    5558:	e59f3170 	ldr	r3, [pc, #368]	; 56d0 <scalbn+0x178>
    555c:	e0013003 	and	r3, r1, r3
    5560:	e1b03a43 	asrs	r3, r3, #20
    5564:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    5568:	e1a04000 	mov	r4, r0
    556c:	e1a05001 	mov	r5, r1
    5570:	e1a06000 	mov	r6, r0
    5574:	e1a07001 	mov	r7, r1
    5578:	e1a08002 	mov	r8, r2
    557c:	1a000011 	bne	55c8 <scalbn+0x70>
    5580:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    5584:	e19cc000 	orrs	r12, r12, r0
    5588:	0a00001d 	beq	5604 <scalbn+0xac>
    558c:	e59f3140 	ldr	r3, [pc, #320]	; 56d4 <scalbn+0x17c>
    5590:	e3a02000 	mov	r2, #0
    5594:	eb0001aa 	bl	5c44 <__aeabi_dmul>
    5598:	e59f3138 	ldr	r3, [pc, #312]	; 56d8 <scalbn+0x180>
    559c:	e1580003 	cmp	r8, r3
    55a0:	e1a04000 	mov	r4, r0
    55a4:	e1a05001 	mov	r5, r1
    55a8:	e1a06000 	mov	r6, r0
    55ac:	e1a07001 	mov	r7, r1
    55b0:	ba000021 	blt	563c <scalbn+0xe4>
    55b4:	e59f3114 	ldr	r3, [pc, #276]	; 56d0 <scalbn+0x178>
    55b8:	e0013003 	and	r3, r1, r3
    55bc:	e1a03a43 	asr	r3, r3, #20
    55c0:	e2433036 	sub	r3, r3, #54	; 0x36
    55c4:	ea000003 	b	55d8 <scalbn+0x80>
    55c8:	e59f210c 	ldr	r2, [pc, #268]	; 56dc <scalbn+0x184>
    55cc:	e1530002 	cmp	r3, r2
    55d0:	11a01001 	movne	r1, r1
    55d4:	0a000027 	beq	5678 <scalbn+0x120>
    55d8:	e59f2100 	ldr	r2, [pc, #256]	; 56e0 <scalbn+0x188>
    55dc:	e0833008 	add	r3, r3, r8
    55e0:	e1530002 	cmp	r3, r2
    55e4:	c1a02004 	movgt	r2, r4
    55e8:	c1a03005 	movgt	r3, r5
    55ec:	ca000018 	bgt	5654 <scalbn+0xfc>
    55f0:	e3530000 	cmp	r3, #0
    55f4:	da000006 	ble	5614 <scalbn+0xbc>
    55f8:	e3c1147f 	bic	r1, r1, #2130706432	; 0x7f000000
    55fc:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    5600:	e1815a03 	orr	r5, r1, r3, lsl #20
    5604:	e1a00004 	mov	r0, r4
    5608:	e1a01005 	mov	r1, r5
    560c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    5610:	e12fff1e 	bx	lr
    5614:	e3730035 	cmn	r3, #53	; 0x35
    5618:	aa00001c 	bge	5690 <scalbn+0x138>
    561c:	e59f30c0 	ldr	r3, [pc, #192]	; 56e4 <scalbn+0x18c>
    5620:	e1580003 	cmp	r8, r3
    5624:	e1a02004 	mov	r2, r4
    5628:	e1a03005 	mov	r3, r5
    562c:	ca000008 	bgt	5654 <scalbn+0xfc>
    5630:	e28f1088 	add	r1, pc, #136	; 0x88
    5634:	e8910003 	ldm	r1, {r0, r1}
    5638:	eb00002c 	bl	56f0 <copysign>
    563c:	e28f307c 	add	r3, pc, #124	; 0x7c
    5640:	e893000c 	ldm	r3, {r2, r3}
    5644:	eb00017e 	bl	5c44 <__aeabi_dmul>
    5648:	e1a04000 	mov	r4, r0
    564c:	e1a05001 	mov	r5, r1
    5650:	eaffffeb 	b	5604 <scalbn+0xac>
    5654:	e28f106c 	add	r1, pc, #108	; 0x6c
    5658:	e8910003 	ldm	r1, {r0, r1}
    565c:	eb000023 	bl	56f0 <copysign>
    5660:	e28f3060 	add	r3, pc, #96	; 0x60
    5664:	e893000c 	ldm	r3, {r2, r3}
    5668:	eb000175 	bl	5c44 <__aeabi_dmul>
    566c:	e1a04000 	mov	r4, r0
    5670:	e1a05001 	mov	r5, r1
    5674:	eaffffe2 	b	5604 <scalbn+0xac>
    5678:	e1a03005 	mov	r3, r5
    567c:	e1a02000 	mov	r2, r0
    5680:	eb00006b 	bl	5834 <__adddf3>
    5684:	e1a04000 	mov	r4, r0
    5688:	e1a05001 	mov	r5, r1
    568c:	eaffffdc 	b	5604 <scalbn+0xac>
    5690:	e3c1147f 	bic	r1, r1, #2130706432	; 0x7f000000
    5694:	e2833036 	add	r3, r3, #54	; 0x36
    5698:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    569c:	e1815a03 	orr	r5, r1, r3, lsl #20
    56a0:	e1a00004 	mov	r0, r4
    56a4:	e1a01005 	mov	r1, r5
    56a8:	e3a02000 	mov	r2, #0
    56ac:	e59f3034 	ldr	r3, [pc, #52]	; 56e8 <scalbn+0x190>
    56b0:	eb000163 	bl	5c44 <__aeabi_dmul>
    56b4:	e1a04000 	mov	r4, r0
    56b8:	e1a05001 	mov	r5, r1
    56bc:	eaffffd0 	b	5604 <scalbn+0xac>
    56c0:	c2f8f359 	.word	0xc2f8f359
    56c4:	01a56e1f 	.word	0x01a56e1f
    56c8:	8800759c 	.word	0x8800759c
    56cc:	7e37e43c 	.word	0x7e37e43c
    56d0:	7ff00000 	.word	0x7ff00000
    56d4:	43500000 	.word	0x43500000
    56d8:	ffff3cb0 	.word	0xffff3cb0
    56dc:	000007ff 	.word	0x000007ff
    56e0:	000007fe 	.word	0x000007fe
    56e4:	0000c350 	.word	0x0000c350
    56e8:	3c900000 	.word	0x3c900000
    56ec:	e1a00000 	nop			; (mov r0, r0)

000056f0 <copysign>:
    56f0:	e2033102 	and	r3, r3, #-2147483648	; 0x80000000
    56f4:	e3c12102 	bic	r2, r1, #-2147483648	; 0x80000000
    56f8:	e92d0030 	push	{r4, r5}
    56fc:	e1a05001 	mov	r5, r1
    5700:	e1a04000 	mov	r4, r0
    5704:	e1831002 	orr	r1, r3, r2
    5708:	e8bd0030 	pop	{r4, r5}
    570c:	e12fff1e 	bx	lr

00005710 <__aeabi_uidiv>:
    5710:	e2512001 	subs	r2, r1, #1
    5714:	012fff1e 	bxeq	lr
    5718:	3a000036 	bcc	57f8 <__aeabi_uidiv+0xe8>
    571c:	e1500001 	cmp	r0, r1
    5720:	9a000022 	bls	57b0 <__aeabi_uidiv+0xa0>
    5724:	e1110002 	tst	r1, r2
    5728:	0a000023 	beq	57bc <__aeabi_uidiv+0xac>
    572c:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    5730:	01a01181 	lsleq	r1, r1, #3
    5734:	03a03008 	moveq	r3, #8
    5738:	13a03001 	movne	r3, #1
    573c:	e3510201 	cmp	r1, #268435456	; 0x10000000
    5740:	31510000 	cmpcc	r1, r0
    5744:	31a01201 	lslcc	r1, r1, #4
    5748:	31a03203 	lslcc	r3, r3, #4
    574c:	3afffffa 	bcc	573c <__aeabi_uidiv+0x2c>
    5750:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    5754:	31510000 	cmpcc	r1, r0
    5758:	31a01081 	lslcc	r1, r1, #1
    575c:	31a03083 	lslcc	r3, r3, #1
    5760:	3afffffa 	bcc	5750 <__aeabi_uidiv+0x40>
    5764:	e3a02000 	mov	r2, #0
    5768:	e1500001 	cmp	r0, r1
    576c:	20400001 	subcs	r0, r0, r1
    5770:	21822003 	orrcs	r2, r2, r3
    5774:	e15000a1 	cmp	r0, r1, lsr #1
    5778:	204000a1 	subcs	r0, r0, r1, lsr #1
    577c:	218220a3 	orrcs	r2, r2, r3, lsr #1
    5780:	e1500121 	cmp	r0, r1, lsr #2
    5784:	20400121 	subcs	r0, r0, r1, lsr #2
    5788:	21822123 	orrcs	r2, r2, r3, lsr #2
    578c:	e15001a1 	cmp	r0, r1, lsr #3
    5790:	204001a1 	subcs	r0, r0, r1, lsr #3
    5794:	218221a3 	orrcs	r2, r2, r3, lsr #3
    5798:	e3500000 	cmp	r0, #0
    579c:	11b03223 	lsrsne	r3, r3, #4
    57a0:	11a01221 	lsrne	r1, r1, #4
    57a4:	1affffef 	bne	5768 <__aeabi_uidiv+0x58>
    57a8:	e1a00002 	mov	r0, r2
    57ac:	e12fff1e 	bx	lr
    57b0:	03a00001 	moveq	r0, #1
    57b4:	13a00000 	movne	r0, #0
    57b8:	e12fff1e 	bx	lr
    57bc:	e3510801 	cmp	r1, #65536	; 0x10000
    57c0:	21a01821 	lsrcs	r1, r1, #16
    57c4:	23a02010 	movcs	r2, #16
    57c8:	33a02000 	movcc	r2, #0
    57cc:	e3510c01 	cmp	r1, #256	; 0x100
    57d0:	21a01421 	lsrcs	r1, r1, #8
    57d4:	22822008 	addcs	r2, r2, #8
    57d8:	e3510010 	cmp	r1, #16
    57dc:	21a01221 	lsrcs	r1, r1, #4
    57e0:	22822004 	addcs	r2, r2, #4
    57e4:	e3510004 	cmp	r1, #4
    57e8:	82822003 	addhi	r2, r2, #3
    57ec:	908220a1 	addls	r2, r2, r1, lsr #1
    57f0:	e1a00230 	lsr	r0, r0, r2
    57f4:	e12fff1e 	bx	lr
    57f8:	e3500000 	cmp	r0, #0
    57fc:	13e00000 	mvnne	r0, #0
    5800:	ea000007 	b	5824 <__aeabi_idiv0>

00005804 <__aeabi_uidivmod>:
    5804:	e3510000 	cmp	r1, #0
    5808:	0afffffa 	beq	57f8 <__aeabi_uidiv+0xe8>
    580c:	e92d4003 	push	{r0, r1, lr}
    5810:	ebffffbe 	bl	5710 <__aeabi_uidiv>
    5814:	e8bd4006 	pop	{r1, r2, lr}
    5818:	e0030092 	mul	r3, r2, r0
    581c:	e0411003 	sub	r1, r1, r3
    5820:	e12fff1e 	bx	lr

00005824 <__aeabi_idiv0>:
    5824:	e12fff1e 	bx	lr

00005828 <__aeabi_drsub>:
    5828:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    582c:	ea000000 	b	5834 <__adddf3>

00005830 <__aeabi_dsub>:
    5830:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00005834 <__adddf3>:
    5834:	e92d4030 	push	{r4, r5, lr}
    5838:	e1a04081 	lsl	r4, r1, #1
    583c:	e1a05083 	lsl	r5, r3, #1
    5840:	e1340005 	teq	r4, r5
    5844:	01300002 	teqeq	r0, r2
    5848:	1194c000 	orrsne	r12, r4, r0
    584c:	1195c002 	orrsne	r12, r5, r2
    5850:	11f0cac4 	mvnsne	r12, r4, asr #21
    5854:	11f0cac5 	mvnsne	r12, r5, asr #21
    5858:	0a00008c 	beq	5a90 <__adddf3+0x25c>
    585c:	e1a04aa4 	lsr	r4, r4, #21
    5860:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    5864:	b2655000 	rsblt	r5, r5, #0
    5868:	da000006 	ble	5888 <__adddf3+0x54>
    586c:	e0844005 	add	r4, r4, r5
    5870:	e0202002 	eor	r2, r0, r2
    5874:	e0213003 	eor	r3, r1, r3
    5878:	e0220000 	eor	r0, r2, r0
    587c:	e0231001 	eor	r1, r3, r1
    5880:	e0202002 	eor	r2, r0, r2
    5884:	e0213003 	eor	r3, r1, r3
    5888:	e3550036 	cmp	r5, #54	; 0x36
    588c:	88bd4030 	pophi	{r4, r5, lr}
    5890:	812fff1e 	bxhi	lr
    5894:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    5898:	e1a01601 	lsl	r1, r1, #12
    589c:	e3a0c601 	mov	r12, #1048576	; 0x100000
    58a0:	e18c1621 	orr	r1, r12, r1, lsr #12
    58a4:	0a000001 	beq	58b0 <__adddf3+0x7c>
    58a8:	e2700000 	rsbs	r0, r0, #0
    58ac:	e2e11000 	rsc	r1, r1, #0
    58b0:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    58b4:	e1a03603 	lsl	r3, r3, #12
    58b8:	e18c3623 	orr	r3, r12, r3, lsr #12
    58bc:	0a000001 	beq	58c8 <__adddf3+0x94>
    58c0:	e2722000 	rsbs	r2, r2, #0
    58c4:	e2e33000 	rsc	r3, r3, #0
    58c8:	e1340005 	teq	r4, r5
    58cc:	0a000069 	beq	5a78 <__adddf3+0x244>
    58d0:	e2444001 	sub	r4, r4, #1
    58d4:	e275e020 	rsbs	lr, r5, #32
    58d8:	ba000005 	blt	58f4 <__adddf3+0xc0>
    58dc:	e1a0ce12 	lsl	r12, r2, lr
    58e0:	e0900532 	adds	r0, r0, r2, lsr r5
    58e4:	e2a11000 	adc	r1, r1, #0
    58e8:	e0900e13 	adds	r0, r0, r3, lsl lr
    58ec:	e0b11553 	adcs	r1, r1, r3, asr r5
    58f0:	ea000006 	b	5910 <__adddf3+0xdc>
    58f4:	e2455020 	sub	r5, r5, #32
    58f8:	e28ee020 	add	lr, lr, #32
    58fc:	e3520001 	cmp	r2, #1
    5900:	e1a0ce13 	lsl	r12, r3, lr
    5904:	238cc002 	orrcs	r12, r12, #2
    5908:	e0900553 	adds	r0, r0, r3, asr r5
    590c:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    5910:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    5914:	5a000002 	bpl	5924 <__adddf3+0xf0>
    5918:	e27cc000 	rsbs	r12, r12, #0
    591c:	e2f00000 	rscs	r0, r0, #0
    5920:	e2e11000 	rsc	r1, r1, #0
    5924:	e3510601 	cmp	r1, #1048576	; 0x100000
    5928:	3a00000f 	bcc	596c <__adddf3+0x138>
    592c:	e3510602 	cmp	r1, #2097152	; 0x200000
    5930:	3a000006 	bcc	5950 <__adddf3+0x11c>
    5934:	e1b010a1 	lsrs	r1, r1, #1
    5938:	e1b00060 	rrxs	r0, r0
    593c:	e1a0c06c 	rrx	r12, r12
    5940:	e2844001 	add	r4, r4, #1
    5944:	e1a02a84 	lsl	r2, r4, #21
    5948:	e3720501 	cmn	r2, #4194304	; 0x400000
    594c:	2a00006b 	bcs	5b00 <__adddf3+0x2cc>
    5950:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    5954:	01b0c0a0 	lsrseq	r12, r0, #1
    5958:	e2b00000 	adcs	r0, r0, #0
    595c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    5960:	e1811005 	orr	r1, r1, r5
    5964:	e8bd4030 	pop	{r4, r5, lr}
    5968:	e12fff1e 	bx	lr
    596c:	e1b0c08c 	lsls	r12, r12, #1
    5970:	e0b00000 	adcs	r0, r0, r0
    5974:	e0a11001 	adc	r1, r1, r1
    5978:	e3110601 	tst	r1, #1048576	; 0x100000
    597c:	e2444001 	sub	r4, r4, #1
    5980:	1afffff2 	bne	5950 <__adddf3+0x11c>
    5984:	e3310000 	teq	r1, #0
    5988:	13a03014 	movne	r3, #20
    598c:	03a03034 	moveq	r3, #52	; 0x34
    5990:	01a01000 	moveq	r1, r0
    5994:	03a00000 	moveq	r0, #0
    5998:	e1a02001 	mov	r2, r1
    599c:	e3520801 	cmp	r2, #65536	; 0x10000
    59a0:	21a02822 	lsrcs	r2, r2, #16
    59a4:	22433010 	subcs	r3, r3, #16
    59a8:	e3520c01 	cmp	r2, #256	; 0x100
    59ac:	21a02422 	lsrcs	r2, r2, #8
    59b0:	22433008 	subcs	r3, r3, #8
    59b4:	e3520010 	cmp	r2, #16
    59b8:	21a02222 	lsrcs	r2, r2, #4
    59bc:	22433004 	subcs	r3, r3, #4
    59c0:	e3520004 	cmp	r2, #4
    59c4:	22433002 	subcs	r3, r3, #2
    59c8:	304330a2 	subcc	r3, r3, r2, lsr #1
    59cc:	e04331a2 	sub	r3, r3, r2, lsr #3
    59d0:	e2532020 	subs	r2, r3, #32
    59d4:	aa000007 	bge	59f8 <__adddf3+0x1c4>
    59d8:	e292200c 	adds	r2, r2, #12
    59dc:	da000004 	ble	59f4 <__adddf3+0x1c0>
    59e0:	e282c014 	add	r12, r2, #20
    59e4:	e262200c 	rsb	r2, r2, #12
    59e8:	e1a00c11 	lsl	r0, r1, r12
    59ec:	e1a01231 	lsr	r1, r1, r2
    59f0:	ea000004 	b	5a08 <__adddf3+0x1d4>
    59f4:	e2822014 	add	r2, r2, #20
    59f8:	d262c020 	rsble	r12, r2, #32
    59fc:	e1a01211 	lsl	r1, r1, r2
    5a00:	d1811c30 	orrle	r1, r1, r0, lsr r12
    5a04:	d1a00210 	lslle	r0, r0, r2
    5a08:	e0544003 	subs	r4, r4, r3
    5a0c:	a0811a04 	addge	r1, r1, r4, lsl #20
    5a10:	a1811005 	orrge	r1, r1, r5
    5a14:	a8bd4030 	popge	{r4, r5, lr}
    5a18:	a12fff1e 	bxge	lr
    5a1c:	e1e04004 	mvn	r4, r4
    5a20:	e254401f 	subs	r4, r4, #31
    5a24:	aa00000f 	bge	5a68 <__adddf3+0x234>
    5a28:	e294400c 	adds	r4, r4, #12
    5a2c:	ca000006 	bgt	5a4c <__adddf3+0x218>
    5a30:	e2844014 	add	r4, r4, #20
    5a34:	e2642020 	rsb	r2, r4, #32
    5a38:	e1a00430 	lsr	r0, r0, r4
    5a3c:	e1800211 	orr	r0, r0, r1, lsl r2
    5a40:	e1851431 	orr	r1, r5, r1, lsr r4
    5a44:	e8bd4030 	pop	{r4, r5, lr}
    5a48:	e12fff1e 	bx	lr
    5a4c:	e264400c 	rsb	r4, r4, #12
    5a50:	e2642020 	rsb	r2, r4, #32
    5a54:	e1a00230 	lsr	r0, r0, r2
    5a58:	e1800411 	orr	r0, r0, r1, lsl r4
    5a5c:	e1a01005 	mov	r1, r5
    5a60:	e8bd4030 	pop	{r4, r5, lr}
    5a64:	e12fff1e 	bx	lr
    5a68:	e1a00431 	lsr	r0, r1, r4
    5a6c:	e1a01005 	mov	r1, r5
    5a70:	e8bd4030 	pop	{r4, r5, lr}
    5a74:	e12fff1e 	bx	lr
    5a78:	e3340000 	teq	r4, #0
    5a7c:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    5a80:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    5a84:	02844001 	addeq	r4, r4, #1
    5a88:	12455001 	subne	r5, r5, #1
    5a8c:	eaffff8f 	b	58d0 <__adddf3+0x9c>
    5a90:	e1f0cac4 	mvns	r12, r4, asr #21
    5a94:	11f0cac5 	mvnsne	r12, r5, asr #21
    5a98:	0a00001d 	beq	5b14 <__adddf3+0x2e0>
    5a9c:	e1340005 	teq	r4, r5
    5aa0:	01300002 	teqeq	r0, r2
    5aa4:	0a000004 	beq	5abc <__adddf3+0x288>
    5aa8:	e194c000 	orrs	r12, r4, r0
    5aac:	01a01003 	moveq	r1, r3
    5ab0:	01a00002 	moveq	r0, r2
    5ab4:	e8bd4030 	pop	{r4, r5, lr}
    5ab8:	e12fff1e 	bx	lr
    5abc:	e1310003 	teq	r1, r3
    5ac0:	13a01000 	movne	r1, #0
    5ac4:	13a00000 	movne	r0, #0
    5ac8:	18bd4030 	popne	{r4, r5, lr}
    5acc:	112fff1e 	bxne	lr
    5ad0:	e1b0caa4 	lsrs	r12, r4, #21
    5ad4:	1a000004 	bne	5aec <__adddf3+0x2b8>
    5ad8:	e1b00080 	lsls	r0, r0, #1
    5adc:	e0b11001 	adcs	r1, r1, r1
    5ae0:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    5ae4:	e8bd4030 	pop	{r4, r5, lr}
    5ae8:	e12fff1e 	bx	lr
    5aec:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    5af0:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    5af4:	38bd4030 	popcc	{r4, r5, lr}
    5af8:	312fff1e 	bxcc	lr
    5afc:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    5b00:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    5b04:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    5b08:	e3a00000 	mov	r0, #0
    5b0c:	e8bd4030 	pop	{r4, r5, lr}
    5b10:	e12fff1e 	bx	lr
    5b14:	e1f0cac4 	mvns	r12, r4, asr #21
    5b18:	11a01003 	movne	r1, r3
    5b1c:	11a00002 	movne	r0, r2
    5b20:	01f0cac5 	mvnseq	r12, r5, asr #21
    5b24:	11a03001 	movne	r3, r1
    5b28:	11a02000 	movne	r2, r0
    5b2c:	e1904601 	orrs	r4, r0, r1, lsl #12
    5b30:	01925603 	orrseq	r5, r2, r3, lsl #12
    5b34:	01310003 	teqeq	r1, r3
    5b38:	13811702 	orrne	r1, r1, #524288	; 0x80000
    5b3c:	e8bd4030 	pop	{r4, r5, lr}
    5b40:	e12fff1e 	bx	lr

00005b44 <__aeabi_ui2d>:
    5b44:	e3300000 	teq	r0, #0
    5b48:	03a01000 	moveq	r1, #0
    5b4c:	012fff1e 	bxeq	lr
    5b50:	e92d4030 	push	{r4, r5, lr}
    5b54:	e3a04b01 	mov	r4, #1024	; 0x400
    5b58:	e2844032 	add	r4, r4, #50	; 0x32
    5b5c:	e3a05000 	mov	r5, #0
    5b60:	e3a01000 	mov	r1, #0
    5b64:	eaffff86 	b	5984 <__adddf3+0x150>

00005b68 <__aeabi_i2d>:
    5b68:	e3300000 	teq	r0, #0
    5b6c:	03a01000 	moveq	r1, #0
    5b70:	012fff1e 	bxeq	lr
    5b74:	e92d4030 	push	{r4, r5, lr}
    5b78:	e3a04b01 	mov	r4, #1024	; 0x400
    5b7c:	e2844032 	add	r4, r4, #50	; 0x32
    5b80:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    5b84:	42600000 	rsbmi	r0, r0, #0
    5b88:	e3a01000 	mov	r1, #0
    5b8c:	eaffff7c 	b	5984 <__adddf3+0x150>

00005b90 <__aeabi_f2d>:
    5b90:	e1b02080 	lsls	r2, r0, #1
    5b94:	e1a011c2 	asr	r1, r2, #3
    5b98:	e1a01061 	rrx	r1, r1
    5b9c:	e1a00e02 	lsl	r0, r2, #28
    5ba0:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    5ba4:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    5ba8:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    5bac:	112fff1e 	bxne	lr
    5bb0:	e3320000 	teq	r2, #0
    5bb4:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    5bb8:	012fff1e 	bxeq	lr
    5bbc:	e92d4030 	push	{r4, r5, lr}
    5bc0:	e3a04d0e 	mov	r4, #896	; 0x380
    5bc4:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    5bc8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    5bcc:	eaffff6c 	b	5984 <__adddf3+0x150>

00005bd0 <__aeabi_ul2d>:
    5bd0:	e1902001 	orrs	r2, r0, r1
    5bd4:	012fff1e 	bxeq	lr
    5bd8:	e92d4030 	push	{r4, r5, lr}
    5bdc:	e3a05000 	mov	r5, #0
    5be0:	ea000006 	b	5c00 <__aeabi_l2d+0x1c>

00005be4 <__aeabi_l2d>:
    5be4:	e1902001 	orrs	r2, r0, r1
    5be8:	012fff1e 	bxeq	lr
    5bec:	e92d4030 	push	{r4, r5, lr}
    5bf0:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    5bf4:	5a000001 	bpl	5c00 <__aeabi_l2d+0x1c>
    5bf8:	e2700000 	rsbs	r0, r0, #0
    5bfc:	e2e11000 	rsc	r1, r1, #0
    5c00:	e3a04b01 	mov	r4, #1024	; 0x400
    5c04:	e2844032 	add	r4, r4, #50	; 0x32
    5c08:	e1b0cb21 	lsrs	r12, r1, #22
    5c0c:	0affff44 	beq	5924 <__adddf3+0xf0>
    5c10:	e3a02003 	mov	r2, #3
    5c14:	e1b0c1ac 	lsrs	r12, r12, #3
    5c18:	12822003 	addne	r2, r2, #3
    5c1c:	e1b0c1ac 	lsrs	r12, r12, #3
    5c20:	12822003 	addne	r2, r2, #3
    5c24:	e08221ac 	add	r2, r2, r12, lsr #3
    5c28:	e2623020 	rsb	r3, r2, #32
    5c2c:	e1a0c310 	lsl	r12, r0, r3
    5c30:	e1a00230 	lsr	r0, r0, r2
    5c34:	e1800311 	orr	r0, r0, r1, lsl r3
    5c38:	e1a01231 	lsr	r1, r1, r2
    5c3c:	e0844002 	add	r4, r4, r2
    5c40:	eaffff37 	b	5924 <__adddf3+0xf0>

00005c44 <__aeabi_dmul>:
    5c44:	e92d4070 	push	{r4, r5, r6, lr}
    5c48:	e3a0c0ff 	mov	r12, #255	; 0xff
    5c4c:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    5c50:	e01c4a21 	ands	r4, r12, r1, lsr #20
    5c54:	101c5a23 	andsne	r5, r12, r3, lsr #20
    5c58:	1134000c 	teqne	r4, r12
    5c5c:	1135000c 	teqne	r5, r12
    5c60:	0b000075 	bleq	5e3c <__aeabi_dmul+0x1f8>
    5c64:	e0844005 	add	r4, r4, r5
    5c68:	e0216003 	eor	r6, r1, r3
    5c6c:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    5c70:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    5c74:	e1905601 	orrs	r5, r0, r1, lsl #12
    5c78:	11925603 	orrsne	r5, r2, r3, lsl #12
    5c7c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    5c80:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    5c84:	0a00001d 	beq	5d00 <__aeabi_dmul+0xbc>
    5c88:	e08ec290 	umull	r12, lr, r0, r2
    5c8c:	e3a05000 	mov	r5, #0
    5c90:	e0a5e291 	umlal	lr, r5, r1, r2
    5c94:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    5c98:	e0a5e390 	umlal	lr, r5, r0, r3
    5c9c:	e3a06000 	mov	r6, #0
    5ca0:	e0a65391 	umlal	r5, r6, r1, r3
    5ca4:	e33c0000 	teq	r12, #0
    5ca8:	138ee001 	orrne	lr, lr, #1
    5cac:	e24440ff 	sub	r4, r4, #255	; 0xff
    5cb0:	e3560c02 	cmp	r6, #512	; 0x200
    5cb4:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    5cb8:	2a000002 	bcs	5cc8 <__aeabi_dmul+0x84>
    5cbc:	e1b0e08e 	lsls	lr, lr, #1
    5cc0:	e0b55005 	adcs	r5, r5, r5
    5cc4:	e0a66006 	adc	r6, r6, r6
    5cc8:	e1821586 	orr	r1, r2, r6, lsl #11
    5ccc:	e1811aa5 	orr	r1, r1, r5, lsr #21
    5cd0:	e1a00585 	lsl	r0, r5, #11
    5cd4:	e1800aae 	orr	r0, r0, lr, lsr #21
    5cd8:	e1a0e58e 	lsl	lr, lr, #11
    5cdc:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    5ce0:	835c0c07 	cmphi	r12, #1792	; 0x700
    5ce4:	8a000011 	bhi	5d30 <__aeabi_dmul+0xec>
    5ce8:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    5cec:	01b0e0a0 	lsrseq	lr, r0, #1
    5cf0:	e2b00000 	adcs	r0, r0, #0
    5cf4:	e0a11a04 	adc	r1, r1, r4, lsl #20
    5cf8:	e8bd4070 	pop	{r4, r5, r6, lr}
    5cfc:	e12fff1e 	bx	lr
    5d00:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    5d04:	e1861001 	orr	r1, r6, r1
    5d08:	e1800002 	orr	r0, r0, r2
    5d0c:	e0211003 	eor	r1, r1, r3
    5d10:	e05440ac 	subs	r4, r4, r12, lsr #1
    5d14:	c074500c 	rsbsgt	r5, r4, r12
    5d18:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    5d1c:	c8bd4070 	popgt	{r4, r5, r6, lr}
    5d20:	c12fff1e 	bxgt	lr
    5d24:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    5d28:	e3a0e000 	mov	lr, #0
    5d2c:	e2544001 	subs	r4, r4, #1
    5d30:	ca00005d 	bgt	5eac <__aeabi_dmul+0x268>
    5d34:	e3740036 	cmn	r4, #54	; 0x36
    5d38:	d3a00000 	movle	r0, #0
    5d3c:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    5d40:	d8bd4070 	pople	{r4, r5, r6, lr}
    5d44:	d12fff1e 	bxle	lr
    5d48:	e2644000 	rsb	r4, r4, #0
    5d4c:	e2544020 	subs	r4, r4, #32
    5d50:	aa00001a 	bge	5dc0 <__aeabi_dmul+0x17c>
    5d54:	e294400c 	adds	r4, r4, #12
    5d58:	ca00000c 	bgt	5d90 <__aeabi_dmul+0x14c>
    5d5c:	e2844014 	add	r4, r4, #20
    5d60:	e2645020 	rsb	r5, r4, #32
    5d64:	e1a03510 	lsl	r3, r0, r5
    5d68:	e1a00430 	lsr	r0, r0, r4
    5d6c:	e1800511 	orr	r0, r0, r1, lsl r5
    5d70:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    5d74:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    5d78:	e0900fa3 	adds	r0, r0, r3, lsr #31
    5d7c:	e0a21431 	adc	r1, r2, r1, lsr r4
    5d80:	e19ee083 	orrs	lr, lr, r3, lsl #1
    5d84:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    5d88:	e8bd4070 	pop	{r4, r5, r6, lr}
    5d8c:	e12fff1e 	bx	lr
    5d90:	e264400c 	rsb	r4, r4, #12
    5d94:	e2645020 	rsb	r5, r4, #32
    5d98:	e1a03410 	lsl	r3, r0, r4
    5d9c:	e1a00530 	lsr	r0, r0, r5
    5da0:	e1800411 	orr	r0, r0, r1, lsl r4
    5da4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    5da8:	e0900fa3 	adds	r0, r0, r3, lsr #31
    5dac:	e2a11000 	adc	r1, r1, #0
    5db0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    5db4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    5db8:	e8bd4070 	pop	{r4, r5, r6, lr}
    5dbc:	e12fff1e 	bx	lr
    5dc0:	e2645020 	rsb	r5, r4, #32
    5dc4:	e18ee510 	orr	lr, lr, r0, lsl r5
    5dc8:	e1a03430 	lsr	r3, r0, r4
    5dcc:	e1833511 	orr	r3, r3, r1, lsl r5
    5dd0:	e1a00431 	lsr	r0, r1, r4
    5dd4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    5dd8:	e1c00431 	bic	r0, r0, r1, lsr r4
    5ddc:	e0800fa3 	add	r0, r0, r3, lsr #31
    5de0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    5de4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    5de8:	e8bd4070 	pop	{r4, r5, r6, lr}
    5dec:	e12fff1e 	bx	lr
    5df0:	e3340000 	teq	r4, #0
    5df4:	1a000008 	bne	5e1c <__aeabi_dmul+0x1d8>
    5df8:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    5dfc:	e1b00080 	lsls	r0, r0, #1
    5e00:	e0a11001 	adc	r1, r1, r1
    5e04:	e3110601 	tst	r1, #1048576	; 0x100000
    5e08:	02444001 	subeq	r4, r4, #1
    5e0c:	0afffffa 	beq	5dfc <__aeabi_dmul+0x1b8>
    5e10:	e1811006 	orr	r1, r1, r6
    5e14:	e3350000 	teq	r5, #0
    5e18:	112fff1e 	bxne	lr
    5e1c:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    5e20:	e1b02082 	lsls	r2, r2, #1
    5e24:	e0a33003 	adc	r3, r3, r3
    5e28:	e3130601 	tst	r3, #1048576	; 0x100000
    5e2c:	02455001 	subeq	r5, r5, #1
    5e30:	0afffffa 	beq	5e20 <__aeabi_dmul+0x1dc>
    5e34:	e1833006 	orr	r3, r3, r6
    5e38:	e12fff1e 	bx	lr
    5e3c:	e134000c 	teq	r4, r12
    5e40:	e00c5a23 	and	r5, r12, r3, lsr #20
    5e44:	1135000c 	teqne	r5, r12
    5e48:	0a000007 	beq	5e6c <__aeabi_dmul+0x228>
    5e4c:	e1906081 	orrs	r6, r0, r1, lsl #1
    5e50:	11926083 	orrsne	r6, r2, r3, lsl #1
    5e54:	1affffe5 	bne	5df0 <__aeabi_dmul+0x1ac>
    5e58:	e0211003 	eor	r1, r1, r3
    5e5c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    5e60:	e3a00000 	mov	r0, #0
    5e64:	e8bd4070 	pop	{r4, r5, r6, lr}
    5e68:	e12fff1e 	bx	lr
    5e6c:	e1906081 	orrs	r6, r0, r1, lsl #1
    5e70:	01a00002 	moveq	r0, r2
    5e74:	01a01003 	moveq	r1, r3
    5e78:	11926083 	orrsne	r6, r2, r3, lsl #1
    5e7c:	0a000010 	beq	5ec4 <__aeabi_dmul+0x280>
    5e80:	e134000c 	teq	r4, r12
    5e84:	1a000001 	bne	5e90 <__aeabi_dmul+0x24c>
    5e88:	e1906601 	orrs	r6, r0, r1, lsl #12
    5e8c:	1a00000c 	bne	5ec4 <__aeabi_dmul+0x280>
    5e90:	e135000c 	teq	r5, r12
    5e94:	1a000003 	bne	5ea8 <__aeabi_dmul+0x264>
    5e98:	e1926603 	orrs	r6, r2, r3, lsl #12
    5e9c:	11a00002 	movne	r0, r2
    5ea0:	11a01003 	movne	r1, r3
    5ea4:	1a000006 	bne	5ec4 <__aeabi_dmul+0x280>
    5ea8:	e0211003 	eor	r1, r1, r3
    5eac:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    5eb0:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    5eb4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    5eb8:	e3a00000 	mov	r0, #0
    5ebc:	e8bd4070 	pop	{r4, r5, r6, lr}
    5ec0:	e12fff1e 	bx	lr
    5ec4:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    5ec8:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    5ecc:	e8bd4070 	pop	{r4, r5, r6, lr}
    5ed0:	e12fff1e 	bx	lr

00005ed4 <__aeabi_ddiv>:
    5ed4:	e92d4070 	push	{r4, r5, r6, lr}
    5ed8:	e3a0c0ff 	mov	r12, #255	; 0xff
    5edc:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    5ee0:	e01c4a21 	ands	r4, r12, r1, lsr #20
    5ee4:	101c5a23 	andsne	r5, r12, r3, lsr #20
    5ee8:	1134000c 	teqne	r4, r12
    5eec:	1135000c 	teqne	r5, r12
    5ef0:	0b00005e 	bleq	6070 <__aeabi_ddiv+0x19c>
    5ef4:	e0444005 	sub	r4, r4, r5
    5ef8:	e021e003 	eor	lr, r1, r3
    5efc:	e1925603 	orrs	r5, r2, r3, lsl #12
    5f00:	e1a01601 	lsl	r1, r1, #12
    5f04:	0a00004c 	beq	603c <__aeabi_ddiv+0x168>
    5f08:	e1a03603 	lsl	r3, r3, #12
    5f0c:	e3a05201 	mov	r5, #268435456	; 0x10000000
    5f10:	e1853223 	orr	r3, r5, r3, lsr #4
    5f14:	e1833c22 	orr	r3, r3, r2, lsr #24
    5f18:	e1a02402 	lsl	r2, r2, #8
    5f1c:	e1855221 	orr	r5, r5, r1, lsr #4
    5f20:	e1855c20 	orr	r5, r5, r0, lsr #24
    5f24:	e1a06400 	lsl	r6, r0, #8
    5f28:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    5f2c:	e1550003 	cmp	r5, r3
    5f30:	01560002 	cmpeq	r6, r2
    5f34:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    5f38:	e2844c03 	add	r4, r4, #768	; 0x300
    5f3c:	2a000001 	bcs	5f48 <__aeabi_ddiv+0x74>
    5f40:	e1b030a3 	lsrs	r3, r3, #1
    5f44:	e1a02062 	rrx	r2, r2
    5f48:	e0566002 	subs	r6, r6, r2
    5f4c:	e0c55003 	sbc	r5, r5, r3
    5f50:	e1b030a3 	lsrs	r3, r3, #1
    5f54:	e1a02062 	rrx	r2, r2
    5f58:	e3a00601 	mov	r0, #1048576	; 0x100000
    5f5c:	e3a0c702 	mov	r12, #524288	; 0x80000
    5f60:	e056e002 	subs	lr, r6, r2
    5f64:	e0d5e003 	sbcs	lr, r5, r3
    5f68:	20466002 	subcs	r6, r6, r2
    5f6c:	21a0500e 	movcs	r5, lr
    5f70:	2180000c 	orrcs	r0, r0, r12
    5f74:	e1b030a3 	lsrs	r3, r3, #1
    5f78:	e1a02062 	rrx	r2, r2
    5f7c:	e056e002 	subs	lr, r6, r2
    5f80:	e0d5e003 	sbcs	lr, r5, r3
    5f84:	20466002 	subcs	r6, r6, r2
    5f88:	21a0500e 	movcs	r5, lr
    5f8c:	218000ac 	orrcs	r0, r0, r12, lsr #1
    5f90:	e1b030a3 	lsrs	r3, r3, #1
    5f94:	e1a02062 	rrx	r2, r2
    5f98:	e056e002 	subs	lr, r6, r2
    5f9c:	e0d5e003 	sbcs	lr, r5, r3
    5fa0:	20466002 	subcs	r6, r6, r2
    5fa4:	21a0500e 	movcs	r5, lr
    5fa8:	2180012c 	orrcs	r0, r0, r12, lsr #2
    5fac:	e1b030a3 	lsrs	r3, r3, #1
    5fb0:	e1a02062 	rrx	r2, r2
    5fb4:	e056e002 	subs	lr, r6, r2
    5fb8:	e0d5e003 	sbcs	lr, r5, r3
    5fbc:	20466002 	subcs	r6, r6, r2
    5fc0:	21a0500e 	movcs	r5, lr
    5fc4:	218001ac 	orrcs	r0, r0, r12, lsr #3
    5fc8:	e195e006 	orrs	lr, r5, r6
    5fcc:	0a00000d 	beq	6008 <__aeabi_ddiv+0x134>
    5fd0:	e1a05205 	lsl	r5, r5, #4
    5fd4:	e1855e26 	orr	r5, r5, r6, lsr #28
    5fd8:	e1a06206 	lsl	r6, r6, #4
    5fdc:	e1a03183 	lsl	r3, r3, #3
    5fe0:	e1833ea2 	orr	r3, r3, r2, lsr #29
    5fe4:	e1a02182 	lsl	r2, r2, #3
    5fe8:	e1b0c22c 	lsrs	r12, r12, #4
    5fec:	1affffdb 	bne	5f60 <__aeabi_ddiv+0x8c>
    5ff0:	e3110601 	tst	r1, #1048576	; 0x100000
    5ff4:	1a000006 	bne	6014 <__aeabi_ddiv+0x140>
    5ff8:	e1811000 	orr	r1, r1, r0
    5ffc:	e3a00000 	mov	r0, #0
    6000:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    6004:	eaffffd5 	b	5f60 <__aeabi_ddiv+0x8c>
    6008:	e3110601 	tst	r1, #1048576	; 0x100000
    600c:	01811000 	orreq	r1, r1, r0
    6010:	03a00000 	moveq	r0, #0
    6014:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    6018:	835c0c07 	cmphi	r12, #1792	; 0x700
    601c:	8affff43 	bhi	5d30 <__aeabi_dmul+0xec>
    6020:	e055c003 	subs	r12, r5, r3
    6024:	0056c002 	subseq	r12, r6, r2
    6028:	01b0c0a0 	lsrseq	r12, r0, #1
    602c:	e2b00000 	adcs	r0, r0, #0
    6030:	e0a11a04 	adc	r1, r1, r4, lsl #20
    6034:	e8bd4070 	pop	{r4, r5, r6, lr}
    6038:	e12fff1e 	bx	lr
    603c:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    6040:	e18e1621 	orr	r1, lr, r1, lsr #12
    6044:	e09440ac 	adds	r4, r4, r12, lsr #1
    6048:	c074500c 	rsbsgt	r5, r4, r12
    604c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    6050:	c8bd4070 	popgt	{r4, r5, r6, lr}
    6054:	c12fff1e 	bxgt	lr
    6058:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    605c:	e3a0e000 	mov	lr, #0
    6060:	e2544001 	subs	r4, r4, #1
    6064:	eaffff31 	b	5d30 <__aeabi_dmul+0xec>
    6068:	e185e006 	orr	lr, r5, r6
    606c:	eaffff2f 	b	5d30 <__aeabi_dmul+0xec>
    6070:	e00c5a23 	and	r5, r12, r3, lsr #20
    6074:	e134000c 	teq	r4, r12
    6078:	0135000c 	teqeq	r5, r12
    607c:	0affff90 	beq	5ec4 <__aeabi_dmul+0x280>
    6080:	e134000c 	teq	r4, r12
    6084:	1a000006 	bne	60a4 <__aeabi_ddiv+0x1d0>
    6088:	e1904601 	orrs	r4, r0, r1, lsl #12
    608c:	1affff8c 	bne	5ec4 <__aeabi_dmul+0x280>
    6090:	e135000c 	teq	r5, r12
    6094:	1affff83 	bne	5ea8 <__aeabi_dmul+0x264>
    6098:	e1a00002 	mov	r0, r2
    609c:	e1a01003 	mov	r1, r3
    60a0:	eaffff87 	b	5ec4 <__aeabi_dmul+0x280>
    60a4:	e135000c 	teq	r5, r12
    60a8:	1a000004 	bne	60c0 <__aeabi_ddiv+0x1ec>
    60ac:	e1925603 	orrs	r5, r2, r3, lsl #12
    60b0:	0affff68 	beq	5e58 <__aeabi_dmul+0x214>
    60b4:	e1a00002 	mov	r0, r2
    60b8:	e1a01003 	mov	r1, r3
    60bc:	eaffff80 	b	5ec4 <__aeabi_dmul+0x280>
    60c0:	e1906081 	orrs	r6, r0, r1, lsl #1
    60c4:	11926083 	orrsne	r6, r2, r3, lsl #1
    60c8:	1affff48 	bne	5df0 <__aeabi_dmul+0x1ac>
    60cc:	e1904081 	orrs	r4, r0, r1, lsl #1
    60d0:	1affff74 	bne	5ea8 <__aeabi_dmul+0x264>
    60d4:	e1925083 	orrs	r5, r2, r3, lsl #1
    60d8:	1affff5e 	bne	5e58 <__aeabi_dmul+0x214>
    60dc:	eaffff78 	b	5ec4 <__aeabi_dmul+0x280>

000060e0 <__gedf2>:
    60e0:	e3e0c000 	mvn	r12, #0
    60e4:	ea000002 	b	60f4 <__cmpdf2+0x4>

000060e8 <__ledf2>:
    60e8:	e3a0c001 	mov	r12, #1
    60ec:	ea000000 	b	60f4 <__cmpdf2+0x4>

000060f0 <__cmpdf2>:
    60f0:	e3a0c001 	mov	r12, #1
    60f4:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    60f8:	e1a0c081 	lsl	r12, r1, #1
    60fc:	e1f0cacc 	mvns	r12, r12, asr #21
    6100:	e1a0c083 	lsl	r12, r3, #1
    6104:	11f0cacc 	mvnsne	r12, r12, asr #21
    6108:	0a00000e 	beq	6148 <__cmpdf2+0x58>
    610c:	e28dd004 	add	sp, sp, #4
    6110:	e190c081 	orrs	r12, r0, r1, lsl #1
    6114:	0192c083 	orrseq	r12, r2, r3, lsl #1
    6118:	11310003 	teqne	r1, r3
    611c:	01300002 	teqeq	r0, r2
    6120:	03a00000 	moveq	r0, #0
    6124:	012fff1e 	bxeq	lr
    6128:	e3700000 	cmn	r0, #0
    612c:	e1310003 	teq	r1, r3
    6130:	51510003 	cmppl	r1, r3
    6134:	01500002 	cmpeq	r0, r2
    6138:	21a00fc3 	asrcs	r0, r3, #31
    613c:	31e00fc3 	mvncc	r0, r3, asr #31
    6140:	e3800001 	orr	r0, r0, #1
    6144:	e12fff1e 	bx	lr
    6148:	e1a0c081 	lsl	r12, r1, #1
    614c:	e1f0cacc 	mvns	r12, r12, asr #21
    6150:	1a000001 	bne	615c <__cmpdf2+0x6c>
    6154:	e190c601 	orrs	r12, r0, r1, lsl #12
    6158:	1a000004 	bne	6170 <__cmpdf2+0x80>
    615c:	e1a0c083 	lsl	r12, r3, #1
    6160:	e1f0cacc 	mvns	r12, r12, asr #21
    6164:	1affffe8 	bne	610c <__cmpdf2+0x1c>
    6168:	e192c603 	orrs	r12, r2, r3, lsl #12
    616c:	0affffe6 	beq	610c <__cmpdf2+0x1c>
    6170:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    6174:	e12fff1e 	bx	lr

00006178 <__aeabi_cdrcmple>:
    6178:	e1a0c000 	mov	r12, r0
    617c:	e1a00002 	mov	r0, r2
    6180:	e1a0200c 	mov	r2, r12
    6184:	e1a0c001 	mov	r12, r1
    6188:	e1a01003 	mov	r1, r3
    618c:	e1a0300c 	mov	r3, r12
    6190:	eaffffff 	b	6194 <__aeabi_cdcmpeq>

00006194 <__aeabi_cdcmpeq>:
    6194:	e92d4001 	push	{r0, lr}
    6198:	ebffffd4 	bl	60f0 <__cmpdf2>
    619c:	e3500000 	cmp	r0, #0
    61a0:	43700000 	cmnmi	r0, #0
    61a4:	e8bd4001 	pop	{r0, lr}
    61a8:	e12fff1e 	bx	lr

000061ac <__aeabi_dcmpeq>:
    61ac:	e52de008 	str	lr, [sp, #-8]!
    61b0:	ebfffff7 	bl	6194 <__aeabi_cdcmpeq>
    61b4:	03a00001 	moveq	r0, #1
    61b8:	13a00000 	movne	r0, #0
    61bc:	e49de008 	ldr	lr, [sp], #8
    61c0:	e12fff1e 	bx	lr

000061c4 <__aeabi_dcmplt>:
    61c4:	e52de008 	str	lr, [sp, #-8]!
    61c8:	ebfffff1 	bl	6194 <__aeabi_cdcmpeq>
    61cc:	33a00001 	movcc	r0, #1
    61d0:	23a00000 	movcs	r0, #0
    61d4:	e49de008 	ldr	lr, [sp], #8
    61d8:	e12fff1e 	bx	lr

000061dc <__aeabi_dcmple>:
    61dc:	e52de008 	str	lr, [sp, #-8]!
    61e0:	ebffffeb 	bl	6194 <__aeabi_cdcmpeq>
    61e4:	93a00001 	movls	r0, #1
    61e8:	83a00000 	movhi	r0, #0
    61ec:	e49de008 	ldr	lr, [sp], #8
    61f0:	e12fff1e 	bx	lr

000061f4 <__aeabi_dcmpge>:
    61f4:	e52de008 	str	lr, [sp, #-8]!
    61f8:	ebffffde 	bl	6178 <__aeabi_cdrcmple>
    61fc:	93a00001 	movls	r0, #1
    6200:	83a00000 	movhi	r0, #0
    6204:	e49de008 	ldr	lr, [sp], #8
    6208:	e12fff1e 	bx	lr

0000620c <__aeabi_dcmpgt>:
    620c:	e52de008 	str	lr, [sp, #-8]!
    6210:	ebffffd8 	bl	6178 <__aeabi_cdrcmple>
    6214:	33a00001 	movcc	r0, #1
    6218:	23a00000 	movcs	r0, #0
    621c:	e49de008 	ldr	lr, [sp], #8
    6220:	e12fff1e 	bx	lr

00006224 <__aeabi_d2iz>:
    6224:	e1a02081 	lsl	r2, r1, #1
    6228:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    622c:	2a00000c 	bcs	6264 <__aeabi_d2iz+0x40>
    6230:	5a000009 	bpl	625c <__aeabi_d2iz+0x38>
    6234:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    6238:	e0532ac2 	subs	r2, r3, r2, asr #21
    623c:	9a00000a 	bls	626c <__aeabi_d2iz+0x48>
    6240:	e1a03581 	lsl	r3, r1, #11
    6244:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    6248:	e1833aa0 	orr	r3, r3, r0, lsr #21
    624c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    6250:	e1a00233 	lsr	r0, r3, r2
    6254:	12600000 	rsbne	r0, r0, #0
    6258:	e12fff1e 	bx	lr
    625c:	e3a00000 	mov	r0, #0
    6260:	e12fff1e 	bx	lr
    6264:	e1900601 	orrs	r0, r0, r1, lsl #12
    6268:	1a000002 	bne	6278 <__aeabi_d2iz+0x54>
    626c:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    6270:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    6274:	e12fff1e 	bx	lr
    6278:	e3a00000 	mov	r0, #0
    627c:	e12fff1e 	bx	lr

00006280 <__aeabi_d2uiz>:
    6280:	e1b02081 	lsls	r2, r1, #1
    6284:	2a00000a 	bcs	62b4 <__aeabi_d2uiz+0x34>
    6288:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    628c:	2a00000a 	bcs	62bc <__aeabi_d2uiz+0x3c>
    6290:	5a000007 	bpl	62b4 <__aeabi_d2uiz+0x34>
    6294:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    6298:	e0532ac2 	subs	r2, r3, r2, asr #21
    629c:	4a000008 	bmi	62c4 <__aeabi_d2uiz+0x44>
    62a0:	e1a03581 	lsl	r3, r1, #11
    62a4:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    62a8:	e1833aa0 	orr	r3, r3, r0, lsr #21
    62ac:	e1a00233 	lsr	r0, r3, r2
    62b0:	e12fff1e 	bx	lr
    62b4:	e3a00000 	mov	r0, #0
    62b8:	e12fff1e 	bx	lr
    62bc:	e1900601 	orrs	r0, r0, r1, lsl #12
    62c0:	1a000001 	bne	62cc <__aeabi_d2uiz+0x4c>
    62c4:	e3e00000 	mvn	r0, #0
    62c8:	e12fff1e 	bx	lr
    62cc:	e3a00000 	mov	r0, #0
    62d0:	e12fff1e 	bx	lr

000062d4 <atexit>:
    62d4:	e1a01000 	mov	r1, r0
    62d8:	e3a00000 	mov	r0, #0
    62dc:	e92d4008 	push	{r3, lr}
    62e0:	e1a02000 	mov	r2, r0
    62e4:	e1a03000 	mov	r3, r0
    62e8:	eb000287 	bl	6d0c <__register_exitproc>
    62ec:	e8bd4008 	pop	{r3, lr}
    62f0:	e12fff1e 	bx	lr

000062f4 <__errno>:
    62f4:	e59f3004 	ldr	r3, [pc, #4]	; 6300 <__errno+0xc>
    62f8:	e5930000 	ldr	r0, [r3]
    62fc:	e12fff1e 	bx	lr
    6300:	001259e8 	.word	0x001259e8

00006304 <exit>:
    6304:	e92d4008 	push	{r3, lr}
    6308:	e3a01000 	mov	r1, #0
    630c:	e1a04000 	mov	r4, r0
    6310:	eb0002ba 	bl	6e00 <__call_exitprocs>
    6314:	e59f3018 	ldr	r3, [pc, #24]	; 6334 <exit+0x30>
    6318:	e5930000 	ldr	r0, [r3]
    631c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    6320:	e3530000 	cmp	r3, #0
    6324:	11a0e00f 	movne	lr, pc
    6328:	112fff13 	bxne	r3
    632c:	e1a00004 	mov	r0, r4
    6330:	eb00047f 	bl	7534 <_exit>
    6334:	00007968 	.word	0x00007968

00006338 <malloc>:
    6338:	e92d4008 	push	{r3, lr}
    633c:	e59f3010 	ldr	r3, [pc, #16]	; 6354 <malloc+0x1c>
    6340:	e1a01000 	mov	r1, r0
    6344:	e5930000 	ldr	r0, [r3]
    6348:	eb00000a 	bl	6378 <_malloc_r>
    634c:	e8bd4008 	pop	{r3, lr}
    6350:	e12fff1e 	bx	lr
    6354:	001259e8 	.word	0x001259e8

00006358 <free>:
    6358:	e92d4008 	push	{r3, lr}
    635c:	e59f3010 	ldr	r3, [pc, #16]	; 6374 <free+0x1c>
    6360:	e1a01000 	mov	r1, r0
    6364:	e5930000 	ldr	r0, [r3]
    6368:	eb00035c 	bl	70e0 <_free_r>
    636c:	e8bd4008 	pop	{r3, lr}
    6370:	e12fff1e 	bx	lr
    6374:	001259e8 	.word	0x001259e8

00006378 <_malloc_r>:
    6378:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    637c:	e281500b 	add	r5, r1, #11
    6380:	e3550016 	cmp	r5, #22
    6384:	83c55007 	bichi	r5, r5, #7
    6388:	81a03fa5 	lsrhi	r3, r5, #31
    638c:	93a03000 	movls	r3, #0
    6390:	93a05010 	movls	r5, #16
    6394:	e1550001 	cmp	r5, r1
    6398:	21a01003 	movcs	r1, r3
    639c:	33831001 	orrcc	r1, r3, #1
    63a0:	e3510000 	cmp	r1, #0
    63a4:	13a0300c 	movne	r3, #12
    63a8:	e24dd00c 	sub	sp, sp, #12
    63ac:	e1a06000 	mov	r6, r0
    63b0:	15803000 	strne	r3, [r0]
    63b4:	13a04000 	movne	r4, #0
    63b8:	1a000015 	bne	6414 <_malloc_r+0x9c>
    63bc:	eb0001b4 	bl	6a94 <__malloc_lock>
    63c0:	e3550f7e 	cmp	r5, #504	; 0x1f8
    63c4:	2a000016 	bcs	6424 <_malloc_r+0xac>
    63c8:	e59f76b8 	ldr	r7, [pc, #1720]	; 6a88 <_malloc_r+0x710>
    63cc:	e1a0e1a5 	lsr	lr, r5, #3
    63d0:	e087318e 	add	r3, r7, lr, lsl #3
    63d4:	e593400c 	ldr	r4, [r3, #12]
    63d8:	e1540003 	cmp	r4, r3
    63dc:	0a00014b 	beq	6910 <_malloc_r+0x598>
    63e0:	e5943004 	ldr	r3, [r4, #4]
    63e4:	e3c33003 	bic	r3, r3, #3
    63e8:	e0843003 	add	r3, r4, r3
    63ec:	e5930004 	ldr	r0, [r3, #4]
    63f0:	e2841008 	add	r1, r4, #8
    63f4:	e8910006 	ldm	r1, {r1, r2}
    63f8:	e3800001 	orr	r0, r0, #1
    63fc:	e5830004 	str	r0, [r3, #4]
    6400:	e581200c 	str	r2, [r1, #12]
    6404:	e5821008 	str	r1, [r2, #8]
    6408:	e1a00006 	mov	r0, r6
    640c:	eb0001a1 	bl	6a98 <__malloc_unlock>
    6410:	e2844008 	add	r4, r4, #8
    6414:	e1a00004 	mov	r0, r4
    6418:	e28dd00c 	add	sp, sp, #12
    641c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    6420:	e12fff1e 	bx	lr
    6424:	e1b0e4a5 	lsrs	lr, r5, #9
    6428:	01a0e1a5 	lsreq	lr, r5, #3
    642c:	01a0108e 	lsleq	r1, lr, #1
    6430:	1a000061 	bne	65bc <_malloc_r+0x244>
    6434:	e59f764c 	ldr	r7, [pc, #1612]	; 6a88 <_malloc_r+0x710>
    6438:	e0871101 	add	r1, r7, r1, lsl #2
    643c:	e591400c 	ldr	r4, [r1, #12]
    6440:	e1510004 	cmp	r1, r4
    6444:	1a000005 	bne	6460 <_malloc_r+0xe8>
    6448:	ea00000a 	b	6478 <_malloc_r+0x100>
    644c:	e3530000 	cmp	r3, #0
    6450:	aa0000d7 	bge	67b4 <_malloc_r+0x43c>
    6454:	e594400c 	ldr	r4, [r4, #12]
    6458:	e1510004 	cmp	r1, r4
    645c:	0a000005 	beq	6478 <_malloc_r+0x100>
    6460:	e5942004 	ldr	r2, [r4, #4]
    6464:	e3c22003 	bic	r2, r2, #3
    6468:	e0653002 	rsb	r3, r5, r2
    646c:	e353000f 	cmp	r3, #15
    6470:	dafffff5 	ble	644c <_malloc_r+0xd4>
    6474:	e24ee001 	sub	lr, lr, #1
    6478:	e28ee001 	add	lr, lr, #1
    647c:	e59f3604 	ldr	r3, [pc, #1540]	; 6a88 <_malloc_r+0x710>
    6480:	e5974010 	ldr	r4, [r7, #16]
    6484:	e2838008 	add	r8, r3, #8
    6488:	e1540008 	cmp	r4, r8
    648c:	05931004 	ldreq	r1, [r3, #4]
    6490:	0a000016 	beq	64f0 <_malloc_r+0x178>
    6494:	e5942004 	ldr	r2, [r4, #4]
    6498:	e3c22003 	bic	r2, r2, #3
    649c:	e0651002 	rsb	r1, r5, r2
    64a0:	e351000f 	cmp	r1, #15
    64a4:	ca0000f7 	bgt	6888 <_malloc_r+0x510>
    64a8:	e3510000 	cmp	r1, #0
    64ac:	e5838014 	str	r8, [r3, #20]
    64b0:	e5838010 	str	r8, [r3, #16]
    64b4:	aa000046 	bge	65d4 <_malloc_r+0x25c>
    64b8:	e3520c02 	cmp	r2, #512	; 0x200
    64bc:	2a0000d2 	bcs	680c <_malloc_r+0x494>
    64c0:	e5930004 	ldr	r0, [r3, #4]
    64c4:	e1a021a2 	lsr	r2, r2, #3
    64c8:	e1a01142 	asr	r1, r2, #2
    64cc:	e3a0c001 	mov	r12, #1
    64d0:	e180111c 	orr	r1, r0, r12, lsl r1
    64d4:	e0832182 	add	r2, r3, r2, lsl #3
    64d8:	e5920008 	ldr	r0, [r2, #8]
    64dc:	e584200c 	str	r2, [r4, #12]
    64e0:	e5840008 	str	r0, [r4, #8]
    64e4:	e5831004 	str	r1, [r3, #4]
    64e8:	e5824008 	str	r4, [r2, #8]
    64ec:	e580400c 	str	r4, [r0, #12]
    64f0:	e1a0014e 	asr	r0, lr, #2
    64f4:	e3a03001 	mov	r3, #1
    64f8:	e1a00013 	lsl	r0, r3, r0
    64fc:	e1500001 	cmp	r0, r1
    6500:	8a00003b 	bhi	65f4 <_malloc_r+0x27c>
    6504:	e1110000 	tst	r1, r0
    6508:	1a000008 	bne	6530 <_malloc_r+0x1b8>
    650c:	e1a00310 	lsl	r0, r0, r3
    6510:	e3cee003 	bic	lr, lr, #3
    6514:	e1110000 	tst	r1, r0
    6518:	e28ee004 	add	lr, lr, #4
    651c:	1a000003 	bne	6530 <_malloc_r+0x1b8>
    6520:	e1a00080 	lsl	r0, r0, #1
    6524:	e1110000 	tst	r1, r0
    6528:	e28ee004 	add	lr, lr, #4
    652c:	0afffffb 	beq	6520 <_malloc_r+0x1a8>
    6530:	e087a18e 	add	r10, r7, lr, lsl #3
    6534:	e1a0c00a 	mov	r12, r10
    6538:	e1a0400e 	mov	r4, lr
    653c:	e59c300c 	ldr	r3, [r12, #12]
    6540:	e15c0003 	cmp	r12, r3
    6544:	1a000005 	bne	6560 <_malloc_r+0x1e8>
    6548:	ea0000db 	b	68bc <_malloc_r+0x544>
    654c:	e3520000 	cmp	r2, #0
    6550:	aa0000f4 	bge	6928 <_malloc_r+0x5b0>
    6554:	e593300c 	ldr	r3, [r3, #12]
    6558:	e15c0003 	cmp	r12, r3
    655c:	0a0000d6 	beq	68bc <_malloc_r+0x544>
    6560:	e5931004 	ldr	r1, [r3, #4]
    6564:	e3c11003 	bic	r1, r1, #3
    6568:	e0652001 	rsb	r2, r5, r1
    656c:	e352000f 	cmp	r2, #15
    6570:	dafffff5 	ble	654c <_malloc_r+0x1d4>
    6574:	e1a04003 	mov	r4, r3
    6578:	e593000c 	ldr	r0, [r3, #12]
    657c:	e5b4c008 	ldr	r12, [r4, #8]!
    6580:	e0831005 	add	r1, r3, r5
    6584:	e382e001 	orr	lr, r2, #1
    6588:	e3855001 	orr	r5, r5, #1
    658c:	e58c000c 	str	r0, [r12, #12]
    6590:	e580c008 	str	r12, [r0, #8]
    6594:	e5835004 	str	r5, [r3, #4]
    6598:	e5871014 	str	r1, [r7, #20]
    659c:	e5871010 	str	r1, [r7, #16]
    65a0:	e581800c 	str	r8, [r1, #12]
    65a4:	e5818008 	str	r8, [r1, #8]
    65a8:	e581e004 	str	lr, [r1, #4]
    65ac:	e7812002 	str	r2, [r1, r2]
    65b0:	e1a00006 	mov	r0, r6
    65b4:	eb000137 	bl	6a98 <__malloc_unlock>
    65b8:	eaffff95 	b	6414 <_malloc_r+0x9c>
    65bc:	e35e0004 	cmp	lr, #4
    65c0:	8a000087 	bhi	67e4 <_malloc_r+0x46c>
    65c4:	e1a0e325 	lsr	lr, r5, #6
    65c8:	e28ee038 	add	lr, lr, #56	; 0x38
    65cc:	e1a0108e 	lsl	r1, lr, #1
    65d0:	eaffff97 	b	6434 <_malloc_r+0xbc>
    65d4:	e0842002 	add	r2, r4, r2
    65d8:	e5923004 	ldr	r3, [r2, #4]
    65dc:	e3833001 	orr	r3, r3, #1
    65e0:	e5823004 	str	r3, [r2, #4]
    65e4:	e1a00006 	mov	r0, r6
    65e8:	eb00012a 	bl	6a98 <__malloc_unlock>
    65ec:	e2844008 	add	r4, r4, #8
    65f0:	eaffff87 	b	6414 <_malloc_r+0x9c>
    65f4:	e5974008 	ldr	r4, [r7, #8]
    65f8:	e594a004 	ldr	r10, [r4, #4]
    65fc:	e3caa003 	bic	r10, r10, #3
    6600:	e155000a 	cmp	r5, r10
    6604:	8a000002 	bhi	6614 <_malloc_r+0x29c>
    6608:	e065300a 	rsb	r3, r5, r10
    660c:	e353000f 	cmp	r3, #15
    6610:	ca00005d 	bgt	678c <_malloc_r+0x414>
    6614:	e59f9470 	ldr	r9, [pc, #1136]	; 6a8c <_malloc_r+0x714>
    6618:	e5973408 	ldr	r3, [r7, #1032]	; 0x408
    661c:	e599b000 	ldr	r11, [r9]
    6620:	e3730001 	cmn	r3, #1
    6624:	e085b00b 	add	r11, r5, r11
    6628:	128bba01 	addne	r11, r11, #4096	; 0x1000
    662c:	128bb00f 	addne	r11, r11, #15
    6630:	13cbbeff 	bicne	r11, r11, #4080	; 0xff0
    6634:	028bb010 	addeq	r11, r11, #16
    6638:	13cbb00f 	bicne	r11, r11, #15
    663c:	e084200a 	add	r2, r4, r10
    6640:	e1a00006 	mov	r0, r6
    6644:	e1a0100b 	mov	r1, r11
    6648:	e58d2004 	str	r2, [sp, #4]
    664c:	eb000112 	bl	6a9c <_sbrk_r>
    6650:	e3700001 	cmn	r0, #1
    6654:	e1a08000 	mov	r8, r0
    6658:	e59d2004 	ldr	r2, [sp, #4]
    665c:	0a0000e2 	beq	69ec <_malloc_r+0x674>
    6660:	e1520000 	cmp	r2, r0
    6664:	8a0000bf 	bhi	6968 <_malloc_r+0x5f0>
    6668:	e5993004 	ldr	r3, [r9, #4]
    666c:	e1520008 	cmp	r2, r8
    6670:	e08b3003 	add	r3, r11, r3
    6674:	e5893004 	str	r3, [r9, #4]
    6678:	0a0000df 	beq	69fc <_malloc_r+0x684>
    667c:	e5971408 	ldr	r1, [r7, #1032]	; 0x408
    6680:	e3710001 	cmn	r1, #1
    6684:	10622008 	rsbne	r2, r2, r8
    6688:	059f33f8 	ldreq	r3, [pc, #1016]	; 6a88 <_malloc_r+0x710>
    668c:	10833002 	addne	r3, r3, r2
    6690:	05838408 	streq	r8, [r3, #1032]	; 0x408
    6694:	15893004 	strne	r3, [r9, #4]
    6698:	e2183007 	ands	r3, r8, #7
    669c:	12632008 	rsbne	r2, r3, #8
    66a0:	10888002 	addne	r8, r8, r2
    66a4:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
    66a8:	12832008 	addne	r2, r3, #8
    66ac:	e088300b 	add	r3, r8, r11
    66b0:	03a02a01 	moveq	r2, #4096	; 0x1000
    66b4:	e1a03a03 	lsl	r3, r3, #20
    66b8:	e042ba23 	sub	r11, r2, r3, lsr #20
    66bc:	e1a0100b 	mov	r1, r11
    66c0:	e1a00006 	mov	r0, r6
    66c4:	eb0000f4 	bl	6a9c <_sbrk_r>
    66c8:	e3700001 	cmn	r0, #1
    66cc:	10682000 	rsbne	r2, r8, r0
    66d0:	e5993004 	ldr	r3, [r9, #4]
    66d4:	108b2002 	addne	r2, r11, r2
    66d8:	03a0b000 	moveq	r11, #0
    66dc:	13822001 	orrne	r2, r2, #1
    66e0:	03a02001 	moveq	r2, #1
    66e4:	e08b3003 	add	r3, r11, r3
    66e8:	e1540007 	cmp	r4, r7
    66ec:	e5893004 	str	r3, [r9, #4]
    66f0:	e5878008 	str	r8, [r7, #8]
    66f4:	e5882004 	str	r2, [r8, #4]
    66f8:	0a00000d 	beq	6734 <_malloc_r+0x3bc>
    66fc:	e35a000f 	cmp	r10, #15
    6700:	9a0000ac 	bls	69b8 <_malloc_r+0x640>
    6704:	e594c004 	ldr	r12, [r4, #4]
    6708:	e24a200c 	sub	r2, r10, #12
    670c:	e3c22007 	bic	r2, r2, #7
    6710:	e20cc001 	and	r12, r12, #1
    6714:	e0841002 	add	r1, r4, r2
    6718:	e3a00005 	mov	r0, #5
    671c:	e182c00c 	orr	r12, r2, r12
    6720:	e352000f 	cmp	r2, #15
    6724:	e584c004 	str	r12, [r4, #4]
    6728:	e5810004 	str	r0, [r1, #4]
    672c:	e5810008 	str	r0, [r1, #8]
    6730:	8a0000b8 	bhi	6a18 <_malloc_r+0x6a0>
    6734:	e599202c 	ldr	r2, [r9, #44]	; 0x2c
    6738:	e1530002 	cmp	r3, r2
    673c:	859f2348 	ldrhi	r2, [pc, #840]	; 6a8c <_malloc_r+0x714>
    6740:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
    6744:	e5992030 	ldr	r2, [r9, #48]	; 0x30
    6748:	e5974008 	ldr	r4, [r7, #8]
    674c:	e1530002 	cmp	r3, r2
    6750:	95943004 	ldrls	r3, [r4, #4]
    6754:	85942004 	ldrhi	r2, [r4, #4]
    6758:	859f132c 	ldrhi	r1, [pc, #812]	; 6a8c <_malloc_r+0x714>
    675c:	93c33003 	bicls	r3, r3, #3
    6760:	85813030 	strhi	r3, [r1, #48]	; 0x30
    6764:	83c23003 	bichi	r3, r2, #3
    6768:	e1550003 	cmp	r5, r3
    676c:	e0653003 	rsb	r3, r5, r3
    6770:	8a000001 	bhi	677c <_malloc_r+0x404>
    6774:	e353000f 	cmp	r3, #15
    6778:	ca000003 	bgt	678c <_malloc_r+0x414>
    677c:	e1a00006 	mov	r0, r6
    6780:	eb0000c4 	bl	6a98 <__malloc_unlock>
    6784:	e3a04000 	mov	r4, #0
    6788:	eaffff21 	b	6414 <_malloc_r+0x9c>
    678c:	e0842005 	add	r2, r4, r5
    6790:	e3833001 	orr	r3, r3, #1
    6794:	e3855001 	orr	r5, r5, #1
    6798:	e5845004 	str	r5, [r4, #4]
    679c:	e1a00006 	mov	r0, r6
    67a0:	e5823004 	str	r3, [r2, #4]
    67a4:	e5872008 	str	r2, [r7, #8]
    67a8:	e2844008 	add	r4, r4, #8
    67ac:	eb0000b9 	bl	6a98 <__malloc_unlock>
    67b0:	eaffff17 	b	6414 <_malloc_r+0x9c>
    67b4:	e0842002 	add	r2, r4, r2
    67b8:	e5920004 	ldr	r0, [r2, #4]
    67bc:	e2841008 	add	r1, r4, #8
    67c0:	e891000a 	ldm	r1, {r1, r3}
    67c4:	e3800001 	orr	r0, r0, #1
    67c8:	e5820004 	str	r0, [r2, #4]
    67cc:	e581300c 	str	r3, [r1, #12]
    67d0:	e5831008 	str	r1, [r3, #8]
    67d4:	e1a00006 	mov	r0, r6
    67d8:	eb0000ae 	bl	6a98 <__malloc_unlock>
    67dc:	e2844008 	add	r4, r4, #8
    67e0:	eaffff0b 	b	6414 <_malloc_r+0x9c>
    67e4:	e35e0014 	cmp	lr, #20
    67e8:	928ee05b 	addls	lr, lr, #91	; 0x5b
    67ec:	91a0108e 	lslls	r1, lr, #1
    67f0:	9affff0f 	bls	6434 <_malloc_r+0xbc>
    67f4:	e35e0054 	cmp	lr, #84	; 0x54
    67f8:	8a000061 	bhi	6984 <_malloc_r+0x60c>
    67fc:	e1a0e625 	lsr	lr, r5, #12
    6800:	e28ee06e 	add	lr, lr, #110	; 0x6e
    6804:	e1a0108e 	lsl	r1, lr, #1
    6808:	eaffff09 	b	6434 <_malloc_r+0xbc>
    680c:	e1a034a2 	lsr	r3, r2, #9
    6810:	e3530004 	cmp	r3, #4
    6814:	9a00004f 	bls	6958 <_malloc_r+0x5e0>
    6818:	e3530014 	cmp	r3, #20
    681c:	9283a05b 	addls	r10, r3, #91	; 0x5b
    6820:	91a0008a 	lslls	r0, r10, #1
    6824:	9a000004 	bls	683c <_malloc_r+0x4c4>
    6828:	e3530054 	cmp	r3, #84	; 0x54
    682c:	8a00007f 	bhi	6a30 <_malloc_r+0x6b8>
    6830:	e1a0a622 	lsr	r10, r2, #12
    6834:	e28aa06e 	add	r10, r10, #110	; 0x6e
    6838:	e1a0008a 	lsl	r0, r10, #1
    683c:	e0870100 	add	r0, r7, r0, lsl #2
    6840:	e5903008 	ldr	r3, [r0, #8]
    6844:	e1530000 	cmp	r3, r0
    6848:	e59fc238 	ldr	r12, [pc, #568]	; 6a88 <_malloc_r+0x710>
    684c:	0a000052 	beq	699c <_malloc_r+0x624>
    6850:	e5931004 	ldr	r1, [r3, #4]
    6854:	e3c11003 	bic	r1, r1, #3
    6858:	e1520001 	cmp	r2, r1
    685c:	2a000002 	bcs	686c <_malloc_r+0x4f4>
    6860:	e5933008 	ldr	r3, [r3, #8]
    6864:	e1500003 	cmp	r0, r3
    6868:	1afffff8 	bne	6850 <_malloc_r+0x4d8>
    686c:	e593200c 	ldr	r2, [r3, #12]
    6870:	e5971004 	ldr	r1, [r7, #4]
    6874:	e584200c 	str	r2, [r4, #12]
    6878:	e5843008 	str	r3, [r4, #8]
    687c:	e583400c 	str	r4, [r3, #12]
    6880:	e5824008 	str	r4, [r2, #8]
    6884:	eaffff19 	b	64f0 <_malloc_r+0x178>
    6888:	e0842005 	add	r2, r4, r5
    688c:	e3810001 	orr	r0, r1, #1
    6890:	e3855001 	orr	r5, r5, #1
    6894:	e5845004 	str	r5, [r4, #4]
    6898:	e5832014 	str	r2, [r3, #20]
    689c:	e5832010 	str	r2, [r3, #16]
    68a0:	e582800c 	str	r8, [r2, #12]
    68a4:	e9820101 	stmib	r2, {r0, r8}
    68a8:	e7821001 	str	r1, [r2, r1]
    68ac:	e1a00006 	mov	r0, r6
    68b0:	eb000078 	bl	6a98 <__malloc_unlock>
    68b4:	e2844008 	add	r4, r4, #8
    68b8:	eafffed5 	b	6414 <_malloc_r+0x9c>
    68bc:	e2844001 	add	r4, r4, #1
    68c0:	e3140003 	tst	r4, #3
    68c4:	e28cc008 	add	r12, r12, #8
    68c8:	1affff1b 	bne	653c <_malloc_r+0x1c4>
    68cc:	e31e0003 	tst	lr, #3
    68d0:	e24a3008 	sub	r3, r10, #8
    68d4:	0a000062 	beq	6a64 <_malloc_r+0x6ec>
    68d8:	e59aa000 	ldr	r10, [r10]
    68dc:	e15a0003 	cmp	r10, r3
    68e0:	e24ee001 	sub	lr, lr, #1
    68e4:	0afffff8 	beq	68cc <_malloc_r+0x554>
    68e8:	e5973004 	ldr	r3, [r7, #4]
    68ec:	e1a00080 	lsl	r0, r0, #1
    68f0:	e1500003 	cmp	r0, r3
    68f4:	8affff3e 	bhi	65f4 <_malloc_r+0x27c>
    68f8:	e3500000 	cmp	r0, #0
    68fc:	0affff3c 	beq	65f4 <_malloc_r+0x27c>
    6900:	e1130000 	tst	r3, r0
    6904:	0a00005a 	beq	6a74 <_malloc_r+0x6fc>
    6908:	e1a0e004 	mov	lr, r4
    690c:	eaffff07 	b	6530 <_malloc_r+0x1b8>
    6910:	e2843008 	add	r3, r4, #8
    6914:	e5944014 	ldr	r4, [r4, #20]
    6918:	e1530004 	cmp	r3, r4
    691c:	028ee002 	addeq	lr, lr, #2
    6920:	0afffed5 	beq	647c <_malloc_r+0x104>
    6924:	eafffead 	b	63e0 <_malloc_r+0x68>
    6928:	e0831001 	add	r1, r3, r1
    692c:	e5910004 	ldr	r0, [r1, #4]
    6930:	e1a04003 	mov	r4, r3
    6934:	e5b42008 	ldr	r2, [r4, #8]!
    6938:	e593300c 	ldr	r3, [r3, #12]
    693c:	e3800001 	orr	r0, r0, #1
    6940:	e5810004 	str	r0, [r1, #4]
    6944:	e582300c 	str	r3, [r2, #12]
    6948:	e5832008 	str	r2, [r3, #8]
    694c:	e1a00006 	mov	r0, r6
    6950:	eb000050 	bl	6a98 <__malloc_unlock>
    6954:	eafffeae 	b	6414 <_malloc_r+0x9c>
    6958:	e1a0a322 	lsr	r10, r2, #6
    695c:	e28aa038 	add	r10, r10, #56	; 0x38
    6960:	e1a0008a 	lsl	r0, r10, #1
    6964:	eaffffb4 	b	683c <_malloc_r+0x4c4>
    6968:	e1540007 	cmp	r4, r7
    696c:	0affff3d 	beq	6668 <_malloc_r+0x2f0>
    6970:	e59f3110 	ldr	r3, [pc, #272]	; 6a88 <_malloc_r+0x710>
    6974:	e5934008 	ldr	r4, [r3, #8]
    6978:	e5943004 	ldr	r3, [r4, #4]
    697c:	e3c33003 	bic	r3, r3, #3
    6980:	eaffff78 	b	6768 <_malloc_r+0x3f0>
    6984:	e35e0f55 	cmp	lr, #340	; 0x154
    6988:	8a00000f 	bhi	69cc <_malloc_r+0x654>
    698c:	e1a0e7a5 	lsr	lr, r5, #15
    6990:	e28ee077 	add	lr, lr, #119	; 0x77
    6994:	e1a0108e 	lsl	r1, lr, #1
    6998:	eafffea5 	b	6434 <_malloc_r+0xbc>
    699c:	e59c2004 	ldr	r2, [r12, #4]
    69a0:	e1a0a14a 	asr	r10, r10, #2
    69a4:	e3a01001 	mov	r1, #1
    69a8:	e1821a11 	orr	r1, r2, r1, lsl r10
    69ac:	e1a02003 	mov	r2, r3
    69b0:	e58c1004 	str	r1, [r12, #4]
    69b4:	eaffffae 	b	6874 <_malloc_r+0x4fc>
    69b8:	e3a03001 	mov	r3, #1
    69bc:	e5883004 	str	r3, [r8, #4]
    69c0:	e1a04008 	mov	r4, r8
    69c4:	e3a03000 	mov	r3, #0
    69c8:	eaffff66 	b	6768 <_malloc_r+0x3f0>
    69cc:	e59f30bc 	ldr	r3, [pc, #188]	; 6a90 <_malloc_r+0x718>
    69d0:	e15e0003 	cmp	lr, r3
    69d4:	91a0e925 	lsrls	lr, r5, #18
    69d8:	928ee07c 	addls	lr, lr, #124	; 0x7c
    69dc:	91a0108e 	lslls	r1, lr, #1
    69e0:	83a010fc 	movhi	r1, #252	; 0xfc
    69e4:	83a0e07e 	movhi	lr, #126	; 0x7e
    69e8:	eafffe91 	b	6434 <_malloc_r+0xbc>
    69ec:	e5974008 	ldr	r4, [r7, #8]
    69f0:	e5943004 	ldr	r3, [r4, #4]
    69f4:	e3c33003 	bic	r3, r3, #3
    69f8:	eaffff5a 	b	6768 <_malloc_r+0x3f0>
    69fc:	e1b01a02 	lsls	r1, r2, #20
    6a00:	1affff1d 	bne	667c <_malloc_r+0x304>
    6a04:	e5972008 	ldr	r2, [r7, #8]
    6a08:	e08b100a 	add	r1, r11, r10
    6a0c:	e3811001 	orr	r1, r1, #1
    6a10:	e5821004 	str	r1, [r2, #4]
    6a14:	eaffff46 	b	6734 <_malloc_r+0x3bc>
    6a18:	e1a00006 	mov	r0, r6
    6a1c:	e2841008 	add	r1, r4, #8
    6a20:	eb0001ae 	bl	70e0 <_free_r>
    6a24:	e59f3060 	ldr	r3, [pc, #96]	; 6a8c <_malloc_r+0x714>
    6a28:	e5933004 	ldr	r3, [r3, #4]
    6a2c:	eaffff40 	b	6734 <_malloc_r+0x3bc>
    6a30:	e3530f55 	cmp	r3, #340	; 0x154
    6a34:	91a0a7a2 	lsrls	r10, r2, #15
    6a38:	928aa077 	addls	r10, r10, #119	; 0x77
    6a3c:	91a0008a 	lslls	r0, r10, #1
    6a40:	9affff7d 	bls	683c <_malloc_r+0x4c4>
    6a44:	e59f1044 	ldr	r1, [pc, #68]	; 6a90 <_malloc_r+0x718>
    6a48:	e1530001 	cmp	r3, r1
    6a4c:	91a0a922 	lsrls	r10, r2, #18
    6a50:	928aa07c 	addls	r10, r10, #124	; 0x7c
    6a54:	91a0008a 	lslls	r0, r10, #1
    6a58:	83a000fc 	movhi	r0, #252	; 0xfc
    6a5c:	83a0a07e 	movhi	r10, #126	; 0x7e
    6a60:	eaffff75 	b	683c <_malloc_r+0x4c4>
    6a64:	e5973004 	ldr	r3, [r7, #4]
    6a68:	e1c33000 	bic	r3, r3, r0
    6a6c:	e5873004 	str	r3, [r7, #4]
    6a70:	eaffff9d 	b	68ec <_malloc_r+0x574>
    6a74:	e1a00080 	lsl	r0, r0, #1
    6a78:	e1130000 	tst	r3, r0
    6a7c:	e2844004 	add	r4, r4, #4
    6a80:	1affffa0 	bne	6908 <_malloc_r+0x590>
    6a84:	eafffffa 	b	6a74 <_malloc_r+0x6fc>
    6a88:	00125e18 	.word	0x00125e18
    6a8c:	00153fb0 	.word	0x00153fb0
    6a90:	00000554 	.word	0x00000554

00006a94 <__malloc_lock>:
    6a94:	e12fff1e 	bx	lr

00006a98 <__malloc_unlock>:
    6a98:	e12fff1e 	bx	lr

00006a9c <_sbrk_r>:
    6a9c:	e92d4038 	push	{r3, r4, r5, lr}
    6aa0:	e59f4030 	ldr	r4, [pc, #48]	; 6ad8 <_sbrk_r+0x3c>
    6aa4:	e3a03000 	mov	r3, #0
    6aa8:	e1a05000 	mov	r5, r0
    6aac:	e1a00001 	mov	r0, r1
    6ab0:	e5843000 	str	r3, [r4]
    6ab4:	eb0002a4 	bl	754c <_sbrk>
    6ab8:	e3700001 	cmn	r0, #1
    6abc:	0a000001 	beq	6ac8 <_sbrk_r+0x2c>
    6ac0:	e8bd4038 	pop	{r3, r4, r5, lr}
    6ac4:	e12fff1e 	bx	lr
    6ac8:	e5943000 	ldr	r3, [r4]
    6acc:	e3530000 	cmp	r3, #0
    6ad0:	15853000 	strne	r3, [r5]
    6ad4:	eafffff9 	b	6ac0 <_sbrk_r+0x24>
    6ad8:	00153fe4 	.word	0x00153fe4

00006adc <strcmp>:
    6adc:	e0202001 	eor	r2, r0, r1
    6ae0:	e3120003 	tst	r2, #3
    6ae4:	1a000021 	bne	6b70 <strcmp_unaligned>
    6ae8:	e2102003 	ands	r2, r0, #3
    6aec:	e3c00003 	bic	r0, r0, #3
    6af0:	e3c11003 	bic	r1, r1, #3
    6af4:	e490c004 	ldr	r12, [r0], #4
    6af8:	04913004 	ldreq	r3, [r1], #4
    6afc:	0a000006 	beq	6b1c <strcmp+0x40>
    6b00:	e2222003 	eor	r2, r2, #3
    6b04:	e1a02182 	lsl	r2, r2, #3
    6b08:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
    6b0c:	e1a02233 	lsr	r2, r3, r2
    6b10:	e4913004 	ldr	r3, [r1], #4
    6b14:	e18cc002 	orr	r12, r12, r2
    6b18:	e1833002 	orr	r3, r3, r2
    6b1c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    6b20:	e3a04001 	mov	r4, #1
    6b24:	e1844404 	orr	r4, r4, r4, lsl #8
    6b28:	e1844804 	orr	r4, r4, r4, lsl #16
    6b2c:	e04c2004 	sub	r2, r12, r4
    6b30:	e15c0003 	cmp	r12, r3
    6b34:	01c2200c 	biceq	r2, r2, r12
    6b38:	01120384 	tsteq	r2, r4, lsl #7
    6b3c:	0490c004 	ldreq	r12, [r0], #4
    6b40:	04913004 	ldreq	r3, [r1], #4
    6b44:	0afffff8 	beq	6b2c <strcmp+0x50>
    6b48:	e1a00c0c 	lsl	r0, r12, #24
    6b4c:	e1a0c42c 	lsr	r12, r12, #8
    6b50:	e3500001 	cmp	r0, #1
    6b54:	21500c03 	cmpcs	r0, r3, lsl #24
    6b58:	01a03423 	lsreq	r3, r3, #8
    6b5c:	0afffff9 	beq	6b48 <strcmp+0x6c>
    6b60:	e20330ff 	and	r3, r3, #255	; 0xff
    6b64:	e0630c20 	rsb	r0, r3, r0, lsr #24
    6b68:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    6b6c:	e12fff1e 	bx	lr

00006b70 <strcmp_unaligned>:
    6b70:	e3100003 	tst	r0, #3
    6b74:	0a000006 	beq	6b94 <strcmp_unaligned+0x24>
    6b78:	e4d02001 	ldrb	r2, [r0], #1
    6b7c:	e4d13001 	ldrb	r3, [r1], #1
    6b80:	e3520001 	cmp	r2, #1
    6b84:	21520003 	cmpcs	r2, r3
    6b88:	0afffff8 	beq	6b70 <strcmp_unaligned>
    6b8c:	e0420003 	sub	r0, r2, r3
    6b90:	e12fff1e 	bx	lr
    6b94:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)
    6b98:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    6b9c:	e3a02001 	mov	r2, #1
    6ba0:	e1822402 	orr	r2, r2, r2, lsl #8
    6ba4:	e1822802 	orr	r2, r2, r2, lsl #16
    6ba8:	e201c003 	and	r12, r1, #3
    6bac:	e3c11003 	bic	r1, r1, #3
    6bb0:	e4904004 	ldr	r4, [r0], #4
    6bb4:	e4915004 	ldr	r5, [r1], #4
    6bb8:	e35c0002 	cmp	r12, #2
    6bbc:	0a000017 	beq	6c20 <strcmp_unaligned+0xb0>
    6bc0:	8a00002d 	bhi	6c7c <strcmp_unaligned+0x10c>
    6bc4:	e3c4c4ff 	bic	r12, r4, #-16777216	; 0xff000000
    6bc8:	e15c0425 	cmp	r12, r5, lsr #8
    6bcc:	e0443002 	sub	r3, r4, r2
    6bd0:	e1c33004 	bic	r3, r3, r4
    6bd4:	1a000007 	bne	6bf8 <strcmp_unaligned+0x88>
    6bd8:	e0133382 	ands	r3, r3, r2, lsl #7
    6bdc:	04915004 	ldreq	r5, [r1], #4
    6be0:	1a000006 	bne	6c00 <strcmp_unaligned+0x90>
    6be4:	e02cc004 	eor	r12, r12, r4
    6be8:	e15c0c05 	cmp	r12, r5, lsl #24
    6bec:	1a000008 	bne	6c14 <strcmp_unaligned+0xa4>
    6bf0:	e4904004 	ldr	r4, [r0], #4
    6bf4:	eafffff2 	b	6bc4 <strcmp_unaligned+0x54>
    6bf8:	e1a05425 	lsr	r5, r5, #8
    6bfc:	ea000037 	b	6ce0 <strcmp_unaligned+0x170>
    6c00:	e3d334ff 	bics	r3, r3, #-16777216	; 0xff000000
    6c04:	1a000031 	bne	6cd0 <strcmp_unaligned+0x160>
    6c08:	e5d15000 	ldrb	r5, [r1]
    6c0c:	e1a0cc24 	lsr	r12, r4, #24
    6c10:	ea000032 	b	6ce0 <strcmp_unaligned+0x170>
    6c14:	e1a0cc24 	lsr	r12, r4, #24
    6c18:	e20550ff 	and	r5, r5, #255	; 0xff
    6c1c:	ea00002f 	b	6ce0 <strcmp_unaligned+0x170>
    6c20:	e1a0c804 	lsl	r12, r4, #16
    6c24:	e0443002 	sub	r3, r4, r2
    6c28:	e1a0c82c 	lsr	r12, r12, #16
    6c2c:	e1c33004 	bic	r3, r3, r4
    6c30:	e15c0825 	cmp	r12, r5, lsr #16
    6c34:	1a00000e 	bne	6c74 <strcmp_unaligned+0x104>
    6c38:	e0133382 	ands	r3, r3, r2, lsl #7
    6c3c:	04915004 	ldreq	r5, [r1], #4
    6c40:	1a000004 	bne	6c58 <strcmp_unaligned+0xe8>
    6c44:	e02cc004 	eor	r12, r12, r4
    6c48:	e15c0805 	cmp	r12, r5, lsl #16
    6c4c:	1a000006 	bne	6c6c <strcmp_unaligned+0xfc>
    6c50:	e4904004 	ldr	r4, [r0], #4
    6c54:	eafffff1 	b	6c20 <strcmp_unaligned+0xb0>
    6c58:	e1b03803 	lsls	r3, r3, #16
    6c5c:	1a00001b 	bne	6cd0 <strcmp_unaligned+0x160>
    6c60:	e1d150b0 	ldrh	r5, [r1]
    6c64:	e1a0c824 	lsr	r12, r4, #16
    6c68:	ea00001c 	b	6ce0 <strcmp_unaligned+0x170>
    6c6c:	e1a05805 	lsl	r5, r5, #16
    6c70:	e1a0c824 	lsr	r12, r4, #16
    6c74:	e1a05825 	lsr	r5, r5, #16
    6c78:	ea000018 	b	6ce0 <strcmp_unaligned+0x170>
    6c7c:	e204c0ff 	and	r12, r4, #255	; 0xff
    6c80:	e15c0c25 	cmp	r12, r5, lsr #24
    6c84:	e0443002 	sub	r3, r4, r2
    6c88:	e1c33004 	bic	r3, r3, r4
    6c8c:	1a000007 	bne	6cb0 <strcmp_unaligned+0x140>
    6c90:	e0133382 	ands	r3, r3, r2, lsl #7
    6c94:	04915004 	ldreq	r5, [r1], #4
    6c98:	1a000006 	bne	6cb8 <strcmp_unaligned+0x148>
    6c9c:	e02cc004 	eor	r12, r12, r4
    6ca0:	e15c0405 	cmp	r12, r5, lsl #8
    6ca4:	1a000006 	bne	6cc4 <strcmp_unaligned+0x154>
    6ca8:	e4904004 	ldr	r4, [r0], #4
    6cac:	eafffff2 	b	6c7c <strcmp_unaligned+0x10c>
    6cb0:	e1a05c25 	lsr	r5, r5, #24
    6cb4:	ea000009 	b	6ce0 <strcmp_unaligned+0x170>
    6cb8:	e31400ff 	tst	r4, #255	; 0xff
    6cbc:	0a000003 	beq	6cd0 <strcmp_unaligned+0x160>
    6cc0:	e4915004 	ldr	r5, [r1], #4
    6cc4:	e1a0c424 	lsr	r12, r4, #8
    6cc8:	e3c554ff 	bic	r5, r5, #-16777216	; 0xff000000
    6ccc:	ea000003 	b	6ce0 <strcmp_unaligned+0x170>
    6cd0:	e3a00000 	mov	r0, #0
    6cd4:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    6cd8:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    6cdc:	e12fff1e 	bx	lr
    6ce0:	e20c20ff 	and	r2, r12, #255	; 0xff
    6ce4:	e20500ff 	and	r0, r5, #255	; 0xff
    6ce8:	e3500001 	cmp	r0, #1
    6cec:	21500002 	cmpcs	r0, r2
    6cf0:	01a0c42c 	lsreq	r12, r12, #8
    6cf4:	01a05425 	lsreq	r5, r5, #8
    6cf8:	0afffff8 	beq	6ce0 <strcmp_unaligned+0x170>
    6cfc:	e0420000 	sub	r0, r2, r0
    6d00:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    6d04:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    6d08:	e12fff1e 	bx	lr

00006d0c <__register_exitproc>:
    6d0c:	e59fc0e4 	ldr	r12, [pc, #228]	; 6df8 <__register_exitproc+0xec>
    6d10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    6d14:	e59c4000 	ldr	r4, [r12]
    6d18:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    6d1c:	e35c0000 	cmp	r12, #0
    6d20:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    6d24:	e59c5004 	ldr	r5, [r12, #4]
    6d28:	0584c148 	streq	r12, [r4, #328]	; 0x148
    6d2c:	e355001f 	cmp	r5, #31
    6d30:	e24dd010 	sub	sp, sp, #16
    6d34:	e1a06000 	mov	r6, r0
    6d38:	da000015 	ble	6d94 <__register_exitproc+0x88>
    6d3c:	e59f00b8 	ldr	r0, [pc, #184]	; 6dfc <__register_exitproc+0xf0>
    6d40:	e3500000 	cmp	r0, #0
    6d44:	1a000001 	bne	6d50 <__register_exitproc+0x44>
    6d48:	e3e00000 	mvn	r0, #0
    6d4c:	ea000018 	b	6db4 <__register_exitproc+0xa8>
    6d50:	e3a00e19 	mov	r0, #400	; 0x190
    6d54:	e58d100c 	str	r1, [sp, #12]
    6d58:	e58d2008 	str	r2, [sp, #8]
    6d5c:	e58d3004 	str	r3, [sp, #4]
    6d60:	ebfffd74 	bl	6338 <malloc>
    6d64:	e250c000 	subs	r12, r0, #0
    6d68:	e59d100c 	ldr	r1, [sp, #12]
    6d6c:	e59d2008 	ldr	r2, [sp, #8]
    6d70:	e59d3004 	ldr	r3, [sp, #4]
    6d74:	0afffff3 	beq	6d48 <__register_exitproc+0x3c>
    6d78:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    6d7c:	e3a00000 	mov	r0, #0
    6d80:	e58c0004 	str	r0, [r12, #4]
    6d84:	e58c5000 	str	r5, [r12]
    6d88:	e584c148 	str	r12, [r4, #328]	; 0x148
    6d8c:	e58c0188 	str	r0, [r12, #392]	; 0x188
    6d90:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    6d94:	e3560000 	cmp	r6, #0
    6d98:	e59c4004 	ldr	r4, [r12, #4]
    6d9c:	1a000007 	bne	6dc0 <__register_exitproc+0xb4>
    6da0:	e2843002 	add	r3, r4, #2
    6da4:	e2844001 	add	r4, r4, #1
    6da8:	e78c1103 	str	r1, [r12, r3, lsl #2]
    6dac:	e58c4004 	str	r4, [r12, #4]
    6db0:	e3a00000 	mov	r0, #0
    6db4:	e28dd010 	add	sp, sp, #16
    6db8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    6dbc:	e12fff1e 	bx	lr
    6dc0:	e3a00001 	mov	r0, #1
    6dc4:	e1a00410 	lsl	r0, r0, r4
    6dc8:	e08c8104 	add	r8, r12, r4, lsl #2
    6dcc:	e3560002 	cmp	r6, #2
    6dd0:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    6dd4:	e5883108 	str	r3, [r8, #264]	; 0x108
    6dd8:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    6ddc:	e1877000 	orr	r7, r7, r0
    6de0:	01830000 	orreq	r0, r3, r0
    6de4:	e1a05008 	mov	r5, r8
    6de8:	e5882088 	str	r2, [r8, #136]	; 0x88
    6dec:	e58c7188 	str	r7, [r12, #392]	; 0x188
    6df0:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    6df4:	eaffffe9 	b	6da0 <__register_exitproc+0x94>
    6df8:	00007968 	.word	0x00007968
    6dfc:	00006338 	.word	0x00006338

00006e00 <__call_exitprocs>:
    6e00:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    6e04:	e59f3168 	ldr	r3, [pc, #360]	; 6f74 <__call_exitprocs+0x174>
    6e08:	e5933000 	ldr	r3, [r3]
    6e0c:	e24dd014 	sub	sp, sp, #20
    6e10:	e58d3004 	str	r3, [sp, #4]
    6e14:	e2833f52 	add	r3, r3, #328	; 0x148
    6e18:	e58d0008 	str	r0, [sp, #8]
    6e1c:	e58d300c 	str	r3, [sp, #12]
    6e20:	e1a07001 	mov	r7, r1
    6e24:	e3a08001 	mov	r8, #1
    6e28:	e59d3004 	ldr	r3, [sp, #4]
    6e2c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    6e30:	e3560000 	cmp	r6, #0
    6e34:	e59db00c 	ldr	r11, [sp, #12]
    6e38:	0a000033 	beq	6f0c <__call_exitprocs+0x10c>
    6e3c:	e5965004 	ldr	r5, [r6, #4]
    6e40:	e2554001 	subs	r4, r5, #1
    6e44:	5286a088 	addpl	r10, r6, #136	; 0x88
    6e48:	5285501f 	addpl	r5, r5, #31
    6e4c:	508a5105 	addpl	r5, r10, r5, lsl #2
    6e50:	5a000007 	bpl	6e74 <__call_exitprocs+0x74>
    6e54:	ea000029 	b	6f00 <__call_exitprocs+0x100>
    6e58:	e5953000 	ldr	r3, [r5]
    6e5c:	e1530007 	cmp	r3, r7
    6e60:	0a000005 	beq	6e7c <__call_exitprocs+0x7c>
    6e64:	e2444001 	sub	r4, r4, #1
    6e68:	e3740001 	cmn	r4, #1
    6e6c:	e2455004 	sub	r5, r5, #4
    6e70:	0a000022 	beq	6f00 <__call_exitprocs+0x100>
    6e74:	e3570000 	cmp	r7, #0
    6e78:	1afffff6 	bne	6e58 <__call_exitprocs+0x58>
    6e7c:	e5963004 	ldr	r3, [r6, #4]
    6e80:	e06a2005 	rsb	r2, r10, r5
    6e84:	e2433001 	sub	r3, r3, #1
    6e88:	e0862002 	add	r2, r6, r2
    6e8c:	e1530004 	cmp	r3, r4
    6e90:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    6e94:	13a01000 	movne	r1, #0
    6e98:	05864004 	streq	r4, [r6, #4]
    6e9c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    6ea0:	e3530000 	cmp	r3, #0
    6ea4:	0affffee 	beq	6e64 <__call_exitprocs+0x64>
    6ea8:	e1a02418 	lsl	r2, r8, r4
    6eac:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    6eb0:	e1120001 	tst	r2, r1
    6eb4:	e5969004 	ldr	r9, [r6, #4]
    6eb8:	0a000016 	beq	6f18 <__call_exitprocs+0x118>
    6ebc:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    6ec0:	e1120001 	tst	r2, r1
    6ec4:	1a000016 	bne	6f24 <__call_exitprocs+0x124>
    6ec8:	e59d0008 	ldr	r0, [sp, #8]
    6ecc:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    6ed0:	e1a0e00f 	mov	lr, pc
    6ed4:	e12fff13 	bx	r3
    6ed8:	e5963004 	ldr	r3, [r6, #4]
    6edc:	e1530009 	cmp	r3, r9
    6ee0:	1affffd0 	bne	6e28 <__call_exitprocs+0x28>
    6ee4:	e59b3000 	ldr	r3, [r11]
    6ee8:	e1530006 	cmp	r3, r6
    6eec:	1affffcd 	bne	6e28 <__call_exitprocs+0x28>
    6ef0:	e2444001 	sub	r4, r4, #1
    6ef4:	e3740001 	cmn	r4, #1
    6ef8:	e2455004 	sub	r5, r5, #4
    6efc:	1affffdc 	bne	6e74 <__call_exitprocs+0x74>
    6f00:	e59f1070 	ldr	r1, [pc, #112]	; 6f78 <__call_exitprocs+0x178>
    6f04:	e3510000 	cmp	r1, #0
    6f08:	1a000009 	bne	6f34 <__call_exitprocs+0x134>
    6f0c:	e28dd014 	add	sp, sp, #20
    6f10:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    6f14:	e12fff1e 	bx	lr
    6f18:	e1a0e00f 	mov	lr, pc
    6f1c:	e12fff13 	bx	r3
    6f20:	eaffffec 	b	6ed8 <__call_exitprocs+0xd8>
    6f24:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    6f28:	e1a0e00f 	mov	lr, pc
    6f2c:	e12fff13 	bx	r3
    6f30:	eaffffe8 	b	6ed8 <__call_exitprocs+0xd8>
    6f34:	e5963004 	ldr	r3, [r6, #4]
    6f38:	e3530000 	cmp	r3, #0
    6f3c:	e5963000 	ldr	r3, [r6]
    6f40:	1a000008 	bne	6f68 <__call_exitprocs+0x168>
    6f44:	e3530000 	cmp	r3, #0
    6f48:	0a000006 	beq	6f68 <__call_exitprocs+0x168>
    6f4c:	e1a00006 	mov	r0, r6
    6f50:	e58b3000 	str	r3, [r11]
    6f54:	ebfffcff 	bl	6358 <free>
    6f58:	e59b6000 	ldr	r6, [r11]
    6f5c:	e3560000 	cmp	r6, #0
    6f60:	1affffb5 	bne	6e3c <__call_exitprocs+0x3c>
    6f64:	eaffffe8 	b	6f0c <__call_exitprocs+0x10c>
    6f68:	e1a0b006 	mov	r11, r6
    6f6c:	e1a06003 	mov	r6, r3
    6f70:	eafffff9 	b	6f5c <__call_exitprocs+0x15c>
    6f74:	00007968 	.word	0x00007968
    6f78:	00006358 	.word	0x00006358

00006f7c <register_fini>:
    6f7c:	e92d4008 	push	{r3, lr}
    6f80:	e59f3010 	ldr	r3, [pc, #16]	; 6f98 <register_fini+0x1c>
    6f84:	e3530000 	cmp	r3, #0
    6f88:	159f000c 	ldrne	r0, [pc, #12]	; 6f9c <register_fini+0x20>
    6f8c:	1bfffcd0 	blne	62d4 <atexit>
    6f90:	e8bd4008 	pop	{r3, lr}
    6f94:	e12fff1e 	bx	lr
    6f98:	0000798c 	.word	0x0000798c
    6f9c:	00006fa0 	.word	0x00006fa0

00006fa0 <__libc_fini_array>:
    6fa0:	e92d4038 	push	{r3, r4, r5, lr}
    6fa4:	e59f5030 	ldr	r5, [pc, #48]	; 6fdc <__libc_fini_array+0x3c>
    6fa8:	e59f4030 	ldr	r4, [pc, #48]	; 6fe0 <__libc_fini_array+0x40>
    6fac:	e0654004 	rsb	r4, r5, r4
    6fb0:	e1b04144 	asrs	r4, r4, #2
    6fb4:	10855104 	addne	r5, r5, r4, lsl #2
    6fb8:	0a000004 	beq	6fd0 <__libc_fini_array+0x30>
    6fbc:	e5353004 	ldr	r3, [r5, #-4]!
    6fc0:	e1a0e00f 	mov	lr, pc
    6fc4:	e12fff13 	bx	r3
    6fc8:	e2544001 	subs	r4, r4, #1
    6fcc:	1afffffa 	bne	6fbc <__libc_fini_array+0x1c>
    6fd0:	eb00026d 	bl	798c <__libc_fini>
    6fd4:	e8bd4038 	pop	{r3, r4, r5, lr}
    6fd8:	e12fff1e 	bx	lr
    6fdc:	000079a4 	.word	0x000079a4
    6fe0:	000079a8 	.word	0x000079a8

00006fe4 <_malloc_trim_r>:
    6fe4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    6fe8:	e59f50e4 	ldr	r5, [pc, #228]	; 70d4 <_malloc_trim_r+0xf0>
    6fec:	e1a07001 	mov	r7, r1
    6ff0:	e1a04000 	mov	r4, r0
    6ff4:	ebfffea6 	bl	6a94 <__malloc_lock>
    6ff8:	e5953008 	ldr	r3, [r5, #8]
    6ffc:	e5936004 	ldr	r6, [r3, #4]
    7000:	e3c66003 	bic	r6, r6, #3
    7004:	e2863efe 	add	r3, r6, #4064	; 0xfe0
    7008:	e283300f 	add	r3, r3, #15
    700c:	e0677003 	rsb	r7, r7, r3
    7010:	e1a07627 	lsr	r7, r7, #12
    7014:	e2477001 	sub	r7, r7, #1
    7018:	e1a07607 	lsl	r7, r7, #12
    701c:	e3570a01 	cmp	r7, #4096	; 0x1000
    7020:	ba000006 	blt	7040 <_malloc_trim_r+0x5c>
    7024:	e1a00004 	mov	r0, r4
    7028:	e3a01000 	mov	r1, #0
    702c:	ebfffe9a 	bl	6a9c <_sbrk_r>
    7030:	e5953008 	ldr	r3, [r5, #8]
    7034:	e0833006 	add	r3, r3, r6
    7038:	e1500003 	cmp	r0, r3
    703c:	0a000004 	beq	7054 <_malloc_trim_r+0x70>
    7040:	e1a00004 	mov	r0, r4
    7044:	ebfffe93 	bl	6a98 <__malloc_unlock>
    7048:	e3a00000 	mov	r0, #0
    704c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    7050:	e12fff1e 	bx	lr
    7054:	e1a00004 	mov	r0, r4
    7058:	e2671000 	rsb	r1, r7, #0
    705c:	ebfffe8e 	bl	6a9c <_sbrk_r>
    7060:	e3700001 	cmn	r0, #1
    7064:	0a00000b 	beq	7098 <_malloc_trim_r+0xb4>
    7068:	e59f3068 	ldr	r3, [pc, #104]	; 70d8 <_malloc_trim_r+0xf4>
    706c:	e5952008 	ldr	r2, [r5, #8]
    7070:	e5931000 	ldr	r1, [r3]
    7074:	e0676006 	rsb	r6, r7, r6
    7078:	e3866001 	orr	r6, r6, #1
    707c:	e0677001 	rsb	r7, r7, r1
    7080:	e1a00004 	mov	r0, r4
    7084:	e5826004 	str	r6, [r2, #4]
    7088:	e5837000 	str	r7, [r3]
    708c:	ebfffe81 	bl	6a98 <__malloc_unlock>
    7090:	e3a00001 	mov	r0, #1
    7094:	eaffffec 	b	704c <_malloc_trim_r+0x68>
    7098:	e1a00004 	mov	r0, r4
    709c:	e3a01000 	mov	r1, #0
    70a0:	ebfffe7d 	bl	6a9c <_sbrk_r>
    70a4:	e5953008 	ldr	r3, [r5, #8]
    70a8:	e0632000 	rsb	r2, r3, r0
    70ac:	e352000f 	cmp	r2, #15
    70b0:	daffffe2 	ble	7040 <_malloc_trim_r+0x5c>
    70b4:	e59f1020 	ldr	r1, [pc, #32]	; 70dc <_malloc_trim_r+0xf8>
    70b8:	e5911000 	ldr	r1, [r1]
    70bc:	e0610000 	rsb	r0, r1, r0
    70c0:	e59f1010 	ldr	r1, [pc, #16]	; 70d8 <_malloc_trim_r+0xf4>
    70c4:	e3822001 	orr	r2, r2, #1
    70c8:	e5810000 	str	r0, [r1]
    70cc:	e5832004 	str	r2, [r3, #4]
    70d0:	eaffffda 	b	7040 <_malloc_trim_r+0x5c>
    70d4:	00125e18 	.word	0x00125e18
    70d8:	00153fb4 	.word	0x00153fb4
    70dc:	00126220 	.word	0x00126220

000070e0 <_free_r>:
    70e0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    70e4:	e2514000 	subs	r4, r1, #0
    70e8:	e1a06000 	mov	r6, r0
    70ec:	0a000046 	beq	720c <_free_r+0x12c>
    70f0:	ebfffe67 	bl	6a94 <__malloc_lock>
    70f4:	e514e004 	ldr	lr, [r4, #-4]
    70f8:	e59f1238 	ldr	r1, [pc, #568]	; 7338 <_free_r+0x258>
    70fc:	e244c008 	sub	r12, r4, #8
    7100:	e3ce3001 	bic	r3, lr, #1
    7104:	e08c2003 	add	r2, r12, r3
    7108:	e5910008 	ldr	r0, [r1, #8]
    710c:	e5925004 	ldr	r5, [r2, #4]
    7110:	e1500002 	cmp	r0, r2
    7114:	e3c55003 	bic	r5, r5, #3
    7118:	0a00004a 	beq	7248 <_free_r+0x168>
    711c:	e21ee001 	ands	lr, lr, #1
    7120:	e5825004 	str	r5, [r2, #4]
    7124:	13a0e000 	movne	lr, #0
    7128:	1a000009 	bne	7154 <_free_r+0x74>
    712c:	e5144008 	ldr	r4, [r4, #-8]
    7130:	e064c00c 	rsb	r12, r4, r12
    7134:	e59c0008 	ldr	r0, [r12, #8]
    7138:	e2817008 	add	r7, r1, #8
    713c:	e1500007 	cmp	r0, r7
    7140:	e0833004 	add	r3, r3, r4
    7144:	159c400c 	ldrne	r4, [r12, #12]
    7148:	1580400c 	strne	r4, [r0, #12]
    714c:	15840008 	strne	r0, [r4, #8]
    7150:	03a0e001 	moveq	lr, #1
    7154:	e0820005 	add	r0, r2, r5
    7158:	e5900004 	ldr	r0, [r0, #4]
    715c:	e3100001 	tst	r0, #1
    7160:	1a000009 	bne	718c <_free_r+0xac>
    7164:	e35e0000 	cmp	lr, #0
    7168:	e5920008 	ldr	r0, [r2, #8]
    716c:	e0833005 	add	r3, r3, r5
    7170:	1a000002 	bne	7180 <_free_r+0xa0>
    7174:	e59f41c0 	ldr	r4, [pc, #448]	; 733c <_free_r+0x25c>
    7178:	e1500004 	cmp	r0, r4
    717c:	0a000047 	beq	72a0 <_free_r+0x1c0>
    7180:	e592200c 	ldr	r2, [r2, #12]
    7184:	e580200c 	str	r2, [r0, #12]
    7188:	e5820008 	str	r0, [r2, #8]
    718c:	e3832001 	orr	r2, r3, #1
    7190:	e35e0000 	cmp	lr, #0
    7194:	e58c2004 	str	r2, [r12, #4]
    7198:	e78c3003 	str	r3, [r12, r3]
    719c:	1a000018 	bne	7204 <_free_r+0x124>
    71a0:	e3530c02 	cmp	r3, #512	; 0x200
    71a4:	3a00001a 	bcc	7214 <_free_r+0x134>
    71a8:	e1a024a3 	lsr	r2, r3, #9
    71ac:	e3520004 	cmp	r2, #4
    71b0:	8a000042 	bhi	72c0 <_free_r+0x1e0>
    71b4:	e1a0e323 	lsr	lr, r3, #6
    71b8:	e28ee038 	add	lr, lr, #56	; 0x38
    71bc:	e1a0008e 	lsl	r0, lr, #1
    71c0:	e0810100 	add	r0, r1, r0, lsl #2
    71c4:	e5902008 	ldr	r2, [r0, #8]
    71c8:	e1520000 	cmp	r2, r0
    71cc:	e59f1164 	ldr	r1, [pc, #356]	; 7338 <_free_r+0x258>
    71d0:	0a000044 	beq	72e8 <_free_r+0x208>
    71d4:	e5921004 	ldr	r1, [r2, #4]
    71d8:	e3c11003 	bic	r1, r1, #3
    71dc:	e1530001 	cmp	r3, r1
    71e0:	2a000002 	bcs	71f0 <_free_r+0x110>
    71e4:	e5922008 	ldr	r2, [r2, #8]
    71e8:	e1500002 	cmp	r0, r2
    71ec:	1afffff8 	bne	71d4 <_free_r+0xf4>
    71f0:	e592300c 	ldr	r3, [r2, #12]
    71f4:	e58c300c 	str	r3, [r12, #12]
    71f8:	e58c2008 	str	r2, [r12, #8]
    71fc:	e582c00c 	str	r12, [r2, #12]
    7200:	e583c008 	str	r12, [r3, #8]
    7204:	e1a00006 	mov	r0, r6
    7208:	ebfffe22 	bl	6a98 <__malloc_unlock>
    720c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    7210:	e12fff1e 	bx	lr
    7214:	e5912004 	ldr	r2, [r1, #4]
    7218:	e1a031a3 	lsr	r3, r3, #3
    721c:	e1a00143 	asr	r0, r3, #2
    7220:	e3a0e001 	mov	lr, #1
    7224:	e182001e 	orr	r0, r2, lr, lsl r0
    7228:	e0813183 	add	r3, r1, r3, lsl #3
    722c:	e5932008 	ldr	r2, [r3, #8]
    7230:	e58c300c 	str	r3, [r12, #12]
    7234:	e58c2008 	str	r2, [r12, #8]
    7238:	e5810004 	str	r0, [r1, #4]
    723c:	e583c008 	str	r12, [r3, #8]
    7240:	e582c00c 	str	r12, [r2, #12]
    7244:	eaffffee 	b	7204 <_free_r+0x124>
    7248:	e31e0001 	tst	lr, #1
    724c:	e0853003 	add	r3, r5, r3
    7250:	1a000006 	bne	7270 <_free_r+0x190>
    7254:	e5142008 	ldr	r2, [r4, #-8]
    7258:	e062c00c 	rsb	r12, r2, r12
    725c:	e59c000c 	ldr	r0, [r12, #12]
    7260:	e59ce008 	ldr	lr, [r12, #8]
    7264:	e58e000c 	str	r0, [lr, #12]
    7268:	e580e008 	str	lr, [r0, #8]
    726c:	e0833002 	add	r3, r3, r2
    7270:	e59f20c8 	ldr	r2, [pc, #200]	; 7340 <_free_r+0x260>
    7274:	e5920000 	ldr	r0, [r2]
    7278:	e3832001 	orr	r2, r3, #1
    727c:	e1530000 	cmp	r3, r0
    7280:	e58c2004 	str	r2, [r12, #4]
    7284:	e581c008 	str	r12, [r1, #8]
    7288:	3affffdd 	bcc	7204 <_free_r+0x124>
    728c:	e59f30b0 	ldr	r3, [pc, #176]	; 7344 <_free_r+0x264>
    7290:	e1a00006 	mov	r0, r6
    7294:	e5931000 	ldr	r1, [r3]
    7298:	ebffff51 	bl	6fe4 <_malloc_trim_r>
    729c:	eaffffd8 	b	7204 <_free_r+0x124>
    72a0:	e3832001 	orr	r2, r3, #1
    72a4:	e581c014 	str	r12, [r1, #20]
    72a8:	e581c010 	str	r12, [r1, #16]
    72ac:	e58c000c 	str	r0, [r12, #12]
    72b0:	e58c0008 	str	r0, [r12, #8]
    72b4:	e58c2004 	str	r2, [r12, #4]
    72b8:	e78c3003 	str	r3, [r12, r3]
    72bc:	eaffffd0 	b	7204 <_free_r+0x124>
    72c0:	e3520014 	cmp	r2, #20
    72c4:	9282e05b 	addls	lr, r2, #91	; 0x5b
    72c8:	91a0008e 	lslls	r0, lr, #1
    72cc:	9affffbb 	bls	71c0 <_free_r+0xe0>
    72d0:	e3520054 	cmp	r2, #84	; 0x54
    72d4:	8a00000a 	bhi	7304 <_free_r+0x224>
    72d8:	e1a0e623 	lsr	lr, r3, #12
    72dc:	e28ee06e 	add	lr, lr, #110	; 0x6e
    72e0:	e1a0008e 	lsl	r0, lr, #1
    72e4:	eaffffb5 	b	71c0 <_free_r+0xe0>
    72e8:	e5913004 	ldr	r3, [r1, #4]
    72ec:	e1a0e14e 	asr	lr, lr, #2
    72f0:	e3a00001 	mov	r0, #1
    72f4:	e1830e10 	orr	r0, r3, r0, lsl lr
    72f8:	e1a03002 	mov	r3, r2
    72fc:	e5810004 	str	r0, [r1, #4]
    7300:	eaffffbb 	b	71f4 <_free_r+0x114>
    7304:	e3520f55 	cmp	r2, #340	; 0x154
    7308:	91a0e7a3 	lsrls	lr, r3, #15
    730c:	928ee077 	addls	lr, lr, #119	; 0x77
    7310:	91a0008e 	lslls	r0, lr, #1
    7314:	9affffa9 	bls	71c0 <_free_r+0xe0>
    7318:	e59f0028 	ldr	r0, [pc, #40]	; 7348 <_free_r+0x268>
    731c:	e1520000 	cmp	r2, r0
    7320:	91a0e923 	lsrls	lr, r3, #18
    7324:	928ee07c 	addls	lr, lr, #124	; 0x7c
    7328:	91a0008e 	lslls	r0, lr, #1
    732c:	83a000fc 	movhi	r0, #252	; 0xfc
    7330:	83a0e07e 	movhi	lr, #126	; 0x7e
    7334:	eaffffa1 	b	71c0 <_free_r+0xe0>
    7338:	00125e18 	.word	0x00125e18
    733c:	00125e20 	.word	0x00125e20
    7340:	00126224 	.word	0x00126224
    7344:	00153fb0 	.word	0x00153fb0
    7348:	00000554 	.word	0x00000554

0000734c <cleanup_glue>:
    734c:	e92d4038 	push	{r3, r4, r5, lr}
    7350:	e1a04001 	mov	r4, r1
    7354:	e5911000 	ldr	r1, [r1]
    7358:	e3510000 	cmp	r1, #0
    735c:	e1a05000 	mov	r5, r0
    7360:	1bfffff9 	blne	734c <cleanup_glue>
    7364:	e1a00005 	mov	r0, r5
    7368:	e1a01004 	mov	r1, r4
    736c:	ebffff5b 	bl	70e0 <_free_r>
    7370:	e8bd4038 	pop	{r3, r4, r5, lr}
    7374:	e12fff1e 	bx	lr

00007378 <_reclaim_reent>:
    7378:	e59f30f0 	ldr	r3, [pc, #240]	; 7470 <_reclaim_reent+0xf8>
    737c:	e5933000 	ldr	r3, [r3]
    7380:	e1500003 	cmp	r0, r3
    7384:	e92d4070 	push	{r4, r5, r6, lr}
    7388:	e1a05000 	mov	r5, r0
    738c:	0a00002b 	beq	7440 <_reclaim_reent+0xc8>
    7390:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    7394:	e3520000 	cmp	r2, #0
    7398:	0a000011 	beq	73e4 <_reclaim_reent+0x6c>
    739c:	e3a03000 	mov	r3, #0
    73a0:	e1a06003 	mov	r6, r3
    73a4:	e7921103 	ldr	r1, [r2, r3, lsl #2]
    73a8:	e3510000 	cmp	r1, #0
    73ac:	0a000005 	beq	73c8 <_reclaim_reent+0x50>
    73b0:	e5914000 	ldr	r4, [r1]
    73b4:	e1a00005 	mov	r0, r5
    73b8:	ebffff48 	bl	70e0 <_free_r>
    73bc:	e2541000 	subs	r1, r4, #0
    73c0:	1afffffa 	bne	73b0 <_reclaim_reent+0x38>
    73c4:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    73c8:	e2866001 	add	r6, r6, #1
    73cc:	e3560020 	cmp	r6, #32
    73d0:	e1a03006 	mov	r3, r6
    73d4:	1afffff2 	bne	73a4 <_reclaim_reent+0x2c>
    73d8:	e1a00005 	mov	r0, r5
    73dc:	e1a01002 	mov	r1, r2
    73e0:	ebffff3e 	bl	70e0 <_free_r>
    73e4:	e5951040 	ldr	r1, [r5, #64]	; 0x40
    73e8:	e3510000 	cmp	r1, #0
    73ec:	11a00005 	movne	r0, r5
    73f0:	1bffff3a 	blne	70e0 <_free_r>
    73f4:	e5951148 	ldr	r1, [r5, #328]	; 0x148
    73f8:	e3510000 	cmp	r1, #0
    73fc:	0a000008 	beq	7424 <_reclaim_reent+0xac>
    7400:	e2856f53 	add	r6, r5, #332	; 0x14c
    7404:	e1510006 	cmp	r1, r6
    7408:	0a000005 	beq	7424 <_reclaim_reent+0xac>
    740c:	e5914000 	ldr	r4, [r1]
    7410:	e1a00005 	mov	r0, r5
    7414:	ebffff31 	bl	70e0 <_free_r>
    7418:	e1560004 	cmp	r6, r4
    741c:	e1a01004 	mov	r1, r4
    7420:	1afffff9 	bne	740c <_reclaim_reent+0x94>
    7424:	e5951054 	ldr	r1, [r5, #84]	; 0x54
    7428:	e3510000 	cmp	r1, #0
    742c:	11a00005 	movne	r0, r5
    7430:	1bffff2a 	blne	70e0 <_free_r>
    7434:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    7438:	e3530000 	cmp	r3, #0
    743c:	1a000001 	bne	7448 <_reclaim_reent+0xd0>
    7440:	e8bd4070 	pop	{r4, r5, r6, lr}
    7444:	e12fff1e 	bx	lr
    7448:	e1a00005 	mov	r0, r5
    744c:	e595c03c 	ldr	r12, [r5, #60]	; 0x3c
    7450:	e1a0e00f 	mov	lr, pc
    7454:	e12fff1c 	bx	r12
    7458:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
    745c:	e3510000 	cmp	r1, #0
    7460:	0afffff6 	beq	7440 <_reclaim_reent+0xc8>
    7464:	e1a00005 	mov	r0, r5
    7468:	e8bd4070 	pop	{r4, r5, r6, lr}
    746c:	eaffffb6 	b	734c <cleanup_glue>
    7470:	001259e8 	.word	0x001259e8

00007474 <_wrapup_reent>:
    7474:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    7478:	e2507000 	subs	r7, r0, #0
    747c:	059f3060 	ldreq	r3, [pc, #96]	; 74e4 <_wrapup_reent+0x70>
    7480:	05937000 	ldreq	r7, [r3]
    7484:	e5976148 	ldr	r6, [r7, #328]	; 0x148
    7488:	e3560000 	cmp	r6, #0
    748c:	0a00000d 	beq	74c8 <_wrapup_reent+0x54>
    7490:	e5965004 	ldr	r5, [r6, #4]
    7494:	e2554001 	subs	r4, r5, #1
    7498:	52855002 	addpl	r5, r5, #2
    749c:	50865105 	addpl	r5, r6, r5, lsl #2
    74a0:	4a000005 	bmi	74bc <_wrapup_reent+0x48>
    74a4:	e5353004 	ldr	r3, [r5, #-4]!
    74a8:	e2444001 	sub	r4, r4, #1
    74ac:	e1a0e00f 	mov	lr, pc
    74b0:	e12fff13 	bx	r3
    74b4:	e3740001 	cmn	r4, #1
    74b8:	1afffff9 	bne	74a4 <_wrapup_reent+0x30>
    74bc:	e5966000 	ldr	r6, [r6]
    74c0:	e3560000 	cmp	r6, #0
    74c4:	1afffff1 	bne	7490 <_wrapup_reent+0x1c>
    74c8:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
    74cc:	e3530000 	cmp	r3, #0
    74d0:	11a00007 	movne	r0, r7
    74d4:	11a0e00f 	movne	lr, pc
    74d8:	112fff13 	bxne	r3
    74dc:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    74e0:	e12fff1e 	bx	lr
    74e4:	001259e8 	.word	0x001259e8

000074e8 <__cs3_premain>:
    74e8:	e92d4008 	push	{r3, lr}
    74ec:	eb000033 	bl	75c0 <__libc_init_array>
    74f0:	e59f3030 	ldr	r3, [pc, #48]	; 7528 <__cs3_premain+0x40>
    74f4:	e3530000 	cmp	r3, #0
    74f8:	15930000 	ldrne	r0, [r3]
    74fc:	01a00003 	moveq	r0, r3
    7500:	e59f3024 	ldr	r3, [pc, #36]	; 752c <__cs3_premain+0x44>
    7504:	e3530000 	cmp	r3, #0
    7508:	15931000 	ldrne	r1, [r3]
    750c:	01a01003 	moveq	r1, r3
    7510:	e3a02000 	mov	r2, #0
    7514:	ebffe51d 	bl	990 <main>
    7518:	e59f3010 	ldr	r3, [pc, #16]	; 7530 <__cs3_premain+0x48>
    751c:	e3530000 	cmp	r3, #0
    7520:	1bfffb77 	blne	6304 <exit>
    7524:	eafffffe 	b	7524 <__cs3_premain+0x3c>
	...
    7530:	00006304 	.word	0x00006304

00007534 <_exit>:
    7534:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    7538:	e3a00018 	mov	r0, #24
    753c:	e59f1004 	ldr	r1, [pc, #4]	; 7548 <_exit+0x14>
    7540:	ef123456 	svc	0x00123456
    7544:	eafffffe 	b	7544 <_exit+0x10>
    7548:	00020026 	.word	0x00020026

0000754c <_sbrk>:
    754c:	e92d4008 	push	{r3, lr}
    7550:	e59f305c 	ldr	r3, [pc, #92]	; 75b4 <_sbrk+0x68>
    7554:	e59f105c 	ldr	r1, [pc, #92]	; 75b8 <_sbrk+0x6c>
    7558:	e5932000 	ldr	r2, [r3]
    755c:	e5913000 	ldr	r3, [r1]
    7560:	e3520000 	cmp	r2, #0
    7564:	e0830000 	add	r0, r3, r0
    7568:	0a000002 	beq	7578 <_sbrk+0x2c>
    756c:	e0602002 	rsb	r2, r0, r2
    7570:	e3520000 	cmp	r2, #0
    7574:	ba000009 	blt	75a0 <_sbrk+0x54>
    7578:	e04d2003 	sub	r2, sp, r3
    757c:	e3520000 	cmp	r2, #0
    7580:	ba000002 	blt	7590 <_sbrk+0x44>
    7584:	e04d2000 	sub	r2, sp, r0
    7588:	e35200ff 	cmp	r2, #255	; 0xff
    758c:	da000003 	ble	75a0 <_sbrk+0x54>
    7590:	e5810000 	str	r0, [r1]
    7594:	e1a00003 	mov	r0, r3
    7598:	e8bd4008 	pop	{r3, lr}
    759c:	e12fff1e 	bx	lr
    75a0:	ebfffb53 	bl	62f4 <__errno>
    75a4:	e3a0300c 	mov	r3, #12
    75a8:	e5803000 	str	r3, [r0]
    75ac:	e3e03000 	mvn	r3, #0
    75b0:	eafffff7 	b	7594 <_sbrk+0x48>
    75b4:	00126228 	.word	0x00126228
    75b8:	0012622c 	.word	0x0012622c

000075bc <__cs3_isr_interrupt>:
    75bc:	eafffffe 	b	75bc <__cs3_isr_interrupt>

000075c0 <__libc_init_array>:
    75c0:	e92d4070 	push	{r4, r5, r6, lr}
    75c4:	e59f506c 	ldr	r5, [pc, #108]	; 7638 <__libc_init_array+0x78>
    75c8:	e59f606c 	ldr	r6, [pc, #108]	; 763c <__libc_init_array+0x7c>
    75cc:	e0656006 	rsb	r6, r5, r6
    75d0:	e1b06146 	asrs	r6, r6, #2
    75d4:	12455004 	subne	r5, r5, #4
    75d8:	13a04000 	movne	r4, #0
    75dc:	0a000005 	beq	75f8 <__libc_init_array+0x38>
    75e0:	e5b53004 	ldr	r3, [r5, #4]!
    75e4:	e2844001 	add	r4, r4, #1
    75e8:	e1a0e00f 	mov	lr, pc
    75ec:	e12fff13 	bx	r3
    75f0:	e1560004 	cmp	r6, r4
    75f4:	1afffff9 	bne	75e0 <__libc_init_array+0x20>
    75f8:	e59f5040 	ldr	r5, [pc, #64]	; 7640 <__libc_init_array+0x80>
    75fc:	e59f6040 	ldr	r6, [pc, #64]	; 7644 <__libc_init_array+0x84>
    7600:	e0656006 	rsb	r6, r5, r6
    7604:	eb0000d8 	bl	796c <_init>
    7608:	e1b06146 	asrs	r6, r6, #2
    760c:	12455004 	subne	r5, r5, #4
    7610:	13a04000 	movne	r4, #0
    7614:	0a000005 	beq	7630 <__libc_init_array+0x70>
    7618:	e5b53004 	ldr	r3, [r5, #4]!
    761c:	e2844001 	add	r4, r4, #1
    7620:	e1a0e00f 	mov	lr, pc
    7624:	e12fff13 	bx	r3
    7628:	e1560004 	cmp	r6, r4
    762c:	1afffff9 	bne	7618 <__libc_init_array+0x58>
    7630:	e8bd4070 	pop	{r4, r5, r6, lr}
    7634:	e12fff1e 	bx	lr
    7638:	00007984 	.word	0x00007984
    763c:	00007984 	.word	0x00007984
    7640:	00007984 	.word	0x00007984
    7644:	0000798c 	.word	0x0000798c

Disassembly of section .rodata:

00007650 <seg7_codes>:
    7650:	4f5b063f 077d6d66 7c77677f 71795e39     ?.[Ofm}..gw|9^yq

00007660 <song_list>:
    7660:	000079cc 00000001 000079d8 00000001     .y.......y......
    7670:	000079e4 00000004 00007a14 0000000b     .y.......z......
    7680:	00007a98 00000003 00007abc 00000011     .z.......z......
    7690:	00007b88 00000003 00007bac 00000006     .{.......{......

000076a0 <volume_sensitivity>:
    76a0:	00000000 3ff80000                       .......?

000076a8 <default_volume>:
    76a8:	00000005                                ....

000076ac <min_volume>:
    76ac:	00000000                                ....

000076b0 <max_volume>:
    76b0:	0000000a                                ....

000076b4 <error_code>:
    76b4:	00000040 00000041 00007343 00000045     @...A...Cs..E...
    76c4:	00000053 00000042 00007344 00007346     S...B...Ds..Fs..
    76d4:	00000047 00000043 00000044 00000046     G...C...D...F...
    76e4:	00007341 00007347 00000000              As..Gs......

000076f0 <harmonic_intensities>:
    76f0:	00000000 3ff00000 00000000 3fe00000     .......?.......?
    7700:	00000000 3fd00000                       .......?

00007708 <num_harmonics>:
    7708:	00000000 3ff00000                       .......?

00007710 <default_amplitude>:
    7710:	c0000000 4150624d                       ....MbPA

00007718 <sampling_period>:
    7718:	d2f1a9fc 3f20624d                       ....Mb ?

00007720 <sampling_frequency>:
    7720:	00001f40 00000000                       @.......

00007728 <pi>:
    7728:	54442d18 400921fb 00006244 00006245     .-DT.!.@Db..Eb..
    7738:	00006247 00006241 00006242 00776f70     Gb..Ab..Bb..pow.

00007748 <bp>:
    7748:	00000000 3ff00000 00000000 3ff80000     .......?.......?

00007758 <dp_l>:
	...
    7760:	43cfd006 3e4cfdeb                       ...C..L>

00007768 <dp_h>:
	...
    7770:	40000000 3fe2b803 00000000              ...@...?....

0000777c <npio2_hw>:
    777c:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
    778c:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
    779c:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
    77ac:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
    77bc:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
    77cc:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
    77dc:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
    77ec:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

000077fc <two_over_pi>:
    77fc:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
    780c:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
    781c:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
    782c:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
    783c:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
    784c:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
    785c:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
    786c:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
    787c:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
    788c:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
    789c:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
    78ac:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
    78bc:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
    78cc:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
    78dc:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
    78ec:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
    78fc:	0060e27b 00c08c6b 00000000              {.`.k.......

00007908 <init_jk>:
    7908:	00000002 00000003 00000004 00000006     ................

00007918 <PIo2>:
    7918:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
    7928:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
    7938:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
    7948:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

00007958 <TWO52>:
    7958:	00000000 43300000 00000000 c3300000     ......0C......0.

00007968 <_global_impure_ptr>:
    7968:	001259f0                                .Y..

0000796c <_init>:
    796c:	e1a0c00d 	mov	r12, sp
    7970:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    7974:	e24cb004 	sub	r11, r12, #4
    7978:	e24bd028 	sub	sp, r11, #40	; 0x28
    797c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    7980:	e12fff1e 	bx	lr

00007984 <__init_array_start>:
    7984:	00006f7c 	.word	0x00006f7c

00007988 <__frame_dummy_init_array_entry>:
    7988:	00000208                                ....

0000798c <__libc_fini>:
    798c:	e1a0c00d 	mov	r12, sp
    7990:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    7994:	e24cb004 	sub	r11, r12, #4
    7998:	e24bd028 	sub	sp, r11, #40	; 0x28
    799c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    79a0:	e12fff1e 	bx	lr

000079a4 <__fini_array_start>:
    79a4:	000001c4 	.word	0x000001c4

000079a8 <__cs3_regions>:
    79a8:	00000000 	.word	0x00000000
    79ac:	00000040 	.word	0x00000040
    79b0:	00000040 	.word	0x00000040
    79b4:	001261f0 	.word	0x001261f0
    79b8:	0002ddb8 	.word	0x0002ddb8

000079bc <__cs3_regions_end>:
    79bc:	00000000 	.word	0x00000000
=======
    1eac:	e3a02000 	mov	r2, #0
    1eb0:	e3a03000 	mov	r3, #0
    1eb4:	e1cd20f8 	strd	r2, [sp, #8]
    1eb8:	e1a00002 	mov	r0, r2
    1ebc:	e1a01003 	mov	r1, r3
    1ec0:	eaffffe7 	b	1e64 <get_sample+0x104>
    1ec4:	00000000 	andeq	r0, r0, r0

00001ec8 <floor>:
    1ec8:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    1ecc:	e1a08081 	lsl	r8, r1, #1
    1ed0:	e1a08aa8 	lsr	r8, r8, #21
    1ed4:	e2486fff 	sub	r6, r8, #1020	; 0x3fc
    1ed8:	e2466003 	sub	r6, r6, #3
    1edc:	e3560013 	cmp	r6, #19
    1ee0:	e1a02000 	mov	r2, r0
    1ee4:	e1a03001 	mov	r3, r1
    1ee8:	e1a04000 	mov	r4, r0
    1eec:	e1a05001 	mov	r5, r1
    1ef0:	e1a07001 	mov	r7, r1
    1ef4:	ca000019 	bgt	1f60 <floor+0x98>
    1ef8:	e3560000 	cmp	r6, #0
    1efc:	ba000034 	blt	1fd4 <floor+0x10c>
    1f00:	e59f8150 	ldr	r8, [pc, #336]	; 2058 <floor+0x190>
    1f04:	e1a08658 	asr	r8, r8, r6
    1f08:	e008c001 	and	r12, r8, r1
    1f0c:	e19cc000 	orrs	r12, r12, r0
    1f10:	0a00000e 	beq	1f50 <floor+0x88>
    1f14:	e28f3f4d 	add	r3, pc, #308	; 0x134
    1f18:	e893000c 	ldm	r3, {r2, r3}
    1f1c:	eb000d36 	bl	53fc <__adddf3>
    1f20:	e3a02000 	mov	r2, #0
    1f24:	e3a03000 	mov	r3, #0
    1f28:	eb000fa9 	bl	5dd4 <__aeabi_dcmpgt>
    1f2c:	e3500000 	cmp	r0, #0
    1f30:	0a000004 	beq	1f48 <floor+0x80>
    1f34:	e3550000 	cmp	r5, #0
    1f38:	b3a03601 	movlt	r3, #1048576	; 0x100000
    1f3c:	b0855653 	addlt	r5, r5, r3, asr r6
    1f40:	e3a04000 	mov	r4, #0
    1f44:	e1c57008 	bic	r7, r5, r8
    1f48:	e1a03007 	mov	r3, r7
    1f4c:	e1a02004 	mov	r2, r4
    1f50:	e1a00002 	mov	r0, r2
    1f54:	e1a01003 	mov	r1, r3
    1f58:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    1f5c:	e12fff1e 	bx	lr
    1f60:	e3560033 	cmp	r6, #51	; 0x33
    1f64:	da000005 	ble	1f80 <floor+0xb8>
    1f68:	e3560b01 	cmp	r6, #1024	; 0x400
    1f6c:	1afffff7 	bne	1f50 <floor+0x88>
    1f70:	eb000d21 	bl	53fc <__adddf3>
    1f74:	e1a02000 	mov	r2, r0
    1f78:	e1a03001 	mov	r3, r1
    1f7c:	eafffff3 	b	1f50 <floor+0x88>
    1f80:	e248ae41 	sub	r10, r8, #1040	; 0x410
    1f84:	e24aa003 	sub	r10, r10, #3
    1f88:	e3e0c000 	mvn	r12, #0
    1f8c:	e1a0aa3c 	lsr	r10, r12, r10
    1f90:	e11a0000 	tst	r10, r0
    1f94:	0affffed 	beq	1f50 <floor+0x88>
    1f98:	e28f30b0 	add	r3, pc, #176	; 0xb0
    1f9c:	e893000c 	ldm	r3, {r2, r3}
    1fa0:	eb000d15 	bl	53fc <__adddf3>
    1fa4:	e3a02000 	mov	r2, #0
    1fa8:	e3a03000 	mov	r3, #0
    1fac:	eb000f88 	bl	5dd4 <__aeabi_dcmpgt>
    1fb0:	e3500000 	cmp	r0, #0
    1fb4:	0affffe3 	beq	1f48 <floor+0x80>
    1fb8:	e3550000 	cmp	r5, #0
    1fbc:	ba000017 	blt	2020 <floor+0x158>
    1fc0:	e1c4400a 	bic	r4, r4, r10
    1fc4:	e1a07005 	mov	r7, r5
    1fc8:	e1a03007 	mov	r3, r7
    1fcc:	e1a02004 	mov	r2, r4
    1fd0:	eaffffde 	b	1f50 <floor+0x88>
    1fd4:	e28f3074 	add	r3, pc, #116	; 0x74
    1fd8:	e893000c 	ldm	r3, {r2, r3}
    1fdc:	eb000d06 	bl	53fc <__adddf3>
    1fe0:	e3a02000 	mov	r2, #0
    1fe4:	e3a03000 	mov	r3, #0
    1fe8:	eb000f79 	bl	5dd4 <__aeabi_dcmpgt>
    1fec:	e3500000 	cmp	r0, #0
    1ff0:	0affffd4 	beq	1f48 <floor+0x80>
    1ff4:	e3550000 	cmp	r5, #0
    1ff8:	a3a04000 	movge	r4, #0
    1ffc:	a1a07004 	movge	r7, r4
    2000:	aaffffd0 	bge	1f48 <floor+0x80>
    2004:	e3c73102 	bic	r3, r7, #-2147483648	; 0x80000000
    2008:	e1833004 	orr	r3, r3, r4
    200c:	e3530000 	cmp	r3, #0
    2010:	e59f3044 	ldr	r3, [pc, #68]	; 205c <floor+0x194>
    2014:	13a04000 	movne	r4, #0
    2018:	11a07003 	movne	r7, r3
    201c:	eaffffc9 	b	1f48 <floor+0x80>
    2020:	e3560014 	cmp	r6, #20
    2024:	02855001 	addeq	r5, r5, #1
    2028:	0affffe4 	beq	1fc0 <floor+0xf8>
    202c:	e2688e43 	rsb	r8, r8, #1072	; 0x430
    2030:	e2888003 	add	r8, r8, #3
    2034:	e3a03001 	mov	r3, #1
    2038:	e0843813 	add	r3, r4, r3, lsl r8
    203c:	e1540003 	cmp	r4, r3
    2040:	82855001 	addhi	r5, r5, #1
    2044:	e1a04003 	mov	r4, r3
    2048:	eaffffdc 	b	1fc0 <floor+0xf8>
    204c:	e1a00000 	nop			; (mov r0, r0)
    2050:	8800759c 	.word	0x8800759c
    2054:	7e37e43c 	.word	0x7e37e43c
    2058:	000fffff 	.word	0x000fffff
    205c:	bff00000 	.word	0xbff00000

00002060 <sin>:
    2060:	e92d4030 	push	{r4, r5, lr}
    2064:	e59fe0ec 	ldr	lr, [pc, #236]	; 2158 <sin+0xf8>
    2068:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    206c:	e15c000e 	cmp	r12, lr
    2070:	e24dd01c 	sub	sp, sp, #28
    2074:	e1a02000 	mov	r2, r0
    2078:	e1a03001 	mov	r3, r1
    207c:	e1a04000 	mov	r4, r0
    2080:	e1a05001 	mov	r5, r1
    2084:	da000017 	ble	20e8 <sin+0x88>
    2088:	e59fe0cc 	ldr	lr, [pc, #204]	; 215c <sin+0xfc>
    208c:	e15c000e 	cmp	r12, lr
    2090:	da000003 	ble	20a4 <sin+0x44>
    2094:	eb000cd7 	bl	53f8 <__aeabi_dsub>
    2098:	e28dd01c 	add	sp, sp, #28
    209c:	e8bd4030 	pop	{r4, r5, lr}
    20a0:	e12fff1e 	bx	lr
    20a4:	e28d2008 	add	r2, sp, #8
    20a8:	eb00056c 	bl	3660 <__ieee754_rem_pio2>
    20ac:	e2000003 	and	r0, r0, #3
    20b0:	e3500001 	cmp	r0, #1
    20b4:	0a00001a 	beq	2124 <sin+0xc4>
    20b8:	e3500002 	cmp	r0, #2
    20bc:	0a00000f 	beq	2100 <sin+0xa0>
    20c0:	e3500000 	cmp	r0, #0
    20c4:	1a00001c 	bne	213c <sin+0xdc>
    20c8:	e3a03001 	mov	r3, #1
    20cc:	e58d3000 	str	r3, [sp]
    20d0:	e28d1008 	add	r1, sp, #8
    20d4:	e8910003 	ldm	r1, {r0, r1}
    20d8:	e28d3010 	add	r3, sp, #16
    20dc:	e893000c 	ldm	r3, {r2, r3}
    20e0:	eb000b3c 	bl	4dd8 <__kernel_sin>
    20e4:	eaffffeb 	b	2098 <sin+0x38>
    20e8:	e3a03000 	mov	r3, #0
    20ec:	e58d3000 	str	r3, [sp]
    20f0:	e3a02000 	mov	r2, #0
    20f4:	e3a03000 	mov	r3, #0
    20f8:	eb000b36 	bl	4dd8 <__kernel_sin>
    20fc:	eaffffe5 	b	2098 <sin+0x38>
    2100:	e3a03001 	mov	r3, #1
    2104:	e58d3000 	str	r3, [sp]
    2108:	e28d1008 	add	r1, sp, #8
    210c:	e8910003 	ldm	r1, {r0, r1}
    2110:	e28d3010 	add	r3, sp, #16
    2114:	e893000c 	ldm	r3, {r2, r3}
    2118:	eb000b2e 	bl	4dd8 <__kernel_sin>
    211c:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    2120:	eaffffdc 	b	2098 <sin+0x38>
    2124:	e28d1008 	add	r1, sp, #8
    2128:	e8910003 	ldm	r1, {r0, r1}
    212c:	e28d3010 	add	r3, sp, #16
    2130:	e893000c 	ldm	r3, {r2, r3}
    2134:	eb00076f 	bl	3ef8 <__kernel_cos>
    2138:	eaffffd6 	b	2098 <sin+0x38>
    213c:	e28d1008 	add	r1, sp, #8
    2140:	e8910003 	ldm	r1, {r0, r1}
    2144:	e28d3010 	add	r3, sp, #16
    2148:	e893000c 	ldm	r3, {r2, r3}
    214c:	eb000769 	bl	3ef8 <__kernel_cos>
    2150:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    2154:	eaffffcf 	b	2098 <sin+0x38>
    2158:	3fe921fb 	.word	0x3fe921fb
    215c:	7fefffff 	.word	0x7fefffff

00002160 <pow>:
    2160:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2164:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    2168:	e1a07003 	mov	r7, r3
    216c:	e1a08000 	mov	r8, r0
    2170:	e1a09001 	mov	r9, r1
    2174:	e1a06002 	mov	r6, r2
    2178:	eb000138 	bl	2660 <__ieee754_pow>
    217c:	e59fb4bc 	ldr	r11, [pc, #1212]	; 2640 <pow+0x4e0>
    2180:	e1db30d0 	ldrsb	r3, [r11]
    2184:	e3730001 	cmn	r3, #1
    2188:	e1a04000 	mov	r4, r0
    218c:	e1a05001 	mov	r5, r1
    2190:	0a000004 	beq	21a8 <pow+0x48>
    2194:	e1a00006 	mov	r0, r6
    2198:	e1a01007 	mov	r1, r7
    219c:	eb000b9b 	bl	5010 <__fpclassifyd>
    21a0:	e3500000 	cmp	r0, #0
    21a4:	1a000004 	bne	21bc <pow+0x5c>
    21a8:	e1a00004 	mov	r0, r4
    21ac:	e1a01005 	mov	r1, r5
    21b0:	e28dd02c 	add	sp, sp, #44	; 0x2c
    21b4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    21b8:	e12fff1e 	bx	lr
    21bc:	e1a00008 	mov	r0, r8
    21c0:	e1a01009 	mov	r1, r9
    21c4:	eb000b91 	bl	5010 <__fpclassifyd>
    21c8:	e250a000 	subs	r10, r0, #0
    21cc:	1a00001a 	bne	223c <pow+0xdc>
    21d0:	e1a00006 	mov	r0, r6
    21d4:	e1a01007 	mov	r1, r7
    21d8:	e3a02000 	mov	r2, #0
    21dc:	e3a03000 	mov	r3, #0
    21e0:	eb000ee3 	bl	5d74 <__aeabi_dcmpeq>
    21e4:	e3500000 	cmp	r0, #0
    21e8:	0affffee 	beq	21a8 <pow+0x48>
    21ec:	e1db30d0 	ldrsb	r3, [r11]
    21f0:	e3730001 	cmn	r3, #1
    21f4:	13530002 	cmpne	r3, #2
    21f8:	e3a03001 	mov	r3, #1
    21fc:	e58d3000 	str	r3, [sp]
    2200:	e59f343c 	ldr	r3, [pc, #1084]	; 2644 <pow+0x4e4>
    2204:	e58d3004 	str	r3, [sp, #4]
    2208:	e59f3438 	ldr	r3, [pc, #1080]	; 2648 <pow+0x4e8>
    220c:	e3a02000 	mov	r2, #0
    2210:	e58da020 	str	r10, [sp, #32]
    2214:	e58d8008 	str	r8, [sp, #8]
    2218:	e58d900c 	str	r9, [sp, #12]
    221c:	e58d6010 	str	r6, [sp, #16]
    2220:	e58d7014 	str	r7, [sp, #20]
    2224:	e58d2018 	str	r2, [sp, #24]
    2228:	e58d301c 	str	r3, [sp, #28]
    222c:	1a000025 	bne	22c8 <pow+0x168>
    2230:	e28d5018 	add	r5, sp, #24
    2234:	e8950030 	ldm	r5, {r4, r5}
    2238:	eaffffda 	b	21a8 <pow+0x48>
    223c:	e1a00008 	mov	r0, r8
    2240:	e1a01009 	mov	r1, r9
    2244:	e3a02000 	mov	r2, #0
    2248:	e3a03000 	mov	r3, #0
    224c:	eb000ec8 	bl	5d74 <__aeabi_dcmpeq>
    2250:	e3500000 	cmp	r0, #0
    2254:	0a000026 	beq	22f4 <pow+0x194>
    2258:	e1a00006 	mov	r0, r6
    225c:	e1a01007 	mov	r1, r7
    2260:	e3a02000 	mov	r2, #0
    2264:	e3a03000 	mov	r3, #0
    2268:	eb000ec1 	bl	5d74 <__aeabi_dcmpeq>
    226c:	e3500000 	cmp	r0, #0
    2270:	0a00004e 	beq	23b0 <pow+0x250>
    2274:	e1db30d0 	ldrsb	r3, [r11]
    2278:	e3530000 	cmp	r3, #0
    227c:	e3a03001 	mov	r3, #1
    2280:	e58d3000 	str	r3, [sp]
    2284:	e59f33b8 	ldr	r3, [pc, #952]	; 2644 <pow+0x4e4>
    2288:	e58d3004 	str	r3, [sp, #4]
    228c:	e3a03000 	mov	r3, #0
    2290:	e58d3020 	str	r3, [sp, #32]
    2294:	e3a04000 	mov	r4, #0
    2298:	e3a03000 	mov	r3, #0
    229c:	e58d8008 	str	r8, [sp, #8]
    22a0:	e58d900c 	str	r9, [sp, #12]
    22a4:	e58d6010 	str	r6, [sp, #16]
    22a8:	e58d7014 	str	r7, [sp, #20]
    22ac:	e58d3018 	str	r3, [sp, #24]
    22b0:	e58d401c 	str	r4, [sp, #28]
    22b4:	159f338c 	ldrne	r3, [pc, #908]	; 2648 <pow+0x4e8>
    22b8:	13a02000 	movne	r2, #0
    22bc:	158d2018 	strne	r2, [sp, #24]
    22c0:	158d301c 	strne	r3, [sp, #28]
    22c4:	1affffd9 	bne	2230 <pow+0xd0>
    22c8:	e1a0000d 	mov	r0, sp
    22cc:	eb000b6a 	bl	507c <matherr>
    22d0:	e3500000 	cmp	r0, #0
    22d4:	0a000058 	beq	243c <pow+0x2dc>
    22d8:	e59d3020 	ldr	r3, [sp, #32]
    22dc:	e3530000 	cmp	r3, #0
    22e0:	0affffd2 	beq	2230 <pow+0xd0>
    22e4:	eb000ef4 	bl	5ebc <__errno>
    22e8:	e59d3020 	ldr	r3, [sp, #32]
    22ec:	e5803000 	str	r3, [r0]
    22f0:	eaffffce 	b	2230 <pow+0xd0>
    22f4:	e1a00004 	mov	r0, r4
    22f8:	e1a01005 	mov	r1, r5
    22fc:	eb000b3f 	bl	5000 <finite>
    2300:	e250a000 	subs	r10, r0, #0
    2304:	0a000050 	beq	244c <pow+0x2ec>
    2308:	e1a00004 	mov	r0, r4
    230c:	e1a01005 	mov	r1, r5
    2310:	e3a02000 	mov	r2, #0
    2314:	e3a03000 	mov	r3, #0
    2318:	eb000e95 	bl	5d74 <__aeabi_dcmpeq>
    231c:	e3500000 	cmp	r0, #0
    2320:	0affffa0 	beq	21a8 <pow+0x48>
    2324:	e1a00008 	mov	r0, r8
    2328:	e1a01009 	mov	r1, r9
    232c:	eb000b33 	bl	5000 <finite>
    2330:	e3500000 	cmp	r0, #0
    2334:	0affff9b 	beq	21a8 <pow+0x48>
    2338:	e1a00006 	mov	r0, r6
    233c:	e1a01007 	mov	r1, r7
    2340:	eb000b2e 	bl	5000 <finite>
    2344:	e3500000 	cmp	r0, #0
    2348:	0affff96 	beq	21a8 <pow+0x48>
    234c:	e1db30d0 	ldrsb	r3, [r11]
    2350:	e3530002 	cmp	r3, #2
    2354:	e3a03004 	mov	r3, #4
    2358:	e58d3000 	str	r3, [sp]
    235c:	e59f32e0 	ldr	r3, [pc, #736]	; 2644 <pow+0x4e4>
    2360:	e58d3004 	str	r3, [sp, #4]
    2364:	e3a03000 	mov	r3, #0
    2368:	e58d3020 	str	r3, [sp, #32]
    236c:	e3a04000 	mov	r4, #0
    2370:	e3a03000 	mov	r3, #0
    2374:	e58d8008 	str	r8, [sp, #8]
    2378:	e58d900c 	str	r9, [sp, #12]
    237c:	e58d6010 	str	r6, [sp, #16]
    2380:	e58d7014 	str	r7, [sp, #20]
    2384:	e58d3018 	str	r3, [sp, #24]
    2388:	e58d401c 	str	r4, [sp, #28]
    238c:	0a00005c 	beq	2504 <pow+0x3a4>
    2390:	e1a0000d 	mov	r0, sp
    2394:	eb000b38 	bl	507c <matherr>
    2398:	e3500000 	cmp	r0, #0
    239c:	0a000058 	beq	2504 <pow+0x3a4>
    23a0:	e59d3020 	ldr	r3, [sp, #32]
    23a4:	e3530000 	cmp	r3, #0
    23a8:	0affffa0 	beq	2230 <pow+0xd0>
    23ac:	eaffffcc 	b	22e4 <pow+0x184>
    23b0:	e1a00006 	mov	r0, r6
    23b4:	e1a01007 	mov	r1, r7
    23b8:	eb000b10 	bl	5000 <finite>
    23bc:	e3500000 	cmp	r0, #0
    23c0:	0affff78 	beq	21a8 <pow+0x48>
    23c4:	e1a00006 	mov	r0, r6
    23c8:	e1a01007 	mov	r1, r7
    23cc:	e3a02000 	mov	r2, #0
    23d0:	e3a03000 	mov	r3, #0
    23d4:	eb000e6c 	bl	5d8c <__aeabi_dcmplt>
    23d8:	e3500000 	cmp	r0, #0
    23dc:	0affff71 	beq	21a8 <pow+0x48>
    23e0:	e3a02001 	mov	r2, #1
    23e4:	e5db3000 	ldrb	r3, [r11]
    23e8:	e58d2000 	str	r2, [sp]
    23ec:	e59f2250 	ldr	r2, [pc, #592]	; 2644 <pow+0x4e4>
    23f0:	e3530000 	cmp	r3, #0
    23f4:	e58d2004 	str	r2, [sp, #4]
    23f8:	e3a02000 	mov	r2, #0
    23fc:	e58d2020 	str	r2, [sp, #32]
    2400:	e58d8008 	str	r8, [sp, #8]
    2404:	e58d900c 	str	r9, [sp, #12]
    2408:	e58d6010 	str	r6, [sp, #16]
    240c:	e58d7014 	str	r7, [sp, #20]
    2410:	0a000036 	beq	24f0 <pow+0x390>
    2414:	e3530002 	cmp	r3, #2
    2418:	e59f322c 	ldr	r3, [pc, #556]	; 264c <pow+0x4ec>
    241c:	e3a02000 	mov	r2, #0
    2420:	e58d2018 	str	r2, [sp, #24]
    2424:	e58d301c 	str	r3, [sp, #28]
    2428:	1a00002b 	bne	24dc <pow+0x37c>
    242c:	eb000ea2 	bl	5ebc <__errno>
    2430:	e3a03021 	mov	r3, #33	; 0x21
    2434:	e5803000 	str	r3, [r0]
    2438:	eaffffd8 	b	23a0 <pow+0x240>
    243c:	eb000e9e 	bl	5ebc <__errno>
    2440:	e3a03021 	mov	r3, #33	; 0x21
    2444:	e5803000 	str	r3, [r0]
    2448:	eaffffa2 	b	22d8 <pow+0x178>
    244c:	e1a00008 	mov	r0, r8
    2450:	e1a01009 	mov	r1, r9
    2454:	eb000ae9 	bl	5000 <finite>
    2458:	e3500000 	cmp	r0, #0
    245c:	0affffa9 	beq	2308 <pow+0x1a8>
    2460:	e1a00006 	mov	r0, r6
    2464:	e1a01007 	mov	r1, r7
    2468:	eb000ae4 	bl	5000 <finite>
    246c:	e3500000 	cmp	r0, #0
    2470:	0affffa4 	beq	2308 <pow+0x1a8>
    2474:	e1a00004 	mov	r0, r4
    2478:	e1a01005 	mov	r1, r5
    247c:	eb000ae3 	bl	5010 <__fpclassifyd>
    2480:	e3500000 	cmp	r0, #0
    2484:	1a000022 	bne	2514 <pow+0x3b4>
    2488:	e3a03001 	mov	r3, #1
    248c:	e5db4000 	ldrb	r4, [r11]
    2490:	e58d3000 	str	r3, [sp]
    2494:	e59f31a8 	ldr	r3, [pc, #424]	; 2644 <pow+0x4e4>
    2498:	e3540000 	cmp	r4, #0
    249c:	e58d3004 	str	r3, [sp, #4]
    24a0:	e58d0020 	str	r0, [sp, #32]
    24a4:	e58d8008 	str	r8, [sp, #8]
    24a8:	e58d900c 	str	r9, [sp, #12]
    24ac:	e58d6010 	str	r6, [sp, #16]
    24b0:	e58d7014 	str	r7, [sp, #20]
    24b4:	0a00000d 	beq	24f0 <pow+0x390>
    24b8:	e3a00000 	mov	r0, #0
    24bc:	e3a01000 	mov	r1, #0
    24c0:	e1a02000 	mov	r2, r0
    24c4:	e1a03001 	mov	r3, r1
    24c8:	eb000d73 	bl	5a9c <__aeabi_ddiv>
    24cc:	e3540002 	cmp	r4, #2
    24d0:	e58d0018 	str	r0, [sp, #24]
    24d4:	e58d101c 	str	r1, [sp, #28]
    24d8:	0affffd3 	beq	242c <pow+0x2cc>
    24dc:	e1a0000d 	mov	r0, sp
    24e0:	eb000ae5 	bl	507c <matherr>
    24e4:	e3500000 	cmp	r0, #0
    24e8:	1affffac 	bne	23a0 <pow+0x240>
    24ec:	eaffffce 	b	242c <pow+0x2cc>
    24f0:	e3a03000 	mov	r3, #0
    24f4:	e3a04000 	mov	r4, #0
    24f8:	e58d3018 	str	r3, [sp, #24]
    24fc:	e58d401c 	str	r4, [sp, #28]
    2500:	eafffff5 	b	24dc <pow+0x37c>
    2504:	eb000e6c 	bl	5ebc <__errno>
    2508:	e3a03022 	mov	r3, #34	; 0x22
    250c:	e5803000 	str	r3, [r0]
    2510:	eaffffa2 	b	23a0 <pow+0x240>
    2514:	e1db20d0 	ldrsb	r2, [r11]
    2518:	e3520000 	cmp	r2, #0
    251c:	e3a02003 	mov	r2, #3
    2520:	e58d2000 	str	r2, [sp]
    2524:	e59f2118 	ldr	r2, [pc, #280]	; 2644 <pow+0x4e4>
    2528:	e1a00008 	mov	r0, r8
    252c:	e58d2004 	str	r2, [sp, #4]
    2530:	e1a01009 	mov	r1, r9
    2534:	e58da020 	str	r10, [sp, #32]
    2538:	e58d8008 	str	r8, [sp, #8]
    253c:	e58d900c 	str	r9, [sp, #12]
    2540:	e58d6010 	str	r6, [sp, #16]
    2544:	e58d7014 	str	r7, [sp, #20]
    2548:	e3a02000 	mov	r2, #0
    254c:	e3a03000 	mov	r3, #0
    2550:	1a000011 	bne	259c <pow+0x43c>
    2554:	e59f50f4 	ldr	r5, [pc, #244]	; 2650 <pow+0x4f0>
    2558:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    255c:	e58d4018 	str	r4, [sp, #24]
    2560:	e58d501c 	str	r5, [sp, #28]
    2564:	eb000e08 	bl	5d8c <__aeabi_dcmplt>
    2568:	e3500000 	cmp	r0, #0
    256c:	1a000022 	bne	25fc <pow+0x49c>
    2570:	e1db30d0 	ldrsb	r3, [r11]
    2574:	e3530002 	cmp	r3, #2
    2578:	0a000003 	beq	258c <pow+0x42c>
    257c:	e1a0000d 	mov	r0, sp
    2580:	eb000abd 	bl	507c <matherr>
    2584:	e3500000 	cmp	r0, #0
    2588:	1affff52 	bne	22d8 <pow+0x178>
    258c:	eb000e4a 	bl	5ebc <__errno>
    2590:	e3a03022 	mov	r3, #34	; 0x22
    2594:	e5803000 	str	r3, [r0]
    2598:	eaffff4e 	b	22d8 <pow+0x178>
    259c:	e59f50b0 	ldr	r5, [pc, #176]	; 2654 <pow+0x4f4>
    25a0:	e3a04000 	mov	r4, #0
    25a4:	e58d4018 	str	r4, [sp, #24]
    25a8:	e58d501c 	str	r5, [sp, #28]
    25ac:	eb000df6 	bl	5d8c <__aeabi_dcmplt>
    25b0:	e3500000 	cmp	r0, #0
    25b4:	0affffed 	beq	2570 <pow+0x410>
    25b8:	e3a02000 	mov	r2, #0
    25bc:	e59f3094 	ldr	r3, [pc, #148]	; 2658 <pow+0x4f8>
    25c0:	e1a00006 	mov	r0, r6
    25c4:	e1a01007 	mov	r1, r7
    25c8:	eb000c8f 	bl	580c <__aeabi_dmul>
    25cc:	e1a04000 	mov	r4, r0
    25d0:	e1a05001 	mov	r5, r1
    25d4:	eb000aae 	bl	5094 <rint>
    25d8:	e1a02004 	mov	r2, r4
    25dc:	e1a03005 	mov	r3, r5
    25e0:	eb000de3 	bl	5d74 <__aeabi_dcmpeq>
    25e4:	e3500000 	cmp	r0, #0
    25e8:	059f305c 	ldreq	r3, [pc, #92]	; 264c <pow+0x4ec>
    25ec:	03a02000 	moveq	r2, #0
    25f0:	058d2018 	streq	r2, [sp, #24]
    25f4:	058d301c 	streq	r3, [sp, #28]
    25f8:	eaffffdc 	b	2570 <pow+0x410>
    25fc:	e3a02000 	mov	r2, #0
    2600:	e59f3050 	ldr	r3, [pc, #80]	; 2658 <pow+0x4f8>
    2604:	e1a00006 	mov	r0, r6
    2608:	e1a01007 	mov	r1, r7
    260c:	eb000c7e 	bl	580c <__aeabi_dmul>
    2610:	e1a04000 	mov	r4, r0
    2614:	e1a05001 	mov	r5, r1
    2618:	eb000a9d 	bl	5094 <rint>
    261c:	e1a02004 	mov	r2, r4
    2620:	e1a03005 	mov	r3, r5
    2624:	eb000dd2 	bl	5d74 <__aeabi_dcmpeq>
    2628:	e3500000 	cmp	r0, #0
    262c:	059f3028 	ldreq	r3, [pc, #40]	; 265c <pow+0x4fc>
    2630:	03a0220e 	moveq	r2, #-536870912	; 0xe0000000
    2634:	058d2018 	streq	r2, [sp, #24]
    2638:	058d301c 	streq	r3, [sp, #28]
    263c:	eaffffcb 	b	2570 <pow+0x410>
    2640:	000e4c98 	.word	0x000e4c98
    2644:	00007304 	.word	0x00007304
    2648:	3ff00000 	.word	0x3ff00000
    264c:	fff00000 	.word	0xfff00000
    2650:	47efffff 	.word	0x47efffff
    2654:	7ff00000 	.word	0x7ff00000
    2658:	3fe00000 	.word	0x3fe00000
    265c:	c7efffff 	.word	0xc7efffff

00002660 <__ieee754_pow>:
    2660:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2664:	e1a0b003 	mov	r11, r3
    2668:	e1a0a002 	mov	r10, r2
    266c:	e3cb6102 	bic	r6, r11, #-2147483648	; 0x80000000
    2670:	e1a08001 	mov	r8, r1
    2674:	e24dd044 	sub	sp, sp, #68	; 0x44
    2678:	e196100a 	orrs	r1, r6, r10
    267c:	e1a04002 	mov	r4, r2
    2680:	e1a07000 	mov	r7, r0
    2684:	e1a05003 	mov	r5, r3
    2688:	e1a0c00a 	mov	r12, r10
    268c:	e58d8010 	str	r8, [sp, #16]
    2690:	e1a09000 	mov	r9, r0
    2694:	0a000060 	beq	281c <__ieee754_pow+0x1bc>
    2698:	e59f12d0 	ldr	r1, [pc, #720]	; 2970 <__ieee754_pow+0x310>
    269c:	e3c80102 	bic	r0, r8, #-2147483648	; 0x80000000
    26a0:	e1500001 	cmp	r0, r1
    26a4:	e58d0008 	str	r0, [sp, #8]
    26a8:	da00000b 	ble	26dc <__ieee754_pow+0x7c>
    26ac:	e59d4008 	ldr	r4, [sp, #8]
    26b0:	e284a103 	add	r10, r4, #-1073741824	; 0xc0000000
    26b4:	e28aa601 	add	r10, r10, #1048576	; 0x100000
    26b8:	e19a9009 	orrs	r9, r10, r9
    26bc:	01a0a009 	moveq	r10, r9
    26c0:	059fb2d4 	ldreq	r11, [pc, #724]	; 299c <__ieee754_pow+0x33c>
    26c4:	1a000057 	bne	2828 <__ieee754_pow+0x1c8>
    26c8:	e1a0000a 	mov	r0, r10
    26cc:	e1a0100b 	mov	r1, r11
    26d0:	e28dd044 	add	sp, sp, #68	; 0x44
    26d4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    26d8:	e12fff1e 	bx	lr
    26dc:	13a00000 	movne	r0, #0
    26e0:	03a00001 	moveq	r0, #1
    26e4:	e58d0018 	str	r0, [sp, #24]
    26e8:	e3570000 	cmp	r7, #0
    26ec:	03a00000 	moveq	r0, #0
    26f0:	12000001 	andne	r0, r0, #1
    26f4:	e3500000 	cmp	r0, #0
    26f8:	1affffeb 	bne	26ac <__ieee754_pow+0x4c>
    26fc:	e1560001 	cmp	r6, r1
    2700:	caffffe9 	bgt	26ac <__ieee754_pow+0x4c>
    2704:	13a01000 	movne	r1, #0
    2708:	03a01001 	moveq	r1, #1
    270c:	e58d1028 	str	r1, [sp, #40]	; 0x28
    2710:	e35a0000 	cmp	r10, #0
    2714:	03a01000 	moveq	r1, #0
    2718:	12011001 	andne	r1, r1, #1
    271c:	e3510000 	cmp	r1, #0
    2720:	1affffe1 	bne	26ac <__ieee754_pow+0x4c>
    2724:	e59d0010 	ldr	r0, [sp, #16]
    2728:	e3500000 	cmp	r0, #0
    272c:	e58d8020 	str	r8, [sp, #32]
    2730:	e1a0400b 	mov	r4, r11
    2734:	ba000040 	blt	283c <__ieee754_pow+0x1dc>
    2738:	e58d1030 	str	r1, [sp, #48]	; 0x30
    273c:	e35c0000 	cmp	r12, #0
    2740:	1a00000c 	bne	2778 <__ieee754_pow+0x118>
    2744:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    2748:	e3530000 	cmp	r3, #0
    274c:	1a00004e 	bne	288c <__ieee754_pow+0x22c>
    2750:	e59f3244 	ldr	r3, [pc, #580]	; 299c <__ieee754_pow+0x33c>
    2754:	e1560003 	cmp	r6, r3
    2758:	0a000073 	beq	292c <__ieee754_pow+0x2cc>
    275c:	e3540101 	cmp	r4, #1073741824	; 0x40000000
    2760:	01a00007 	moveq	r0, r7
    2764:	01a01008 	moveq	r1, r8
    2768:	0a000025 	beq	2804 <__ieee754_pow+0x1a4>
    276c:	e59f3200 	ldr	r3, [pc, #512]	; 2974 <__ieee754_pow+0x314>
    2770:	e1540003 	cmp	r4, r3
    2774:	0a0002c7 	beq	3298 <__ieee754_pow+0xc38>
    2778:	e1a00007 	mov	r0, r7
    277c:	e1a01008 	mov	r1, r8
    2780:	eb000a1c 	bl	4ff8 <fabs>
    2784:	e3590000 	cmp	r9, #0
    2788:	1a000008 	bne	27b0 <__ieee754_pow+0x150>
    278c:	e59d3018 	ldr	r3, [sp, #24]
    2790:	e59d2008 	ldr	r2, [sp, #8]
    2794:	e3520000 	cmp	r2, #0
    2798:	03833001 	orreq	r3, r3, #1
    279c:	e3530000 	cmp	r3, #0
    27a0:	1a000046 	bne	28c0 <__ieee754_pow+0x260>
    27a4:	e59f31f0 	ldr	r3, [pc, #496]	; 299c <__ieee754_pow+0x33c>
    27a8:	e1520003 	cmp	r2, r3
    27ac:	0a000043 	beq	28c0 <__ieee754_pow+0x260>
    27b0:	e59d2010 	ldr	r2, [sp, #16]
    27b4:	e1a03fa2 	lsr	r3, r2, #31
    27b8:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    27bc:	e2433001 	sub	r3, r3, #1
    27c0:	e1922003 	orrs	r2, r2, r3
    27c4:	e58d3010 	str	r3, [sp, #16]
    27c8:	0a000052 	beq	2918 <__ieee754_pow+0x2b8>
    27cc:	e59f31a4 	ldr	r3, [pc, #420]	; 2978 <__ieee754_pow+0x318>
    27d0:	e1560003 	cmp	r6, r3
    27d4:	da000071 	ble	29a0 <__ieee754_pow+0x340>
    27d8:	e2833621 	add	r3, r3, #34603008	; 0x2100000
    27dc:	e1560003 	cmp	r6, r3
    27e0:	da00030e 	ble	3420 <__ieee754_pow+0xdc0>
    27e4:	e59d0008 	ldr	r0, [sp, #8]
    27e8:	e2433341 	sub	r3, r3, #67108865	; 0x4000001
    27ec:	e1500003 	cmp	r0, r3
    27f0:	da0002b4 	ble	32c8 <__ieee754_pow+0xc68>
    27f4:	e3540000 	cmp	r4, #0
    27f8:	da00002d 	ble	28b4 <__ieee754_pow+0x254>
    27fc:	e28f1f59 	add	r1, pc, #356	; 0x164
    2800:	e8910003 	ldm	r1, {r0, r1}
    2804:	e1a02000 	mov	r2, r0
    2808:	e1a03001 	mov	r3, r1
    280c:	eb000bfe 	bl	580c <__aeabi_dmul>
    2810:	e1a0a000 	mov	r10, r0
    2814:	e1a0b001 	mov	r11, r1
    2818:	eaffffaa 	b	26c8 <__ieee754_pow+0x68>
    281c:	e1a0a001 	mov	r10, r1
    2820:	e59fb174 	ldr	r11, [pc, #372]	; 299c <__ieee754_pow+0x33c>
    2824:	eaffffa7 	b	26c8 <__ieee754_pow+0x68>
    2828:	e59f014c 	ldr	r0, [pc, #332]	; 297c <__ieee754_pow+0x31c>
    282c:	eb000a14 	bl	5084 <nan>
    2830:	e1a0a000 	mov	r10, r0
    2834:	e1a0b001 	mov	r11, r1
    2838:	eaffffa2 	b	26c8 <__ieee754_pow+0x68>
    283c:	e59f313c 	ldr	r3, [pc, #316]	; 2980 <__ieee754_pow+0x320>
    2840:	e1560003 	cmp	r6, r3
    2844:	ca000044 	bgt	295c <__ieee754_pow+0x2fc>
    2848:	e2433635 	sub	r3, r3, #55574528	; 0x3500000
    284c:	e1560003 	cmp	r6, r3
    2850:	daffffb8 	ble	2738 <__ieee754_pow+0xd8>
    2854:	e59f2128 	ldr	r2, [pc, #296]	; 2984 <__ieee754_pow+0x324>
    2858:	e1a03a46 	asr	r3, r6, #20
    285c:	e1530002 	cmp	r3, r2
    2860:	da00034b 	ble	3594 <__ieee754_pow+0xf34>
    2864:	e2633e43 	rsb	r3, r3, #1072	; 0x430
    2868:	e2832003 	add	r2, r3, #3
    286c:	e1a0323a 	lsr	r3, r10, r2
    2870:	e15a0213 	cmp	r10, r3, lsl r2
    2874:	02033001 	andeq	r3, r3, #1
    2878:	02633002 	rsbeq	r3, r3, #2
    287c:	058d3030 	streq	r3, [sp, #48]	; 0x30
    2880:	13a02000 	movne	r2, #0
    2884:	158d2030 	strne	r2, [sp, #48]	; 0x30
    2888:	eaffffab 	b	273c <__ieee754_pow+0xdc>
    288c:	e59d0008 	ldr	r0, [sp, #8]
    2890:	e2803103 	add	r3, r0, #-1073741824	; 0xc0000000
    2894:	e2833601 	add	r3, r3, #1048576	; 0x100000
    2898:	e1933009 	orrs	r3, r3, r9
    289c:	0a000286 	beq	32bc <__ieee754_pow+0xc5c>
    28a0:	e59f30e0 	ldr	r3, [pc, #224]	; 2988 <__ieee754_pow+0x328>
    28a4:	e1500003 	cmp	r0, r3
    28a8:	da0002c4 	ble	33c0 <__ieee754_pow+0xd60>
    28ac:	e3540000 	cmp	r4, #0
    28b0:	aaffff84 	bge	26c8 <__ieee754_pow+0x68>
    28b4:	e3a0a000 	mov	r10, #0
    28b8:	e1a0b00a 	mov	r11, r10
    28bc:	eaffff81 	b	26c8 <__ieee754_pow+0x68>
    28c0:	e3540000 	cmp	r4, #0
    28c4:	ba000321 	blt	3550 <__ieee754_pow+0xef0>
    28c8:	e59d4020 	ldr	r4, [sp, #32]
    28cc:	e3540000 	cmp	r4, #0
    28d0:	aaffffce 	bge	2810 <__ieee754_pow+0x1b0>
    28d4:	e59d4008 	ldr	r4, [sp, #8]
    28d8:	e2843103 	add	r3, r4, #-1073741824	; 0xc0000000
    28dc:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    28e0:	e2833601 	add	r3, r3, #1048576	; 0x100000
    28e4:	e1944003 	orrs	r4, r4, r3
    28e8:	1a000335 	bne	35c4 <__ieee754_pow+0xf64>
    28ec:	e1a04000 	mov	r4, r0
    28f0:	e1a02000 	mov	r2, r0
    28f4:	e1a05001 	mov	r5, r1
    28f8:	e1a03001 	mov	r3, r1
    28fc:	eb000abd 	bl	53f8 <__aeabi_dsub>
    2900:	e1a02000 	mov	r2, r0
    2904:	e1a03001 	mov	r3, r1
    2908:	eb000c63 	bl	5a9c <__aeabi_ddiv>
    290c:	e1a0a000 	mov	r10, r0
    2910:	e1a0b001 	mov	r11, r1
    2914:	eaffff6b 	b	26c8 <__ieee754_pow+0x68>
    2918:	e1a00007 	mov	r0, r7
    291c:	e1a01008 	mov	r1, r8
    2920:	e1a02007 	mov	r2, r7
    2924:	e1a03008 	mov	r3, r8
    2928:	eafffff3 	b	28fc <__ieee754_pow+0x29c>
    292c:	e3540000 	cmp	r4, #0
    2930:	a1a0a007 	movge	r10, r7
    2934:	a1a0b008 	movge	r11, r8
    2938:	aaffff62 	bge	26c8 <__ieee754_pow+0x68>
    293c:	e1a02007 	mov	r2, r7
    2940:	e1a03008 	mov	r3, r8
    2944:	e3a00000 	mov	r0, #0
    2948:	e59f104c 	ldr	r1, [pc, #76]	; 299c <__ieee754_pow+0x33c>
    294c:	eb000c52 	bl	5a9c <__aeabi_ddiv>
    2950:	e1a0a000 	mov	r10, r0
    2954:	e1a0b001 	mov	r11, r1
    2958:	eaffff5a 	b	26c8 <__ieee754_pow+0x68>
    295c:	e3a01002 	mov	r1, #2
    2960:	eaffff74 	b	2738 <__ieee754_pow+0xd8>
    2964:	e1a00000 	nop			; (mov r0, r0)
    2968:	8800759c 	.word	0x8800759c
    296c:	7e37e43c 	.word	0x7e37e43c
    2970:	7ff00000 	.word	0x7ff00000
    2974:	3fe00000 	.word	0x3fe00000
    2978:	41e00000 	.word	0x41e00000
    297c:	00007338 	.word	0x00007338
    2980:	433fffff 	.word	0x433fffff
    2984:	00000413 	.word	0x00000413
    2988:	3fefffff 	.word	0x3fefffff
    298c:	43400000 	.word	0x43400000
    2990:	0003988e 	.word	0x0003988e
    2994:	000bb679 	.word	0x000bb679
    2998:	00007308 	.word	0x00007308
    299c:	3ff00000 	.word	0x3ff00000
    29a0:	e59d4008 	ldr	r4, [sp, #8]
    29a4:	e3540601 	cmp	r4, #1048576	; 0x100000
    29a8:	a3a02000 	movge	r2, #0
    29ac:	aa000004 	bge	29c4 <__ieee754_pow+0x364>
    29b0:	e3a02000 	mov	r2, #0
    29b4:	e51f3030 	ldr	r3, [pc, #-48]	; 298c <__ieee754_pow+0x32c>
    29b8:	eb000b93 	bl	580c <__aeabi_dmul>
    29bc:	e58d1008 	str	r1, [sp, #8]
    29c0:	e3e02034 	mvn	r2, #52	; 0x34
    29c4:	e59d4008 	ldr	r4, [sp, #8]
    29c8:	e51fe040 	ldr	lr, [pc, #-64]	; 2990 <__ieee754_pow+0x330>
    29cc:	e3c434ff 	bic	r3, r4, #-16777216	; 0xff000000
    29d0:	e1a0ca44 	asr	r12, r4, #20
    29d4:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
    29d8:	e153000e 	cmp	r3, lr
    29dc:	e24ccfff 	sub	r12, r12, #1020	; 0x3fc
    29e0:	e24cc003 	sub	r12, r12, #3
    29e4:	e38345ff 	orr	r4, r3, #1069547520	; 0x3fc00000
    29e8:	d3a05000 	movle	r5, #0
    29ec:	e08cc002 	add	r12, r12, r2
    29f0:	e3844603 	orr	r4, r4, #3145728	; 0x300000
    29f4:	d1a0e005 	movle	lr, r5
    29f8:	da000007 	ble	2a1c <__ieee754_pow+0x3bc>
    29fc:	e51f2070 	ldr	r2, [pc, #-112]	; 2994 <__ieee754_pow+0x334>
    2a00:	e1530002 	cmp	r3, r2
    2a04:	c3a05000 	movgt	r5, #0
    2a08:	c28cc001 	addgt	r12, r12, #1
    2a0c:	c2444601 	subgt	r4, r4, #1048576	; 0x100000
    2a10:	c1a0e005 	movgt	lr, r5
    2a14:	d3a05701 	movle	r5, #262144	; 0x40000
    2a18:	d3a0e001 	movle	lr, #1
    2a1c:	e51f108c 	ldr	r1, [pc, #-140]	; 2998 <__ieee754_pow+0x338>
    2a20:	e081118e 	add	r1, r1, lr, lsl #3
    2a24:	e1a02000 	mov	r2, r0
    2a28:	e58d1034 	str	r1, [sp, #52]	; 0x34
    2a2c:	e8910003 	ldm	r1, {r0, r1}
    2a30:	e1a03004 	mov	r3, r4
    2a34:	e58d0028 	str	r0, [sp, #40]	; 0x28
    2a38:	e58d102c 	str	r1, [sp, #44]	; 0x2c
    2a3c:	e58d2020 	str	r2, [sp, #32]
    2a40:	e58d3024 	str	r3, [sp, #36]	; 0x24
    2a44:	e1a00002 	mov	r0, r2
    2a48:	e1a01004 	mov	r1, r4
    2a4c:	e28d3028 	add	r3, sp, #40	; 0x28
    2a50:	e893000c 	ldm	r3, {r2, r3}
    2a54:	e58dc004 	str	r12, [sp, #4]
    2a58:	eb000a66 	bl	53f8 <__aeabi_dsub>
    2a5c:	e28d3028 	add	r3, sp, #40	; 0x28
    2a60:	e893000c 	ldm	r3, {r2, r3}
    2a64:	e1a06000 	mov	r6, r0
    2a68:	e1a07001 	mov	r7, r1
    2a6c:	e28d1020 	add	r1, sp, #32
    2a70:	e8910003 	ldm	r1, {r0, r1}
    2a74:	eb000a60 	bl	53fc <__adddf3>
    2a78:	e1a02000 	mov	r2, r0
    2a7c:	e1a03001 	mov	r3, r1
    2a80:	e3a00000 	mov	r0, #0
    2a84:	e51f10f0 	ldr	r1, [pc, #-240]	; 299c <__ieee754_pow+0x33c>
    2a88:	eb000c03 	bl	5a9c <__aeabi_ddiv>
    2a8c:	e58d0038 	str	r0, [sp, #56]	; 0x38
    2a90:	e58d103c 	str	r1, [sp, #60]	; 0x3c
    2a94:	e28d3038 	add	r3, sp, #56	; 0x38
    2a98:	e893000c 	ldm	r3, {r2, r3}
    2a9c:	e1a00006 	mov	r0, r6
    2aa0:	e1a01007 	mov	r1, r7
    2aa4:	eb000b58 	bl	580c <__aeabi_dmul>
    2aa8:	e58d0018 	str	r0, [sp, #24]
    2aac:	e58d101c 	str	r1, [sp, #28]
    2ab0:	e28d3018 	add	r3, sp, #24
    2ab4:	e893000c 	ldm	r3, {r2, r3}
    2ab8:	e1a010c4 	asr	r1, r4, #1
    2abc:	e3a04000 	mov	r4, #0
    2ac0:	e58d2008 	str	r2, [sp, #8]
    2ac4:	e58d300c 	str	r3, [sp, #12]
    2ac8:	e58d4008 	str	r4, [sp, #8]
    2acc:	e28d9008 	add	r9, sp, #8
    2ad0:	e8990300 	ldm	r9, {r8, r9}
    2ad4:	e3811202 	orr	r1, r1, #536870912	; 0x20000000
    2ad8:	e2811702 	add	r1, r1, #524288	; 0x80000
    2adc:	e0853001 	add	r3, r5, r1
    2ae0:	e3a02000 	mov	r2, #0
    2ae4:	e1a00008 	mov	r0, r8
    2ae8:	e1a01009 	mov	r1, r9
    2aec:	e1a04002 	mov	r4, r2
    2af0:	e1a05003 	mov	r5, r3
    2af4:	eb000b44 	bl	580c <__aeabi_dmul>
    2af8:	e1a02000 	mov	r2, r0
    2afc:	e1a03001 	mov	r3, r1
    2b00:	e1a00006 	mov	r0, r6
    2b04:	e1a01007 	mov	r1, r7
    2b08:	eb000a3a 	bl	53f8 <__aeabi_dsub>
    2b0c:	e28d3028 	add	r3, sp, #40	; 0x28
    2b10:	e893000c 	ldm	r3, {r2, r3}
    2b14:	e1a06000 	mov	r6, r0
    2b18:	e1a07001 	mov	r7, r1
    2b1c:	e1a00004 	mov	r0, r4
    2b20:	e1a01005 	mov	r1, r5
    2b24:	eb000a33 	bl	53f8 <__aeabi_dsub>
    2b28:	e1a02000 	mov	r2, r0
    2b2c:	e1a03001 	mov	r3, r1
    2b30:	e28d1020 	add	r1, sp, #32
    2b34:	e8910003 	ldm	r1, {r0, r1}
    2b38:	eb000a2e 	bl	53f8 <__aeabi_dsub>
    2b3c:	e1a02000 	mov	r2, r0
    2b40:	e1a03001 	mov	r3, r1
    2b44:	e1a00008 	mov	r0, r8
    2b48:	e1a01009 	mov	r1, r9
    2b4c:	eb000b2e 	bl	580c <__aeabi_dmul>
    2b50:	e1a02000 	mov	r2, r0
    2b54:	e1a03001 	mov	r3, r1
    2b58:	e1a00006 	mov	r0, r6
    2b5c:	e1a01007 	mov	r1, r7
    2b60:	eb000a24 	bl	53f8 <__aeabi_dsub>
    2b64:	e28d3038 	add	r3, sp, #56	; 0x38
    2b68:	e893000c 	ldm	r3, {r2, r3}
    2b6c:	eb000b26 	bl	580c <__aeabi_dmul>
    2b70:	e1a06000 	mov	r6, r0
    2b74:	e1a07001 	mov	r7, r1
    2b78:	e28d1018 	add	r1, sp, #24
    2b7c:	e8910003 	ldm	r1, {r0, r1}
    2b80:	e1a02000 	mov	r2, r0
    2b84:	e1a03001 	mov	r3, r1
    2b88:	eb000b1f 	bl	580c <__aeabi_dmul>
    2b8c:	e1a02000 	mov	r2, r0
    2b90:	e1a03001 	mov	r3, r1
    2b94:	e1a04000 	mov	r4, r0
    2b98:	e1a05001 	mov	r5, r1
    2b9c:	eb000b1a 	bl	580c <__aeabi_dmul>
    2ba0:	e28f3e3f 	add	r3, pc, #1008	; 0x3f0
    2ba4:	e893000c 	ldm	r3, {r2, r3}
    2ba8:	e58d0020 	str	r0, [sp, #32]
    2bac:	e58d1024 	str	r1, [sp, #36]	; 0x24
    2bb0:	e1a00004 	mov	r0, r4
    2bb4:	e1a01005 	mov	r1, r5
    2bb8:	eb000b13 	bl	580c <__aeabi_dmul>
    2bbc:	e28f3ff7 	add	r3, pc, #988	; 0x3dc
    2bc0:	e893000c 	ldm	r3, {r2, r3}
    2bc4:	eb000a0c 	bl	53fc <__adddf3>
    2bc8:	e1a02004 	mov	r2, r4
    2bcc:	e1a03005 	mov	r3, r5
    2bd0:	eb000b0d 	bl	580c <__aeabi_dmul>
    2bd4:	e28f3ff3 	add	r3, pc, #972	; 0x3cc
    2bd8:	e893000c 	ldm	r3, {r2, r3}
    2bdc:	eb000a06 	bl	53fc <__adddf3>
    2be0:	e1a02004 	mov	r2, r4
    2be4:	e1a03005 	mov	r3, r5
    2be8:	eb000b07 	bl	580c <__aeabi_dmul>
    2bec:	e28f3fef 	add	r3, pc, #956	; 0x3bc
    2bf0:	e893000c 	ldm	r3, {r2, r3}
    2bf4:	eb000a00 	bl	53fc <__adddf3>
    2bf8:	e1a02004 	mov	r2, r4
    2bfc:	e1a03005 	mov	r3, r5
    2c00:	eb000b01 	bl	580c <__aeabi_dmul>
    2c04:	e28f3feb 	add	r3, pc, #940	; 0x3ac
    2c08:	e893000c 	ldm	r3, {r2, r3}
    2c0c:	eb0009fa 	bl	53fc <__adddf3>
    2c10:	e1a02004 	mov	r2, r4
    2c14:	e1a03005 	mov	r3, r5
    2c18:	eb000afb 	bl	580c <__aeabi_dmul>
    2c1c:	e28f3fe7 	add	r3, pc, #924	; 0x39c
    2c20:	e893000c 	ldm	r3, {r2, r3}
    2c24:	eb0009f4 	bl	53fc <__adddf3>
    2c28:	e1a02000 	mov	r2, r0
    2c2c:	e1a03001 	mov	r3, r1
    2c30:	e28d1020 	add	r1, sp, #32
    2c34:	e8910003 	ldm	r1, {r0, r1}
    2c38:	eb000af3 	bl	580c <__aeabi_dmul>
    2c3c:	e28d3018 	add	r3, sp, #24
    2c40:	e893000c 	ldm	r3, {r2, r3}
    2c44:	e1a04000 	mov	r4, r0
    2c48:	e1a05001 	mov	r5, r1
    2c4c:	e1a00008 	mov	r0, r8
    2c50:	e1a01009 	mov	r1, r9
    2c54:	eb0009e8 	bl	53fc <__adddf3>
    2c58:	e1a02006 	mov	r2, r6
    2c5c:	e1a03007 	mov	r3, r7
    2c60:	eb000ae9 	bl	580c <__aeabi_dmul>
    2c64:	e1a02004 	mov	r2, r4
    2c68:	e1a03005 	mov	r3, r5
    2c6c:	eb0009e2 	bl	53fc <__adddf3>
    2c70:	e1a02008 	mov	r2, r8
    2c74:	e58d0020 	str	r0, [sp, #32]
    2c78:	e58d1024 	str	r1, [sp, #36]	; 0x24
    2c7c:	e1a03009 	mov	r3, r9
    2c80:	e1a00008 	mov	r0, r8
    2c84:	e1a01009 	mov	r1, r9
    2c88:	eb000adf 	bl	580c <__aeabi_dmul>
    2c8c:	e3a02000 	mov	r2, #0
    2c90:	e59f3348 	ldr	r3, [pc, #840]	; 2fe0 <__ieee754_pow+0x980>
    2c94:	e58d0028 	str	r0, [sp, #40]	; 0x28
    2c98:	e58d102c 	str	r1, [sp, #44]	; 0x2c
    2c9c:	eb0009d6 	bl	53fc <__adddf3>
    2ca0:	e28d3020 	add	r3, sp, #32
    2ca4:	e893000c 	ldm	r3, {r2, r3}
    2ca8:	eb0009d3 	bl	53fc <__adddf3>
    2cac:	e59de008 	ldr	lr, [sp, #8]
    2cb0:	e1a05001 	mov	r5, r1
    2cb4:	e1a0200e 	mov	r2, lr
    2cb8:	e1a03005 	mov	r3, r5
    2cbc:	e1a00008 	mov	r0, r8
    2cc0:	e1a01009 	mov	r1, r9
    2cc4:	e1a0400e 	mov	r4, lr
    2cc8:	eb000acf 	bl	580c <__aeabi_dmul>
    2ccc:	e1a02004 	mov	r2, r4
    2cd0:	e1a08000 	mov	r8, r0
    2cd4:	e1a09001 	mov	r9, r1
    2cd8:	e1a03005 	mov	r3, r5
    2cdc:	e1a00006 	mov	r0, r6
    2ce0:	e1a01007 	mov	r1, r7
    2ce4:	eb000ac8 	bl	580c <__aeabi_dmul>
    2ce8:	e3a02000 	mov	r2, #0
    2cec:	e1a06000 	mov	r6, r0
    2cf0:	e1a07001 	mov	r7, r1
    2cf4:	e1a00004 	mov	r0, r4
    2cf8:	e1a01005 	mov	r1, r5
    2cfc:	e59f32dc 	ldr	r3, [pc, #732]	; 2fe0 <__ieee754_pow+0x980>
    2d00:	eb0009bc 	bl	53f8 <__aeabi_dsub>
    2d04:	e28d3028 	add	r3, sp, #40	; 0x28
    2d08:	e893000c 	ldm	r3, {r2, r3}
    2d0c:	eb0009b9 	bl	53f8 <__aeabi_dsub>
    2d10:	e1a02000 	mov	r2, r0
    2d14:	e1a03001 	mov	r3, r1
    2d18:	e28d1020 	add	r1, sp, #32
    2d1c:	e8910003 	ldm	r1, {r0, r1}
    2d20:	eb0009b4 	bl	53f8 <__aeabi_dsub>
    2d24:	e28d3018 	add	r3, sp, #24
    2d28:	e893000c 	ldm	r3, {r2, r3}
    2d2c:	eb000ab6 	bl	580c <__aeabi_dmul>
    2d30:	e1a02000 	mov	r2, r0
    2d34:	e1a03001 	mov	r3, r1
    2d38:	e1a00006 	mov	r0, r6
    2d3c:	e1a01007 	mov	r1, r7
    2d40:	eb0009ad 	bl	53fc <__adddf3>
    2d44:	e1a06000 	mov	r6, r0
    2d48:	e1a07001 	mov	r7, r1
    2d4c:	e1a02006 	mov	r2, r6
    2d50:	e1a03007 	mov	r3, r7
    2d54:	e1a00008 	mov	r0, r8
    2d58:	e1a01009 	mov	r1, r9
    2d5c:	eb0009a6 	bl	53fc <__adddf3>
    2d60:	e59d2008 	ldr	r2, [sp, #8]
    2d64:	e59f3278 	ldr	r3, [pc, #632]	; 2fe4 <__ieee754_pow+0x984>
    2d68:	e1a04002 	mov	r4, r2
    2d6c:	e1a00002 	mov	r0, r2
    2d70:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    2d74:	e1a05001 	mov	r5, r1
    2d78:	eb000aa3 	bl	580c <__aeabi_dmul>
    2d7c:	e28f3f91 	add	r3, pc, #580	; 0x244
    2d80:	e893000c 	ldm	r3, {r2, r3}
    2d84:	e58d0018 	str	r0, [sp, #24]
    2d88:	e58d101c 	str	r1, [sp, #28]
    2d8c:	e1a00004 	mov	r0, r4
    2d90:	e1a01005 	mov	r1, r5
    2d94:	eb000a9c 	bl	580c <__aeabi_dmul>
    2d98:	e1a02008 	mov	r2, r8
    2d9c:	e58d0020 	str	r0, [sp, #32]
    2da0:	e58d1024 	str	r1, [sp, #36]	; 0x24
    2da4:	e1a03009 	mov	r3, r9
    2da8:	e1a00004 	mov	r0, r4
    2dac:	e1a01005 	mov	r1, r5
    2db0:	eb000990 	bl	53f8 <__aeabi_dsub>
    2db4:	e1a02000 	mov	r2, r0
    2db8:	e1a03001 	mov	r3, r1
    2dbc:	e1a00006 	mov	r0, r6
    2dc0:	e1a01007 	mov	r1, r7
    2dc4:	eb00098b 	bl	53f8 <__aeabi_dsub>
    2dc8:	e28f3c02 	add	r3, pc, #512	; 0x200
    2dcc:	e893000c 	ldm	r3, {r2, r3}
    2dd0:	eb000a8d 	bl	580c <__aeabi_dmul>
    2dd4:	e1a02000 	mov	r2, r0
    2dd8:	e1a03001 	mov	r3, r1
    2ddc:	e28d1020 	add	r1, sp, #32
    2de0:	e8910003 	ldm	r1, {r0, r1}
    2de4:	eb000984 	bl	53fc <__adddf3>
    2de8:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
    2dec:	e2843010 	add	r3, r4, #16
    2df0:	e893000c 	ldm	r3, {r2, r3}
    2df4:	eb000980 	bl	53fc <__adddf3>
    2df8:	e59dc004 	ldr	r12, [sp, #4]
    2dfc:	e1a04000 	mov	r4, r0
    2e00:	e1a0000c 	mov	r0, r12
    2e04:	e1a05001 	mov	r5, r1
    2e08:	eb000a48 	bl	5730 <__aeabi_i2d>
    2e0c:	e59de034 	ldr	lr, [sp, #52]	; 0x34
    2e10:	e28e9020 	add	r9, lr, #32
    2e14:	e8990300 	ldm	r9, {r8, r9}
    2e18:	e1a06000 	mov	r6, r0
    2e1c:	e1a07001 	mov	r7, r1
    2e20:	e1a02004 	mov	r2, r4
    2e24:	e28d1018 	add	r1, sp, #24
    2e28:	e8910003 	ldm	r1, {r0, r1}
    2e2c:	e1a03005 	mov	r3, r5
    2e30:	eb000971 	bl	53fc <__adddf3>
    2e34:	e1a02008 	mov	r2, r8
    2e38:	e1a03009 	mov	r3, r9
    2e3c:	eb00096e 	bl	53fc <__adddf3>
    2e40:	e1a02006 	mov	r2, r6
    2e44:	e1a03007 	mov	r3, r7
    2e48:	eb00096b 	bl	53fc <__adddf3>
    2e4c:	e59d2008 	ldr	r2, [sp, #8]
    2e50:	e1a03007 	mov	r3, r7
    2e54:	e1a00002 	mov	r0, r2
    2e58:	e1a02006 	mov	r2, r6
    2e5c:	e58d0008 	str	r0, [sp, #8]
    2e60:	e58d100c 	str	r1, [sp, #12]
    2e64:	eb000963 	bl	53f8 <__aeabi_dsub>
    2e68:	e1a02008 	mov	r2, r8
    2e6c:	e1a03009 	mov	r3, r9
    2e70:	eb000960 	bl	53f8 <__aeabi_dsub>
    2e74:	e28d3018 	add	r3, sp, #24
    2e78:	e893000c 	ldm	r3, {r2, r3}
    2e7c:	eb00095d 	bl	53f8 <__aeabi_dsub>
    2e80:	e1a03001 	mov	r3, r1
    2e84:	e1a02000 	mov	r2, r0
    2e88:	e1a01005 	mov	r1, r5
    2e8c:	e1a00004 	mov	r0, r4
    2e90:	eb000958 	bl	53f8 <__aeabi_dsub>
    2e94:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    2e98:	e2443001 	sub	r3, r4, #1
    2e9c:	e59d4010 	ldr	r4, [sp, #16]
    2ea0:	e1934004 	orrs	r4, r3, r4
    2ea4:	e1a08000 	mov	r8, r0
    2ea8:	e1a09001 	mov	r9, r1
    2eac:	1a00013e 	bne	33ac <__ieee754_pow+0xd4c>
    2eb0:	e59f1130 	ldr	r1, [pc, #304]	; 2fe8 <__ieee754_pow+0x988>
    2eb4:	e3a00000 	mov	r0, #0
    2eb8:	e58d0010 	str	r0, [sp, #16]
    2ebc:	e58d1014 	str	r1, [sp, #20]
    2ec0:	e3a06000 	mov	r6, #0
    2ec4:	e1a02006 	mov	r2, r6
    2ec8:	e1a0300b 	mov	r3, r11
    2ecc:	e1a0000a 	mov	r0, r10
    2ed0:	e1a0100b 	mov	r1, r11
    2ed4:	eb000947 	bl	53f8 <__aeabi_dsub>
    2ed8:	e28d3008 	add	r3, sp, #8
    2edc:	e893000c 	ldm	r3, {r2, r3}
    2ee0:	eb000a49 	bl	580c <__aeabi_dmul>
    2ee4:	e1a03009 	mov	r3, r9
    2ee8:	e1a04000 	mov	r4, r0
    2eec:	e1a05001 	mov	r5, r1
    2ef0:	e1a0000a 	mov	r0, r10
    2ef4:	e1a0100b 	mov	r1, r11
    2ef8:	e1a02008 	mov	r2, r8
    2efc:	eb000a42 	bl	580c <__aeabi_dmul>
    2f00:	e1a02000 	mov	r2, r0
    2f04:	e1a03001 	mov	r3, r1
    2f08:	e1a00004 	mov	r0, r4
    2f0c:	e1a01005 	mov	r1, r5
    2f10:	eb000939 	bl	53fc <__adddf3>
    2f14:	e1a0700b 	mov	r7, r11
    2f18:	e28d3008 	add	r3, sp, #8
    2f1c:	e893000c 	ldm	r3, {r2, r3}
    2f20:	e1a0a000 	mov	r10, r0
    2f24:	e1a0b001 	mov	r11, r1
    2f28:	e1a00006 	mov	r0, r6
    2f2c:	e1a01007 	mov	r1, r7
    2f30:	eb000a35 	bl	580c <__aeabi_dmul>
    2f34:	e1a04000 	mov	r4, r0
    2f38:	e1a05001 	mov	r5, r1
    2f3c:	e1a0000a 	mov	r0, r10
    2f40:	e1a0100b 	mov	r1, r11
    2f44:	e1a02004 	mov	r2, r4
    2f48:	e1a03005 	mov	r3, r5
    2f4c:	eb00092a 	bl	53fc <__adddf3>
    2f50:	e59fc094 	ldr	r12, [pc, #148]	; 2fec <__ieee754_pow+0x98c>
    2f54:	e151000c 	cmp	r1, r12
    2f58:	e1a06000 	mov	r6, r0
    2f5c:	e1a07001 	mov	r7, r1
    2f60:	e1a09001 	mov	r9, r1
    2f64:	da0000da 	ble	32d4 <__ieee754_pow+0xc74>
    2f68:	e28134bf 	add	r3, r1, #-1090519040	; 0xbf000000
    2f6c:	e2833607 	add	r3, r3, #7340032	; 0x700000
    2f70:	e1933000 	orrs	r3, r3, r0
    2f74:	1a00017b 	bne	3568 <__ieee754_pow+0xf08>
    2f78:	e28f3058 	add	r3, pc, #88	; 0x58
    2f7c:	e893000c 	ldm	r3, {r2, r3}
    2f80:	e1a0000a 	mov	r0, r10
    2f84:	e1a0100b 	mov	r1, r11
    2f88:	eb00091b 	bl	53fc <__adddf3>
    2f8c:	e1a02004 	mov	r2, r4
    2f90:	ea000018 	b	2ff8 <__ieee754_pow+0x998>
    2f94:	e1a00000 	nop			; (mov r0, r0)
    2f98:	4a454eef 	.word	0x4a454eef
    2f9c:	3fca7e28 	.word	0x3fca7e28
    2fa0:	93c9db65 	.word	0x93c9db65
    2fa4:	3fcd864a 	.word	0x3fcd864a
    2fa8:	a91d4101 	.word	0xa91d4101
    2fac:	3fd17460 	.word	0x3fd17460
    2fb0:	518f264d 	.word	0x518f264d
    2fb4:	3fd55555 	.word	0x3fd55555
    2fb8:	db6fabff 	.word	0xdb6fabff
    2fbc:	3fdb6db6 	.word	0x3fdb6db6
    2fc0:	33333303 	.word	0x33333303
    2fc4:	3fe33333 	.word	0x3fe33333
    2fc8:	145b01f5 	.word	0x145b01f5
    2fcc:	be3e2fe0 	.word	0xbe3e2fe0
    2fd0:	dc3a03fd 	.word	0xdc3a03fd
    2fd4:	3feec709 	.word	0x3feec709
    2fd8:	652b82fe 	.word	0x652b82fe
    2fdc:	3c971547 	.word	0x3c971547
    2fe0:	40080000 	.word	0x40080000
    2fe4:	3feec709 	.word	0x3feec709
    2fe8:	bff00000 	.word	0xbff00000
    2fec:	408fffff 	.word	0x408fffff
    2ff0:	3fe00000 	.word	0x3fe00000
    2ff4:	3fe62e43 	.word	0x3fe62e43
    2ff8:	e58d0008 	str	r0, [sp, #8]
    2ffc:	e58d100c 	str	r1, [sp, #12]
    3000:	e1a03005 	mov	r3, r5
    3004:	e1a00006 	mov	r0, r6
    3008:	e1a01007 	mov	r1, r7
    300c:	eb0008f9 	bl	53f8 <__aeabi_dsub>
    3010:	e1a02000 	mov	r2, r0
    3014:	e1a03001 	mov	r3, r1
    3018:	e28d1008 	add	r1, sp, #8
    301c:	e8910003 	ldm	r1, {r0, r1}
    3020:	eb000b6b 	bl	5dd4 <__aeabi_dcmpgt>
    3024:	e3500000 	cmp	r0, #0
    3028:	03c78102 	biceq	r8, r7, #-2147483648	; 0x80000000
    302c:	1a00014d 	bne	3568 <__ieee754_pow+0xf08>
    3030:	e51f3048 	ldr	r3, [pc, #-72]	; 2ff0 <__ieee754_pow+0x990>
    3034:	e1580003 	cmp	r8, r3
    3038:	d3a0c000 	movle	r12, #0
    303c:	d58dc008 	strle	r12, [sp, #8]
    3040:	ca0000b5 	bgt	331c <__ieee754_pow+0xcbc>
    3044:	e3a06000 	mov	r6, #0
    3048:	e1a00006 	mov	r0, r6
    304c:	e1a01007 	mov	r1, r7
    3050:	e3a02000 	mov	r2, #0
    3054:	e51f3068 	ldr	r3, [pc, #-104]	; 2ff4 <__ieee754_pow+0x994>
    3058:	e58dc004 	str	r12, [sp, #4]
    305c:	eb0009ea 	bl	580c <__aeabi_dmul>
    3060:	e1a02004 	mov	r2, r4
    3064:	e1a08000 	mov	r8, r0
    3068:	e1a09001 	mov	r9, r1
    306c:	e1a03005 	mov	r3, r5
    3070:	e1a00006 	mov	r0, r6
    3074:	e1a01007 	mov	r1, r7
    3078:	eb0008de 	bl	53f8 <__aeabi_dsub>
    307c:	e1a02000 	mov	r2, r0
    3080:	e1a03001 	mov	r3, r1
    3084:	e1a0000a 	mov	r0, r10
    3088:	e1a0100b 	mov	r1, r11
    308c:	eb0008d9 	bl	53f8 <__aeabi_dsub>
    3090:	e28f3fce 	add	r3, pc, #824	; 0x338
    3094:	e893000c 	ldm	r3, {r2, r3}
    3098:	eb0009db 	bl	580c <__aeabi_dmul>
    309c:	e28f3fcd 	add	r3, pc, #820	; 0x334
    30a0:	e893000c 	ldm	r3, {r2, r3}
    30a4:	e1a04000 	mov	r4, r0
    30a8:	e1a05001 	mov	r5, r1
    30ac:	e1a00006 	mov	r0, r6
    30b0:	e1a01007 	mov	r1, r7
    30b4:	eb0009d4 	bl	580c <__aeabi_dmul>
    30b8:	e1a02000 	mov	r2, r0
    30bc:	e1a03001 	mov	r3, r1
    30c0:	e1a00004 	mov	r0, r4
    30c4:	e1a01005 	mov	r1, r5
    30c8:	eb0008cb 	bl	53fc <__adddf3>
    30cc:	e1a04000 	mov	r4, r0
    30d0:	e1a05001 	mov	r5, r1
    30d4:	e1a02004 	mov	r2, r4
    30d8:	e1a03005 	mov	r3, r5
    30dc:	e1a00008 	mov	r0, r8
    30e0:	e1a01009 	mov	r1, r9
    30e4:	eb0008c4 	bl	53fc <__adddf3>
    30e8:	e1a02008 	mov	r2, r8
    30ec:	e1a03009 	mov	r3, r9
    30f0:	e1a0a000 	mov	r10, r0
    30f4:	e1a0b001 	mov	r11, r1
    30f8:	eb0008be 	bl	53f8 <__aeabi_dsub>
    30fc:	e1a02000 	mov	r2, r0
    3100:	e1a03001 	mov	r3, r1
    3104:	e1a00004 	mov	r0, r4
    3108:	e1a01005 	mov	r1, r5
    310c:	eb0008b9 	bl	53f8 <__aeabi_dsub>
    3110:	e1a0200a 	mov	r2, r10
    3114:	e1a08000 	mov	r8, r0
    3118:	e1a09001 	mov	r9, r1
    311c:	e1a0300b 	mov	r3, r11
    3120:	e1a0000a 	mov	r0, r10
    3124:	e1a0100b 	mov	r1, r11
    3128:	eb0009b7 	bl	580c <__aeabi_dmul>
    312c:	e28f3fab 	add	r3, pc, #684	; 0x2ac
    3130:	e893000c 	ldm	r3, {r2, r3}
    3134:	e1a04000 	mov	r4, r0
    3138:	e1a05001 	mov	r5, r1
    313c:	eb0009b2 	bl	580c <__aeabi_dmul>
    3140:	e28f3e2a 	add	r3, pc, #672	; 0x2a0
    3144:	e893000c 	ldm	r3, {r2, r3}
    3148:	eb0008aa 	bl	53f8 <__aeabi_dsub>
    314c:	e1a02004 	mov	r2, r4
    3150:	e1a03005 	mov	r3, r5
    3154:	eb0009ac 	bl	580c <__aeabi_dmul>
    3158:	e28f3e29 	add	r3, pc, #656	; 0x290
    315c:	e893000c 	ldm	r3, {r2, r3}
    3160:	eb0008a5 	bl	53fc <__adddf3>
    3164:	e1a02004 	mov	r2, r4
    3168:	e1a03005 	mov	r3, r5
    316c:	eb0009a6 	bl	580c <__aeabi_dmul>
    3170:	e28f3d0a 	add	r3, pc, #640	; 0x280
    3174:	e893000c 	ldm	r3, {r2, r3}
    3178:	eb00089e 	bl	53f8 <__aeabi_dsub>
    317c:	e1a02004 	mov	r2, r4
    3180:	e1a03005 	mov	r3, r5
    3184:	eb0009a0 	bl	580c <__aeabi_dmul>
    3188:	e28f3e27 	add	r3, pc, #624	; 0x270
    318c:	e893000c 	ldm	r3, {r2, r3}
    3190:	eb000899 	bl	53fc <__adddf3>
    3194:	e1a02004 	mov	r2, r4
    3198:	e1a03005 	mov	r3, r5
    319c:	eb00099a 	bl	580c <__aeabi_dmul>
    31a0:	e1a02000 	mov	r2, r0
    31a4:	e1a03001 	mov	r3, r1
    31a8:	e1a0000a 	mov	r0, r10
    31ac:	e1a0100b 	mov	r1, r11
    31b0:	eb000890 	bl	53f8 <__aeabi_dsub>
    31b4:	e1a04000 	mov	r4, r0
    31b8:	e1a05001 	mov	r5, r1
    31bc:	e1a02004 	mov	r2, r4
    31c0:	e1a03005 	mov	r3, r5
    31c4:	e1a0000a 	mov	r0, r10
    31c8:	e1a0100b 	mov	r1, r11
    31cc:	eb00098e 	bl	580c <__aeabi_dmul>
    31d0:	e3a02000 	mov	r2, #0
    31d4:	e1a06000 	mov	r6, r0
    31d8:	e1a07001 	mov	r7, r1
    31dc:	e1a00004 	mov	r0, r4
    31e0:	e1a01005 	mov	r1, r5
    31e4:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    31e8:	eb000882 	bl	53f8 <__aeabi_dsub>
    31ec:	e1a02000 	mov	r2, r0
    31f0:	e1a03001 	mov	r3, r1
    31f4:	e1a00006 	mov	r0, r6
    31f8:	e1a01007 	mov	r1, r7
    31fc:	eb000a26 	bl	5a9c <__aeabi_ddiv>
    3200:	e1a02008 	mov	r2, r8
    3204:	e1a04000 	mov	r4, r0
    3208:	e1a05001 	mov	r5, r1
    320c:	e1a03009 	mov	r3, r9
    3210:	e1a0000a 	mov	r0, r10
    3214:	e1a0100b 	mov	r1, r11
    3218:	eb00097b 	bl	580c <__aeabi_dmul>
    321c:	e1a02008 	mov	r2, r8
    3220:	e1a03009 	mov	r3, r9
    3224:	eb000874 	bl	53fc <__adddf3>
    3228:	e1a02000 	mov	r2, r0
    322c:	e1a03001 	mov	r3, r1
    3230:	e1a00004 	mov	r0, r4
    3234:	e1a01005 	mov	r1, r5
    3238:	eb00086e 	bl	53f8 <__aeabi_dsub>
    323c:	e1a0200a 	mov	r2, r10
    3240:	e1a0300b 	mov	r3, r11
    3244:	eb00086b 	bl	53f8 <__aeabi_dsub>
    3248:	e1a02000 	mov	r2, r0
    324c:	e1a03001 	mov	r3, r1
    3250:	e3a00000 	mov	r0, #0
    3254:	e59f11bc 	ldr	r1, [pc, #444]	; 3418 <__ieee754_pow+0xdb8>
    3258:	eb000866 	bl	53f8 <__aeabi_dsub>
    325c:	e59dc004 	ldr	r12, [sp, #4]
    3260:	e08ce001 	add	lr, r12, r1
    3264:	e35e0601 	cmp	lr, #1048576	; 0x100000
    3268:	e1a03001 	mov	r3, r1
    326c:	e1a02000 	mov	r2, r0
    3270:	e1a04000 	mov	r4, r0
    3274:	e1a05001 	mov	r5, r1
    3278:	a1a0300e 	movge	r3, lr
    327c:	ba0000e4 	blt	3614 <__ieee754_pow+0xfb4>
    3280:	e28d1010 	add	r1, sp, #16
    3284:	e8910003 	ldm	r1, {r0, r1}
    3288:	eb00095f 	bl	580c <__aeabi_dmul>
    328c:	e1a0a000 	mov	r10, r0
    3290:	e1a0b001 	mov	r11, r1
    3294:	eafffd0b 	b	26c8 <__ieee754_pow+0x68>
    3298:	e59d1020 	ldr	r1, [sp, #32]
    329c:	e3510000 	cmp	r1, #0
    32a0:	bafffd34 	blt	2778 <__ieee754_pow+0x118>
    32a4:	e1a00007 	mov	r0, r7
    32a8:	e1a01008 	mov	r1, r8
    32ac:	eb000281 	bl	3cb8 <__ieee754_sqrt>
    32b0:	e1a0a000 	mov	r10, r0
    32b4:	e1a0b001 	mov	r11, r1
    32b8:	eafffd02 	b	26c8 <__ieee754_pow+0x68>
    32bc:	e1a0a003 	mov	r10, r3
    32c0:	e59fb150 	ldr	r11, [pc, #336]	; 3418 <__ieee754_pow+0xdb8>
    32c4:	eafffcff 	b	26c8 <__ieee754_pow+0x68>
    32c8:	e3540000 	cmp	r4, #0
    32cc:	aafffd78 	bge	28b4 <__ieee754_pow+0x254>
    32d0:	eafffd49 	b	27fc <__ieee754_pow+0x19c>
    32d4:	e59f312c 	ldr	r3, [pc, #300]	; 3408 <__ieee754_pow+0xda8>
    32d8:	e3c18102 	bic	r8, r1, #-2147483648	; 0x80000000
    32dc:	e1580003 	cmp	r8, r3
    32e0:	daffff52 	ble	3030 <__ieee754_pow+0x9d0>
    32e4:	e59f3120 	ldr	r3, [pc, #288]	; 340c <__ieee754_pow+0xdac>
    32e8:	e0813003 	add	r3, r1, r3
    32ec:	e1933000 	orrs	r3, r3, r0
    32f0:	1a0000b9 	bne	35dc <__ieee754_pow+0xf7c>
    32f4:	e1a02004 	mov	r2, r4
    32f8:	e1a03005 	mov	r3, r5
    32fc:	eb00083d 	bl	53f8 <__aeabi_dsub>
    3300:	e1a02000 	mov	r2, r0
    3304:	e1a03001 	mov	r3, r1
    3308:	e1a0000a 	mov	r0, r10
    330c:	e1a0100b 	mov	r1, r11
    3310:	eb000aa3 	bl	5da4 <__aeabi_dcmple>
    3314:	e3500000 	cmp	r0, #0
    3318:	1a0000af 	bne	35dc <__ieee754_pow+0xf7c>
    331c:	e1a03a48 	asr	r3, r8, #20
    3320:	e2433fff 	sub	r3, r3, #1020	; 0x3fc
    3324:	e2433002 	sub	r3, r3, #2
    3328:	e3a01601 	mov	r1, #1048576	; 0x100000
    332c:	e0891351 	add	r1, r9, r1, asr r3
    3330:	e3c10102 	bic	r0, r1, #-2147483648	; 0x80000000
    3334:	e1a00a40 	asr	r0, r0, #20
    3338:	e240efff 	sub	lr, r0, #1020	; 0x3fc
    333c:	e59f60cc 	ldr	r6, [pc, #204]	; 3410 <__ieee754_pow+0xdb0>
    3340:	e24ee003 	sub	lr, lr, #3
    3344:	e1c13e56 	bic	r3, r1, r6, asr lr
    3348:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    334c:	e3c1e60f 	bic	lr, r1, #15728640	; 0xf00000
    3350:	e2601e41 	rsb	r1, r0, #1040	; 0x410
    3354:	e38ee601 	orr	lr, lr, #1048576	; 0x100000
    3358:	e2811003 	add	r1, r1, #3
    335c:	e1a0115e 	asr	r1, lr, r1
    3360:	e3590000 	cmp	r9, #0
    3364:	e58d1008 	str	r1, [sp, #8]
    3368:	b2611000 	rsblt	r1, r1, #0
    336c:	b58d1008 	strlt	r1, [sp, #8]
    3370:	e3a02000 	mov	r2, #0
    3374:	e1a00004 	mov	r0, r4
    3378:	e1a01005 	mov	r1, r5
    337c:	eb00081d 	bl	53f8 <__aeabi_dsub>
    3380:	e1a04000 	mov	r4, r0
    3384:	e1a05001 	mov	r5, r1
    3388:	e1a02004 	mov	r2, r4
    338c:	e1a0000a 	mov	r0, r10
    3390:	e1a0100b 	mov	r1, r11
    3394:	e1a03005 	mov	r3, r5
    3398:	eb000817 	bl	53fc <__adddf3>
    339c:	e59d2008 	ldr	r2, [sp, #8]
    33a0:	e1a07001 	mov	r7, r1
    33a4:	e1a0ca02 	lsl	r12, r2, #20
    33a8:	eaffff25 	b	3044 <__ieee754_pow+0x9e4>
    33ac:	e59f2064 	ldr	r2, [pc, #100]	; 3418 <__ieee754_pow+0xdb8>
    33b0:	e3a01000 	mov	r1, #0
    33b4:	e58d1010 	str	r1, [sp, #16]
    33b8:	e58d2014 	str	r2, [sp, #20]
    33bc:	eafffebf 	b	2ec0 <__ieee754_pow+0x860>
    33c0:	e3540000 	cmp	r4, #0
    33c4:	b28bb102 	addlt	r11, r11, #-2147483648	; 0x80000000
    33c8:	aafffd39 	bge	28b4 <__ieee754_pow+0x254>
    33cc:	eafffcbd 	b	26c8 <__ieee754_pow+0x68>
    33d0:	fefa39ef 	.word	0xfefa39ef
    33d4:	3fe62e42 	.word	0x3fe62e42
    33d8:	0ca86c39 	.word	0x0ca86c39
    33dc:	be205c61 	.word	0xbe205c61
    33e0:	72bea4d0 	.word	0x72bea4d0
    33e4:	3e663769 	.word	0x3e663769
    33e8:	c5d26bf1 	.word	0xc5d26bf1
    33ec:	3ebbbd41 	.word	0x3ebbbd41
    33f0:	af25de2c 	.word	0xaf25de2c
    33f4:	3f11566a 	.word	0x3f11566a
    33f8:	16bebd93 	.word	0x16bebd93
    33fc:	3f66c16c 	.word	0x3f66c16c
    3400:	5555553e 	.word	0x5555553e
    3404:	3fc55555 	.word	0x3fc55555
    3408:	4090cbff 	.word	0x4090cbff
    340c:	3f6f3400 	.word	0x3f6f3400
    3410:	000fffff 	.word	0x000fffff
    3414:	3feffffe 	.word	0x3feffffe
    3418:	3ff00000 	.word	0x3ff00000
    341c:	3ff71547 	.word	0x3ff71547
    3420:	e51f3014 	ldr	r3, [pc, #-20]	; 3414 <__ieee754_pow+0xdb4>
    3424:	e59d2008 	ldr	r2, [sp, #8]
    3428:	e1520003 	cmp	r2, r3
    342c:	daffffa5 	ble	32c8 <__ieee754_pow+0xc68>
    3430:	e51f3020 	ldr	r3, [pc, #-32]	; 3418 <__ieee754_pow+0xdb8>
    3434:	e59d2008 	ldr	r2, [sp, #8]
    3438:	e1520003 	cmp	r2, r3
    343c:	cafffcec 	bgt	27f4 <__ieee754_pow+0x194>
    3440:	e3a02000 	mov	r2, #0
    3444:	e51f3034 	ldr	r3, [pc, #-52]	; 3418 <__ieee754_pow+0xdb8>
    3448:	eb0007ea 	bl	53f8 <__aeabi_dsub>
    344c:	e3a02206 	mov	r2, #1610612736	; 0x60000000
    3450:	e51f303c 	ldr	r3, [pc, #-60]	; 341c <__ieee754_pow+0xdbc>
    3454:	e1a04000 	mov	r4, r0
    3458:	e1a05001 	mov	r5, r1
    345c:	eb0008ea 	bl	580c <__aeabi_dmul>
    3460:	e28f3d07 	add	r3, pc, #448	; 0x1c0
    3464:	e893000c 	ldm	r3, {r2, r3}
    3468:	e1a06000 	mov	r6, r0
    346c:	e1a07001 	mov	r7, r1
    3470:	e1a00004 	mov	r0, r4
    3474:	e1a01005 	mov	r1, r5
    3478:	eb0008e3 	bl	580c <__aeabi_dmul>
    347c:	e1a02004 	mov	r2, r4
    3480:	e58d0008 	str	r0, [sp, #8]
    3484:	e58d100c 	str	r1, [sp, #12]
    3488:	e1a03005 	mov	r3, r5
    348c:	e1a00004 	mov	r0, r4
    3490:	e1a01005 	mov	r1, r5
    3494:	eb0008dc 	bl	580c <__aeabi_dmul>
    3498:	e3a02000 	mov	r2, #0
    349c:	e1a08000 	mov	r8, r0
    34a0:	e1a09001 	mov	r9, r1
    34a4:	e1a00004 	mov	r0, r4
    34a8:	e1a01005 	mov	r1, r5
    34ac:	e59f319c 	ldr	r3, [pc, #412]	; 3650 <__ieee754_pow+0xff0>
    34b0:	eb0008d5 	bl	580c <__aeabi_dmul>
    34b4:	e1a02000 	mov	r2, r0
    34b8:	e1a03001 	mov	r3, r1
    34bc:	e28f1f5b 	add	r1, pc, #364	; 0x16c
    34c0:	e8910003 	ldm	r1, {r0, r1}
    34c4:	eb0007cb 	bl	53f8 <__aeabi_dsub>
    34c8:	e1a02004 	mov	r2, r4
    34cc:	e1a03005 	mov	r3, r5
    34d0:	eb0008cd 	bl	580c <__aeabi_dmul>
    34d4:	e1a02000 	mov	r2, r0
    34d8:	e1a03001 	mov	r3, r1
    34dc:	e3a00000 	mov	r0, #0
    34e0:	e59f116c 	ldr	r1, [pc, #364]	; 3654 <__ieee754_pow+0xff4>
    34e4:	eb0007c3 	bl	53f8 <__aeabi_dsub>
    34e8:	e1a02000 	mov	r2, r0
    34ec:	e1a03001 	mov	r3, r1
    34f0:	e1a00008 	mov	r0, r8
    34f4:	e1a01009 	mov	r1, r9
    34f8:	eb0008c3 	bl	580c <__aeabi_dmul>
    34fc:	e28f3f4d 	add	r3, pc, #308	; 0x134
    3500:	e893000c 	ldm	r3, {r2, r3}
    3504:	eb0008c0 	bl	580c <__aeabi_dmul>
    3508:	e1a02000 	mov	r2, r0
    350c:	e1a03001 	mov	r3, r1
    3510:	e28d1008 	add	r1, sp, #8
    3514:	e8910003 	ldm	r1, {r0, r1}
    3518:	eb0007b6 	bl	53f8 <__aeabi_dsub>
    351c:	e1a04000 	mov	r4, r0
    3520:	e1a05001 	mov	r5, r1
    3524:	e1a02004 	mov	r2, r4
    3528:	e1a03005 	mov	r3, r5
    352c:	e1a00006 	mov	r0, r6
    3530:	e1a01007 	mov	r1, r7
    3534:	eb0007b0 	bl	53fc <__adddf3>
    3538:	e3a00000 	mov	r0, #0
    353c:	e58d0008 	str	r0, [sp, #8]
    3540:	e58d100c 	str	r1, [sp, #12]
    3544:	e1a02006 	mov	r2, r6
    3548:	e1a03007 	mov	r3, r7
    354c:	eafffe4a 	b	2e7c <__ieee754_pow+0x81c>
    3550:	e1a02000 	mov	r2, r0
    3554:	e1a03001 	mov	r3, r1
    3558:	e3a00000 	mov	r0, #0
    355c:	e59f10f4 	ldr	r1, [pc, #244]	; 3658 <__ieee754_pow+0xff8>
    3560:	eb00094d 	bl	5a9c <__aeabi_ddiv>
    3564:	eafffcd7 	b	28c8 <__ieee754_pow+0x268>
    3568:	e28f30d0 	add	r3, pc, #208	; 0xd0
    356c:	e893000c 	ldm	r3, {r2, r3}
    3570:	e28d1010 	add	r1, sp, #16
    3574:	e8910003 	ldm	r1, {r0, r1}
    3578:	eb0008a3 	bl	580c <__aeabi_dmul>
    357c:	e28f30bc 	add	r3, pc, #188	; 0xbc
    3580:	e893000c 	ldm	r3, {r2, r3}
    3584:	eb0008a0 	bl	580c <__aeabi_dmul>
    3588:	e1a0a000 	mov	r10, r0
    358c:	e1a0b001 	mov	r11, r1
    3590:	eafffc4c 	b	26c8 <__ieee754_pow+0x68>
    3594:	e35a0000 	cmp	r10, #0
    3598:	1a00001a 	bne	3608 <__ieee754_pow+0xfa8>
    359c:	e2633e41 	rsb	r3, r3, #1040	; 0x410
    35a0:	e2832003 	add	r2, r3, #3
    35a4:	e1a03256 	asr	r3, r6, r2
    35a8:	e1560213 	cmp	r6, r3, lsl r2
    35ac:	02033001 	andeq	r3, r3, #1
    35b0:	02633002 	rsbeq	r3, r3, #2
    35b4:	058d3030 	streq	r3, [sp, #48]	; 0x30
    35b8:	13a03000 	movne	r3, #0
    35bc:	158d3030 	strne	r3, [sp, #48]	; 0x30
    35c0:	eafffc5f 	b	2744 <__ieee754_pow+0xe4>
    35c4:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    35c8:	e3540001 	cmp	r4, #1
    35cc:	e1a0a000 	mov	r10, r0
    35d0:	0281b102 	addeq	r11, r1, #-2147483648	; 0x80000000
    35d4:	1afffc8e 	bne	2814 <__ieee754_pow+0x1b4>
    35d8:	eafffc3a 	b	26c8 <__ieee754_pow+0x68>
    35dc:	e28f3064 	add	r3, pc, #100	; 0x64
    35e0:	e893000c 	ldm	r3, {r2, r3}
    35e4:	e28d1010 	add	r1, sp, #16
    35e8:	e8910003 	ldm	r1, {r0, r1}
    35ec:	eb000886 	bl	580c <__aeabi_dmul>
    35f0:	e28f3050 	add	r3, pc, #80	; 0x50
    35f4:	e893000c 	ldm	r3, {r2, r3}
    35f8:	eb000883 	bl	580c <__aeabi_dmul>
    35fc:	e1a0a000 	mov	r10, r0
    3600:	e1a0b001 	mov	r11, r1
    3604:	eafffc2f 	b	26c8 <__ieee754_pow+0x68>
    3608:	e3a02000 	mov	r2, #0
    360c:	e58d2030 	str	r2, [sp, #48]	; 0x30
    3610:	eafffc58 	b	2778 <__ieee754_pow+0x118>
    3614:	e59d2008 	ldr	r2, [sp, #8]
    3618:	eb000706 	bl	5238 <scalbn>
    361c:	e1a02000 	mov	r2, r0
    3620:	e1a03001 	mov	r3, r1
    3624:	eaffff15 	b	3280 <__ieee754_pow+0xc20>
    3628:	f85ddf44 	.word	0xf85ddf44
    362c:	3e54ae0b 	.word	0x3e54ae0b
    3630:	55555555 	.word	0x55555555
    3634:	3fd55555 	.word	0x3fd55555
    3638:	652b82fe 	.word	0x652b82fe
    363c:	3ff71547 	.word	0x3ff71547
    3640:	8800759c 	.word	0x8800759c
    3644:	7e37e43c 	.word	0x7e37e43c
    3648:	c2f8f359 	.word	0xc2f8f359
    364c:	01a56e1f 	.word	0x01a56e1f
    3650:	3fd00000 	.word	0x3fd00000
    3654:	3fe00000 	.word	0x3fe00000
    3658:	3ff00000 	.word	0x3ff00000
    365c:	e1a00000 	nop			; (mov r0, r0)

00003660 <__ieee754_rem_pio2>:
    3660:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3664:	e59fc3bc 	ldr	r12, [pc, #956]	; 3a28 <__ieee754_rem_pio2+0x3c8>
    3668:	e3c17102 	bic	r7, r1, #-2147483648	; 0x80000000
    366c:	e157000c 	cmp	r7, r12
    3670:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    3674:	e1a04000 	mov	r4, r0
    3678:	e1a05001 	mov	r5, r1
    367c:	e1a0a000 	mov	r10, r0
    3680:	e1a0b001 	mov	r11, r1
    3684:	e1a08002 	mov	r8, r2
    3688:	da00005b 	ble	37fc <__ieee754_rem_pio2+0x19c>
    368c:	e59f2398 	ldr	r2, [pc, #920]	; 3a2c <__ieee754_rem_pio2+0x3cc>
    3690:	e1570002 	cmp	r7, r2
    3694:	e1a09001 	mov	r9, r1
    3698:	ca000019 	bgt	3704 <__ieee754_rem_pio2+0xa4>
    369c:	e3510000 	cmp	r1, #0
    36a0:	e28f3fd6 	add	r3, pc, #856	; 0x358
    36a4:	e893000c 	ldm	r3, {r2, r3}
    36a8:	da000149 	ble	3bd4 <__ieee754_rem_pio2+0x574>
    36ac:	eb000751 	bl	53f8 <__aeabi_dsub>
    36b0:	e59f3378 	ldr	r3, [pc, #888]	; 3a30 <__ieee754_rem_pio2+0x3d0>
    36b4:	e1570003 	cmp	r7, r3
    36b8:	e1a0a000 	mov	r10, r0
    36bc:	e1a0b001 	mov	r11, r1
    36c0:	0a00005f 	beq	3844 <__ieee754_rem_pio2+0x1e4>
    36c4:	e28f3fcf 	add	r3, pc, #828	; 0x33c
    36c8:	e893000c 	ldm	r3, {r2, r3}
    36cc:	eb000749 	bl	53f8 <__aeabi_dsub>
    36d0:	e1a02000 	mov	r2, r0
    36d4:	e1a03001 	mov	r3, r1
    36d8:	e8880003 	stm	r8, {r0, r1}
    36dc:	e1a0000a 	mov	r0, r10
    36e0:	e1a0100b 	mov	r1, r11
    36e4:	eb000743 	bl	53f8 <__aeabi_dsub>
    36e8:	e28f3fc6 	add	r3, pc, #792	; 0x318
    36ec:	e893000c 	ldm	r3, {r2, r3}
    36f0:	eb000740 	bl	53f8 <__aeabi_dsub>
    36f4:	e3a06001 	mov	r6, #1
    36f8:	e5880008 	str	r0, [r8, #8]
    36fc:	e588100c 	str	r1, [r8, #12]
    3700:	ea000043 	b	3814 <__ieee754_rem_pio2+0x1b4>
    3704:	e59f3328 	ldr	r3, [pc, #808]	; 3a34 <__ieee754_rem_pio2+0x3d4>
    3708:	e1570003 	cmp	r7, r3
    370c:	da000075 	ble	38e8 <__ieee754_rem_pio2+0x288>
    3710:	e59f3320 	ldr	r3, [pc, #800]	; 3a38 <__ieee754_rem_pio2+0x3d8>
    3714:	e1570003 	cmp	r7, r3
    3718:	ca000041 	bgt	3824 <__ieee754_rem_pio2+0x1c4>
    371c:	e1a0aa47 	asr	r10, r7, #20
    3720:	e24aae41 	sub	r10, r10, #1040	; 0x410
    3724:	e24aa006 	sub	r10, r10, #6
    3728:	e0475a0a 	sub	r5, r7, r10, lsl #20
    372c:	e1a01005 	mov	r1, r5
    3730:	e1a04000 	mov	r4, r0
    3734:	eb0009ac 	bl	5dec <__aeabi_d2iz>
    3738:	eb0007fc 	bl	5730 <__aeabi_i2d>
    373c:	e1a06000 	mov	r6, r0
    3740:	e1a07001 	mov	r7, r1
    3744:	e1a02000 	mov	r2, r0
    3748:	e1a03001 	mov	r3, r1
    374c:	e1a00004 	mov	r0, r4
    3750:	e1a01005 	mov	r1, r5
    3754:	e58d6020 	str	r6, [sp, #32]
    3758:	e58d7024 	str	r7, [sp, #36]	; 0x24
    375c:	eb000725 	bl	53f8 <__aeabi_dsub>
    3760:	e3a02000 	mov	r2, #0
    3764:	e59f32d0 	ldr	r3, [pc, #720]	; 3a3c <__ieee754_rem_pio2+0x3dc>
    3768:	eb000827 	bl	580c <__aeabi_dmul>
    376c:	e1a06000 	mov	r6, r0
    3770:	e1a07001 	mov	r7, r1
    3774:	eb00099c 	bl	5dec <__aeabi_d2iz>
    3778:	eb0007ec 	bl	5730 <__aeabi_i2d>
    377c:	e1a02000 	mov	r2, r0
    3780:	e1a03001 	mov	r3, r1
    3784:	e1a04000 	mov	r4, r0
    3788:	e1a05001 	mov	r5, r1
    378c:	e1a00006 	mov	r0, r6
    3790:	e1a01007 	mov	r1, r7
    3794:	e58d4028 	str	r4, [sp, #40]	; 0x28
    3798:	e58d502c 	str	r5, [sp, #44]	; 0x2c
    379c:	eb000715 	bl	53f8 <__aeabi_dsub>
    37a0:	e3a02000 	mov	r2, #0
    37a4:	e59f3290 	ldr	r3, [pc, #656]	; 3a3c <__ieee754_rem_pio2+0x3dc>
    37a8:	eb000817 	bl	580c <__aeabi_dmul>
    37ac:	e3a02000 	mov	r2, #0
    37b0:	e3a03000 	mov	r3, #0
    37b4:	e58d0030 	str	r0, [sp, #48]	; 0x30
    37b8:	e58d1034 	str	r1, [sp, #52]	; 0x34
    37bc:	eb00096c 	bl	5d74 <__aeabi_dcmpeq>
    37c0:	e3500000 	cmp	r0, #0
    37c4:	03a06003 	moveq	r6, #3
    37c8:	0a000032 	beq	3898 <__ieee754_rem_pio2+0x238>
    37cc:	e28d7028 	add	r7, sp, #40	; 0x28
    37d0:	e3a06003 	mov	r6, #3
    37d4:	e1a00004 	mov	r0, r4
    37d8:	e1a01005 	mov	r1, r5
    37dc:	e3a02000 	mov	r2, #0
    37e0:	e3a03000 	mov	r3, #0
    37e4:	eb000962 	bl	5d74 <__aeabi_dcmpeq>
    37e8:	e3500000 	cmp	r0, #0
    37ec:	e2466001 	sub	r6, r6, #1
    37f0:	0a000028 	beq	3898 <__ieee754_rem_pio2+0x238>
    37f4:	e9370003 	ldmdb	r7!, {r0, r1}
    37f8:	eafffff7 	b	37dc <__ieee754_rem_pio2+0x17c>
    37fc:	e8820030 	stm	r2, {r4, r5}
    3800:	e3a03000 	mov	r3, #0
    3804:	e3a02000 	mov	r2, #0
    3808:	e5882008 	str	r2, [r8, #8]
    380c:	e588300c 	str	r3, [r8, #12]
    3810:	e3a06000 	mov	r6, #0
    3814:	e1a00006 	mov	r0, r6
    3818:	e28dd03c 	add	sp, sp, #60	; 0x3c
    381c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3820:	e12fff1e 	bx	lr
    3824:	e1a02000 	mov	r2, r0
    3828:	e1a03001 	mov	r3, r1
    382c:	eb0006f1 	bl	53f8 <__aeabi_dsub>
    3830:	e3a06000 	mov	r6, #0
    3834:	e5880008 	str	r0, [r8, #8]
    3838:	e588100c 	str	r1, [r8, #12]
    383c:	e8880003 	stm	r8, {r0, r1}
    3840:	eafffff3 	b	3814 <__ieee754_rem_pio2+0x1b4>
    3844:	e28f3f71 	add	r3, pc, #452	; 0x1c4
    3848:	e893000c 	ldm	r3, {r2, r3}
    384c:	eb0006e9 	bl	53f8 <__aeabi_dsub>
    3850:	e28f3d07 	add	r3, pc, #448	; 0x1c0
    3854:	e893000c 	ldm	r3, {r2, r3}
    3858:	e1a06000 	mov	r6, r0
    385c:	e1a07001 	mov	r7, r1
    3860:	eb0006e4 	bl	53f8 <__aeabi_dsub>
    3864:	e1a02000 	mov	r2, r0
    3868:	e1a03001 	mov	r3, r1
    386c:	e8880003 	stm	r8, {r0, r1}
    3870:	e1a00006 	mov	r0, r6
    3874:	e1a01007 	mov	r1, r7
    3878:	eb0006de 	bl	53f8 <__aeabi_dsub>
    387c:	e28f3f65 	add	r3, pc, #404	; 0x194
    3880:	e893000c 	ldm	r3, {r2, r3}
    3884:	eb0006db 	bl	53f8 <__aeabi_dsub>
    3888:	e3a06001 	mov	r6, #1
    388c:	e5880008 	str	r0, [r8, #8]
    3890:	e588100c 	str	r1, [r8, #12]
    3894:	eaffffde 	b	3814 <__ieee754_rem_pio2+0x1b4>
    3898:	e3a03002 	mov	r3, #2
    389c:	e58d3000 	str	r3, [sp]
    38a0:	e59f3198 	ldr	r3, [pc, #408]	; 3a40 <__ieee754_rem_pio2+0x3e0>
    38a4:	e28d0020 	add	r0, sp, #32
    38a8:	e58d3004 	str	r3, [sp, #4]
    38ac:	e1a01008 	mov	r1, r8
    38b0:	e1a03006 	mov	r3, r6
    38b4:	e1a0200a 	mov	r2, r10
    38b8:	eb000260 	bl	4240 <__kernel_rem_pio2>
    38bc:	e3590000 	cmp	r9, #0
    38c0:	e1a06000 	mov	r6, r0
    38c4:	aaffffd2 	bge	3814 <__ieee754_rem_pio2+0x1b4>
    38c8:	e5982004 	ldr	r2, [r8, #4]
    38cc:	e598300c 	ldr	r3, [r8, #12]
    38d0:	e2822102 	add	r2, r2, #-2147483648	; 0x80000000
    38d4:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
    38d8:	e5882004 	str	r2, [r8, #4]
    38dc:	e588300c 	str	r3, [r8, #12]
    38e0:	e2606000 	rsb	r6, r0, #0
    38e4:	eaffffca 	b	3814 <__ieee754_rem_pio2+0x1b4>
    38e8:	eb0005c2 	bl	4ff8 <fabs>
    38ec:	e28f3f4b 	add	r3, pc, #300	; 0x12c
    38f0:	e893000c 	ldm	r3, {r2, r3}
    38f4:	e1a04000 	mov	r4, r0
    38f8:	e1a05001 	mov	r5, r1
    38fc:	eb0007c2 	bl	580c <__aeabi_dmul>
    3900:	e3a02000 	mov	r2, #0
    3904:	e59f3138 	ldr	r3, [pc, #312]	; 3a44 <__ieee754_rem_pio2+0x3e4>
    3908:	eb0006bb 	bl	53fc <__adddf3>
    390c:	eb000936 	bl	5dec <__aeabi_d2iz>
    3910:	e1a06000 	mov	r6, r0
    3914:	eb000785 	bl	5730 <__aeabi_i2d>
    3918:	e28f30e0 	add	r3, pc, #224	; 0xe0
    391c:	e893000c 	ldm	r3, {r2, r3}
    3920:	e58d0010 	str	r0, [sp, #16]
    3924:	e58d1014 	str	r1, [sp, #20]
    3928:	eb0007b7 	bl	580c <__aeabi_dmul>
    392c:	e1a02000 	mov	r2, r0
    3930:	e1a03001 	mov	r3, r1
    3934:	e1a00004 	mov	r0, r4
    3938:	e1a01005 	mov	r1, r5
    393c:	eb0006ad 	bl	53f8 <__aeabi_dsub>
    3940:	e28f30c0 	add	r3, pc, #192	; 0xc0
    3944:	e893000c 	ldm	r3, {r2, r3}
    3948:	e1a0a000 	mov	r10, r0
    394c:	e1a0b001 	mov	r11, r1
    3950:	e28d1010 	add	r1, sp, #16
    3954:	e8910003 	ldm	r1, {r0, r1}
    3958:	eb0007ab 	bl	580c <__aeabi_dmul>
    395c:	e356001f 	cmp	r6, #31
    3960:	e58d0008 	str	r0, [sp, #8]
    3964:	e58d100c 	str	r1, [sp, #12]
    3968:	e1a0000a 	mov	r0, r10
    396c:	e1a0100b 	mov	r1, r11
    3970:	ca000035 	bgt	3a4c <__ieee754_rem_pio2+0x3ec>
    3974:	e59f30cc 	ldr	r3, [pc, #204]	; 3a48 <__ieee754_rem_pio2+0x3e8>
    3978:	e2462001 	sub	r2, r6, #1
    397c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    3980:	e1530007 	cmp	r3, r7
    3984:	0a000030 	beq	3a4c <__ieee754_rem_pio2+0x3ec>
    3988:	e28d3008 	add	r3, sp, #8
    398c:	e893000c 	ldm	r3, {r2, r3}
    3990:	eb000698 	bl	53f8 <__aeabi_dsub>
    3994:	e1a02000 	mov	r2, r0
    3998:	e1a03001 	mov	r3, r1
    399c:	e888000c 	stm	r8, {r2, r3}
    39a0:	e1a05000 	mov	r5, r0
    39a4:	e1a04001 	mov	r4, r1
    39a8:	e1a02005 	mov	r2, r5
    39ac:	e1a03004 	mov	r3, r4
    39b0:	e1a0000a 	mov	r0, r10
    39b4:	e1a0100b 	mov	r1, r11
    39b8:	eb00068e 	bl	53f8 <__aeabi_dsub>
    39bc:	e28d3008 	add	r3, sp, #8
    39c0:	e893000c 	ldm	r3, {r2, r3}
    39c4:	eb00068b 	bl	53f8 <__aeabi_dsub>
    39c8:	e3590000 	cmp	r9, #0
    39cc:	e1a02000 	mov	r2, r0
    39d0:	e1a03001 	mov	r3, r1
    39d4:	e5882008 	str	r2, [r8, #8]
    39d8:	e588300c 	str	r3, [r8, #12]
    39dc:	aaffff8c 	bge	3814 <__ieee754_rem_pio2+0x1b4>
    39e0:	e2844102 	add	r4, r4, #-2147483648	; 0x80000000
    39e4:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    39e8:	e5885000 	str	r5, [r8]
    39ec:	e5884004 	str	r4, [r8, #4]
    39f0:	e5880008 	str	r0, [r8, #8]
    39f4:	e588100c 	str	r1, [r8, #12]
    39f8:	e2666000 	rsb	r6, r6, #0
    39fc:	eaffff84 	b	3814 <__ieee754_rem_pio2+0x1b4>
    3a00:	54400000 	.word	0x54400000
    3a04:	3ff921fb 	.word	0x3ff921fb
    3a08:	1a626331 	.word	0x1a626331
    3a0c:	3dd0b461 	.word	0x3dd0b461
    3a10:	1a600000 	.word	0x1a600000
    3a14:	3dd0b461 	.word	0x3dd0b461
    3a18:	2e037073 	.word	0x2e037073
    3a1c:	3ba3198a 	.word	0x3ba3198a
    3a20:	6dc9c883 	.word	0x6dc9c883
    3a24:	3fe45f30 	.word	0x3fe45f30
    3a28:	3fe921fb 	.word	0x3fe921fb
    3a2c:	4002d97b 	.word	0x4002d97b
    3a30:	3ff921fb 	.word	0x3ff921fb
    3a34:	413921fb 	.word	0x413921fb
    3a38:	7fefffff 	.word	0x7fefffff
    3a3c:	41700000 	.word	0x41700000
    3a40:	000073bc 	.word	0x000073bc
    3a44:	3fe00000 	.word	0x3fe00000
    3a48:	0000733c 	.word	0x0000733c
    3a4c:	e28d3008 	add	r3, sp, #8
    3a50:	e893000c 	ldm	r3, {r2, r3}
    3a54:	eb000667 	bl	53f8 <__aeabi_dsub>
    3a58:	e1a07a47 	asr	r7, r7, #20
    3a5c:	e1a04001 	mov	r4, r1
    3a60:	e1a01081 	lsl	r1, r1, #1
    3a64:	e1a05000 	mov	r5, r0
    3a68:	e0471aa1 	sub	r1, r7, r1, lsr #21
    3a6c:	e1a02005 	mov	r2, r5
    3a70:	e1a03004 	mov	r3, r4
    3a74:	e3510010 	cmp	r1, #16
    3a78:	e888000c 	stm	r8, {r2, r3}
    3a7c:	daffffc9 	ble	39a8 <__ieee754_rem_pio2+0x348>
    3a80:	e28f3f82 	add	r3, pc, #520	; 0x208
    3a84:	e893000c 	ldm	r3, {r2, r3}
    3a88:	e28d1010 	add	r1, sp, #16
    3a8c:	e8910003 	ldm	r1, {r0, r1}
    3a90:	eb00075d 	bl	580c <__aeabi_dmul>
    3a94:	e1a04000 	mov	r4, r0
    3a98:	e1a05001 	mov	r5, r1
    3a9c:	e1a02004 	mov	r2, r4
    3aa0:	e1a03005 	mov	r3, r5
    3aa4:	e1a0000a 	mov	r0, r10
    3aa8:	e1a0100b 	mov	r1, r11
    3aac:	eb000651 	bl	53f8 <__aeabi_dsub>
    3ab0:	e58d0018 	str	r0, [sp, #24]
    3ab4:	e58d101c 	str	r1, [sp, #28]
    3ab8:	e28d3018 	add	r3, sp, #24
    3abc:	e893000c 	ldm	r3, {r2, r3}
    3ac0:	e1a0000a 	mov	r0, r10
    3ac4:	e1a0100b 	mov	r1, r11
    3ac8:	eb00064a 	bl	53f8 <__aeabi_dsub>
    3acc:	e1a02004 	mov	r2, r4
    3ad0:	e1a03005 	mov	r3, r5
    3ad4:	eb000647 	bl	53f8 <__aeabi_dsub>
    3ad8:	e28f3f6e 	add	r3, pc, #440	; 0x1b8
    3adc:	e893000c 	ldm	r3, {r2, r3}
    3ae0:	e1a04000 	mov	r4, r0
    3ae4:	e1a05001 	mov	r5, r1
    3ae8:	e28d1010 	add	r1, sp, #16
    3aec:	e8910003 	ldm	r1, {r0, r1}
    3af0:	eb000745 	bl	580c <__aeabi_dmul>
    3af4:	e1a02004 	mov	r2, r4
    3af8:	e1a03005 	mov	r3, r5
    3afc:	eb00063d 	bl	53f8 <__aeabi_dsub>
    3b00:	e58d0008 	str	r0, [sp, #8]
    3b04:	e58d100c 	str	r1, [sp, #12]
    3b08:	e28d3008 	add	r3, sp, #8
    3b0c:	e893000c 	ldm	r3, {r2, r3}
    3b10:	e28d1018 	add	r1, sp, #24
    3b14:	e8910003 	ldm	r1, {r0, r1}
    3b18:	eb000636 	bl	53f8 <__aeabi_dsub>
    3b1c:	e1a04001 	mov	r4, r1
    3b20:	e1a01081 	lsl	r1, r1, #1
    3b24:	e1a05000 	mov	r5, r0
    3b28:	e0477aa1 	sub	r7, r7, r1, lsr #21
    3b2c:	e1a02005 	mov	r2, r5
    3b30:	e1a03004 	mov	r3, r4
    3b34:	e3570031 	cmp	r7, #49	; 0x31
    3b38:	e888000c 	stm	r8, {r2, r3}
    3b3c:	da00004f 	ble	3c80 <__ieee754_rem_pio2+0x620>
    3b40:	e3a0242e 	mov	r2, #771751936	; 0x2e000000
    3b44:	e59f3164 	ldr	r3, [pc, #356]	; 3cb0 <__ieee754_rem_pio2+0x650>
    3b48:	e28d1010 	add	r1, sp, #16
    3b4c:	e8910003 	ldm	r1, {r0, r1}
    3b50:	eb00072d 	bl	580c <__aeabi_dmul>
    3b54:	e1a04000 	mov	r4, r0
    3b58:	e1a05001 	mov	r5, r1
    3b5c:	e1a02004 	mov	r2, r4
    3b60:	e1a03005 	mov	r3, r5
    3b64:	e28d1018 	add	r1, sp, #24
    3b68:	e8910003 	ldm	r1, {r0, r1}
    3b6c:	eb000621 	bl	53f8 <__aeabi_dsub>
    3b70:	e1a0a000 	mov	r10, r0
    3b74:	e1a0b001 	mov	r11, r1
    3b78:	e1a0200a 	mov	r2, r10
    3b7c:	e1a0300b 	mov	r3, r11
    3b80:	e28d1018 	add	r1, sp, #24
    3b84:	e8910003 	ldm	r1, {r0, r1}
    3b88:	eb00061a 	bl	53f8 <__aeabi_dsub>
    3b8c:	e1a02004 	mov	r2, r4
    3b90:	e1a03005 	mov	r3, r5
    3b94:	eb000617 	bl	53f8 <__aeabi_dsub>
    3b98:	e28f3c01 	add	r3, pc, #256	; 0x100
    3b9c:	e893000c 	ldm	r3, {r2, r3}
    3ba0:	e1a04000 	mov	r4, r0
    3ba4:	e1a05001 	mov	r5, r1
    3ba8:	e28d1010 	add	r1, sp, #16
    3bac:	e8910003 	ldm	r1, {r0, r1}
    3bb0:	eb000715 	bl	580c <__aeabi_dmul>
    3bb4:	e1a02004 	mov	r2, r4
    3bb8:	e1a03005 	mov	r3, r5
    3bbc:	eb00060d 	bl	53f8 <__aeabi_dsub>
    3bc0:	e58d0008 	str	r0, [sp, #8]
    3bc4:	e58d100c 	str	r1, [sp, #12]
    3bc8:	e1a0000a 	mov	r0, r10
    3bcc:	e1a0100b 	mov	r1, r11
    3bd0:	eaffff6c 	b	3988 <__ieee754_rem_pio2+0x328>
    3bd4:	eb000608 	bl	53fc <__adddf3>
    3bd8:	e59f30d4 	ldr	r3, [pc, #212]	; 3cb4 <__ieee754_rem_pio2+0x654>
    3bdc:	e1570003 	cmp	r7, r3
    3be0:	e1a0a000 	mov	r10, r0
    3be4:	e1a0b001 	mov	r11, r1
    3be8:	0a00000f 	beq	3c2c <__ieee754_rem_pio2+0x5cc>
    3bec:	e28f30b4 	add	r3, pc, #180	; 0xb4
    3bf0:	e893000c 	ldm	r3, {r2, r3}
    3bf4:	eb000600 	bl	53fc <__adddf3>
    3bf8:	e1a02000 	mov	r2, r0
    3bfc:	e1a03001 	mov	r3, r1
    3c00:	e8880003 	stm	r8, {r0, r1}
    3c04:	e1a0000a 	mov	r0, r10
    3c08:	e1a0100b 	mov	r1, r11
    3c0c:	eb0005f9 	bl	53f8 <__aeabi_dsub>
    3c10:	e28f3090 	add	r3, pc, #144	; 0x90
    3c14:	e893000c 	ldm	r3, {r2, r3}
    3c18:	eb0005f7 	bl	53fc <__adddf3>
    3c1c:	e3e06000 	mvn	r6, #0
    3c20:	e5880008 	str	r0, [r8, #8]
    3c24:	e588100c 	str	r1, [r8, #12]
    3c28:	eafffef9 	b	3814 <__ieee754_rem_pio2+0x1b4>
    3c2c:	e28f305c 	add	r3, pc, #92	; 0x5c
    3c30:	e893000c 	ldm	r3, {r2, r3}
    3c34:	eb0005f0 	bl	53fc <__adddf3>
    3c38:	e28f3058 	add	r3, pc, #88	; 0x58
    3c3c:	e893000c 	ldm	r3, {r2, r3}
    3c40:	e1a06000 	mov	r6, r0
    3c44:	e1a07001 	mov	r7, r1
    3c48:	eb0005eb 	bl	53fc <__adddf3>
    3c4c:	e1a02000 	mov	r2, r0
    3c50:	e1a03001 	mov	r3, r1
    3c54:	e8880003 	stm	r8, {r0, r1}
    3c58:	e1a00006 	mov	r0, r6
    3c5c:	e1a01007 	mov	r1, r7
    3c60:	eb0005e4 	bl	53f8 <__aeabi_dsub>
    3c64:	e28f302c 	add	r3, pc, #44	; 0x2c
    3c68:	e893000c 	ldm	r3, {r2, r3}
    3c6c:	eb0005e2 	bl	53fc <__adddf3>
    3c70:	e3e06000 	mvn	r6, #0
    3c74:	e5880008 	str	r0, [r8, #8]
    3c78:	e588100c 	str	r1, [r8, #12]
    3c7c:	eafffee4 	b	3814 <__ieee754_rem_pio2+0x1b4>
    3c80:	e28db018 	add	r11, sp, #24
    3c84:	e89b0c00 	ldm	r11, {r10, r11}
    3c88:	eaffff46 	b	39a8 <__ieee754_rem_pio2+0x348>
    3c8c:	e1a00000 	nop			; (mov r0, r0)
    3c90:	1a600000 	.word	0x1a600000
    3c94:	3dd0b461 	.word	0x3dd0b461
    3c98:	2e037073 	.word	0x2e037073
    3c9c:	3ba3198a 	.word	0x3ba3198a
    3ca0:	252049c1 	.word	0x252049c1
    3ca4:	397b839a 	.word	0x397b839a
    3ca8:	1a626331 	.word	0x1a626331
    3cac:	3dd0b461 	.word	0x3dd0b461
    3cb0:	3ba3198a 	.word	0x3ba3198a
    3cb4:	3ff921fb 	.word	0x3ff921fb

00003cb8 <__ieee754_sqrt>:
    3cb8:	e59fc230 	ldr	r12, [pc, #560]	; 3ef0 <__ieee754_sqrt+0x238>
    3cbc:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    3cc0:	e59f7228 	ldr	r7, [pc, #552]	; 3ef0 <__ieee754_sqrt+0x238>
    3cc4:	e001c00c 	and	r12, r1, r12
    3cc8:	e15c0007 	cmp	r12, r7
    3ccc:	e1a04000 	mov	r4, r0
    3cd0:	e1a05001 	mov	r5, r1
    3cd4:	e1a02000 	mov	r2, r0
    3cd8:	e1a03001 	mov	r3, r1
    3cdc:	e1a06001 	mov	r6, r1
    3ce0:	e1a0c001 	mov	r12, r1
    3ce4:	e1a08000 	mov	r8, r0
    3ce8:	0a00006a 	beq	3e98 <__ieee754_sqrt+0x1e0>
    3cec:	e3510000 	cmp	r1, #0
    3cf0:	da000051 	ble	3e3c <__ieee754_sqrt+0x184>
    3cf4:	e1b02a41 	asrs	r2, r1, #20
    3cf8:	0a00005a 	beq	3e68 <__ieee754_sqrt+0x1b0>
    3cfc:	e3cc34ff 	bic	r3, r12, #-16777216	; 0xff000000
    3d00:	e3120001 	tst	r2, #1
    3d04:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
    3d08:	e2426fff 	sub	r6, r2, #1020	; 0x3fc
    3d0c:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    3d10:	01a02fa8 	lsreq	r2, r8, #31
    3d14:	01a08088 	lsleq	r8, r8, #1
    3d18:	00823083 	addeq	r3, r2, r3, lsl #1
    3d1c:	e2466003 	sub	r6, r6, #3
    3d20:	e1a02fa8 	lsr	r2, r8, #31
    3d24:	e3a07000 	mov	r7, #0
    3d28:	e0823083 	add	r3, r2, r3, lsl #1
    3d2c:	e1a060c6 	asr	r6, r6, #1
    3d30:	e1a02088 	lsl	r2, r8, #1
    3d34:	e3a0c016 	mov	r12, #22
    3d38:	e1a00007 	mov	r0, r7
    3d3c:	e3a01602 	mov	r1, #2097152	; 0x200000
    3d40:	e0804001 	add	r4, r0, r1
    3d44:	e1540003 	cmp	r4, r3
    3d48:	e1a05fa2 	lsr	r5, r2, #31
    3d4c:	d0840001 	addle	r0, r4, r1
    3d50:	d0643003 	rsble	r3, r4, r3
    3d54:	d0877001 	addle	r7, r7, r1
    3d58:	e25cc001 	subs	r12, r12, #1
    3d5c:	e0853083 	add	r3, r5, r3, lsl #1
    3d60:	e1a02082 	lsl	r2, r2, #1
    3d64:	e1a010a1 	lsr	r1, r1, #1
    3d68:	1afffff4 	bne	3d40 <__ieee754_sqrt+0x88>
    3d6c:	e3a05020 	mov	r5, #32
    3d70:	e1a0800c 	mov	r8, r12
    3d74:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    3d78:	ea00000c 	b	3db0 <__ieee754_sqrt+0xf8>
    3d7c:	e1a0a000 	mov	r10, r0
    3d80:	e1540002 	cmp	r4, r2
    3d84:	e0603003 	rsb	r3, r0, r3
    3d88:	82433001 	subhi	r3, r3, #1
    3d8c:	e0642002 	rsb	r2, r4, r2
    3d90:	e08cc001 	add	r12, r12, r1
    3d94:	e1a0000a 	mov	r0, r10
    3d98:	e1a04fa2 	lsr	r4, r2, #31
    3d9c:	e2555001 	subs	r5, r5, #1
    3da0:	e0843083 	add	r3, r4, r3, lsl #1
    3da4:	e1a02082 	lsl	r2, r2, #1
    3da8:	e1a010a1 	lsr	r1, r1, #1
    3dac:	0a00000d 	beq	3de8 <__ieee754_sqrt+0x130>
    3db0:	e1500003 	cmp	r0, r3
    3db4:	e0814008 	add	r4, r1, r8
    3db8:	ba000002 	blt	3dc8 <__ieee754_sqrt+0x110>
    3dbc:	e1540002 	cmp	r4, r2
    3dc0:	91530000 	cmpls	r3, r0
    3dc4:	1afffff3 	bne	3d98 <__ieee754_sqrt+0xe0>
    3dc8:	e2048102 	and	r8, r4, #-2147483648	; 0x80000000
    3dcc:	e3580102 	cmp	r8, #-2147483648	; 0x80000000
    3dd0:	e0848001 	add	r8, r4, r1
    3dd4:	1affffe8 	bne	3d7c <__ieee754_sqrt+0xc4>
    3dd8:	e3580000 	cmp	r8, #0
    3ddc:	a280a001 	addge	r10, r0, #1
    3de0:	aaffffe6 	bge	3d80 <__ieee754_sqrt+0xc8>
    3de4:	eaffffe4 	b	3d7c <__ieee754_sqrt+0xc4>
    3de8:	e1923003 	orrs	r3, r2, r3
    3dec:	1a00000b 	bne	3e20 <__ieee754_sqrt+0x168>
    3df0:	e1a0c0ac 	lsr	r12, r12, #1
    3df4:	e1a030c7 	asr	r3, r7, #1
    3df8:	e28335ff 	add	r3, r3, #1069547520	; 0x3fc00000
    3dfc:	e3170001 	tst	r7, #1
    3e00:	e2833602 	add	r3, r3, #2097152	; 0x200000
    3e04:	138cc102 	orrne	r12, r12, #-2147483648	; 0x80000000
    3e08:	e0835a06 	add	r5, r3, r6, lsl #20
    3e0c:	e1a0400c 	mov	r4, r12
    3e10:	e1a00004 	mov	r0, r4
    3e14:	e1a01005 	mov	r1, r5
    3e18:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    3e1c:	e12fff1e 	bx	lr
    3e20:	e37c0001 	cmn	r12, #1
    3e24:	02877001 	addeq	r7, r7, #1
    3e28:	01a0c005 	moveq	r12, r5
    3e2c:	0afffff0 	beq	3df4 <__ieee754_sqrt+0x13c>
    3e30:	e20c3001 	and	r3, r12, #1
    3e34:	e083c00c 	add	r12, r3, r12
    3e38:	eaffffec 	b	3df0 <__ieee754_sqrt+0x138>
    3e3c:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    3e40:	e19cc000 	orrs	r12, r12, r0
    3e44:	0afffff1 	beq	3e10 <__ieee754_sqrt+0x158>
    3e48:	e3510000 	cmp	r1, #0
    3e4c:	01a02001 	moveq	r2, r1
    3e50:	1a00001d 	bne	3ecc <__ieee754_sqrt+0x214>
    3e54:	e1a0c5a8 	lsr	r12, r8, #11
    3e58:	e35c0000 	cmp	r12, #0
    3e5c:	e2422015 	sub	r2, r2, #21
    3e60:	e1a08a88 	lsl	r8, r8, #21
    3e64:	0afffffa 	beq	3e54 <__ieee754_sqrt+0x19c>
    3e68:	e21c3601 	ands	r3, r12, #1048576	; 0x100000
    3e6c:	1a000012 	bne	3ebc <__ieee754_sqrt+0x204>
    3e70:	e1a0c08c 	lsl	r12, r12, #1
    3e74:	e31c0601 	tst	r12, #1048576	; 0x100000
    3e78:	e2833001 	add	r3, r3, #1
    3e7c:	0afffffb 	beq	3e70 <__ieee754_sqrt+0x1b8>
    3e80:	e2631001 	rsb	r1, r3, #1
    3e84:	e2630020 	rsb	r0, r3, #32
    3e88:	e18cc038 	orr	r12, r12, r8, lsr r0
    3e8c:	e0822001 	add	r2, r2, r1
    3e90:	e1a08318 	lsl	r8, r8, r3
    3e94:	eaffff98 	b	3cfc <__ieee754_sqrt+0x44>
    3e98:	eb00065b 	bl	580c <__aeabi_dmul>
    3e9c:	e1a02000 	mov	r2, r0
    3ea0:	e1a03001 	mov	r3, r1
    3ea4:	e1a00004 	mov	r0, r4
    3ea8:	e1a01005 	mov	r1, r5
    3eac:	eb000552 	bl	53fc <__adddf3>
    3eb0:	e1a04000 	mov	r4, r0
    3eb4:	e1a05001 	mov	r5, r1
    3eb8:	eaffffd4 	b	3e10 <__ieee754_sqrt+0x158>
    3ebc:	e3a00020 	mov	r0, #32
    3ec0:	e3a01001 	mov	r1, #1
    3ec4:	e3a03000 	mov	r3, #0
    3ec8:	eaffffee 	b	3e88 <__ieee754_sqrt+0x1d0>
    3ecc:	e1a02000 	mov	r2, r0
    3ed0:	e1a03001 	mov	r3, r1
    3ed4:	eb000547 	bl	53f8 <__aeabi_dsub>
    3ed8:	e1a02000 	mov	r2, r0
    3edc:	e1a03001 	mov	r3, r1
    3ee0:	eb0006ed 	bl	5a9c <__aeabi_ddiv>
    3ee4:	e1a04000 	mov	r4, r0
    3ee8:	e1a05001 	mov	r5, r1
    3eec:	eaffffc7 	b	3e10 <__ieee754_sqrt+0x158>
    3ef0:	7ff00000 	.word	0x7ff00000
    3ef4:	00000000 	.word	0x00000000

00003ef8 <__kernel_cos>:
    3ef8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3efc:	e3c19102 	bic	r9, r1, #-2147483648	; 0x80000000
    3f00:	e35905f9 	cmp	r9, #1044381696	; 0x3e400000
    3f04:	e24dd014 	sub	sp, sp, #20
    3f08:	e1a06000 	mov	r6, r0
    3f0c:	e1a07001 	mov	r7, r1
    3f10:	e1a04000 	mov	r4, r0
    3f14:	e1a05001 	mov	r5, r1
    3f18:	e1a0a002 	mov	r10, r2
    3f1c:	e1a0b003 	mov	r11, r3
    3f20:	aa00004d 	bge	405c <__kernel_cos+0x164>
    3f24:	eb0007b0 	bl	5dec <__aeabi_d2iz>
    3f28:	e3500000 	cmp	r0, #0
    3f2c:	0a0000ae 	beq	41ec <__kernel_cos+0x2f4>
    3f30:	e1a02006 	mov	r2, r6
    3f34:	e1a03007 	mov	r3, r7
    3f38:	e1a00006 	mov	r0, r6
    3f3c:	e1a01007 	mov	r1, r7
    3f40:	eb000631 	bl	580c <__aeabi_dmul>
    3f44:	e28f3fab 	add	r3, pc, #684	; 0x2ac
    3f48:	e893000c 	ldm	r3, {r2, r3}
    3f4c:	e1a04000 	mov	r4, r0
    3f50:	e1a05001 	mov	r5, r1
    3f54:	eb00062c 	bl	580c <__aeabi_dmul>
    3f58:	e28f3e2a 	add	r3, pc, #672	; 0x2a0
    3f5c:	e893000c 	ldm	r3, {r2, r3}
    3f60:	eb000525 	bl	53fc <__adddf3>
    3f64:	e1a02004 	mov	r2, r4
    3f68:	e1a03005 	mov	r3, r5
    3f6c:	eb000626 	bl	580c <__aeabi_dmul>
    3f70:	e28f3e29 	add	r3, pc, #656	; 0x290
    3f74:	e893000c 	ldm	r3, {r2, r3}
    3f78:	eb00051e 	bl	53f8 <__aeabi_dsub>
    3f7c:	e1a02004 	mov	r2, r4
    3f80:	e1a03005 	mov	r3, r5
    3f84:	eb000620 	bl	580c <__aeabi_dmul>
    3f88:	e28f3d0a 	add	r3, pc, #640	; 0x280
    3f8c:	e893000c 	ldm	r3, {r2, r3}
    3f90:	eb000519 	bl	53fc <__adddf3>
    3f94:	e1a02004 	mov	r2, r4
    3f98:	e1a03005 	mov	r3, r5
    3f9c:	eb00061a 	bl	580c <__aeabi_dmul>
    3fa0:	e28f3e27 	add	r3, pc, #624	; 0x270
    3fa4:	e893000c 	ldm	r3, {r2, r3}
    3fa8:	eb000512 	bl	53f8 <__aeabi_dsub>
    3fac:	e1a02004 	mov	r2, r4
    3fb0:	e1a03005 	mov	r3, r5
    3fb4:	eb000614 	bl	580c <__aeabi_dmul>
    3fb8:	e28f3e26 	add	r3, pc, #608	; 0x260
    3fbc:	e893000c 	ldm	r3, {r2, r3}
    3fc0:	eb00050d 	bl	53fc <__adddf3>
    3fc4:	e1a02004 	mov	r2, r4
    3fc8:	e1a03005 	mov	r3, r5
    3fcc:	eb00060e 	bl	580c <__aeabi_dmul>
    3fd0:	e88d0003 	stm	sp, {r0, r1}
    3fd4:	e1a00004 	mov	r0, r4
    3fd8:	e1a01005 	mov	r1, r5
    3fdc:	e3a02000 	mov	r2, #0
    3fe0:	e59f3240 	ldr	r3, [pc, #576]	; 4228 <__kernel_cos+0x330>
    3fe4:	eb000608 	bl	580c <__aeabi_dmul>
    3fe8:	e89d000c 	ldm	sp, {r2, r3}
    3fec:	e1a08000 	mov	r8, r0
    3ff0:	e1a09001 	mov	r9, r1
    3ff4:	e1a00004 	mov	r0, r4
    3ff8:	e1a01005 	mov	r1, r5
    3ffc:	eb000602 	bl	580c <__aeabi_dmul>
    4000:	e1a0200a 	mov	r2, r10
    4004:	e1a04000 	mov	r4, r0
    4008:	e1a05001 	mov	r5, r1
    400c:	e1a0300b 	mov	r3, r11
    4010:	e1a00006 	mov	r0, r6
    4014:	e1a01007 	mov	r1, r7
    4018:	eb0005fb 	bl	580c <__aeabi_dmul>
    401c:	e1a02000 	mov	r2, r0
    4020:	e1a03001 	mov	r3, r1
    4024:	e1a00004 	mov	r0, r4
    4028:	e1a01005 	mov	r1, r5
    402c:	eb0004f1 	bl	53f8 <__aeabi_dsub>
    4030:	e1a02000 	mov	r2, r0
    4034:	e1a03001 	mov	r3, r1
    4038:	e1a00008 	mov	r0, r8
    403c:	e1a01009 	mov	r1, r9
    4040:	eb0004ec 	bl	53f8 <__aeabi_dsub>
    4044:	e1a02000 	mov	r2, r0
    4048:	e1a03001 	mov	r3, r1
    404c:	e3a00000 	mov	r0, #0
    4050:	e59f11d4 	ldr	r1, [pc, #468]	; 422c <__kernel_cos+0x334>
    4054:	eb0004e7 	bl	53f8 <__aeabi_dsub>
    4058:	ea00005a 	b	41c8 <__kernel_cos+0x2d0>
    405c:	e1a02000 	mov	r2, r0
    4060:	e1a03001 	mov	r3, r1
    4064:	eb0005e8 	bl	580c <__aeabi_dmul>
    4068:	e28f3f62 	add	r3, pc, #392	; 0x188
    406c:	e893000c 	ldm	r3, {r2, r3}
    4070:	e1a04000 	mov	r4, r0
    4074:	e1a05001 	mov	r5, r1
    4078:	eb0005e3 	bl	580c <__aeabi_dmul>
    407c:	e28f3f5f 	add	r3, pc, #380	; 0x17c
    4080:	e893000c 	ldm	r3, {r2, r3}
    4084:	eb0004dc 	bl	53fc <__adddf3>
    4088:	e1a02004 	mov	r2, r4
    408c:	e1a03005 	mov	r3, r5
    4090:	eb0005dd 	bl	580c <__aeabi_dmul>
    4094:	e28f3f5b 	add	r3, pc, #364	; 0x16c
    4098:	e893000c 	ldm	r3, {r2, r3}
    409c:	eb0004d5 	bl	53f8 <__aeabi_dsub>
    40a0:	e1a02004 	mov	r2, r4
    40a4:	e1a03005 	mov	r3, r5
    40a8:	eb0005d7 	bl	580c <__aeabi_dmul>
    40ac:	e28f3f57 	add	r3, pc, #348	; 0x15c
    40b0:	e893000c 	ldm	r3, {r2, r3}
    40b4:	eb0004d0 	bl	53fc <__adddf3>
    40b8:	e1a02004 	mov	r2, r4
    40bc:	e1a03005 	mov	r3, r5
    40c0:	eb0005d1 	bl	580c <__aeabi_dmul>
    40c4:	e28f3f53 	add	r3, pc, #332	; 0x14c
    40c8:	e893000c 	ldm	r3, {r2, r3}
    40cc:	eb0004c9 	bl	53f8 <__aeabi_dsub>
    40d0:	e1a02004 	mov	r2, r4
    40d4:	e1a03005 	mov	r3, r5
    40d8:	eb0005cb 	bl	580c <__aeabi_dmul>
    40dc:	e28f3f4f 	add	r3, pc, #316	; 0x13c
    40e0:	e893000c 	ldm	r3, {r2, r3}
    40e4:	eb0004c4 	bl	53fc <__adddf3>
    40e8:	e1a03005 	mov	r3, r5
    40ec:	e1a02004 	mov	r2, r4
    40f0:	eb0005c5 	bl	580c <__aeabi_dmul>
    40f4:	e59f3134 	ldr	r3, [pc, #308]	; 4230 <__kernel_cos+0x338>
    40f8:	e1590003 	cmp	r9, r3
    40fc:	e88d0003 	stm	sp, {r0, r1}
    4100:	daffffb3 	ble	3fd4 <__kernel_cos+0xdc>
    4104:	e59f3128 	ldr	r3, [pc, #296]	; 4234 <__kernel_cos+0x33c>
    4108:	e1590003 	cmp	r9, r3
    410c:	e3a02000 	mov	r2, #0
    4110:	ca00002f 	bgt	41d4 <__kernel_cos+0x2dc>
    4114:	e2493602 	sub	r3, r9, #2097152	; 0x200000
    4118:	e3a02000 	mov	r2, #0
    411c:	e3a00000 	mov	r0, #0
    4120:	e59f1104 	ldr	r1, [pc, #260]	; 422c <__kernel_cos+0x334>
    4124:	e1a08002 	mov	r8, r2
    4128:	e1a09003 	mov	r9, r3
    412c:	eb0004b1 	bl	53f8 <__aeabi_dsub>
    4130:	e58d0008 	str	r0, [sp, #8]
    4134:	e58d100c 	str	r1, [sp, #12]
    4138:	e1a00004 	mov	r0, r4
    413c:	e1a01005 	mov	r1, r5
    4140:	e3a02000 	mov	r2, #0
    4144:	e59f30dc 	ldr	r3, [pc, #220]	; 4228 <__kernel_cos+0x330>
    4148:	eb0005af 	bl	580c <__aeabi_dmul>
    414c:	e1a02008 	mov	r2, r8
    4150:	e1a03009 	mov	r3, r9
    4154:	eb0004a7 	bl	53f8 <__aeabi_dsub>
    4158:	e89d000c 	ldm	sp, {r2, r3}
    415c:	e1a08000 	mov	r8, r0
    4160:	e1a09001 	mov	r9, r1
    4164:	e1a00004 	mov	r0, r4
    4168:	e1a01005 	mov	r1, r5
    416c:	eb0005a6 	bl	580c <__aeabi_dmul>
    4170:	e1a0200a 	mov	r2, r10
    4174:	e1a04000 	mov	r4, r0
    4178:	e1a05001 	mov	r5, r1
    417c:	e1a0300b 	mov	r3, r11
    4180:	e1a00006 	mov	r0, r6
    4184:	e1a01007 	mov	r1, r7
    4188:	eb00059f 	bl	580c <__aeabi_dmul>
    418c:	e1a02000 	mov	r2, r0
    4190:	e1a03001 	mov	r3, r1
    4194:	e1a00004 	mov	r0, r4
    4198:	e1a01005 	mov	r1, r5
    419c:	eb000495 	bl	53f8 <__aeabi_dsub>
    41a0:	e1a02000 	mov	r2, r0
    41a4:	e1a03001 	mov	r3, r1
    41a8:	e1a00008 	mov	r0, r8
    41ac:	e1a01009 	mov	r1, r9
    41b0:	eb000490 	bl	53f8 <__aeabi_dsub>
    41b4:	e1a02000 	mov	r2, r0
    41b8:	e1a03001 	mov	r3, r1
    41bc:	e28d1008 	add	r1, sp, #8
    41c0:	e8910003 	ldm	r1, {r0, r1}
    41c4:	eb00048b 	bl	53f8 <__aeabi_dsub>
    41c8:	e28dd014 	add	sp, sp, #20
    41cc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    41d0:	e12fff1e 	bx	lr
    41d4:	e59f305c 	ldr	r3, [pc, #92]	; 4238 <__kernel_cos+0x340>
    41d8:	e3a08000 	mov	r8, #0
    41dc:	e58d2008 	str	r2, [sp, #8]
    41e0:	e58d300c 	str	r3, [sp, #12]
    41e4:	e59f9050 	ldr	r9, [pc, #80]	; 423c <__kernel_cos+0x344>
    41e8:	eaffffd2 	b	4138 <__kernel_cos+0x240>
    41ec:	e3a00000 	mov	r0, #0
    41f0:	e59f1034 	ldr	r1, [pc, #52]	; 422c <__kernel_cos+0x334>
    41f4:	eafffff3 	b	41c8 <__kernel_cos+0x2d0>
    41f8:	be8838d4 	.word	0xbe8838d4
    41fc:	bda8fae9 	.word	0xbda8fae9
    4200:	bdb4b1c4 	.word	0xbdb4b1c4
    4204:	3e21ee9e 	.word	0x3e21ee9e
    4208:	809c52ad 	.word	0x809c52ad
    420c:	3e927e4f 	.word	0x3e927e4f
    4210:	19cb1590 	.word	0x19cb1590
    4214:	3efa01a0 	.word	0x3efa01a0
    4218:	16c15177 	.word	0x16c15177
    421c:	3f56c16c 	.word	0x3f56c16c
    4220:	5555554c 	.word	0x5555554c
    4224:	3fa55555 	.word	0x3fa55555
    4228:	3fe00000 	.word	0x3fe00000
    422c:	3ff00000 	.word	0x3ff00000
    4230:	3fd33332 	.word	0x3fd33332
    4234:	3fe90000 	.word	0x3fe90000
    4238:	3fe70000 	.word	0x3fe70000
    423c:	3fd20000 	.word	0x3fd20000

00004240 <__kernel_rem_pio2>:
    4240:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    4244:	e59feb6c 	ldr	lr, [pc, #2924]	; 4db8 <__kernel_rem_pio2+0xb78>
    4248:	e242c003 	sub	r12, r2, #3
    424c:	e0ce4e9c 	smull	r4, lr, r12, lr
    4250:	e1a0cfcc 	asr	r12, r12, #31
    4254:	e06cc14e 	rsb	r12, r12, lr, asr #2
    4258:	e24ddf99 	sub	sp, sp, #612	; 0x264
    425c:	e1cccfcc 	bic	r12, r12, r12, asr #31
    4260:	e58dc028 	str	r12, [sp, #40]	; 0x28
    4264:	e1a0b003 	mov	r11, r3
    4268:	e59dc288 	ldr	r12, [sp, #648]	; 0x288
    426c:	e59f3b48 	ldr	r3, [pc, #2888]	; 4dbc <__kernel_rem_pio2+0xb7c>
    4270:	e793310c 	ldr	r3, [r3, r12, lsl #2]
    4274:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    4278:	e58d3020 	str	r3, [sp, #32]
    427c:	e59de020 	ldr	lr, [sp, #32]
    4280:	e1e0300c 	mvn	r3, r12
    4284:	e24b4001 	sub	r4, r11, #1
    4288:	e0833083 	add	r3, r3, r3, lsl #1
    428c:	e58d0010 	str	r0, [sp, #16]
    4290:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
    4294:	e0823183 	add	r3, r2, r3, lsl #3
    4298:	e094c00e 	adds	r12, r4, lr
    429c:	e58d400c 	str	r4, [sp, #12]
    42a0:	e58d101c 	str	r1, [sp, #28]
    42a4:	e58d3018 	str	r3, [sp, #24]
    42a8:	e0646000 	rsb	r6, r4, r0
    42ac:	4a000012 	bmi	42fc <__kernel_rem_pio2+0xbc>
    42b0:	e086c00c 	add	r12, r6, r12
    42b4:	e28c4001 	add	r4, r12, #1
    42b8:	e59dc28c 	ldr	r12, [sp, #652]	; 0x28c
    42bc:	e28d8080 	add	r8, sp, #128	; 0x80
    42c0:	e08c5106 	add	r5, r12, r6, lsl #2
    42c4:	e3a07000 	mov	r7, #0
    42c8:	ea000006 	b	42e8 <__kernel_rem_pio2+0xa8>
    42cc:	e7950007 	ldr	r0, [r5, r7]
    42d0:	eb000516 	bl	5730 <__aeabi_i2d>
    42d4:	e2866001 	add	r6, r6, #1
    42d8:	e1560004 	cmp	r6, r4
    42dc:	e8a80003 	stmia	r8!, {r0, r1}
    42e0:	e2877004 	add	r7, r7, #4
    42e4:	0a000004 	beq	42fc <__kernel_rem_pio2+0xbc>
    42e8:	e3560000 	cmp	r6, #0
    42ec:	aafffff6 	bge	42cc <__kernel_rem_pio2+0x8c>
    42f0:	e3a00000 	mov	r0, #0
    42f4:	e3a01000 	mov	r1, #0
    42f8:	eafffff5 	b	42d4 <__kernel_rem_pio2+0x94>
    42fc:	e59d4020 	ldr	r4, [sp, #32]
    4300:	e3540000 	cmp	r4, #0
    4304:	ba000020 	blt	438c <__kernel_rem_pio2+0x14c>
    4308:	e59d4020 	ldr	r4, [sp, #32]
    430c:	e28dcf72 	add	r12, sp, #456	; 0x1c8
    4310:	e08cc184 	add	r12, r12, r4, lsl #3
    4314:	e58dc004 	str	r12, [sp, #4]
    4318:	e28dad07 	add	r10, sp, #448	; 0x1c0
    431c:	e1a0800b 	mov	r8, r11
    4320:	e59dc00c 	ldr	r12, [sp, #12]
    4324:	e35c0000 	cmp	r12, #0
    4328:	ba000130 	blt	47f0 <__kernel_rem_pio2+0x5b0>
    432c:	e28de080 	add	lr, sp, #128	; 0x80
    4330:	e59d9010 	ldr	r9, [sp, #16]
    4334:	e08e7188 	add	r7, lr, r8, lsl #3
    4338:	e3a04000 	mov	r4, #0
    433c:	e3a05000 	mov	r5, #0
    4340:	e3a06000 	mov	r6, #0
    4344:	e937000c 	ldmdb	r7!, {r2, r3}
    4348:	e8b90003 	ldm	r9!, {r0, r1}
    434c:	eb00052e 	bl	580c <__aeabi_dmul>
    4350:	e1a02000 	mov	r2, r0
    4354:	e1a03001 	mov	r3, r1
    4358:	e1a00004 	mov	r0, r4
    435c:	e1a01005 	mov	r1, r5
    4360:	eb000425 	bl	53fc <__adddf3>
    4364:	e2866001 	add	r6, r6, #1
    4368:	e156000b 	cmp	r6, r11
    436c:	e1a04000 	mov	r4, r0
    4370:	e1a05001 	mov	r5, r1
    4374:	1afffff2 	bne	4344 <__kernel_rem_pio2+0x104>
    4378:	e8aa0030 	stmia	r10!, {r4, r5}
    437c:	e59d4004 	ldr	r4, [sp, #4]
    4380:	e15a0004 	cmp	r10, r4
    4384:	e2888001 	add	r8, r8, #1
    4388:	1affffe4 	bne	4320 <__kernel_rem_pio2+0xe0>
    438c:	e59dc020 	ldr	r12, [sp, #32]
    4390:	e28d4030 	add	r4, sp, #48	; 0x30
    4394:	e084410c 	add	r4, r4, r12, lsl #2
    4398:	e58d402c 	str	r4, [sp, #44]	; 0x2c
    439c:	e58dc004 	str	r12, [sp, #4]
    43a0:	e59d4004 	ldr	r4, [sp, #4]
    43a4:	e28dce26 	add	r12, sp, #608	; 0x260
    43a8:	e1a0a184 	lsl	r10, r4, #3
    43ac:	e08c300a 	add	r3, r12, r10
    43b0:	e3540000 	cmp	r4, #0
    43b4:	e24350a0 	sub	r5, r3, #160	; 0xa0
    43b8:	e8950030 	ldm	r5, {r4, r5}
    43bc:	da00001f 	ble	4440 <__kernel_rem_pio2+0x200>
    43c0:	e59dc004 	ldr	r12, [sp, #4]
    43c4:	e28d802c 	add	r8, sp, #44	; 0x2c
    43c8:	e28ded07 	add	lr, sp, #448	; 0x1c0
    43cc:	e08ea00a 	add	r10, lr, r10
    43d0:	e088910c 	add	r9, r8, r12, lsl #2
    43d4:	e3a02000 	mov	r2, #0
    43d8:	e59f39e0 	ldr	r3, [pc, #2528]	; 4dc0 <__kernel_rem_pio2+0xb80>
    43dc:	e1a00004 	mov	r0, r4
    43e0:	e1a01005 	mov	r1, r5
    43e4:	eb000508 	bl	580c <__aeabi_dmul>
    43e8:	eb00067f 	bl	5dec <__aeabi_d2iz>
    43ec:	eb0004cf 	bl	5730 <__aeabi_i2d>
    43f0:	e3a02000 	mov	r2, #0
    43f4:	e59f39c8 	ldr	r3, [pc, #2504]	; 4dc4 <__kernel_rem_pio2+0xb84>
    43f8:	e1a06000 	mov	r6, r0
    43fc:	e1a07001 	mov	r7, r1
    4400:	eb000501 	bl	580c <__aeabi_dmul>
    4404:	e1a02000 	mov	r2, r0
    4408:	e1a03001 	mov	r3, r1
    440c:	e1a00004 	mov	r0, r4
    4410:	e1a01005 	mov	r1, r5
    4414:	eb0003f7 	bl	53f8 <__aeabi_dsub>
    4418:	eb000673 	bl	5dec <__aeabi_d2iz>
    441c:	e1a02006 	mov	r2, r6
    4420:	e5a80004 	str	r0, [r8, #4]!
    4424:	e1a03007 	mov	r3, r7
    4428:	e93a0003 	ldmdb	r10!, {r0, r1}
    442c:	eb0003f2 	bl	53fc <__adddf3>
    4430:	e1580009 	cmp	r8, r9
    4434:	e1a04000 	mov	r4, r0
    4438:	e1a05001 	mov	r5, r1
    443c:	1affffe4 	bne	43d4 <__kernel_rem_pio2+0x194>
    4440:	e59d2018 	ldr	r2, [sp, #24]
    4444:	e1a00004 	mov	r0, r4
    4448:	e1a01005 	mov	r1, r5
    444c:	eb000379 	bl	5238 <scalbn>
    4450:	e3a02000 	mov	r2, #0
    4454:	e3a035ff 	mov	r3, #1069547520	; 0x3fc00000
    4458:	e1a04000 	mov	r4, r0
    445c:	e1a05001 	mov	r5, r1
    4460:	eb0004e9 	bl	580c <__aeabi_dmul>
    4464:	ebfff697 	bl	1ec8 <floor>
    4468:	e3a02000 	mov	r2, #0
    446c:	e59f3954 	ldr	r3, [pc, #2388]	; 4dc8 <__kernel_rem_pio2+0xb88>
    4470:	eb0004e5 	bl	580c <__aeabi_dmul>
    4474:	e1a02000 	mov	r2, r0
    4478:	e1a03001 	mov	r3, r1
    447c:	e1a00004 	mov	r0, r4
    4480:	e1a01005 	mov	r1, r5
    4484:	eb0003db 	bl	53f8 <__aeabi_dsub>
    4488:	e1a04000 	mov	r4, r0
    448c:	e1a05001 	mov	r5, r1
    4490:	eb000655 	bl	5dec <__aeabi_d2iz>
    4494:	e1a08000 	mov	r8, r0
    4498:	eb0004a4 	bl	5730 <__aeabi_i2d>
    449c:	e1a02000 	mov	r2, r0
    44a0:	e1a03001 	mov	r3, r1
    44a4:	e1a00004 	mov	r0, r4
    44a8:	e1a01005 	mov	r1, r5
    44ac:	eb0003d1 	bl	53f8 <__aeabi_dsub>
    44b0:	e59d4018 	ldr	r4, [sp, #24]
    44b4:	e3540000 	cmp	r4, #0
    44b8:	e1a06000 	mov	r6, r0
    44bc:	e1a07001 	mov	r7, r1
    44c0:	da0000ad 	ble	477c <__kernel_rem_pio2+0x53c>
    44c4:	e59dc004 	ldr	r12, [sp, #4]
    44c8:	e28dee26 	add	lr, sp, #608	; 0x260
    44cc:	e24c2001 	sub	r2, r12, #1
    44d0:	e08e2102 	add	r2, lr, r2, lsl #2
    44d4:	e5120230 	ldr	r0, [r2, #-560]	; 0xfffffdd0
    44d8:	e2643018 	rsb	r3, r4, #24
    44dc:	e1a01350 	asr	r1, r0, r3
    44e0:	e0403311 	sub	r3, r0, r1, lsl r3
    44e4:	e2645017 	rsb	r5, r4, #23
    44e8:	e1a05553 	asr	r5, r3, r5
    44ec:	e5023230 	str	r3, [r2, #-560]	; 0xfffffdd0
    44f0:	e0888001 	add	r8, r8, r1
    44f4:	e3550000 	cmp	r5, #0
    44f8:	da000027 	ble	459c <__kernel_rem_pio2+0x35c>
    44fc:	e59d4004 	ldr	r4, [sp, #4]
    4500:	e3540000 	cmp	r4, #0
    4504:	e2888001 	add	r8, r8, #1
    4508:	da0000b6 	ble	47e8 <__kernel_rem_pio2+0x5a8>
    450c:	e28d3030 	add	r3, sp, #48	; 0x30
    4510:	e0830104 	add	r0, r3, r4, lsl #2
    4514:	e3a04000 	mov	r4, #0
    4518:	ea000005 	b	4534 <__kernel_rem_pio2+0x2f4>
    451c:	e3520000 	cmp	r2, #0
    4520:	12622401 	rsbne	r2, r2, #16777216	; 0x1000000
    4524:	15032004 	strne	r2, [r3, #-4]
    4528:	13a04001 	movne	r4, #1
    452c:	e1530000 	cmp	r3, r0
    4530:	0a000008 	beq	4558 <__kernel_rem_pio2+0x318>
    4534:	e3540000 	cmp	r4, #0
    4538:	e4932004 	ldr	r2, [r3], #4
    453c:	0afffff6 	beq	451c <__kernel_rem_pio2+0x2dc>
    4540:	e3e014ff 	mvn	r1, #-16777216	; 0xff000000
    4544:	e0621001 	rsb	r1, r2, r1
    4548:	e1530000 	cmp	r3, r0
    454c:	e5031004 	str	r1, [r3, #-4]
    4550:	e3a04001 	mov	r4, #1
    4554:	1afffff6 	bne	4534 <__kernel_rem_pio2+0x2f4>
    4558:	e59dc018 	ldr	r12, [sp, #24]
    455c:	e35c0000 	cmp	r12, #0
    4560:	da00000b 	ble	4594 <__kernel_rem_pio2+0x354>
    4564:	e35c0001 	cmp	r12, #1
    4568:	0a00008a 	beq	4798 <__kernel_rem_pio2+0x558>
    456c:	e35c0002 	cmp	r12, #2
    4570:	1a000007 	bne	4594 <__kernel_rem_pio2+0x354>
    4574:	e59dc004 	ldr	r12, [sp, #4]
    4578:	e28dee26 	add	lr, sp, #608	; 0x260
    457c:	e24c3001 	sub	r3, r12, #1
    4580:	e08e3103 	add	r3, lr, r3, lsl #2
    4584:	e5132230 	ldr	r2, [r3, #-560]	; 0xfffffdd0
    4588:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
    458c:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000
    4590:	e5032230 	str	r2, [r3, #-560]	; 0xfffffdd0
    4594:	e3550002 	cmp	r5, #2
    4598:	0a000062 	beq	4728 <__kernel_rem_pio2+0x4e8>
    459c:	e1a00006 	mov	r0, r6
    45a0:	e1a01007 	mov	r1, r7
    45a4:	e3a02000 	mov	r2, #0
    45a8:	e3a03000 	mov	r3, #0
    45ac:	eb0005f0 	bl	5d74 <__aeabi_dcmpeq>
    45b0:	e3500000 	cmp	r0, #0
    45b4:	0a000090 	beq	47fc <__kernel_rem_pio2+0x5bc>
    45b8:	e59d4004 	ldr	r4, [sp, #4]
    45bc:	e59dc020 	ldr	r12, [sp, #32]
    45c0:	e2440001 	sub	r0, r4, #1
    45c4:	e15c0000 	cmp	r12, r0
    45c8:	ca000009 	bgt	45f4 <__kernel_rem_pio2+0x3b4>
    45cc:	e28de030 	add	lr, sp, #48	; 0x30
    45d0:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
    45d4:	e08e3104 	add	r3, lr, r4, lsl #2
    45d8:	e3a02000 	mov	r2, #0
    45dc:	e5331004 	ldr	r1, [r3, #-4]!
    45e0:	e153000c 	cmp	r3, r12
    45e4:	e1822001 	orr	r2, r2, r1
    45e8:	1afffffb 	bne	45dc <__kernel_rem_pio2+0x39c>
    45ec:	e3520000 	cmp	r2, #0
    45f0:	1a0001c9 	bne	4d1c <__kernel_rem_pio2+0xadc>
    45f4:	e59d4020 	ldr	r4, [sp, #32]
    45f8:	e2442001 	sub	r2, r4, #1
    45fc:	e1a02102 	lsl	r2, r2, #2
    4600:	e28dce26 	add	r12, sp, #608	; 0x260
    4604:	e08c3002 	add	r3, r12, r2
    4608:	e5133230 	ldr	r3, [r3, #-560]	; 0xfffffdd0
    460c:	e3530000 	cmp	r3, #0
    4610:	1a0001d9 	bne	4d7c <__kernel_rem_pio2+0xb3c>
    4614:	e28de030 	add	lr, sp, #48	; 0x30
    4618:	e08e2002 	add	r2, lr, r2
    461c:	e3a03001 	mov	r3, #1
    4620:	e5321004 	ldr	r1, [r2, #-4]!
    4624:	e3510000 	cmp	r1, #0
    4628:	e2833001 	add	r3, r3, #1
    462c:	0afffffb 	beq	4620 <__kernel_rem_pio2+0x3e0>
    4630:	e59d4004 	ldr	r4, [sp, #4]
    4634:	e0843003 	add	r3, r4, r3
    4638:	e2848001 	add	r8, r4, #1
    463c:	e1580003 	cmp	r8, r3
    4640:	e58d3024 	str	r3, [sp, #36]	; 0x24
    4644:	ca000031 	bgt	4710 <__kernel_rem_pio2+0x4d0>
    4648:	e59d4004 	ldr	r4, [sp, #4]
    464c:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    4650:	e084300c 	add	r3, r4, r12
    4654:	e59dc28c 	ldr	r12, [sp, #652]	; 0x28c
    4658:	e59d400c 	ldr	r4, [sp, #12]
    465c:	e08c3103 	add	r3, r12, r3, lsl #2
    4660:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    4664:	e0849008 	add	r9, r4, r8
    4668:	e28d4d07 	add	r4, sp, #448	; 0x1c0
    466c:	e0844188 	add	r4, r4, r8, lsl #3
    4670:	e28cc001 	add	r12, r12, #1
    4674:	e28de080 	add	lr, sp, #128	; 0x80
    4678:	e98d0018 	stmib	sp, {r3, r4}
    467c:	e58dc014 	str	r12, [sp, #20]
    4680:	e08e9189 	add	r9, lr, r9, lsl #3
    4684:	e59d4004 	ldr	r4, [sp, #4]
    4688:	e5b40004 	ldr	r0, [r4, #4]!
    468c:	e58d4004 	str	r4, [sp, #4]
    4690:	eb000426 	bl	5730 <__aeabi_i2d>
    4694:	e59dc00c 	ldr	r12, [sp, #12]
    4698:	e35c0000 	cmp	r12, #0
    469c:	e8a90003 	stmia	r9!, {r0, r1}
    46a0:	ba00001d 	blt	471c <__kernel_rem_pio2+0x4dc>
    46a4:	e088700b 	add	r7, r8, r11
    46a8:	e28de080 	add	lr, sp, #128	; 0x80
    46ac:	e59da010 	ldr	r10, [sp, #16]
    46b0:	e08e7187 	add	r7, lr, r7, lsl #3
    46b4:	e3a04000 	mov	r4, #0
    46b8:	e3a05000 	mov	r5, #0
    46bc:	e3a06000 	mov	r6, #0
    46c0:	e937000c 	ldmdb	r7!, {r2, r3}
    46c4:	e8ba0003 	ldm	r10!, {r0, r1}
    46c8:	eb00044f 	bl	580c <__aeabi_dmul>
    46cc:	e1a02000 	mov	r2, r0
    46d0:	e1a03001 	mov	r3, r1
    46d4:	e1a00004 	mov	r0, r4
    46d8:	e1a01005 	mov	r1, r5
    46dc:	eb000346 	bl	53fc <__adddf3>
    46e0:	e2866001 	add	r6, r6, #1
    46e4:	e156000b 	cmp	r6, r11
    46e8:	e1a04000 	mov	r4, r0
    46ec:	e1a05001 	mov	r5, r1
    46f0:	1afffff2 	bne	46c0 <__kernel_rem_pio2+0x480>
    46f4:	e59dc014 	ldr	r12, [sp, #20]
    46f8:	e2888001 	add	r8, r8, #1
    46fc:	e158000c 	cmp	r8, r12
    4700:	e59dc008 	ldr	r12, [sp, #8]
    4704:	e8ac0030 	stmia	r12!, {r4, r5}
    4708:	e58dc008 	str	r12, [sp, #8]
    470c:	1affffdc 	bne	4684 <__kernel_rem_pio2+0x444>
    4710:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    4714:	e58dc004 	str	r12, [sp, #4]
    4718:	eaffff20 	b	43a0 <__kernel_rem_pio2+0x160>
    471c:	e3a04000 	mov	r4, #0
    4720:	e3a05000 	mov	r5, #0
    4724:	eafffff2 	b	46f4 <__kernel_rem_pio2+0x4b4>
    4728:	e1a02006 	mov	r2, r6
    472c:	e1a03007 	mov	r3, r7
    4730:	e3a00000 	mov	r0, #0
    4734:	e59f1690 	ldr	r1, [pc, #1680]	; 4dcc <__kernel_rem_pio2+0xb8c>
    4738:	eb00032e 	bl	53f8 <__aeabi_dsub>
    473c:	e3540000 	cmp	r4, #0
    4740:	e1a06000 	mov	r6, r0
    4744:	e1a07001 	mov	r7, r1
    4748:	0affff93 	beq	459c <__kernel_rem_pio2+0x35c>
    474c:	e59d2018 	ldr	r2, [sp, #24]
    4750:	e3a00000 	mov	r0, #0
    4754:	e59f1670 	ldr	r1, [pc, #1648]	; 4dcc <__kernel_rem_pio2+0xb8c>
    4758:	eb0002b6 	bl	5238 <scalbn>
    475c:	e1a02000 	mov	r2, r0
    4760:	e1a03001 	mov	r3, r1
    4764:	e1a00006 	mov	r0, r6
    4768:	e1a01007 	mov	r1, r7
    476c:	eb000321 	bl	53f8 <__aeabi_dsub>
    4770:	e1a06000 	mov	r6, r0
    4774:	e1a07001 	mov	r7, r1
    4778:	eaffff87 	b	459c <__kernel_rem_pio2+0x35c>
    477c:	1a00000e 	bne	47bc <__kernel_rem_pio2+0x57c>
    4780:	e59d4004 	ldr	r4, [sp, #4]
    4784:	e28dce26 	add	r12, sp, #608	; 0x260
    4788:	e08c3104 	add	r3, r12, r4, lsl #2
    478c:	e5135234 	ldr	r5, [r3, #-564]	; 0xfffffdcc
    4790:	e1a05bc5 	asr	r5, r5, #23
    4794:	eaffff56 	b	44f4 <__kernel_rem_pio2+0x2b4>
    4798:	e59dc004 	ldr	r12, [sp, #4]
    479c:	e28dee26 	add	lr, sp, #608	; 0x260
    47a0:	e24c3001 	sub	r3, r12, #1
    47a4:	e08e3103 	add	r3, lr, r3, lsl #2
    47a8:	e5132230 	ldr	r2, [r3, #-560]	; 0xfffffdd0
    47ac:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
    47b0:	e3c22502 	bic	r2, r2, #8388608	; 0x800000
    47b4:	e5032230 	str	r2, [r3, #-560]	; 0xfffffdd0
    47b8:	eaffff75 	b	4594 <__kernel_rem_pio2+0x354>
    47bc:	e3a02000 	mov	r2, #0
    47c0:	e59f3608 	ldr	r3, [pc, #1544]	; 4dd0 <__kernel_rem_pio2+0xb90>
    47c4:	eb00057c 	bl	5dbc <__aeabi_dcmpge>
    47c8:	e3500000 	cmp	r0, #0
    47cc:	03a05000 	moveq	r5, #0
    47d0:	0affff71 	beq	459c <__kernel_rem_pio2+0x35c>
    47d4:	e59d4004 	ldr	r4, [sp, #4]
    47d8:	e3540000 	cmp	r4, #0
    47dc:	e3a05002 	mov	r5, #2
    47e0:	e2888001 	add	r8, r8, #1
    47e4:	caffff48 	bgt	450c <__kernel_rem_pio2+0x2cc>
    47e8:	e3a04000 	mov	r4, #0
    47ec:	eaffff59 	b	4558 <__kernel_rem_pio2+0x318>
    47f0:	e3a04000 	mov	r4, #0
    47f4:	e3a05000 	mov	r5, #0
    47f8:	eafffede 	b	4378 <__kernel_rem_pio2+0x138>
    47fc:	e59d4018 	ldr	r4, [sp, #24]
    4800:	e1a00006 	mov	r0, r6
    4804:	e2642000 	rsb	r2, r4, #0
    4808:	e1a01007 	mov	r1, r7
    480c:	e58d500c 	str	r5, [sp, #12]
    4810:	e58d8010 	str	r8, [sp, #16]
    4814:	eb000287 	bl	5238 <scalbn>
    4818:	e3a02000 	mov	r2, #0
    481c:	e59f35a0 	ldr	r3, [pc, #1440]	; 4dc4 <__kernel_rem_pio2+0xb84>
    4820:	e1a04000 	mov	r4, r0
    4824:	e1a05001 	mov	r5, r1
    4828:	eb000563 	bl	5dbc <__aeabi_dcmpge>
    482c:	e3500000 	cmp	r0, #0
    4830:	0a000153 	beq	4d84 <__kernel_rem_pio2+0xb44>
    4834:	e3a02000 	mov	r2, #0
    4838:	e59f3580 	ldr	r3, [pc, #1408]	; 4dc0 <__kernel_rem_pio2+0xb80>
    483c:	e1a00004 	mov	r0, r4
    4840:	e1a01005 	mov	r1, r5
    4844:	eb0003f0 	bl	580c <__aeabi_dmul>
    4848:	eb000567 	bl	5dec <__aeabi_d2iz>
    484c:	eb0003b7 	bl	5730 <__aeabi_i2d>
    4850:	e3a02000 	mov	r2, #0
    4854:	e59f3568 	ldr	r3, [pc, #1384]	; 4dc4 <__kernel_rem_pio2+0xb84>
    4858:	e1a06000 	mov	r6, r0
    485c:	e1a07001 	mov	r7, r1
    4860:	eb0003e9 	bl	580c <__aeabi_dmul>
    4864:	e1a02000 	mov	r2, r0
    4868:	e1a03001 	mov	r3, r1
    486c:	e1a00004 	mov	r0, r4
    4870:	e1a01005 	mov	r1, r5
    4874:	eb0002df 	bl	53f8 <__aeabi_dsub>
    4878:	eb00055b 	bl	5dec <__aeabi_d2iz>
    487c:	e59d4004 	ldr	r4, [sp, #4]
    4880:	e28dce26 	add	r12, sp, #608	; 0x260
    4884:	e08c3104 	add	r3, r12, r4, lsl #2
    4888:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    488c:	e1a01007 	mov	r1, r7
    4890:	e1a00006 	mov	r0, r6
    4894:	eb000554 	bl	5dec <__aeabi_d2iz>
    4898:	e2844001 	add	r4, r4, #1
    489c:	e28dee26 	add	lr, sp, #608	; 0x260
    48a0:	e08e3104 	add	r3, lr, r4, lsl #2
    48a4:	e58d4004 	str	r4, [sp, #4]
    48a8:	e59d4018 	ldr	r4, [sp, #24]
    48ac:	e2844018 	add	r4, r4, #24
    48b0:	e58d4018 	str	r4, [sp, #24]
    48b4:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    48b8:	e3a00000 	mov	r0, #0
    48bc:	e59f1508 	ldr	r1, [pc, #1288]	; 4dcc <__kernel_rem_pio2+0xb8c>
    48c0:	e59d2018 	ldr	r2, [sp, #24]
    48c4:	eb00025b 	bl	5238 <scalbn>
    48c8:	e59dc004 	ldr	r12, [sp, #4]
    48cc:	e35c0000 	cmp	r12, #0
    48d0:	e1a04000 	mov	r4, r0
    48d4:	e1a05001 	mov	r5, r1
    48d8:	ba00003b 	blt	49cc <__kernel_rem_pio2+0x78c>
    48dc:	e28c6001 	add	r6, r12, #1
    48e0:	e28d9d07 	add	r9, sp, #448	; 0x1c0
    48e4:	e28de030 	add	lr, sp, #48	; 0x30
    48e8:	e08e7106 	add	r7, lr, r6, lsl #2
    48ec:	e0896186 	add	r6, r9, r6, lsl #3
    48f0:	e5370004 	ldr	r0, [r7, #-4]!
    48f4:	eb00038d 	bl	5730 <__aeabi_i2d>
    48f8:	e1a02004 	mov	r2, r4
    48fc:	e1a03005 	mov	r3, r5
    4900:	eb0003c1 	bl	580c <__aeabi_dmul>
    4904:	e3a02000 	mov	r2, #0
    4908:	e9260003 	stmdb	r6!, {r0, r1}
    490c:	e59f34ac 	ldr	r3, [pc, #1196]	; 4dc0 <__kernel_rem_pio2+0xb80>
    4910:	e1a00004 	mov	r0, r4
    4914:	e1a01005 	mov	r1, r5
    4918:	eb0003bb 	bl	580c <__aeabi_dmul>
    491c:	e1560009 	cmp	r6, r9
    4920:	e1a04000 	mov	r4, r0
    4924:	e1a05001 	mov	r5, r1
    4928:	1afffff0 	bne	48f0 <__kernel_rem_pio2+0x6b0>
    492c:	e59da004 	ldr	r10, [sp, #4]
    4930:	e59db020 	ldr	r11, [sp, #32]
    4934:	e58da008 	str	r10, [sp, #8]
    4938:	e3a08000 	mov	r8, #0
    493c:	e35b0000 	cmp	r11, #0
    4940:	b3a04000 	movlt	r4, #0
    4944:	b3a05000 	movlt	r5, #0
    4948:	ba000015 	blt	49a4 <__kernel_rem_pio2+0x764>
    494c:	e59d4008 	ldr	r4, [sp, #8]
    4950:	e59fa47c 	ldr	r10, [pc, #1148]	; 4dd4 <__kernel_rem_pio2+0xb94>
    4954:	e0897184 	add	r7, r9, r4, lsl #3
    4958:	e3a05000 	mov	r5, #0
    495c:	e3a04000 	mov	r4, #0
    4960:	e3a06000 	mov	r6, #0
    4964:	ea000001 	b	4970 <__kernel_rem_pio2+0x730>
    4968:	e1560008 	cmp	r6, r8
    496c:	ca00000c 	bgt	49a4 <__kernel_rem_pio2+0x764>
    4970:	e8b7000c 	ldm	r7!, {r2, r3}
    4974:	e8ba0003 	ldm	r10!, {r0, r1}
    4978:	eb0003a3 	bl	580c <__aeabi_dmul>
    497c:	e1a02000 	mov	r2, r0
    4980:	e1a03001 	mov	r3, r1
    4984:	e1a00004 	mov	r0, r4
    4988:	e1a01005 	mov	r1, r5
    498c:	eb00029a 	bl	53fc <__adddf3>
    4990:	e2866001 	add	r6, r6, #1
    4994:	e15b0006 	cmp	r11, r6
    4998:	e1a04000 	mov	r4, r0
    499c:	e1a05001 	mov	r5, r1
    49a0:	aafffff0 	bge	4968 <__kernel_rem_pio2+0x728>
    49a4:	e59dc008 	ldr	r12, [sp, #8]
    49a8:	e28d0e26 	add	r0, sp, #608	; 0x260
    49ac:	e24cc001 	sub	r12, r12, #1
    49b0:	e0803188 	add	r3, r0, r8, lsl #3
    49b4:	e37c0001 	cmn	r12, #1
    49b8:	e58dc008 	str	r12, [sp, #8]
    49bc:	e5034140 	str	r4, [r3, #-320]	; 0xfffffec0
    49c0:	e503513c 	str	r5, [r3, #-316]	; 0xfffffec4
    49c4:	e2888001 	add	r8, r8, #1
    49c8:	1affffdb 	bne	493c <__kernel_rem_pio2+0x6fc>
    49cc:	e59dc288 	ldr	r12, [sp, #648]	; 0x288
    49d0:	e35c0003 	cmp	r12, #3
    49d4:	979ff10c 	ldrls	pc, [pc, r12, lsl #2]
    49d8:	ea000015 	b	4a34 <__kernel_rem_pio2+0x7f4>
    49dc:	00004cbc 	.word	0x00004cbc
    49e0:	00004bd8 	.word	0x00004bd8
    49e4:	00004bd8 	.word	0x00004bd8
    49e8:	00004a48 	.word	0x00004a48
    49ec:	e59d000c 	ldr	r0, [sp, #12]
    49f0:	e3a0c000 	mov	r12, #0
    49f4:	e3500000 	cmp	r0, #0
    49f8:	e1a0400c 	mov	r4, r12
    49fc:	0a000068 	beq	4ba4 <__kernel_rem_pio2+0x964>
    4a00:	e59d2124 	ldr	r2, [sp, #292]	; 0x124
    4a04:	e59d001c 	ldr	r0, [sp, #28]
    4a08:	e59d1120 	ldr	r1, [sp, #288]	; 0x120
    4a0c:	e2822102 	add	r2, r2, #-2147483648	; 0x80000000
    4a10:	e59d312c 	ldr	r3, [sp, #300]	; 0x12c
    4a14:	e8800006 	stm	r0, {r1, r2}
    4a18:	e59d2128 	ldr	r2, [sp, #296]	; 0x128
    4a1c:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
    4a20:	e2844102 	add	r4, r4, #-2147483648	; 0x80000000
    4a24:	e5802008 	str	r2, [r0, #8]
    4a28:	e580300c 	str	r3, [r0, #12]
    4a2c:	e580c010 	str	r12, [r0, #16]
    4a30:	e5804014 	str	r4, [r0, #20]
    4a34:	e59d4010 	ldr	r4, [sp, #16]
    4a38:	e2040007 	and	r0, r4, #7
    4a3c:	e28ddf99 	add	sp, sp, #612	; 0x264
    4a40:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    4a44:	e12fff1e 	bx	lr
    4a48:	e59d4004 	ldr	r4, [sp, #4]
    4a4c:	e3540000 	cmp	r4, #0
    4a50:	daffffe5 	ble	49ec <__kernel_rem_pio2+0x7ac>
    4a54:	e59d4004 	ldr	r4, [sp, #4]
    4a58:	e28dbe12 	add	r11, sp, #288	; 0x120
    4a5c:	e08ba184 	add	r10, r11, r4, lsl #3
    4a60:	e58da008 	str	r10, [sp, #8]
    4a64:	e58da014 	str	r10, [sp, #20]
    4a68:	e93a0300 	ldmdb	r10!, {r8, r9}
    4a6c:	e28a7008 	add	r7, r10, #8
    4a70:	e89700c0 	ldm	r7, {r6, r7}
    4a74:	e1a00008 	mov	r0, r8
    4a78:	e1a02006 	mov	r2, r6
    4a7c:	e1a03007 	mov	r3, r7
    4a80:	e1a01009 	mov	r1, r9
    4a84:	eb00025c 	bl	53fc <__adddf3>
    4a88:	e1a04000 	mov	r4, r0
    4a8c:	e1a05001 	mov	r5, r1
    4a90:	e1a02004 	mov	r2, r4
    4a94:	e1a03005 	mov	r3, r5
    4a98:	e1a00008 	mov	r0, r8
    4a9c:	e1a01009 	mov	r1, r9
    4aa0:	eb000254 	bl	53f8 <__aeabi_dsub>
    4aa4:	e1a02000 	mov	r2, r0
    4aa8:	e1a03001 	mov	r3, r1
    4aac:	e1a00006 	mov	r0, r6
    4ab0:	e1a01007 	mov	r1, r7
    4ab4:	eb000250 	bl	53fc <__adddf3>
    4ab8:	e59dc008 	ldr	r12, [sp, #8]
    4abc:	e58a0008 	str	r0, [r10, #8]
    4ac0:	e58a100c 	str	r1, [r10, #12]
    4ac4:	e92c0030 	stmdb	r12!, {r4, r5}
    4ac8:	e15a000b 	cmp	r10, r11
    4acc:	e58dc008 	str	r12, [sp, #8]
    4ad0:	1affffe4 	bne	4a68 <__kernel_rem_pio2+0x828>
    4ad4:	e59d4004 	ldr	r4, [sp, #4]
    4ad8:	e3540001 	cmp	r4, #1
    4adc:	e59da014 	ldr	r10, [sp, #20]
    4ae0:	daffffc1 	ble	49ec <__kernel_rem_pio2+0x7ac>
    4ae4:	e28bc008 	add	r12, r11, #8
    4ae8:	e58dc008 	str	r12, [sp, #8]
    4aec:	e1a0c00a 	mov	r12, r10
    4af0:	e93a0300 	ldmdb	r10!, {r8, r9}
    4af4:	e28a7008 	add	r7, r10, #8
    4af8:	e89700c0 	ldm	r7, {r6, r7}
    4afc:	e1a00008 	mov	r0, r8
    4b00:	e1a02006 	mov	r2, r6
    4b04:	e1a03007 	mov	r3, r7
    4b08:	e1a01009 	mov	r1, r9
    4b0c:	e58dc000 	str	r12, [sp]
    4b10:	eb000239 	bl	53fc <__adddf3>
    4b14:	e1a04000 	mov	r4, r0
    4b18:	e1a05001 	mov	r5, r1
    4b1c:	e1a02004 	mov	r2, r4
    4b20:	e1a03005 	mov	r3, r5
    4b24:	e1a00008 	mov	r0, r8
    4b28:	e1a01009 	mov	r1, r9
    4b2c:	eb000231 	bl	53f8 <__aeabi_dsub>
    4b30:	e1a02000 	mov	r2, r0
    4b34:	e1a03001 	mov	r3, r1
    4b38:	e1a00006 	mov	r0, r6
    4b3c:	e1a01007 	mov	r1, r7
    4b40:	eb00022d 	bl	53fc <__adddf3>
    4b44:	e59de008 	ldr	lr, [sp, #8]
    4b48:	e59dc000 	ldr	r12, [sp]
    4b4c:	e15a000e 	cmp	r10, lr
    4b50:	e58a0008 	str	r0, [r10, #8]
    4b54:	e58a100c 	str	r1, [r10, #12]
    4b58:	e92c0030 	stmdb	r12!, {r4, r5}
    4b5c:	1affffe3 	bne	4af0 <__kernel_rem_pio2+0x8b0>
    4b60:	e59d4004 	ldr	r4, [sp, #4]
    4b64:	e3a0c000 	mov	r12, #0
    4b68:	e2845001 	add	r5, r4, #1
    4b6c:	e08b5185 	add	r5, r11, r5, lsl #3
    4b70:	e1a0400c 	mov	r4, r12
    4b74:	e28bb010 	add	r11, r11, #16
    4b78:	e1a0000c 	mov	r0, r12
    4b7c:	e1a01004 	mov	r1, r4
    4b80:	e935000c 	ldmdb	r5!, {r2, r3}
    4b84:	eb00021c 	bl	53fc <__adddf3>
    4b88:	e155000b 	cmp	r5, r11
    4b8c:	e1a0c000 	mov	r12, r0
    4b90:	e1a04001 	mov	r4, r1
    4b94:	1afffff7 	bne	4b78 <__kernel_rem_pio2+0x938>
    4b98:	e59d000c 	ldr	r0, [sp, #12]
    4b9c:	e3500000 	cmp	r0, #0
    4ba0:	1affff96 	bne	4a00 <__kernel_rem_pio2+0x7c0>
    4ba4:	e1a03004 	mov	r3, r4
    4ba8:	e28d1e12 	add	r1, sp, #288	; 0x120
    4bac:	e8910003 	ldm	r1, {r0, r1}
    4bb0:	e59d401c 	ldr	r4, [sp, #28]
    4bb4:	e8840003 	stm	r4, {r0, r1}
    4bb8:	e28d1f4a 	add	r1, sp, #296	; 0x128
    4bbc:	e8910003 	ldm	r1, {r0, r1}
    4bc0:	e1a0200c 	mov	r2, r12
    4bc4:	e5840008 	str	r0, [r4, #8]
    4bc8:	e584100c 	str	r1, [r4, #12]
    4bcc:	e5842010 	str	r2, [r4, #16]
    4bd0:	e5843014 	str	r3, [r4, #20]
    4bd4:	eaffff96 	b	4a34 <__kernel_rem_pio2+0x7f4>
    4bd8:	e59dc004 	ldr	r12, [sp, #4]
    4bdc:	e35c0000 	cmp	r12, #0
    4be0:	b3a0e000 	movlt	lr, #0
    4be4:	b1a0c00e 	movlt	r12, lr
    4be8:	ba00000d 	blt	4c24 <__kernel_rem_pio2+0x9e4>
    4bec:	e59dc004 	ldr	r12, [sp, #4]
    4bf0:	e28d5e12 	add	r5, sp, #288	; 0x120
    4bf4:	e28c4001 	add	r4, r12, #1
    4bf8:	e3a0e000 	mov	lr, #0
    4bfc:	e0854184 	add	r4, r5, r4, lsl #3
    4c00:	e1a0c00e 	mov	r12, lr
    4c04:	e1a0000e 	mov	r0, lr
    4c08:	e1a0100c 	mov	r1, r12
    4c0c:	e934000c 	ldmdb	r4!, {r2, r3}
    4c10:	eb0001f9 	bl	53fc <__adddf3>
    4c14:	e1540005 	cmp	r4, r5
    4c18:	e1a0e000 	mov	lr, r0
    4c1c:	e1a0c001 	mov	r12, r1
    4c20:	1afffff7 	bne	4c04 <__kernel_rem_pio2+0x9c4>
    4c24:	e59d400c 	ldr	r4, [sp, #12]
    4c28:	e3540000 	cmp	r4, #0
    4c2c:	128c3102 	addne	r3, r12, #-2147483648	; 0x80000000
    4c30:	01a0300c 	moveq	r3, r12
    4c34:	e1a01003 	mov	r1, r3
    4c38:	e1a0300c 	mov	r3, r12
    4c3c:	e59dc01c 	ldr	r12, [sp, #28]
    4c40:	e1a0000e 	mov	r0, lr
    4c44:	e88c0003 	stm	r12, {r0, r1}
    4c48:	e1a0200e 	mov	r2, lr
    4c4c:	e28d1e12 	add	r1, sp, #288	; 0x120
    4c50:	e8910003 	ldm	r1, {r0, r1}
    4c54:	eb0001e7 	bl	53f8 <__aeabi_dsub>
    4c58:	e59d4004 	ldr	r4, [sp, #4]
    4c5c:	e3540000 	cmp	r4, #0
    4c60:	e1a05000 	mov	r5, r0
    4c64:	e1a0c001 	mov	r12, r1
    4c68:	da00000a 	ble	4c98 <__kernel_rem_pio2+0xa58>
    4c6c:	e59de004 	ldr	lr, [sp, #4]
    4c70:	e28d4f4a 	add	r4, sp, #296	; 0x128
    4c74:	e084618e 	add	r6, r4, lr, lsl #3
    4c78:	e1a00005 	mov	r0, r5
    4c7c:	e1a0100c 	mov	r1, r12
    4c80:	e8b4000c 	ldm	r4!, {r2, r3}
    4c84:	eb0001dc 	bl	53fc <__adddf3>
    4c88:	e1540006 	cmp	r4, r6
    4c8c:	e1a05000 	mov	r5, r0
    4c90:	e1a0c001 	mov	r12, r1
    4c94:	1afffff7 	bne	4c78 <__kernel_rem_pio2+0xa38>
    4c98:	e59d400c 	ldr	r4, [sp, #12]
    4c9c:	e3540000 	cmp	r4, #0
    4ca0:	128cc102 	addne	r12, r12, #-2147483648	; 0x80000000
    4ca4:	e1a0300c 	mov	r3, r12
    4ca8:	e59dc01c 	ldr	r12, [sp, #28]
    4cac:	e1a02005 	mov	r2, r5
    4cb0:	e58c2008 	str	r2, [r12, #8]
    4cb4:	e58c300c 	str	r3, [r12, #12]
    4cb8:	eaffff5d 	b	4a34 <__kernel_rem_pio2+0x7f4>
    4cbc:	e59d4004 	ldr	r4, [sp, #4]
    4cc0:	e3540000 	cmp	r4, #0
    4cc4:	ba000038 	blt	4dac <__kernel_rem_pio2+0xb6c>
    4cc8:	e2846001 	add	r6, r4, #1
    4ccc:	e28d5e12 	add	r5, sp, #288	; 0x120
    4cd0:	e3a04000 	mov	r4, #0
    4cd4:	e0856186 	add	r6, r5, r6, lsl #3
    4cd8:	e1a0c004 	mov	r12, r4
    4cdc:	e1a00004 	mov	r0, r4
    4ce0:	e1a0100c 	mov	r1, r12
    4ce4:	e936000c 	ldmdb	r6!, {r2, r3}
    4ce8:	eb0001c3 	bl	53fc <__adddf3>
    4cec:	e1560005 	cmp	r6, r5
    4cf0:	e1a04000 	mov	r4, r0
    4cf4:	e1a0c001 	mov	r12, r1
    4cf8:	1afffff7 	bne	4cdc <__kernel_rem_pio2+0xa9c>
    4cfc:	e59d000c 	ldr	r0, [sp, #12]
    4d00:	e3500000 	cmp	r0, #0
    4d04:	e1a02004 	mov	r2, r4
    4d08:	128cc102 	addne	r12, r12, #-2147483648	; 0x80000000
    4d0c:	e59d401c 	ldr	r4, [sp, #28]
    4d10:	e1a0300c 	mov	r3, r12
    4d14:	e884000c 	stm	r4, {r2, r3}
    4d18:	eaffff45 	b	4a34 <__kernel_rem_pio2+0x7f4>
    4d1c:	e1a03100 	lsl	r3, r0, #2
    4d20:	e28dce26 	add	r12, sp, #608	; 0x260
    4d24:	e08c2003 	add	r2, r12, r3
    4d28:	e59d4018 	ldr	r4, [sp, #24]
    4d2c:	e5122230 	ldr	r2, [r2, #-560]	; 0xfffffdd0
    4d30:	e2444018 	sub	r4, r4, #24
    4d34:	e3520000 	cmp	r2, #0
    4d38:	e58d8010 	str	r8, [sp, #16]
    4d3c:	e58d500c 	str	r5, [sp, #12]
    4d40:	e58d4018 	str	r4, [sp, #24]
    4d44:	1a000016 	bne	4da4 <__kernel_rem_pio2+0xb64>
    4d48:	e28dc030 	add	r12, sp, #48	; 0x30
    4d4c:	e58d0004 	str	r0, [sp, #4]
    4d50:	e08c3003 	add	r3, r12, r3
    4d54:	e1a02000 	mov	r2, r0
    4d58:	e1a01004 	mov	r1, r4
    4d5c:	e5330004 	ldr	r0, [r3, #-4]!
    4d60:	e3500000 	cmp	r0, #0
    4d64:	e2422001 	sub	r2, r2, #1
    4d68:	e2411018 	sub	r1, r1, #24
    4d6c:	0afffffa 	beq	4d5c <__kernel_rem_pio2+0xb1c>
    4d70:	e58d2004 	str	r2, [sp, #4]
    4d74:	e58d1018 	str	r1, [sp, #24]
    4d78:	eafffece 	b	48b8 <__kernel_rem_pio2+0x678>
    4d7c:	e3a03001 	mov	r3, #1
    4d80:	eafffe2a 	b	4630 <__kernel_rem_pio2+0x3f0>
    4d84:	e1a00004 	mov	r0, r4
    4d88:	e1a01005 	mov	r1, r5
    4d8c:	eb000416 	bl	5dec <__aeabi_d2iz>
    4d90:	e59dc004 	ldr	r12, [sp, #4]
    4d94:	e28dee26 	add	lr, sp, #608	; 0x260
    4d98:	e08e310c 	add	r3, lr, r12, lsl #2
    4d9c:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    4da0:	eafffec4 	b	48b8 <__kernel_rem_pio2+0x678>
    4da4:	e58d0004 	str	r0, [sp, #4]
    4da8:	eafffec2 	b	48b8 <__kernel_rem_pio2+0x678>
    4dac:	e3a04000 	mov	r4, #0
    4db0:	e1a0c004 	mov	r12, r4
    4db4:	eaffffd0 	b	4cfc <__kernel_rem_pio2+0xabc>
    4db8:	2aaaaaab 	.word	0x2aaaaaab
    4dbc:	000074c8 	.word	0x000074c8
    4dc0:	3e700000 	.word	0x3e700000
    4dc4:	41700000 	.word	0x41700000
    4dc8:	40200000 	.word	0x40200000
    4dcc:	3ff00000 	.word	0x3ff00000
    4dd0:	3fe00000 	.word	0x3fe00000
    4dd4:	000074d8 	.word	0x000074d8

00004dd8 <__kernel_sin>:
    4dd8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    4ddc:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    4de0:	e35c05f9 	cmp	r12, #1044381696	; 0x3e400000
    4de4:	e24dd014 	sub	sp, sp, #20
    4de8:	e1a04000 	mov	r4, r0
    4dec:	e1a05001 	mov	r5, r1
    4df0:	e1a06000 	mov	r6, r0
    4df4:	e1a07001 	mov	r7, r1
    4df8:	e1a08002 	mov	r8, r2
    4dfc:	e1a09003 	mov	r9, r3
    4e00:	aa000002 	bge	4e10 <__kernel_sin+0x38>
    4e04:	eb0003f8 	bl	5dec <__aeabi_d2iz>
    4e08:	e3500000 	cmp	r0, #0
    4e0c:	0a000052 	beq	4f5c <__kernel_sin+0x184>
    4e10:	e1a02004 	mov	r2, r4
    4e14:	e1a03005 	mov	r3, r5
    4e18:	e1a00004 	mov	r0, r4
    4e1c:	e1a01005 	mov	r1, r5
    4e20:	eb000279 	bl	580c <__aeabi_dmul>
    4e24:	e1a02004 	mov	r2, r4
    4e28:	e1a03005 	mov	r3, r5
    4e2c:	e1a06000 	mov	r6, r0
    4e30:	e1a07001 	mov	r7, r1
    4e34:	eb000274 	bl	580c <__aeabi_dmul>
    4e38:	e28f3d06 	add	r3, pc, #384	; 0x180
    4e3c:	e893000c 	ldm	r3, {r2, r3}
    4e40:	e1a0a000 	mov	r10, r0
    4e44:	e1a0b001 	mov	r11, r1
    4e48:	e1a00006 	mov	r0, r6
    4e4c:	e1a01007 	mov	r1, r7
    4e50:	eb00026d 	bl	580c <__aeabi_dmul>
    4e54:	e28f3f5b 	add	r3, pc, #364	; 0x16c
    4e58:	e893000c 	ldm	r3, {r2, r3}
    4e5c:	eb000165 	bl	53f8 <__aeabi_dsub>
    4e60:	e1a02006 	mov	r2, r6
    4e64:	e1a03007 	mov	r3, r7
    4e68:	eb000267 	bl	580c <__aeabi_dmul>
    4e6c:	e28f3f57 	add	r3, pc, #348	; 0x15c
    4e70:	e893000c 	ldm	r3, {r2, r3}
    4e74:	eb000160 	bl	53fc <__adddf3>
    4e78:	e1a02006 	mov	r2, r6
    4e7c:	e1a03007 	mov	r3, r7
    4e80:	eb000261 	bl	580c <__aeabi_dmul>
    4e84:	e28f3f53 	add	r3, pc, #332	; 0x14c
    4e88:	e893000c 	ldm	r3, {r2, r3}
    4e8c:	eb000159 	bl	53f8 <__aeabi_dsub>
    4e90:	e1a02006 	mov	r2, r6
    4e94:	e1a03007 	mov	r3, r7
    4e98:	eb00025b 	bl	580c <__aeabi_dmul>
    4e9c:	e28f3f4f 	add	r3, pc, #316	; 0x13c
    4ea0:	e893000c 	ldm	r3, {r2, r3}
    4ea4:	eb000154 	bl	53fc <__adddf3>
    4ea8:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    4eac:	e3530000 	cmp	r3, #0
    4eb0:	e88d0003 	stm	sp, {r0, r1}
    4eb4:	0a00002d 	beq	4f70 <__kernel_sin+0x198>
    4eb8:	e3a02000 	mov	r2, #0
    4ebc:	e59f312c 	ldr	r3, [pc, #300]	; 4ff0 <__kernel_sin+0x218>
    4ec0:	e1a00008 	mov	r0, r8
    4ec4:	e1a01009 	mov	r1, r9
    4ec8:	eb00024f 	bl	580c <__aeabi_dmul>
    4ecc:	e89d000c 	ldm	sp, {r2, r3}
    4ed0:	e58d0008 	str	r0, [sp, #8]
    4ed4:	e58d100c 	str	r1, [sp, #12]
    4ed8:	e1a0000a 	mov	r0, r10
    4edc:	e1a0100b 	mov	r1, r11
    4ee0:	eb000249 	bl	580c <__aeabi_dmul>
    4ee4:	e1a02000 	mov	r2, r0
    4ee8:	e1a03001 	mov	r3, r1
    4eec:	e28d1008 	add	r1, sp, #8
    4ef0:	e8910003 	ldm	r1, {r0, r1}
    4ef4:	eb00013f 	bl	53f8 <__aeabi_dsub>
    4ef8:	e1a02006 	mov	r2, r6
    4efc:	e1a03007 	mov	r3, r7
    4f00:	eb000241 	bl	580c <__aeabi_dmul>
    4f04:	e1a02008 	mov	r2, r8
    4f08:	e1a03009 	mov	r3, r9
    4f0c:	eb000139 	bl	53f8 <__aeabi_dsub>
    4f10:	e28f30d0 	add	r3, pc, #208	; 0xd0
    4f14:	e893000c 	ldm	r3, {r2, r3}
    4f18:	e1a06000 	mov	r6, r0
    4f1c:	e1a07001 	mov	r7, r1
    4f20:	e1a0000a 	mov	r0, r10
    4f24:	e1a0100b 	mov	r1, r11
    4f28:	eb000237 	bl	580c <__aeabi_dmul>
    4f2c:	e1a02000 	mov	r2, r0
    4f30:	e1a03001 	mov	r3, r1
    4f34:	e1a00006 	mov	r0, r6
    4f38:	e1a01007 	mov	r1, r7
    4f3c:	eb00012e 	bl	53fc <__adddf3>
    4f40:	e1a02000 	mov	r2, r0
    4f44:	e1a03001 	mov	r3, r1
    4f48:	e1a00004 	mov	r0, r4
    4f4c:	e1a01005 	mov	r1, r5
    4f50:	eb000128 	bl	53f8 <__aeabi_dsub>
    4f54:	e1a04000 	mov	r4, r0
    4f58:	e1a05001 	mov	r5, r1
    4f5c:	e1a00004 	mov	r0, r4
    4f60:	e1a01005 	mov	r1, r5
    4f64:	e28dd014 	add	sp, sp, #20
    4f68:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    4f6c:	e12fff1e 	bx	lr
    4f70:	e1a02000 	mov	r2, r0
    4f74:	e1a03001 	mov	r3, r1
    4f78:	e1a00006 	mov	r0, r6
    4f7c:	e1a01007 	mov	r1, r7
    4f80:	eb000221 	bl	580c <__aeabi_dmul>
    4f84:	e28f305c 	add	r3, pc, #92	; 0x5c
    4f88:	e893000c 	ldm	r3, {r2, r3}
    4f8c:	eb000119 	bl	53f8 <__aeabi_dsub>
    4f90:	e1a0200a 	mov	r2, r10
    4f94:	e1a0300b 	mov	r3, r11
    4f98:	eb00021b 	bl	580c <__aeabi_dmul>
    4f9c:	e1a02000 	mov	r2, r0
    4fa0:	e1a03001 	mov	r3, r1
    4fa4:	e1a00004 	mov	r0, r4
    4fa8:	e1a01005 	mov	r1, r5
    4fac:	eb000112 	bl	53fc <__adddf3>
    4fb0:	e1a04000 	mov	r4, r0
    4fb4:	e1a05001 	mov	r5, r1
    4fb8:	eaffffe7 	b	4f5c <__kernel_sin+0x184>
    4fbc:	e1a00000 	nop			; (mov r0, r0)
    4fc0:	5acfd57c 	.word	0x5acfd57c
    4fc4:	3de5d93a 	.word	0x3de5d93a
    4fc8:	8a2b9ceb 	.word	0x8a2b9ceb
    4fcc:	3e5ae5e6 	.word	0x3e5ae5e6
    4fd0:	57b1fe7d 	.word	0x57b1fe7d
    4fd4:	3ec71de3 	.word	0x3ec71de3
    4fd8:	19c161d5 	.word	0x19c161d5
    4fdc:	3f2a01a0 	.word	0x3f2a01a0
    4fe0:	1110f8a6 	.word	0x1110f8a6
    4fe4:	3f811111 	.word	0x3f811111
    4fe8:	55555549 	.word	0x55555549
    4fec:	3fc55555 	.word	0x3fc55555
    4ff0:	3fe00000 	.word	0x3fe00000
    4ff4:	e1a00000 	nop			; (mov r0, r0)

00004ff8 <fabs>:
    4ff8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    4ffc:	e12fff1e 	bx	lr

00005000 <finite>:
    5000:	e3811102 	orr	r1, r1, #-2147483648	; 0x80000000
    5004:	e2810601 	add	r0, r1, #1048576	; 0x100000
    5008:	e1a00fa0 	lsr	r0, r0, #31
    500c:	e12fff1e 	bx	lr

00005010 <__fpclassifyd>:
    5010:	e1902001 	orrs	r2, r0, r1
    5014:	1a000001 	bne	5020 <__fpclassifyd+0x10>
    5018:	e3a00002 	mov	r0, #2
    501c:	e12fff1e 	bx	lr
    5020:	e2702001 	rsbs	r2, r0, #1
    5024:	33a02000 	movcc	r2, #0
    5028:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    502c:	03500000 	cmpeq	r0, #0
    5030:	0afffff8 	beq	5018 <__fpclassifyd+0x8>
    5034:	e3c13102 	bic	r3, r1, #-2147483648	; 0x80000000
    5038:	e59f1034 	ldr	r1, [pc, #52]	; 5074 <__fpclassifyd+0x64>
    503c:	e2430601 	sub	r0, r3, #1048576	; 0x100000
    5040:	e1500001 	cmp	r0, r1
    5044:	8a000001 	bhi	5050 <__fpclassifyd+0x40>
    5048:	e3a00004 	mov	r0, #4
    504c:	e12fff1e 	bx	lr
    5050:	e3530601 	cmp	r3, #1048576	; 0x100000
    5054:	2a000001 	bcs	5060 <__fpclassifyd+0x50>
    5058:	e3a00003 	mov	r0, #3
    505c:	e12fff1e 	bx	lr
    5060:	e59f0010 	ldr	r0, [pc, #16]	; 5078 <__fpclassifyd+0x68>
    5064:	e1530000 	cmp	r3, r0
    5068:	13a00000 	movne	r0, #0
    506c:	02020001 	andeq	r0, r2, #1
    5070:	e12fff1e 	bx	lr
    5074:	7fdfffff 	.word	0x7fdfffff
    5078:	7ff00000 	.word	0x7ff00000

0000507c <matherr>:
    507c:	e3a00000 	mov	r0, #0
    5080:	e12fff1e 	bx	lr

00005084 <nan>:
    5084:	e3a00000 	mov	r0, #0
    5088:	e59f1000 	ldr	r1, [pc]	; 5090 <nan+0xc>
    508c:	e12fff1e 	bx	lr
    5090:	7ff80000 	.word	0x7ff80000

00005094 <rint>:
    5094:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    5098:	e1a07081 	lsl	r7, r1, #1
    509c:	e1a07aa7 	lsr	r7, r7, #21
    50a0:	e247cfff 	sub	r12, r7, #1020	; 0x3fc
    50a4:	e24cc003 	sub	r12, r12, #3
    50a8:	e35c0013 	cmp	r12, #19
    50ac:	e24dd00c 	sub	sp, sp, #12
    50b0:	e1a02000 	mov	r2, r0
    50b4:	e1a03001 	mov	r3, r1
    50b8:	e1a04000 	mov	r4, r0
    50bc:	e1a05001 	mov	r5, r1
    50c0:	e1a06001 	mov	r6, r1
    50c4:	e1a08fa1 	lsr	r8, r1, #31
    50c8:	ca000026 	bgt	5168 <rint+0xd4>
    50cc:	e35c0000 	cmp	r12, #0
    50d0:	ba000038 	blt	51b8 <rint+0x124>
    50d4:	e59f1150 	ldr	r1, [pc, #336]	; 522c <rint+0x198>
    50d8:	e1a01c51 	asr	r1, r1, r12
    50dc:	e0010003 	and	r0, r1, r3
    50e0:	e1900002 	orrs	r0, r0, r2
    50e4:	0a00001a 	beq	5154 <rint+0xc0>
    50e8:	e1a010a1 	lsr	r1, r1, #1
    50ec:	e0013003 	and	r3, r1, r3
    50f0:	e1934002 	orrs	r4, r3, r2
    50f4:	0a000005 	beq	5110 <rint+0x7c>
    50f8:	e1c51001 	bic	r1, r5, r1
    50fc:	e3a05701 	mov	r5, #262144	; 0x40000
    5100:	e1815c55 	orr	r5, r1, r5, asr r12
    5104:	e35c0013 	cmp	r12, #19
    5108:	03a04102 	moveq	r4, #-2147483648	; 0x80000000
    510c:	13a04000 	movne	r4, #0
    5110:	e59f3118 	ldr	r3, [pc, #280]	; 5230 <rint+0x19c>
    5114:	e0838188 	add	r8, r3, r8, lsl #3
    5118:	e8980300 	ldm	r8, {r8, r9}
    511c:	e1a02004 	mov	r2, r4
    5120:	e1a03005 	mov	r3, r5
    5124:	e1a00008 	mov	r0, r8
    5128:	e1a01009 	mov	r1, r9
    512c:	eb0000b2 	bl	53fc <__adddf3>
    5130:	e88d0003 	stm	sp, {r0, r1}
    5134:	e1a02008 	mov	r2, r8
    5138:	e1a03009 	mov	r3, r9
    513c:	e89d0003 	ldm	sp, {r0, r1}
    5140:	eb0000ac 	bl	53f8 <__aeabi_dsub>
    5144:	e1a07005 	mov	r7, r5
    5148:	e1a06004 	mov	r6, r4
    514c:	e1a02000 	mov	r2, r0
    5150:	e1a03001 	mov	r3, r1
    5154:	e1a00002 	mov	r0, r2
    5158:	e1a01003 	mov	r1, r3
    515c:	e28dd00c 	add	sp, sp, #12
    5160:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
    5164:	e12fff1e 	bx	lr
    5168:	e35c0033 	cmp	r12, #51	; 0x33
    516c:	da000005 	ble	5188 <rint+0xf4>
    5170:	e35c0b01 	cmp	r12, #1024	; 0x400
    5174:	1afffff6 	bne	5154 <rint+0xc0>
    5178:	eb00009f 	bl	53fc <__adddf3>
    517c:	e1a02000 	mov	r2, r0
    5180:	e1a03001 	mov	r3, r1
    5184:	eafffff2 	b	5154 <rint+0xc0>
    5188:	e2477e41 	sub	r7, r7, #1040	; 0x410
    518c:	e2477003 	sub	r7, r7, #3
    5190:	e3e01000 	mvn	r1, #0
    5194:	e1a01731 	lsr	r1, r1, r7
    5198:	e1110000 	tst	r1, r0
    519c:	0affffec 	beq	5154 <rint+0xc0>
    51a0:	e1a010a1 	lsr	r1, r1, #1
    51a4:	e1110000 	tst	r1, r0
    51a8:	11c04001 	bicne	r4, r0, r1
    51ac:	13a03101 	movne	r3, #1073741824	; 0x40000000
    51b0:	11844753 	orrne	r4, r4, r3, asr r7
    51b4:	eaffffd5 	b	5110 <rint+0x7c>
    51b8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    51bc:	e1911000 	orrs	r1, r1, r0
    51c0:	0affffe3 	beq	5154 <rint+0xc0>
    51c4:	e3c314ff 	bic	r1, r3, #-16777216	; 0xff000000
    51c8:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    51cc:	e1814000 	orr	r4, r1, r0
    51d0:	e59f0058 	ldr	r0, [pc, #88]	; 5230 <rint+0x19c>
    51d4:	e2641000 	rsb	r1, r4, #0
    51d8:	e1814004 	orr	r4, r1, r4
    51dc:	e0800188 	add	r0, r0, r8, lsl #3
    51e0:	e1a01624 	lsr	r1, r4, #12
    51e4:	e8900030 	ldm	r0, {r4, r5}
    51e8:	e2011702 	and	r1, r1, #524288	; 0x80000
    51ec:	e1a068a3 	lsr	r6, r3, #17
    51f0:	e1813886 	orr	r3, r1, r6, lsl #17
    51f4:	e1a00004 	mov	r0, r4
    51f8:	e1a01005 	mov	r1, r5
    51fc:	eb00007e 	bl	53fc <__adddf3>
    5200:	e88d0003 	stm	sp, {r0, r1}
    5204:	e1a02004 	mov	r2, r4
    5208:	e1a03005 	mov	r3, r5
    520c:	e89d0003 	ldm	sp, {r0, r1}
    5210:	eb000078 	bl	53f8 <__aeabi_dsub>
    5214:	e1a05001 	mov	r5, r1
    5218:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    521c:	e1a04000 	mov	r4, r0
    5220:	e1a02000 	mov	r2, r0
    5224:	e1813f88 	orr	r3, r1, r8, lsl #31
    5228:	eaffffc9 	b	5154 <rint+0xc0>
    522c:	000fffff 	.word	0x000fffff
    5230:	00007518 	.word	0x00007518
    5234:	00000000 	.word	0x00000000

00005238 <scalbn>:
    5238:	e59f3170 	ldr	r3, [pc, #368]	; 53b0 <scalbn+0x178>
    523c:	e0013003 	and	r3, r1, r3
    5240:	e1b03a43 	asrs	r3, r3, #20
    5244:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    5248:	e1a04000 	mov	r4, r0
    524c:	e1a05001 	mov	r5, r1
    5250:	e1a06000 	mov	r6, r0
    5254:	e1a07001 	mov	r7, r1
    5258:	e1a08002 	mov	r8, r2
    525c:	1a000011 	bne	52a8 <scalbn+0x70>
    5260:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    5264:	e19cc000 	orrs	r12, r12, r0
    5268:	0a00001d 	beq	52e4 <scalbn+0xac>
    526c:	e59f3140 	ldr	r3, [pc, #320]	; 53b4 <scalbn+0x17c>
    5270:	e3a02000 	mov	r2, #0
    5274:	eb000164 	bl	580c <__aeabi_dmul>
    5278:	e59f3138 	ldr	r3, [pc, #312]	; 53b8 <scalbn+0x180>
    527c:	e1580003 	cmp	r8, r3
    5280:	e1a04000 	mov	r4, r0
    5284:	e1a05001 	mov	r5, r1
    5288:	e1a06000 	mov	r6, r0
    528c:	e1a07001 	mov	r7, r1
    5290:	ba000021 	blt	531c <scalbn+0xe4>
    5294:	e59f3114 	ldr	r3, [pc, #276]	; 53b0 <scalbn+0x178>
    5298:	e0013003 	and	r3, r1, r3
    529c:	e1a03a43 	asr	r3, r3, #20
    52a0:	e2433036 	sub	r3, r3, #54	; 0x36
    52a4:	ea000003 	b	52b8 <scalbn+0x80>
    52a8:	e59f210c 	ldr	r2, [pc, #268]	; 53bc <scalbn+0x184>
    52ac:	e1530002 	cmp	r3, r2
    52b0:	11a01001 	movne	r1, r1
    52b4:	0a000027 	beq	5358 <scalbn+0x120>
    52b8:	e59f2100 	ldr	r2, [pc, #256]	; 53c0 <scalbn+0x188>
    52bc:	e0833008 	add	r3, r3, r8
    52c0:	e1530002 	cmp	r3, r2
    52c4:	c1a02004 	movgt	r2, r4
    52c8:	c1a03005 	movgt	r3, r5
    52cc:	ca000018 	bgt	5334 <scalbn+0xfc>
    52d0:	e3530000 	cmp	r3, #0
    52d4:	da000006 	ble	52f4 <scalbn+0xbc>
    52d8:	e3c1147f 	bic	r1, r1, #2130706432	; 0x7f000000
    52dc:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    52e0:	e1815a03 	orr	r5, r1, r3, lsl #20
    52e4:	e1a00004 	mov	r0, r4
    52e8:	e1a01005 	mov	r1, r5
    52ec:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    52f0:	e12fff1e 	bx	lr
    52f4:	e3730035 	cmn	r3, #53	; 0x35
    52f8:	aa00001c 	bge	5370 <scalbn+0x138>
    52fc:	e59f30c0 	ldr	r3, [pc, #192]	; 53c4 <scalbn+0x18c>
    5300:	e1580003 	cmp	r8, r3
    5304:	e1a02004 	mov	r2, r4
    5308:	e1a03005 	mov	r3, r5
    530c:	ca000008 	bgt	5334 <scalbn+0xfc>
    5310:	e28f1088 	add	r1, pc, #136	; 0x88
    5314:	e8910003 	ldm	r1, {r0, r1}
    5318:	eb00002c 	bl	53d0 <copysign>
    531c:	e28f307c 	add	r3, pc, #124	; 0x7c
    5320:	e893000c 	ldm	r3, {r2, r3}
    5324:	eb000138 	bl	580c <__aeabi_dmul>
    5328:	e1a04000 	mov	r4, r0
    532c:	e1a05001 	mov	r5, r1
    5330:	eaffffeb 	b	52e4 <scalbn+0xac>
    5334:	e28f106c 	add	r1, pc, #108	; 0x6c
    5338:	e8910003 	ldm	r1, {r0, r1}
    533c:	eb000023 	bl	53d0 <copysign>
    5340:	e28f3060 	add	r3, pc, #96	; 0x60
    5344:	e893000c 	ldm	r3, {r2, r3}
    5348:	eb00012f 	bl	580c <__aeabi_dmul>
    534c:	e1a04000 	mov	r4, r0
    5350:	e1a05001 	mov	r5, r1
    5354:	eaffffe2 	b	52e4 <scalbn+0xac>
    5358:	e1a03005 	mov	r3, r5
    535c:	e1a02000 	mov	r2, r0
    5360:	eb000025 	bl	53fc <__adddf3>
    5364:	e1a04000 	mov	r4, r0
    5368:	e1a05001 	mov	r5, r1
    536c:	eaffffdc 	b	52e4 <scalbn+0xac>
    5370:	e3c1147f 	bic	r1, r1, #2130706432	; 0x7f000000
    5374:	e2833036 	add	r3, r3, #54	; 0x36
    5378:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    537c:	e1815a03 	orr	r5, r1, r3, lsl #20
    5380:	e1a00004 	mov	r0, r4
    5384:	e1a01005 	mov	r1, r5
    5388:	e3a02000 	mov	r2, #0
    538c:	e59f3034 	ldr	r3, [pc, #52]	; 53c8 <scalbn+0x190>
    5390:	eb00011d 	bl	580c <__aeabi_dmul>
    5394:	e1a04000 	mov	r4, r0
    5398:	e1a05001 	mov	r5, r1
    539c:	eaffffd0 	b	52e4 <scalbn+0xac>
    53a0:	c2f8f359 	.word	0xc2f8f359
    53a4:	01a56e1f 	.word	0x01a56e1f
    53a8:	8800759c 	.word	0x8800759c
    53ac:	7e37e43c 	.word	0x7e37e43c
    53b0:	7ff00000 	.word	0x7ff00000
    53b4:	43500000 	.word	0x43500000
    53b8:	ffff3cb0 	.word	0xffff3cb0
    53bc:	000007ff 	.word	0x000007ff
    53c0:	000007fe 	.word	0x000007fe
    53c4:	0000c350 	.word	0x0000c350
    53c8:	3c900000 	.word	0x3c900000
    53cc:	e1a00000 	nop			; (mov r0, r0)

000053d0 <copysign>:
    53d0:	e2033102 	and	r3, r3, #-2147483648	; 0x80000000
    53d4:	e3c12102 	bic	r2, r1, #-2147483648	; 0x80000000
    53d8:	e92d0030 	push	{r4, r5}
    53dc:	e1a05001 	mov	r5, r1
    53e0:	e1a04000 	mov	r4, r0
    53e4:	e1831002 	orr	r1, r3, r2
    53e8:	e8bd0030 	pop	{r4, r5}
    53ec:	e12fff1e 	bx	lr

000053f0 <__aeabi_drsub>:
    53f0:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    53f4:	ea000000 	b	53fc <__adddf3>

000053f8 <__aeabi_dsub>:
    53f8:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

000053fc <__adddf3>:
    53fc:	e92d4030 	push	{r4, r5, lr}
    5400:	e1a04081 	lsl	r4, r1, #1
    5404:	e1a05083 	lsl	r5, r3, #1
    5408:	e1340005 	teq	r4, r5
    540c:	01300002 	teqeq	r0, r2
    5410:	1194c000 	orrsne	r12, r4, r0
    5414:	1195c002 	orrsne	r12, r5, r2
    5418:	11f0cac4 	mvnsne	r12, r4, asr #21
    541c:	11f0cac5 	mvnsne	r12, r5, asr #21
    5420:	0a00008c 	beq	5658 <__adddf3+0x25c>
    5424:	e1a04aa4 	lsr	r4, r4, #21
    5428:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    542c:	b2655000 	rsblt	r5, r5, #0
    5430:	da000006 	ble	5450 <__adddf3+0x54>
    5434:	e0844005 	add	r4, r4, r5
    5438:	e0202002 	eor	r2, r0, r2
    543c:	e0213003 	eor	r3, r1, r3
    5440:	e0220000 	eor	r0, r2, r0
    5444:	e0231001 	eor	r1, r3, r1
    5448:	e0202002 	eor	r2, r0, r2
    544c:	e0213003 	eor	r3, r1, r3
    5450:	e3550036 	cmp	r5, #54	; 0x36
    5454:	88bd4030 	pophi	{r4, r5, lr}
    5458:	812fff1e 	bxhi	lr
    545c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    5460:	e1a01601 	lsl	r1, r1, #12
    5464:	e3a0c601 	mov	r12, #1048576	; 0x100000
    5468:	e18c1621 	orr	r1, r12, r1, lsr #12
    546c:	0a000001 	beq	5478 <__adddf3+0x7c>
    5470:	e2700000 	rsbs	r0, r0, #0
    5474:	e2e11000 	rsc	r1, r1, #0
    5478:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    547c:	e1a03603 	lsl	r3, r3, #12
    5480:	e18c3623 	orr	r3, r12, r3, lsr #12
    5484:	0a000001 	beq	5490 <__adddf3+0x94>
    5488:	e2722000 	rsbs	r2, r2, #0
    548c:	e2e33000 	rsc	r3, r3, #0
    5490:	e1340005 	teq	r4, r5
    5494:	0a000069 	beq	5640 <__adddf3+0x244>
    5498:	e2444001 	sub	r4, r4, #1
    549c:	e275e020 	rsbs	lr, r5, #32
    54a0:	ba000005 	blt	54bc <__adddf3+0xc0>
    54a4:	e1a0ce12 	lsl	r12, r2, lr
    54a8:	e0900532 	adds	r0, r0, r2, lsr r5
    54ac:	e2a11000 	adc	r1, r1, #0
    54b0:	e0900e13 	adds	r0, r0, r3, lsl lr
    54b4:	e0b11553 	adcs	r1, r1, r3, asr r5
    54b8:	ea000006 	b	54d8 <__adddf3+0xdc>
    54bc:	e2455020 	sub	r5, r5, #32
    54c0:	e28ee020 	add	lr, lr, #32
    54c4:	e3520001 	cmp	r2, #1
    54c8:	e1a0ce13 	lsl	r12, r3, lr
    54cc:	238cc002 	orrcs	r12, r12, #2
    54d0:	e0900553 	adds	r0, r0, r3, asr r5
    54d4:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    54d8:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    54dc:	5a000002 	bpl	54ec <__adddf3+0xf0>
    54e0:	e27cc000 	rsbs	r12, r12, #0
    54e4:	e2f00000 	rscs	r0, r0, #0
    54e8:	e2e11000 	rsc	r1, r1, #0
    54ec:	e3510601 	cmp	r1, #1048576	; 0x100000
    54f0:	3a00000f 	bcc	5534 <__adddf3+0x138>
    54f4:	e3510602 	cmp	r1, #2097152	; 0x200000
    54f8:	3a000006 	bcc	5518 <__adddf3+0x11c>
    54fc:	e1b010a1 	lsrs	r1, r1, #1
    5500:	e1b00060 	rrxs	r0, r0
    5504:	e1a0c06c 	rrx	r12, r12
    5508:	e2844001 	add	r4, r4, #1
    550c:	e1a02a84 	lsl	r2, r4, #21
    5510:	e3720501 	cmn	r2, #4194304	; 0x400000
    5514:	2a00006b 	bcs	56c8 <__adddf3+0x2cc>
    5518:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    551c:	01b0c0a0 	lsrseq	r12, r0, #1
    5520:	e2b00000 	adcs	r0, r0, #0
    5524:	e0a11a04 	adc	r1, r1, r4, lsl #20
    5528:	e1811005 	orr	r1, r1, r5
    552c:	e8bd4030 	pop	{r4, r5, lr}
    5530:	e12fff1e 	bx	lr
    5534:	e1b0c08c 	lsls	r12, r12, #1
    5538:	e0b00000 	adcs	r0, r0, r0
    553c:	e0a11001 	adc	r1, r1, r1
    5540:	e3110601 	tst	r1, #1048576	; 0x100000
    5544:	e2444001 	sub	r4, r4, #1
    5548:	1afffff2 	bne	5518 <__adddf3+0x11c>
    554c:	e3310000 	teq	r1, #0
    5550:	13a03014 	movne	r3, #20
    5554:	03a03034 	moveq	r3, #52	; 0x34
    5558:	01a01000 	moveq	r1, r0
    555c:	03a00000 	moveq	r0, #0
    5560:	e1a02001 	mov	r2, r1
    5564:	e3520801 	cmp	r2, #65536	; 0x10000
    5568:	21a02822 	lsrcs	r2, r2, #16
    556c:	22433010 	subcs	r3, r3, #16
    5570:	e3520c01 	cmp	r2, #256	; 0x100
    5574:	21a02422 	lsrcs	r2, r2, #8
    5578:	22433008 	subcs	r3, r3, #8
    557c:	e3520010 	cmp	r2, #16
    5580:	21a02222 	lsrcs	r2, r2, #4
    5584:	22433004 	subcs	r3, r3, #4
    5588:	e3520004 	cmp	r2, #4
    558c:	22433002 	subcs	r3, r3, #2
    5590:	304330a2 	subcc	r3, r3, r2, lsr #1
    5594:	e04331a2 	sub	r3, r3, r2, lsr #3
    5598:	e2532020 	subs	r2, r3, #32
    559c:	aa000007 	bge	55c0 <__adddf3+0x1c4>
    55a0:	e292200c 	adds	r2, r2, #12
    55a4:	da000004 	ble	55bc <__adddf3+0x1c0>
    55a8:	e282c014 	add	r12, r2, #20
    55ac:	e262200c 	rsb	r2, r2, #12
    55b0:	e1a00c11 	lsl	r0, r1, r12
    55b4:	e1a01231 	lsr	r1, r1, r2
    55b8:	ea000004 	b	55d0 <__adddf3+0x1d4>
    55bc:	e2822014 	add	r2, r2, #20
    55c0:	d262c020 	rsble	r12, r2, #32
    55c4:	e1a01211 	lsl	r1, r1, r2
    55c8:	d1811c30 	orrle	r1, r1, r0, lsr r12
    55cc:	d1a00210 	lslle	r0, r0, r2
    55d0:	e0544003 	subs	r4, r4, r3
    55d4:	a0811a04 	addge	r1, r1, r4, lsl #20
    55d8:	a1811005 	orrge	r1, r1, r5
    55dc:	a8bd4030 	popge	{r4, r5, lr}
    55e0:	a12fff1e 	bxge	lr
    55e4:	e1e04004 	mvn	r4, r4
    55e8:	e254401f 	subs	r4, r4, #31
    55ec:	aa00000f 	bge	5630 <__adddf3+0x234>
    55f0:	e294400c 	adds	r4, r4, #12
    55f4:	ca000006 	bgt	5614 <__adddf3+0x218>
    55f8:	e2844014 	add	r4, r4, #20
    55fc:	e2642020 	rsb	r2, r4, #32
    5600:	e1a00430 	lsr	r0, r0, r4
    5604:	e1800211 	orr	r0, r0, r1, lsl r2
    5608:	e1851431 	orr	r1, r5, r1, lsr r4
    560c:	e8bd4030 	pop	{r4, r5, lr}
    5610:	e12fff1e 	bx	lr
    5614:	e264400c 	rsb	r4, r4, #12
    5618:	e2642020 	rsb	r2, r4, #32
    561c:	e1a00230 	lsr	r0, r0, r2
    5620:	e1800411 	orr	r0, r0, r1, lsl r4
    5624:	e1a01005 	mov	r1, r5
    5628:	e8bd4030 	pop	{r4, r5, lr}
    562c:	e12fff1e 	bx	lr
    5630:	e1a00431 	lsr	r0, r1, r4
    5634:	e1a01005 	mov	r1, r5
    5638:	e8bd4030 	pop	{r4, r5, lr}
    563c:	e12fff1e 	bx	lr
    5640:	e3340000 	teq	r4, #0
    5644:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    5648:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    564c:	02844001 	addeq	r4, r4, #1
    5650:	12455001 	subne	r5, r5, #1
    5654:	eaffff8f 	b	5498 <__adddf3+0x9c>
    5658:	e1f0cac4 	mvns	r12, r4, asr #21
    565c:	11f0cac5 	mvnsne	r12, r5, asr #21
    5660:	0a00001d 	beq	56dc <__adddf3+0x2e0>
    5664:	e1340005 	teq	r4, r5
    5668:	01300002 	teqeq	r0, r2
    566c:	0a000004 	beq	5684 <__adddf3+0x288>
    5670:	e194c000 	orrs	r12, r4, r0
    5674:	01a01003 	moveq	r1, r3
    5678:	01a00002 	moveq	r0, r2
    567c:	e8bd4030 	pop	{r4, r5, lr}
    5680:	e12fff1e 	bx	lr
    5684:	e1310003 	teq	r1, r3
    5688:	13a01000 	movne	r1, #0
    568c:	13a00000 	movne	r0, #0
    5690:	18bd4030 	popne	{r4, r5, lr}
    5694:	112fff1e 	bxne	lr
    5698:	e1b0caa4 	lsrs	r12, r4, #21
    569c:	1a000004 	bne	56b4 <__adddf3+0x2b8>
    56a0:	e1b00080 	lsls	r0, r0, #1
    56a4:	e0b11001 	adcs	r1, r1, r1
    56a8:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    56ac:	e8bd4030 	pop	{r4, r5, lr}
    56b0:	e12fff1e 	bx	lr
    56b4:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    56b8:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    56bc:	38bd4030 	popcc	{r4, r5, lr}
    56c0:	312fff1e 	bxcc	lr
    56c4:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    56c8:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    56cc:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    56d0:	e3a00000 	mov	r0, #0
    56d4:	e8bd4030 	pop	{r4, r5, lr}
    56d8:	e12fff1e 	bx	lr
    56dc:	e1f0cac4 	mvns	r12, r4, asr #21
    56e0:	11a01003 	movne	r1, r3
    56e4:	11a00002 	movne	r0, r2
    56e8:	01f0cac5 	mvnseq	r12, r5, asr #21
    56ec:	11a03001 	movne	r3, r1
    56f0:	11a02000 	movne	r2, r0
    56f4:	e1904601 	orrs	r4, r0, r1, lsl #12
    56f8:	01925603 	orrseq	r5, r2, r3, lsl #12
    56fc:	01310003 	teqeq	r1, r3
    5700:	13811702 	orrne	r1, r1, #524288	; 0x80000
    5704:	e8bd4030 	pop	{r4, r5, lr}
    5708:	e12fff1e 	bx	lr

0000570c <__aeabi_ui2d>:
    570c:	e3300000 	teq	r0, #0
    5710:	03a01000 	moveq	r1, #0
    5714:	012fff1e 	bxeq	lr
    5718:	e92d4030 	push	{r4, r5, lr}
    571c:	e3a04b01 	mov	r4, #1024	; 0x400
    5720:	e2844032 	add	r4, r4, #50	; 0x32
    5724:	e3a05000 	mov	r5, #0
    5728:	e3a01000 	mov	r1, #0
    572c:	eaffff86 	b	554c <__adddf3+0x150>

00005730 <__aeabi_i2d>:
    5730:	e3300000 	teq	r0, #0
    5734:	03a01000 	moveq	r1, #0
    5738:	012fff1e 	bxeq	lr
    573c:	e92d4030 	push	{r4, r5, lr}
    5740:	e3a04b01 	mov	r4, #1024	; 0x400
    5744:	e2844032 	add	r4, r4, #50	; 0x32
    5748:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    574c:	42600000 	rsbmi	r0, r0, #0
    5750:	e3a01000 	mov	r1, #0
    5754:	eaffff7c 	b	554c <__adddf3+0x150>

00005758 <__aeabi_f2d>:
    5758:	e1b02080 	lsls	r2, r0, #1
    575c:	e1a011c2 	asr	r1, r2, #3
    5760:	e1a01061 	rrx	r1, r1
    5764:	e1a00e02 	lsl	r0, r2, #28
    5768:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    576c:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    5770:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    5774:	112fff1e 	bxne	lr
    5778:	e3320000 	teq	r2, #0
    577c:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    5780:	012fff1e 	bxeq	lr
    5784:	e92d4030 	push	{r4, r5, lr}
    5788:	e3a04d0e 	mov	r4, #896	; 0x380
    578c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    5790:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    5794:	eaffff6c 	b	554c <__adddf3+0x150>

00005798 <__aeabi_ul2d>:
    5798:	e1902001 	orrs	r2, r0, r1
    579c:	012fff1e 	bxeq	lr
    57a0:	e92d4030 	push	{r4, r5, lr}
    57a4:	e3a05000 	mov	r5, #0
    57a8:	ea000006 	b	57c8 <__aeabi_l2d+0x1c>

000057ac <__aeabi_l2d>:
    57ac:	e1902001 	orrs	r2, r0, r1
    57b0:	012fff1e 	bxeq	lr
    57b4:	e92d4030 	push	{r4, r5, lr}
    57b8:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    57bc:	5a000001 	bpl	57c8 <__aeabi_l2d+0x1c>
    57c0:	e2700000 	rsbs	r0, r0, #0
    57c4:	e2e11000 	rsc	r1, r1, #0
    57c8:	e3a04b01 	mov	r4, #1024	; 0x400
    57cc:	e2844032 	add	r4, r4, #50	; 0x32
    57d0:	e1b0cb21 	lsrs	r12, r1, #22
    57d4:	0affff44 	beq	54ec <__adddf3+0xf0>
    57d8:	e3a02003 	mov	r2, #3
    57dc:	e1b0c1ac 	lsrs	r12, r12, #3
    57e0:	12822003 	addne	r2, r2, #3
    57e4:	e1b0c1ac 	lsrs	r12, r12, #3
    57e8:	12822003 	addne	r2, r2, #3
    57ec:	e08221ac 	add	r2, r2, r12, lsr #3
    57f0:	e2623020 	rsb	r3, r2, #32
    57f4:	e1a0c310 	lsl	r12, r0, r3
    57f8:	e1a00230 	lsr	r0, r0, r2
    57fc:	e1800311 	orr	r0, r0, r1, lsl r3
    5800:	e1a01231 	lsr	r1, r1, r2
    5804:	e0844002 	add	r4, r4, r2
    5808:	eaffff37 	b	54ec <__adddf3+0xf0>

0000580c <__aeabi_dmul>:
    580c:	e92d4070 	push	{r4, r5, r6, lr}
    5810:	e3a0c0ff 	mov	r12, #255	; 0xff
    5814:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    5818:	e01c4a21 	ands	r4, r12, r1, lsr #20
    581c:	101c5a23 	andsne	r5, r12, r3, lsr #20
    5820:	1134000c 	teqne	r4, r12
    5824:	1135000c 	teqne	r5, r12
    5828:	0b000075 	bleq	5a04 <__aeabi_dmul+0x1f8>
    582c:	e0844005 	add	r4, r4, r5
    5830:	e0216003 	eor	r6, r1, r3
    5834:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    5838:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    583c:	e1905601 	orrs	r5, r0, r1, lsl #12
    5840:	11925603 	orrsne	r5, r2, r3, lsl #12
    5844:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    5848:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    584c:	0a00001d 	beq	58c8 <__aeabi_dmul+0xbc>
    5850:	e08ec290 	umull	r12, lr, r0, r2
    5854:	e3a05000 	mov	r5, #0
    5858:	e0a5e291 	umlal	lr, r5, r1, r2
    585c:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    5860:	e0a5e390 	umlal	lr, r5, r0, r3
    5864:	e3a06000 	mov	r6, #0
    5868:	e0a65391 	umlal	r5, r6, r1, r3
    586c:	e33c0000 	teq	r12, #0
    5870:	138ee001 	orrne	lr, lr, #1
    5874:	e24440ff 	sub	r4, r4, #255	; 0xff
    5878:	e3560c02 	cmp	r6, #512	; 0x200
    587c:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    5880:	2a000002 	bcs	5890 <__aeabi_dmul+0x84>
    5884:	e1b0e08e 	lsls	lr, lr, #1
    5888:	e0b55005 	adcs	r5, r5, r5
    588c:	e0a66006 	adc	r6, r6, r6
    5890:	e1821586 	orr	r1, r2, r6, lsl #11
    5894:	e1811aa5 	orr	r1, r1, r5, lsr #21
    5898:	e1a00585 	lsl	r0, r5, #11
    589c:	e1800aae 	orr	r0, r0, lr, lsr #21
    58a0:	e1a0e58e 	lsl	lr, lr, #11
    58a4:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    58a8:	835c0c07 	cmphi	r12, #1792	; 0x700
    58ac:	8a000011 	bhi	58f8 <__aeabi_dmul+0xec>
    58b0:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    58b4:	01b0e0a0 	lsrseq	lr, r0, #1
    58b8:	e2b00000 	adcs	r0, r0, #0
    58bc:	e0a11a04 	adc	r1, r1, r4, lsl #20
    58c0:	e8bd4070 	pop	{r4, r5, r6, lr}
    58c4:	e12fff1e 	bx	lr
    58c8:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    58cc:	e1861001 	orr	r1, r6, r1
    58d0:	e1800002 	orr	r0, r0, r2
    58d4:	e0211003 	eor	r1, r1, r3
    58d8:	e05440ac 	subs	r4, r4, r12, lsr #1
    58dc:	c074500c 	rsbsgt	r5, r4, r12
    58e0:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    58e4:	c8bd4070 	popgt	{r4, r5, r6, lr}
    58e8:	c12fff1e 	bxgt	lr
    58ec:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    58f0:	e3a0e000 	mov	lr, #0
    58f4:	e2544001 	subs	r4, r4, #1
    58f8:	ca00005d 	bgt	5a74 <__aeabi_dmul+0x268>
    58fc:	e3740036 	cmn	r4, #54	; 0x36
    5900:	d3a00000 	movle	r0, #0
    5904:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    5908:	d8bd4070 	pople	{r4, r5, r6, lr}
    590c:	d12fff1e 	bxle	lr
    5910:	e2644000 	rsb	r4, r4, #0
    5914:	e2544020 	subs	r4, r4, #32
    5918:	aa00001a 	bge	5988 <__aeabi_dmul+0x17c>
    591c:	e294400c 	adds	r4, r4, #12
    5920:	ca00000c 	bgt	5958 <__aeabi_dmul+0x14c>
    5924:	e2844014 	add	r4, r4, #20
    5928:	e2645020 	rsb	r5, r4, #32
    592c:	e1a03510 	lsl	r3, r0, r5
    5930:	e1a00430 	lsr	r0, r0, r4
    5934:	e1800511 	orr	r0, r0, r1, lsl r5
    5938:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    593c:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    5940:	e0900fa3 	adds	r0, r0, r3, lsr #31
    5944:	e0a21431 	adc	r1, r2, r1, lsr r4
    5948:	e19ee083 	orrs	lr, lr, r3, lsl #1
    594c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    5950:	e8bd4070 	pop	{r4, r5, r6, lr}
    5954:	e12fff1e 	bx	lr
    5958:	e264400c 	rsb	r4, r4, #12
    595c:	e2645020 	rsb	r5, r4, #32
    5960:	e1a03410 	lsl	r3, r0, r4
    5964:	e1a00530 	lsr	r0, r0, r5
    5968:	e1800411 	orr	r0, r0, r1, lsl r4
    596c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    5970:	e0900fa3 	adds	r0, r0, r3, lsr #31
    5974:	e2a11000 	adc	r1, r1, #0
    5978:	e19ee083 	orrs	lr, lr, r3, lsl #1
    597c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    5980:	e8bd4070 	pop	{r4, r5, r6, lr}
    5984:	e12fff1e 	bx	lr
    5988:	e2645020 	rsb	r5, r4, #32
    598c:	e18ee510 	orr	lr, lr, r0, lsl r5
    5990:	e1a03430 	lsr	r3, r0, r4
    5994:	e1833511 	orr	r3, r3, r1, lsl r5
    5998:	e1a00431 	lsr	r0, r1, r4
    599c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    59a0:	e1c00431 	bic	r0, r0, r1, lsr r4
    59a4:	e0800fa3 	add	r0, r0, r3, lsr #31
    59a8:	e19ee083 	orrs	lr, lr, r3, lsl #1
    59ac:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    59b0:	e8bd4070 	pop	{r4, r5, r6, lr}
    59b4:	e12fff1e 	bx	lr
    59b8:	e3340000 	teq	r4, #0
    59bc:	1a000008 	bne	59e4 <__aeabi_dmul+0x1d8>
    59c0:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    59c4:	e1b00080 	lsls	r0, r0, #1
    59c8:	e0a11001 	adc	r1, r1, r1
    59cc:	e3110601 	tst	r1, #1048576	; 0x100000
    59d0:	02444001 	subeq	r4, r4, #1
    59d4:	0afffffa 	beq	59c4 <__aeabi_dmul+0x1b8>
    59d8:	e1811006 	orr	r1, r1, r6
    59dc:	e3350000 	teq	r5, #0
    59e0:	112fff1e 	bxne	lr
    59e4:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    59e8:	e1b02082 	lsls	r2, r2, #1
    59ec:	e0a33003 	adc	r3, r3, r3
    59f0:	e3130601 	tst	r3, #1048576	; 0x100000
    59f4:	02455001 	subeq	r5, r5, #1
    59f8:	0afffffa 	beq	59e8 <__aeabi_dmul+0x1dc>
    59fc:	e1833006 	orr	r3, r3, r6
    5a00:	e12fff1e 	bx	lr
    5a04:	e134000c 	teq	r4, r12
    5a08:	e00c5a23 	and	r5, r12, r3, lsr #20
    5a0c:	1135000c 	teqne	r5, r12
    5a10:	0a000007 	beq	5a34 <__aeabi_dmul+0x228>
    5a14:	e1906081 	orrs	r6, r0, r1, lsl #1
    5a18:	11926083 	orrsne	r6, r2, r3, lsl #1
    5a1c:	1affffe5 	bne	59b8 <__aeabi_dmul+0x1ac>
    5a20:	e0211003 	eor	r1, r1, r3
    5a24:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    5a28:	e3a00000 	mov	r0, #0
    5a2c:	e8bd4070 	pop	{r4, r5, r6, lr}
    5a30:	e12fff1e 	bx	lr
    5a34:	e1906081 	orrs	r6, r0, r1, lsl #1
    5a38:	01a00002 	moveq	r0, r2
    5a3c:	01a01003 	moveq	r1, r3
    5a40:	11926083 	orrsne	r6, r2, r3, lsl #1
    5a44:	0a000010 	beq	5a8c <__aeabi_dmul+0x280>
    5a48:	e134000c 	teq	r4, r12
    5a4c:	1a000001 	bne	5a58 <__aeabi_dmul+0x24c>
    5a50:	e1906601 	orrs	r6, r0, r1, lsl #12
    5a54:	1a00000c 	bne	5a8c <__aeabi_dmul+0x280>
    5a58:	e135000c 	teq	r5, r12
    5a5c:	1a000003 	bne	5a70 <__aeabi_dmul+0x264>
    5a60:	e1926603 	orrs	r6, r2, r3, lsl #12
    5a64:	11a00002 	movne	r0, r2
    5a68:	11a01003 	movne	r1, r3
    5a6c:	1a000006 	bne	5a8c <__aeabi_dmul+0x280>
    5a70:	e0211003 	eor	r1, r1, r3
    5a74:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    5a78:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    5a7c:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    5a80:	e3a00000 	mov	r0, #0
    5a84:	e8bd4070 	pop	{r4, r5, r6, lr}
    5a88:	e12fff1e 	bx	lr
    5a8c:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    5a90:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    5a94:	e8bd4070 	pop	{r4, r5, r6, lr}
    5a98:	e12fff1e 	bx	lr

00005a9c <__aeabi_ddiv>:
    5a9c:	e92d4070 	push	{r4, r5, r6, lr}
    5aa0:	e3a0c0ff 	mov	r12, #255	; 0xff
    5aa4:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    5aa8:	e01c4a21 	ands	r4, r12, r1, lsr #20
    5aac:	101c5a23 	andsne	r5, r12, r3, lsr #20
    5ab0:	1134000c 	teqne	r4, r12
    5ab4:	1135000c 	teqne	r5, r12
    5ab8:	0b00005e 	bleq	5c38 <__aeabi_ddiv+0x19c>
    5abc:	e0444005 	sub	r4, r4, r5
    5ac0:	e021e003 	eor	lr, r1, r3
    5ac4:	e1925603 	orrs	r5, r2, r3, lsl #12
    5ac8:	e1a01601 	lsl	r1, r1, #12
    5acc:	0a00004c 	beq	5c04 <__aeabi_ddiv+0x168>
    5ad0:	e1a03603 	lsl	r3, r3, #12
    5ad4:	e3a05201 	mov	r5, #268435456	; 0x10000000
    5ad8:	e1853223 	orr	r3, r5, r3, lsr #4
    5adc:	e1833c22 	orr	r3, r3, r2, lsr #24
    5ae0:	e1a02402 	lsl	r2, r2, #8
    5ae4:	e1855221 	orr	r5, r5, r1, lsr #4
    5ae8:	e1855c20 	orr	r5, r5, r0, lsr #24
    5aec:	e1a06400 	lsl	r6, r0, #8
    5af0:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    5af4:	e1550003 	cmp	r5, r3
    5af8:	01560002 	cmpeq	r6, r2
    5afc:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    5b00:	e2844c03 	add	r4, r4, #768	; 0x300
    5b04:	2a000001 	bcs	5b10 <__aeabi_ddiv+0x74>
    5b08:	e1b030a3 	lsrs	r3, r3, #1
    5b0c:	e1a02062 	rrx	r2, r2
    5b10:	e0566002 	subs	r6, r6, r2
    5b14:	e0c55003 	sbc	r5, r5, r3
    5b18:	e1b030a3 	lsrs	r3, r3, #1
    5b1c:	e1a02062 	rrx	r2, r2
    5b20:	e3a00601 	mov	r0, #1048576	; 0x100000
    5b24:	e3a0c702 	mov	r12, #524288	; 0x80000
    5b28:	e056e002 	subs	lr, r6, r2
    5b2c:	e0d5e003 	sbcs	lr, r5, r3
    5b30:	20466002 	subcs	r6, r6, r2
    5b34:	21a0500e 	movcs	r5, lr
    5b38:	2180000c 	orrcs	r0, r0, r12
    5b3c:	e1b030a3 	lsrs	r3, r3, #1
    5b40:	e1a02062 	rrx	r2, r2
    5b44:	e056e002 	subs	lr, r6, r2
    5b48:	e0d5e003 	sbcs	lr, r5, r3
    5b4c:	20466002 	subcs	r6, r6, r2
    5b50:	21a0500e 	movcs	r5, lr
    5b54:	218000ac 	orrcs	r0, r0, r12, lsr #1
    5b58:	e1b030a3 	lsrs	r3, r3, #1
    5b5c:	e1a02062 	rrx	r2, r2
    5b60:	e056e002 	subs	lr, r6, r2
    5b64:	e0d5e003 	sbcs	lr, r5, r3
    5b68:	20466002 	subcs	r6, r6, r2
    5b6c:	21a0500e 	movcs	r5, lr
    5b70:	2180012c 	orrcs	r0, r0, r12, lsr #2
    5b74:	e1b030a3 	lsrs	r3, r3, #1
    5b78:	e1a02062 	rrx	r2, r2
    5b7c:	e056e002 	subs	lr, r6, r2
    5b80:	e0d5e003 	sbcs	lr, r5, r3
    5b84:	20466002 	subcs	r6, r6, r2
    5b88:	21a0500e 	movcs	r5, lr
    5b8c:	218001ac 	orrcs	r0, r0, r12, lsr #3
    5b90:	e195e006 	orrs	lr, r5, r6
    5b94:	0a00000d 	beq	5bd0 <__aeabi_ddiv+0x134>
    5b98:	e1a05205 	lsl	r5, r5, #4
    5b9c:	e1855e26 	orr	r5, r5, r6, lsr #28
    5ba0:	e1a06206 	lsl	r6, r6, #4
    5ba4:	e1a03183 	lsl	r3, r3, #3
    5ba8:	e1833ea2 	orr	r3, r3, r2, lsr #29
    5bac:	e1a02182 	lsl	r2, r2, #3
    5bb0:	e1b0c22c 	lsrs	r12, r12, #4
    5bb4:	1affffdb 	bne	5b28 <__aeabi_ddiv+0x8c>
    5bb8:	e3110601 	tst	r1, #1048576	; 0x100000
    5bbc:	1a000006 	bne	5bdc <__aeabi_ddiv+0x140>
    5bc0:	e1811000 	orr	r1, r1, r0
    5bc4:	e3a00000 	mov	r0, #0
    5bc8:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    5bcc:	eaffffd5 	b	5b28 <__aeabi_ddiv+0x8c>
    5bd0:	e3110601 	tst	r1, #1048576	; 0x100000
    5bd4:	01811000 	orreq	r1, r1, r0
    5bd8:	03a00000 	moveq	r0, #0
    5bdc:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    5be0:	835c0c07 	cmphi	r12, #1792	; 0x700
    5be4:	8affff43 	bhi	58f8 <__aeabi_dmul+0xec>
    5be8:	e055c003 	subs	r12, r5, r3
    5bec:	0056c002 	subseq	r12, r6, r2
    5bf0:	01b0c0a0 	lsrseq	r12, r0, #1
    5bf4:	e2b00000 	adcs	r0, r0, #0
    5bf8:	e0a11a04 	adc	r1, r1, r4, lsl #20
    5bfc:	e8bd4070 	pop	{r4, r5, r6, lr}
    5c00:	e12fff1e 	bx	lr
    5c04:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    5c08:	e18e1621 	orr	r1, lr, r1, lsr #12
    5c0c:	e09440ac 	adds	r4, r4, r12, lsr #1
    5c10:	c074500c 	rsbsgt	r5, r4, r12
    5c14:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    5c18:	c8bd4070 	popgt	{r4, r5, r6, lr}
    5c1c:	c12fff1e 	bxgt	lr
    5c20:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    5c24:	e3a0e000 	mov	lr, #0
    5c28:	e2544001 	subs	r4, r4, #1
    5c2c:	eaffff31 	b	58f8 <__aeabi_dmul+0xec>
    5c30:	e185e006 	orr	lr, r5, r6
    5c34:	eaffff2f 	b	58f8 <__aeabi_dmul+0xec>
    5c38:	e00c5a23 	and	r5, r12, r3, lsr #20
    5c3c:	e134000c 	teq	r4, r12
    5c40:	0135000c 	teqeq	r5, r12
    5c44:	0affff90 	beq	5a8c <__aeabi_dmul+0x280>
    5c48:	e134000c 	teq	r4, r12
    5c4c:	1a000006 	bne	5c6c <__aeabi_ddiv+0x1d0>
    5c50:	e1904601 	orrs	r4, r0, r1, lsl #12
    5c54:	1affff8c 	bne	5a8c <__aeabi_dmul+0x280>
    5c58:	e135000c 	teq	r5, r12
    5c5c:	1affff83 	bne	5a70 <__aeabi_dmul+0x264>
    5c60:	e1a00002 	mov	r0, r2
    5c64:	e1a01003 	mov	r1, r3
    5c68:	eaffff87 	b	5a8c <__aeabi_dmul+0x280>
    5c6c:	e135000c 	teq	r5, r12
    5c70:	1a000004 	bne	5c88 <__aeabi_ddiv+0x1ec>
    5c74:	e1925603 	orrs	r5, r2, r3, lsl #12
    5c78:	0affff68 	beq	5a20 <__aeabi_dmul+0x214>
    5c7c:	e1a00002 	mov	r0, r2
    5c80:	e1a01003 	mov	r1, r3
    5c84:	eaffff80 	b	5a8c <__aeabi_dmul+0x280>
    5c88:	e1906081 	orrs	r6, r0, r1, lsl #1
    5c8c:	11926083 	orrsne	r6, r2, r3, lsl #1
    5c90:	1affff48 	bne	59b8 <__aeabi_dmul+0x1ac>
    5c94:	e1904081 	orrs	r4, r0, r1, lsl #1
    5c98:	1affff74 	bne	5a70 <__aeabi_dmul+0x264>
    5c9c:	e1925083 	orrs	r5, r2, r3, lsl #1
    5ca0:	1affff5e 	bne	5a20 <__aeabi_dmul+0x214>
    5ca4:	eaffff78 	b	5a8c <__aeabi_dmul+0x280>

00005ca8 <__gedf2>:
    5ca8:	e3e0c000 	mvn	r12, #0
    5cac:	ea000002 	b	5cbc <__cmpdf2+0x4>

00005cb0 <__ledf2>:
    5cb0:	e3a0c001 	mov	r12, #1
    5cb4:	ea000000 	b	5cbc <__cmpdf2+0x4>

00005cb8 <__cmpdf2>:
    5cb8:	e3a0c001 	mov	r12, #1
    5cbc:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    5cc0:	e1a0c081 	lsl	r12, r1, #1
    5cc4:	e1f0cacc 	mvns	r12, r12, asr #21
    5cc8:	e1a0c083 	lsl	r12, r3, #1
    5ccc:	11f0cacc 	mvnsne	r12, r12, asr #21
    5cd0:	0a00000e 	beq	5d10 <__cmpdf2+0x58>
    5cd4:	e28dd004 	add	sp, sp, #4
    5cd8:	e190c081 	orrs	r12, r0, r1, lsl #1
    5cdc:	0192c083 	orrseq	r12, r2, r3, lsl #1
    5ce0:	11310003 	teqne	r1, r3
    5ce4:	01300002 	teqeq	r0, r2
    5ce8:	03a00000 	moveq	r0, #0
    5cec:	012fff1e 	bxeq	lr
    5cf0:	e3700000 	cmn	r0, #0
    5cf4:	e1310003 	teq	r1, r3
    5cf8:	51510003 	cmppl	r1, r3
    5cfc:	01500002 	cmpeq	r0, r2
    5d00:	21a00fc3 	asrcs	r0, r3, #31
    5d04:	31e00fc3 	mvncc	r0, r3, asr #31
    5d08:	e3800001 	orr	r0, r0, #1
    5d0c:	e12fff1e 	bx	lr
    5d10:	e1a0c081 	lsl	r12, r1, #1
    5d14:	e1f0cacc 	mvns	r12, r12, asr #21
    5d18:	1a000001 	bne	5d24 <__cmpdf2+0x6c>
    5d1c:	e190c601 	orrs	r12, r0, r1, lsl #12
    5d20:	1a000004 	bne	5d38 <__cmpdf2+0x80>
    5d24:	e1a0c083 	lsl	r12, r3, #1
    5d28:	e1f0cacc 	mvns	r12, r12, asr #21
    5d2c:	1affffe8 	bne	5cd4 <__cmpdf2+0x1c>
    5d30:	e192c603 	orrs	r12, r2, r3, lsl #12
    5d34:	0affffe6 	beq	5cd4 <__cmpdf2+0x1c>
    5d38:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    5d3c:	e12fff1e 	bx	lr

00005d40 <__aeabi_cdrcmple>:
    5d40:	e1a0c000 	mov	r12, r0
    5d44:	e1a00002 	mov	r0, r2
    5d48:	e1a0200c 	mov	r2, r12
    5d4c:	e1a0c001 	mov	r12, r1
    5d50:	e1a01003 	mov	r1, r3
    5d54:	e1a0300c 	mov	r3, r12
    5d58:	eaffffff 	b	5d5c <__aeabi_cdcmpeq>

00005d5c <__aeabi_cdcmpeq>:
    5d5c:	e92d4001 	push	{r0, lr}
    5d60:	ebffffd4 	bl	5cb8 <__cmpdf2>
    5d64:	e3500000 	cmp	r0, #0
    5d68:	43700000 	cmnmi	r0, #0
    5d6c:	e8bd4001 	pop	{r0, lr}
    5d70:	e12fff1e 	bx	lr

00005d74 <__aeabi_dcmpeq>:
    5d74:	e52de008 	str	lr, [sp, #-8]!
    5d78:	ebfffff7 	bl	5d5c <__aeabi_cdcmpeq>
    5d7c:	03a00001 	moveq	r0, #1
    5d80:	13a00000 	movne	r0, #0
    5d84:	e49de008 	ldr	lr, [sp], #8
    5d88:	e12fff1e 	bx	lr

00005d8c <__aeabi_dcmplt>:
    5d8c:	e52de008 	str	lr, [sp, #-8]!
    5d90:	ebfffff1 	bl	5d5c <__aeabi_cdcmpeq>
    5d94:	33a00001 	movcc	r0, #1
    5d98:	23a00000 	movcs	r0, #0
    5d9c:	e49de008 	ldr	lr, [sp], #8
    5da0:	e12fff1e 	bx	lr

00005da4 <__aeabi_dcmple>:
    5da4:	e52de008 	str	lr, [sp, #-8]!
    5da8:	ebffffeb 	bl	5d5c <__aeabi_cdcmpeq>
    5dac:	93a00001 	movls	r0, #1
    5db0:	83a00000 	movhi	r0, #0
    5db4:	e49de008 	ldr	lr, [sp], #8
    5db8:	e12fff1e 	bx	lr

00005dbc <__aeabi_dcmpge>:
    5dbc:	e52de008 	str	lr, [sp, #-8]!
    5dc0:	ebffffde 	bl	5d40 <__aeabi_cdrcmple>
    5dc4:	93a00001 	movls	r0, #1
    5dc8:	83a00000 	movhi	r0, #0
    5dcc:	e49de008 	ldr	lr, [sp], #8
    5dd0:	e12fff1e 	bx	lr

00005dd4 <__aeabi_dcmpgt>:
    5dd4:	e52de008 	str	lr, [sp, #-8]!
    5dd8:	ebffffd8 	bl	5d40 <__aeabi_cdrcmple>
    5ddc:	33a00001 	movcc	r0, #1
    5de0:	23a00000 	movcs	r0, #0
    5de4:	e49de008 	ldr	lr, [sp], #8
    5de8:	e12fff1e 	bx	lr

00005dec <__aeabi_d2iz>:
    5dec:	e1a02081 	lsl	r2, r1, #1
    5df0:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    5df4:	2a00000c 	bcs	5e2c <__aeabi_d2iz+0x40>
    5df8:	5a000009 	bpl	5e24 <__aeabi_d2iz+0x38>
    5dfc:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    5e00:	e0532ac2 	subs	r2, r3, r2, asr #21
    5e04:	9a00000a 	bls	5e34 <__aeabi_d2iz+0x48>
    5e08:	e1a03581 	lsl	r3, r1, #11
    5e0c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    5e10:	e1833aa0 	orr	r3, r3, r0, lsr #21
    5e14:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    5e18:	e1a00233 	lsr	r0, r3, r2
    5e1c:	12600000 	rsbne	r0, r0, #0
    5e20:	e12fff1e 	bx	lr
    5e24:	e3a00000 	mov	r0, #0
    5e28:	e12fff1e 	bx	lr
    5e2c:	e1900601 	orrs	r0, r0, r1, lsl #12
    5e30:	1a000002 	bne	5e40 <__aeabi_d2iz+0x54>
    5e34:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    5e38:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    5e3c:	e12fff1e 	bx	lr
    5e40:	e3a00000 	mov	r0, #0
    5e44:	e12fff1e 	bx	lr

00005e48 <__aeabi_d2uiz>:
    5e48:	e1b02081 	lsls	r2, r1, #1
    5e4c:	2a00000a 	bcs	5e7c <__aeabi_d2uiz+0x34>
    5e50:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    5e54:	2a00000a 	bcs	5e84 <__aeabi_d2uiz+0x3c>
    5e58:	5a000007 	bpl	5e7c <__aeabi_d2uiz+0x34>
    5e5c:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    5e60:	e0532ac2 	subs	r2, r3, r2, asr #21
    5e64:	4a000008 	bmi	5e8c <__aeabi_d2uiz+0x44>
    5e68:	e1a03581 	lsl	r3, r1, #11
    5e6c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    5e70:	e1833aa0 	orr	r3, r3, r0, lsr #21
    5e74:	e1a00233 	lsr	r0, r3, r2
    5e78:	e12fff1e 	bx	lr
    5e7c:	e3a00000 	mov	r0, #0
    5e80:	e12fff1e 	bx	lr
    5e84:	e1900601 	orrs	r0, r0, r1, lsl #12
    5e88:	1a000001 	bne	5e94 <__aeabi_d2uiz+0x4c>
    5e8c:	e3e00000 	mvn	r0, #0
    5e90:	e12fff1e 	bx	lr
    5e94:	e3a00000 	mov	r0, #0
    5e98:	e12fff1e 	bx	lr

00005e9c <atexit>:
    5e9c:	e1a01000 	mov	r1, r0
    5ea0:	e3a00000 	mov	r0, #0
    5ea4:	e92d4008 	push	{r3, lr}
    5ea8:	e1a02000 	mov	r2, r0
    5eac:	e1a03000 	mov	r3, r0
    5eb0:	eb000287 	bl	68d4 <__register_exitproc>
    5eb4:	e8bd4008 	pop	{r3, lr}
    5eb8:	e12fff1e 	bx	lr

00005ebc <__errno>:
    5ebc:	e59f3004 	ldr	r3, [pc, #4]	; 5ec8 <__errno+0xc>
    5ec0:	e5930000 	ldr	r0, [r3]
    5ec4:	e12fff1e 	bx	lr
    5ec8:	000e4ca0 	.word	0x000e4ca0

00005ecc <exit>:
    5ecc:	e92d4008 	push	{r3, lr}
    5ed0:	e3a01000 	mov	r1, #0
    5ed4:	e1a04000 	mov	r4, r0
    5ed8:	eb0002ba 	bl	69c8 <__call_exitprocs>
    5edc:	e59f3018 	ldr	r3, [pc, #24]	; 5efc <exit+0x30>
    5ee0:	e5930000 	ldr	r0, [r3]
    5ee4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    5ee8:	e3530000 	cmp	r3, #0
    5eec:	11a0e00f 	movne	lr, pc
    5ef0:	112fff13 	bxne	r3
    5ef4:	e1a00004 	mov	r0, r4
    5ef8:	eb00047f 	bl	70fc <_exit>
    5efc:	00007528 	.word	0x00007528

00005f00 <malloc>:
    5f00:	e92d4008 	push	{r3, lr}
    5f04:	e59f3010 	ldr	r3, [pc, #16]	; 5f1c <malloc+0x1c>
    5f08:	e1a01000 	mov	r1, r0
    5f0c:	e5930000 	ldr	r0, [r3]
    5f10:	eb00000a 	bl	5f40 <_malloc_r>
    5f14:	e8bd4008 	pop	{r3, lr}
    5f18:	e12fff1e 	bx	lr
    5f1c:	000e4ca0 	.word	0x000e4ca0

00005f20 <free>:
    5f20:	e92d4008 	push	{r3, lr}
    5f24:	e59f3010 	ldr	r3, [pc, #16]	; 5f3c <free+0x1c>
    5f28:	e1a01000 	mov	r1, r0
    5f2c:	e5930000 	ldr	r0, [r3]
    5f30:	eb00035c 	bl	6ca8 <_free_r>
    5f34:	e8bd4008 	pop	{r3, lr}
    5f38:	e12fff1e 	bx	lr
    5f3c:	000e4ca0 	.word	0x000e4ca0

00005f40 <_malloc_r>:
    5f40:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    5f44:	e281500b 	add	r5, r1, #11
    5f48:	e3550016 	cmp	r5, #22
    5f4c:	83c55007 	bichi	r5, r5, #7
    5f50:	81a03fa5 	lsrhi	r3, r5, #31
    5f54:	93a03000 	movls	r3, #0
    5f58:	93a05010 	movls	r5, #16
    5f5c:	e1550001 	cmp	r5, r1
    5f60:	21a01003 	movcs	r1, r3
    5f64:	33831001 	orrcc	r1, r3, #1
    5f68:	e3510000 	cmp	r1, #0
    5f6c:	13a0300c 	movne	r3, #12
    5f70:	e24dd00c 	sub	sp, sp, #12
    5f74:	e1a06000 	mov	r6, r0
    5f78:	15803000 	strne	r3, [r0]
    5f7c:	13a04000 	movne	r4, #0
    5f80:	1a000015 	bne	5fdc <_malloc_r+0x9c>
    5f84:	eb0001b4 	bl	665c <__malloc_lock>
    5f88:	e3550f7e 	cmp	r5, #504	; 0x1f8
    5f8c:	2a000016 	bcs	5fec <_malloc_r+0xac>
    5f90:	e59f76b8 	ldr	r7, [pc, #1720]	; 6650 <_malloc_r+0x710>
    5f94:	e1a0e1a5 	lsr	lr, r5, #3
    5f98:	e087318e 	add	r3, r7, lr, lsl #3
    5f9c:	e593400c 	ldr	r4, [r3, #12]
    5fa0:	e1540003 	cmp	r4, r3
    5fa4:	0a00014b 	beq	64d8 <_malloc_r+0x598>
    5fa8:	e5943004 	ldr	r3, [r4, #4]
    5fac:	e3c33003 	bic	r3, r3, #3
    5fb0:	e0843003 	add	r3, r4, r3
    5fb4:	e5930004 	ldr	r0, [r3, #4]
    5fb8:	e2841008 	add	r1, r4, #8
    5fbc:	e8910006 	ldm	r1, {r1, r2}
    5fc0:	e3800001 	orr	r0, r0, #1
    5fc4:	e5830004 	str	r0, [r3, #4]
    5fc8:	e581200c 	str	r2, [r1, #12]
    5fcc:	e5821008 	str	r1, [r2, #8]
    5fd0:	e1a00006 	mov	r0, r6
    5fd4:	eb0001a1 	bl	6660 <__malloc_unlock>
    5fd8:	e2844008 	add	r4, r4, #8
    5fdc:	e1a00004 	mov	r0, r4
    5fe0:	e28dd00c 	add	sp, sp, #12
    5fe4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    5fe8:	e12fff1e 	bx	lr
    5fec:	e1b0e4a5 	lsrs	lr, r5, #9
    5ff0:	01a0e1a5 	lsreq	lr, r5, #3
    5ff4:	01a0108e 	lsleq	r1, lr, #1
    5ff8:	1a000061 	bne	6184 <_malloc_r+0x244>
    5ffc:	e59f764c 	ldr	r7, [pc, #1612]	; 6650 <_malloc_r+0x710>
    6000:	e0871101 	add	r1, r7, r1, lsl #2
    6004:	e591400c 	ldr	r4, [r1, #12]
    6008:	e1510004 	cmp	r1, r4
    600c:	1a000005 	bne	6028 <_malloc_r+0xe8>
    6010:	ea00000a 	b	6040 <_malloc_r+0x100>
    6014:	e3530000 	cmp	r3, #0
    6018:	aa0000d7 	bge	637c <_malloc_r+0x43c>
    601c:	e594400c 	ldr	r4, [r4, #12]
    6020:	e1510004 	cmp	r1, r4
    6024:	0a000005 	beq	6040 <_malloc_r+0x100>
    6028:	e5942004 	ldr	r2, [r4, #4]
    602c:	e3c22003 	bic	r2, r2, #3
    6030:	e0653002 	rsb	r3, r5, r2
    6034:	e353000f 	cmp	r3, #15
    6038:	dafffff5 	ble	6014 <_malloc_r+0xd4>
    603c:	e24ee001 	sub	lr, lr, #1
    6040:	e28ee001 	add	lr, lr, #1
    6044:	e59f3604 	ldr	r3, [pc, #1540]	; 6650 <_malloc_r+0x710>
    6048:	e5974010 	ldr	r4, [r7, #16]
    604c:	e2838008 	add	r8, r3, #8
    6050:	e1540008 	cmp	r4, r8
    6054:	05931004 	ldreq	r1, [r3, #4]
    6058:	0a000016 	beq	60b8 <_malloc_r+0x178>
    605c:	e5942004 	ldr	r2, [r4, #4]
    6060:	e3c22003 	bic	r2, r2, #3
    6064:	e0651002 	rsb	r1, r5, r2
    6068:	e351000f 	cmp	r1, #15
    606c:	ca0000f7 	bgt	6450 <_malloc_r+0x510>
    6070:	e3510000 	cmp	r1, #0
    6074:	e5838014 	str	r8, [r3, #20]
    6078:	e5838010 	str	r8, [r3, #16]
    607c:	aa000046 	bge	619c <_malloc_r+0x25c>
    6080:	e3520c02 	cmp	r2, #512	; 0x200
    6084:	2a0000d2 	bcs	63d4 <_malloc_r+0x494>
    6088:	e5930004 	ldr	r0, [r3, #4]
    608c:	e1a021a2 	lsr	r2, r2, #3
    6090:	e1a01142 	asr	r1, r2, #2
    6094:	e3a0c001 	mov	r12, #1
    6098:	e180111c 	orr	r1, r0, r12, lsl r1
    609c:	e0832182 	add	r2, r3, r2, lsl #3
    60a0:	e5920008 	ldr	r0, [r2, #8]
    60a4:	e584200c 	str	r2, [r4, #12]
    60a8:	e5840008 	str	r0, [r4, #8]
    60ac:	e5831004 	str	r1, [r3, #4]
    60b0:	e5824008 	str	r4, [r2, #8]
    60b4:	e580400c 	str	r4, [r0, #12]
    60b8:	e1a0014e 	asr	r0, lr, #2
    60bc:	e3a03001 	mov	r3, #1
    60c0:	e1a00013 	lsl	r0, r3, r0
    60c4:	e1500001 	cmp	r0, r1
    60c8:	8a00003b 	bhi	61bc <_malloc_r+0x27c>
    60cc:	e1110000 	tst	r1, r0
    60d0:	1a000008 	bne	60f8 <_malloc_r+0x1b8>
    60d4:	e1a00310 	lsl	r0, r0, r3
    60d8:	e3cee003 	bic	lr, lr, #3
    60dc:	e1110000 	tst	r1, r0
    60e0:	e28ee004 	add	lr, lr, #4
    60e4:	1a000003 	bne	60f8 <_malloc_r+0x1b8>
    60e8:	e1a00080 	lsl	r0, r0, #1
    60ec:	e1110000 	tst	r1, r0
    60f0:	e28ee004 	add	lr, lr, #4
    60f4:	0afffffb 	beq	60e8 <_malloc_r+0x1a8>
    60f8:	e087a18e 	add	r10, r7, lr, lsl #3
    60fc:	e1a0c00a 	mov	r12, r10
    6100:	e1a0400e 	mov	r4, lr
    6104:	e59c300c 	ldr	r3, [r12, #12]
    6108:	e15c0003 	cmp	r12, r3
    610c:	1a000005 	bne	6128 <_malloc_r+0x1e8>
    6110:	ea0000db 	b	6484 <_malloc_r+0x544>
    6114:	e3520000 	cmp	r2, #0
    6118:	aa0000f4 	bge	64f0 <_malloc_r+0x5b0>
    611c:	e593300c 	ldr	r3, [r3, #12]
    6120:	e15c0003 	cmp	r12, r3
    6124:	0a0000d6 	beq	6484 <_malloc_r+0x544>
    6128:	e5931004 	ldr	r1, [r3, #4]
    612c:	e3c11003 	bic	r1, r1, #3
    6130:	e0652001 	rsb	r2, r5, r1
    6134:	e352000f 	cmp	r2, #15
    6138:	dafffff5 	ble	6114 <_malloc_r+0x1d4>
    613c:	e1a04003 	mov	r4, r3
    6140:	e593000c 	ldr	r0, [r3, #12]
    6144:	e5b4c008 	ldr	r12, [r4, #8]!
    6148:	e0831005 	add	r1, r3, r5
    614c:	e382e001 	orr	lr, r2, #1
    6150:	e3855001 	orr	r5, r5, #1
    6154:	e58c000c 	str	r0, [r12, #12]
    6158:	e580c008 	str	r12, [r0, #8]
    615c:	e5835004 	str	r5, [r3, #4]
    6160:	e5871014 	str	r1, [r7, #20]
    6164:	e5871010 	str	r1, [r7, #16]
    6168:	e581800c 	str	r8, [r1, #12]
    616c:	e5818008 	str	r8, [r1, #8]
    6170:	e581e004 	str	lr, [r1, #4]
    6174:	e7812002 	str	r2, [r1, r2]
    6178:	e1a00006 	mov	r0, r6
    617c:	eb000137 	bl	6660 <__malloc_unlock>
    6180:	eaffff95 	b	5fdc <_malloc_r+0x9c>
    6184:	e35e0004 	cmp	lr, #4
    6188:	8a000087 	bhi	63ac <_malloc_r+0x46c>
    618c:	e1a0e325 	lsr	lr, r5, #6
    6190:	e28ee038 	add	lr, lr, #56	; 0x38
    6194:	e1a0108e 	lsl	r1, lr, #1
    6198:	eaffff97 	b	5ffc <_malloc_r+0xbc>
    619c:	e0842002 	add	r2, r4, r2
    61a0:	e5923004 	ldr	r3, [r2, #4]
    61a4:	e3833001 	orr	r3, r3, #1
    61a8:	e5823004 	str	r3, [r2, #4]
    61ac:	e1a00006 	mov	r0, r6
    61b0:	eb00012a 	bl	6660 <__malloc_unlock>
    61b4:	e2844008 	add	r4, r4, #8
    61b8:	eaffff87 	b	5fdc <_malloc_r+0x9c>
    61bc:	e5974008 	ldr	r4, [r7, #8]
    61c0:	e594a004 	ldr	r10, [r4, #4]
    61c4:	e3caa003 	bic	r10, r10, #3
    61c8:	e155000a 	cmp	r5, r10
    61cc:	8a000002 	bhi	61dc <_malloc_r+0x29c>
    61d0:	e065300a 	rsb	r3, r5, r10
    61d4:	e353000f 	cmp	r3, #15
    61d8:	ca00005d 	bgt	6354 <_malloc_r+0x414>
    61dc:	e59f9470 	ldr	r9, [pc, #1136]	; 6654 <_malloc_r+0x714>
    61e0:	e5973408 	ldr	r3, [r7, #1032]	; 0x408
    61e4:	e599b000 	ldr	r11, [r9]
    61e8:	e3730001 	cmn	r3, #1
    61ec:	e085b00b 	add	r11, r5, r11
    61f0:	128bba01 	addne	r11, r11, #4096	; 0x1000
    61f4:	128bb00f 	addne	r11, r11, #15
    61f8:	13cbbeff 	bicne	r11, r11, #4080	; 0xff0
    61fc:	028bb010 	addeq	r11, r11, #16
    6200:	13cbb00f 	bicne	r11, r11, #15
    6204:	e084200a 	add	r2, r4, r10
    6208:	e1a00006 	mov	r0, r6
    620c:	e1a0100b 	mov	r1, r11
    6210:	e58d2004 	str	r2, [sp, #4]
    6214:	eb000112 	bl	6664 <_sbrk_r>
    6218:	e3700001 	cmn	r0, #1
    621c:	e1a08000 	mov	r8, r0
    6220:	e59d2004 	ldr	r2, [sp, #4]
    6224:	0a0000e2 	beq	65b4 <_malloc_r+0x674>
    6228:	e1520000 	cmp	r2, r0
    622c:	8a0000bf 	bhi	6530 <_malloc_r+0x5f0>
    6230:	e5993004 	ldr	r3, [r9, #4]
    6234:	e1520008 	cmp	r2, r8
    6238:	e08b3003 	add	r3, r11, r3
    623c:	e5893004 	str	r3, [r9, #4]
    6240:	0a0000df 	beq	65c4 <_malloc_r+0x684>
    6244:	e5971408 	ldr	r1, [r7, #1032]	; 0x408
    6248:	e3710001 	cmn	r1, #1
    624c:	10622008 	rsbne	r2, r2, r8
    6250:	059f33f8 	ldreq	r3, [pc, #1016]	; 6650 <_malloc_r+0x710>
    6254:	10833002 	addne	r3, r3, r2
    6258:	05838408 	streq	r8, [r3, #1032]	; 0x408
    625c:	15893004 	strne	r3, [r9, #4]
    6260:	e2183007 	ands	r3, r8, #7
    6264:	12632008 	rsbne	r2, r3, #8
    6268:	10888002 	addne	r8, r8, r2
    626c:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
    6270:	12832008 	addne	r2, r3, #8
    6274:	e088300b 	add	r3, r8, r11
    6278:	03a02a01 	moveq	r2, #4096	; 0x1000
    627c:	e1a03a03 	lsl	r3, r3, #20
    6280:	e042ba23 	sub	r11, r2, r3, lsr #20
    6284:	e1a0100b 	mov	r1, r11
    6288:	e1a00006 	mov	r0, r6
    628c:	eb0000f4 	bl	6664 <_sbrk_r>
    6290:	e3700001 	cmn	r0, #1
    6294:	10682000 	rsbne	r2, r8, r0
    6298:	e5993004 	ldr	r3, [r9, #4]
    629c:	108b2002 	addne	r2, r11, r2
    62a0:	03a0b000 	moveq	r11, #0
    62a4:	13822001 	orrne	r2, r2, #1
    62a8:	03a02001 	moveq	r2, #1
    62ac:	e08b3003 	add	r3, r11, r3
    62b0:	e1540007 	cmp	r4, r7
    62b4:	e5893004 	str	r3, [r9, #4]
    62b8:	e5878008 	str	r8, [r7, #8]
    62bc:	e5882004 	str	r2, [r8, #4]
    62c0:	0a00000d 	beq	62fc <_malloc_r+0x3bc>
    62c4:	e35a000f 	cmp	r10, #15
    62c8:	9a0000ac 	bls	6580 <_malloc_r+0x640>
    62cc:	e594c004 	ldr	r12, [r4, #4]
    62d0:	e24a200c 	sub	r2, r10, #12
    62d4:	e3c22007 	bic	r2, r2, #7
    62d8:	e20cc001 	and	r12, r12, #1
    62dc:	e0841002 	add	r1, r4, r2
    62e0:	e3a00005 	mov	r0, #5
    62e4:	e182c00c 	orr	r12, r2, r12
    62e8:	e352000f 	cmp	r2, #15
    62ec:	e584c004 	str	r12, [r4, #4]
    62f0:	e5810004 	str	r0, [r1, #4]
    62f4:	e5810008 	str	r0, [r1, #8]
    62f8:	8a0000b8 	bhi	65e0 <_malloc_r+0x6a0>
    62fc:	e599202c 	ldr	r2, [r9, #44]	; 0x2c
    6300:	e1530002 	cmp	r3, r2
    6304:	859f2348 	ldrhi	r2, [pc, #840]	; 6654 <_malloc_r+0x714>
    6308:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
    630c:	e5992030 	ldr	r2, [r9, #48]	; 0x30
    6310:	e5974008 	ldr	r4, [r7, #8]
    6314:	e1530002 	cmp	r3, r2
    6318:	95943004 	ldrls	r3, [r4, #4]
    631c:	85942004 	ldrhi	r2, [r4, #4]
    6320:	859f132c 	ldrhi	r1, [pc, #812]	; 6654 <_malloc_r+0x714>
    6324:	93c33003 	bicls	r3, r3, #3
    6328:	85813030 	strhi	r3, [r1, #48]	; 0x30
    632c:	83c23003 	bichi	r3, r2, #3
    6330:	e1550003 	cmp	r5, r3
    6334:	e0653003 	rsb	r3, r5, r3
    6338:	8a000001 	bhi	6344 <_malloc_r+0x404>
    633c:	e353000f 	cmp	r3, #15
    6340:	ca000003 	bgt	6354 <_malloc_r+0x414>
    6344:	e1a00006 	mov	r0, r6
    6348:	eb0000c4 	bl	6660 <__malloc_unlock>
    634c:	e3a04000 	mov	r4, #0
    6350:	eaffff21 	b	5fdc <_malloc_r+0x9c>
    6354:	e0842005 	add	r2, r4, r5
    6358:	e3833001 	orr	r3, r3, #1
    635c:	e3855001 	orr	r5, r5, #1
    6360:	e5845004 	str	r5, [r4, #4]
    6364:	e1a00006 	mov	r0, r6
    6368:	e5823004 	str	r3, [r2, #4]
    636c:	e5872008 	str	r2, [r7, #8]
    6370:	e2844008 	add	r4, r4, #8
    6374:	eb0000b9 	bl	6660 <__malloc_unlock>
    6378:	eaffff17 	b	5fdc <_malloc_r+0x9c>
    637c:	e0842002 	add	r2, r4, r2
    6380:	e5920004 	ldr	r0, [r2, #4]
    6384:	e2841008 	add	r1, r4, #8
    6388:	e891000a 	ldm	r1, {r1, r3}
    638c:	e3800001 	orr	r0, r0, #1
    6390:	e5820004 	str	r0, [r2, #4]
    6394:	e581300c 	str	r3, [r1, #12]
    6398:	e5831008 	str	r1, [r3, #8]
    639c:	e1a00006 	mov	r0, r6
    63a0:	eb0000ae 	bl	6660 <__malloc_unlock>
    63a4:	e2844008 	add	r4, r4, #8
    63a8:	eaffff0b 	b	5fdc <_malloc_r+0x9c>
    63ac:	e35e0014 	cmp	lr, #20
    63b0:	928ee05b 	addls	lr, lr, #91	; 0x5b
    63b4:	91a0108e 	lslls	r1, lr, #1
    63b8:	9affff0f 	bls	5ffc <_malloc_r+0xbc>
    63bc:	e35e0054 	cmp	lr, #84	; 0x54
    63c0:	8a000061 	bhi	654c <_malloc_r+0x60c>
    63c4:	e1a0e625 	lsr	lr, r5, #12
    63c8:	e28ee06e 	add	lr, lr, #110	; 0x6e
    63cc:	e1a0108e 	lsl	r1, lr, #1
    63d0:	eaffff09 	b	5ffc <_malloc_r+0xbc>
    63d4:	e1a034a2 	lsr	r3, r2, #9
    63d8:	e3530004 	cmp	r3, #4
    63dc:	9a00004f 	bls	6520 <_malloc_r+0x5e0>
    63e0:	e3530014 	cmp	r3, #20
    63e4:	9283a05b 	addls	r10, r3, #91	; 0x5b
    63e8:	91a0008a 	lslls	r0, r10, #1
    63ec:	9a000004 	bls	6404 <_malloc_r+0x4c4>
    63f0:	e3530054 	cmp	r3, #84	; 0x54
    63f4:	8a00007f 	bhi	65f8 <_malloc_r+0x6b8>
    63f8:	e1a0a622 	lsr	r10, r2, #12
    63fc:	e28aa06e 	add	r10, r10, #110	; 0x6e
    6400:	e1a0008a 	lsl	r0, r10, #1
    6404:	e0870100 	add	r0, r7, r0, lsl #2
    6408:	e5903008 	ldr	r3, [r0, #8]
    640c:	e1530000 	cmp	r3, r0
    6410:	e59fc238 	ldr	r12, [pc, #568]	; 6650 <_malloc_r+0x710>
    6414:	0a000052 	beq	6564 <_malloc_r+0x624>
    6418:	e5931004 	ldr	r1, [r3, #4]
    641c:	e3c11003 	bic	r1, r1, #3
    6420:	e1520001 	cmp	r2, r1
    6424:	2a000002 	bcs	6434 <_malloc_r+0x4f4>
    6428:	e5933008 	ldr	r3, [r3, #8]
    642c:	e1500003 	cmp	r0, r3
    6430:	1afffff8 	bne	6418 <_malloc_r+0x4d8>
    6434:	e593200c 	ldr	r2, [r3, #12]
    6438:	e5971004 	ldr	r1, [r7, #4]
    643c:	e584200c 	str	r2, [r4, #12]
    6440:	e5843008 	str	r3, [r4, #8]
    6444:	e583400c 	str	r4, [r3, #12]
    6448:	e5824008 	str	r4, [r2, #8]
    644c:	eaffff19 	b	60b8 <_malloc_r+0x178>
    6450:	e0842005 	add	r2, r4, r5
    6454:	e3810001 	orr	r0, r1, #1
    6458:	e3855001 	orr	r5, r5, #1
    645c:	e5845004 	str	r5, [r4, #4]
    6460:	e5832014 	str	r2, [r3, #20]
    6464:	e5832010 	str	r2, [r3, #16]
    6468:	e582800c 	str	r8, [r2, #12]
    646c:	e9820101 	stmib	r2, {r0, r8}
    6470:	e7821001 	str	r1, [r2, r1]
    6474:	e1a00006 	mov	r0, r6
    6478:	eb000078 	bl	6660 <__malloc_unlock>
    647c:	e2844008 	add	r4, r4, #8
    6480:	eafffed5 	b	5fdc <_malloc_r+0x9c>
    6484:	e2844001 	add	r4, r4, #1
    6488:	e3140003 	tst	r4, #3
    648c:	e28cc008 	add	r12, r12, #8
    6490:	1affff1b 	bne	6104 <_malloc_r+0x1c4>
    6494:	e31e0003 	tst	lr, #3
    6498:	e24a3008 	sub	r3, r10, #8
    649c:	0a000062 	beq	662c <_malloc_r+0x6ec>
    64a0:	e59aa000 	ldr	r10, [r10]
    64a4:	e15a0003 	cmp	r10, r3
    64a8:	e24ee001 	sub	lr, lr, #1
    64ac:	0afffff8 	beq	6494 <_malloc_r+0x554>
    64b0:	e5973004 	ldr	r3, [r7, #4]
    64b4:	e1a00080 	lsl	r0, r0, #1
    64b8:	e1500003 	cmp	r0, r3
    64bc:	8affff3e 	bhi	61bc <_malloc_r+0x27c>
    64c0:	e3500000 	cmp	r0, #0
    64c4:	0affff3c 	beq	61bc <_malloc_r+0x27c>
    64c8:	e1130000 	tst	r3, r0
    64cc:	0a00005a 	beq	663c <_malloc_r+0x6fc>
    64d0:	e1a0e004 	mov	lr, r4
    64d4:	eaffff07 	b	60f8 <_malloc_r+0x1b8>
    64d8:	e2843008 	add	r3, r4, #8
    64dc:	e5944014 	ldr	r4, [r4, #20]
    64e0:	e1530004 	cmp	r3, r4
    64e4:	028ee002 	addeq	lr, lr, #2
    64e8:	0afffed5 	beq	6044 <_malloc_r+0x104>
    64ec:	eafffead 	b	5fa8 <_malloc_r+0x68>
    64f0:	e0831001 	add	r1, r3, r1
    64f4:	e5910004 	ldr	r0, [r1, #4]
    64f8:	e1a04003 	mov	r4, r3
    64fc:	e5b42008 	ldr	r2, [r4, #8]!
    6500:	e593300c 	ldr	r3, [r3, #12]
    6504:	e3800001 	orr	r0, r0, #1
    6508:	e5810004 	str	r0, [r1, #4]
    650c:	e582300c 	str	r3, [r2, #12]
    6510:	e5832008 	str	r2, [r3, #8]
    6514:	e1a00006 	mov	r0, r6
    6518:	eb000050 	bl	6660 <__malloc_unlock>
    651c:	eafffeae 	b	5fdc <_malloc_r+0x9c>
    6520:	e1a0a322 	lsr	r10, r2, #6
    6524:	e28aa038 	add	r10, r10, #56	; 0x38
    6528:	e1a0008a 	lsl	r0, r10, #1
    652c:	eaffffb4 	b	6404 <_malloc_r+0x4c4>
    6530:	e1540007 	cmp	r4, r7
    6534:	0affff3d 	beq	6230 <_malloc_r+0x2f0>
    6538:	e59f3110 	ldr	r3, [pc, #272]	; 6650 <_malloc_r+0x710>
    653c:	e5934008 	ldr	r4, [r3, #8]
    6540:	e5943004 	ldr	r3, [r4, #4]
    6544:	e3c33003 	bic	r3, r3, #3
    6548:	eaffff78 	b	6330 <_malloc_r+0x3f0>
    654c:	e35e0f55 	cmp	lr, #340	; 0x154
    6550:	8a00000f 	bhi	6594 <_malloc_r+0x654>
    6554:	e1a0e7a5 	lsr	lr, r5, #15
    6558:	e28ee077 	add	lr, lr, #119	; 0x77
    655c:	e1a0108e 	lsl	r1, lr, #1
    6560:	eafffea5 	b	5ffc <_malloc_r+0xbc>
    6564:	e59c2004 	ldr	r2, [r12, #4]
    6568:	e1a0a14a 	asr	r10, r10, #2
    656c:	e3a01001 	mov	r1, #1
    6570:	e1821a11 	orr	r1, r2, r1, lsl r10
    6574:	e1a02003 	mov	r2, r3
    6578:	e58c1004 	str	r1, [r12, #4]
    657c:	eaffffae 	b	643c <_malloc_r+0x4fc>
    6580:	e3a03001 	mov	r3, #1
    6584:	e5883004 	str	r3, [r8, #4]
    6588:	e1a04008 	mov	r4, r8
    658c:	e3a03000 	mov	r3, #0
    6590:	eaffff66 	b	6330 <_malloc_r+0x3f0>
    6594:	e59f30bc 	ldr	r3, [pc, #188]	; 6658 <_malloc_r+0x718>
    6598:	e15e0003 	cmp	lr, r3
    659c:	91a0e925 	lsrls	lr, r5, #18
    65a0:	928ee07c 	addls	lr, lr, #124	; 0x7c
    65a4:	91a0108e 	lslls	r1, lr, #1
    65a8:	83a010fc 	movhi	r1, #252	; 0xfc
    65ac:	83a0e07e 	movhi	lr, #126	; 0x7e
    65b0:	eafffe91 	b	5ffc <_malloc_r+0xbc>
    65b4:	e5974008 	ldr	r4, [r7, #8]
    65b8:	e5943004 	ldr	r3, [r4, #4]
    65bc:	e3c33003 	bic	r3, r3, #3
    65c0:	eaffff5a 	b	6330 <_malloc_r+0x3f0>
    65c4:	e1b01a02 	lsls	r1, r2, #20
    65c8:	1affff1d 	bne	6244 <_malloc_r+0x304>
    65cc:	e5972008 	ldr	r2, [r7, #8]
    65d0:	e08b100a 	add	r1, r11, r10
    65d4:	e3811001 	orr	r1, r1, #1
    65d8:	e5821004 	str	r1, [r2, #4]
    65dc:	eaffff46 	b	62fc <_malloc_r+0x3bc>
    65e0:	e1a00006 	mov	r0, r6
    65e4:	e2841008 	add	r1, r4, #8
    65e8:	eb0001ae 	bl	6ca8 <_free_r>
    65ec:	e59f3060 	ldr	r3, [pc, #96]	; 6654 <_malloc_r+0x714>
    65f0:	e5933004 	ldr	r3, [r3, #4]
    65f4:	eaffff40 	b	62fc <_malloc_r+0x3bc>
    65f8:	e3530f55 	cmp	r3, #340	; 0x154
    65fc:	91a0a7a2 	lsrls	r10, r2, #15
    6600:	928aa077 	addls	r10, r10, #119	; 0x77
    6604:	91a0008a 	lslls	r0, r10, #1
    6608:	9affff7d 	bls	6404 <_malloc_r+0x4c4>
    660c:	e59f1044 	ldr	r1, [pc, #68]	; 6658 <_malloc_r+0x718>
    6610:	e1530001 	cmp	r3, r1
    6614:	91a0a922 	lsrls	r10, r2, #18
    6618:	928aa07c 	addls	r10, r10, #124	; 0x7c
    661c:	91a0008a 	lslls	r0, r10, #1
    6620:	83a000fc 	movhi	r0, #252	; 0xfc
    6624:	83a0a07e 	movhi	r10, #126	; 0x7e
    6628:	eaffff75 	b	6404 <_malloc_r+0x4c4>
    662c:	e5973004 	ldr	r3, [r7, #4]
    6630:	e1c33000 	bic	r3, r3, r0
    6634:	e5873004 	str	r3, [r7, #4]
    6638:	eaffff9d 	b	64b4 <_malloc_r+0x574>
    663c:	e1a00080 	lsl	r0, r0, #1
    6640:	e1130000 	tst	r3, r0
    6644:	e2844004 	add	r4, r4, #4
    6648:	1affffa0 	bne	64d0 <_malloc_r+0x590>
    664c:	eafffffa 	b	663c <_malloc_r+0x6fc>
    6650:	000e50d0 	.word	0x000e50d0
    6654:	00107588 	.word	0x00107588
    6658:	00000554 	.word	0x00000554

0000665c <__malloc_lock>:
    665c:	e12fff1e 	bx	lr

00006660 <__malloc_unlock>:
    6660:	e12fff1e 	bx	lr

00006664 <_sbrk_r>:
    6664:	e92d4038 	push	{r3, r4, r5, lr}
    6668:	e59f4030 	ldr	r4, [pc, #48]	; 66a0 <_sbrk_r+0x3c>
    666c:	e3a03000 	mov	r3, #0
    6670:	e1a05000 	mov	r5, r0
    6674:	e1a00001 	mov	r0, r1
    6678:	e5843000 	str	r3, [r4]
    667c:	eb0002a4 	bl	7114 <_sbrk>
    6680:	e3700001 	cmn	r0, #1
    6684:	0a000001 	beq	6690 <_sbrk_r+0x2c>
    6688:	e8bd4038 	pop	{r3, r4, r5, lr}
    668c:	e12fff1e 	bx	lr
    6690:	e5943000 	ldr	r3, [r4]
    6694:	e3530000 	cmp	r3, #0
    6698:	15853000 	strne	r3, [r5]
    669c:	eafffff9 	b	6688 <_sbrk_r+0x24>
    66a0:	001075bc 	.word	0x001075bc

000066a4 <strcmp>:
    66a4:	e0202001 	eor	r2, r0, r1
    66a8:	e3120003 	tst	r2, #3
    66ac:	1a000021 	bne	6738 <strcmp_unaligned>
    66b0:	e2102003 	ands	r2, r0, #3
    66b4:	e3c00003 	bic	r0, r0, #3
    66b8:	e3c11003 	bic	r1, r1, #3
    66bc:	e490c004 	ldr	r12, [r0], #4
    66c0:	04913004 	ldreq	r3, [r1], #4
    66c4:	0a000006 	beq	66e4 <strcmp+0x40>
    66c8:	e2222003 	eor	r2, r2, #3
    66cc:	e1a02182 	lsl	r2, r2, #3
    66d0:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
    66d4:	e1a02233 	lsr	r2, r3, r2
    66d8:	e4913004 	ldr	r3, [r1], #4
    66dc:	e18cc002 	orr	r12, r12, r2
    66e0:	e1833002 	orr	r3, r3, r2
    66e4:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    66e8:	e3a04001 	mov	r4, #1
    66ec:	e1844404 	orr	r4, r4, r4, lsl #8
    66f0:	e1844804 	orr	r4, r4, r4, lsl #16
    66f4:	e04c2004 	sub	r2, r12, r4
    66f8:	e15c0003 	cmp	r12, r3
    66fc:	01c2200c 	biceq	r2, r2, r12
    6700:	01120384 	tsteq	r2, r4, lsl #7
    6704:	0490c004 	ldreq	r12, [r0], #4
    6708:	04913004 	ldreq	r3, [r1], #4
    670c:	0afffff8 	beq	66f4 <strcmp+0x50>
    6710:	e1a00c0c 	lsl	r0, r12, #24
    6714:	e1a0c42c 	lsr	r12, r12, #8
    6718:	e3500001 	cmp	r0, #1
    671c:	21500c03 	cmpcs	r0, r3, lsl #24
    6720:	01a03423 	lsreq	r3, r3, #8
    6724:	0afffff9 	beq	6710 <strcmp+0x6c>
    6728:	e20330ff 	and	r3, r3, #255	; 0xff
    672c:	e0630c20 	rsb	r0, r3, r0, lsr #24
    6730:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    6734:	e12fff1e 	bx	lr

00006738 <strcmp_unaligned>:
    6738:	e3100003 	tst	r0, #3
    673c:	0a000006 	beq	675c <strcmp_unaligned+0x24>
    6740:	e4d02001 	ldrb	r2, [r0], #1
    6744:	e4d13001 	ldrb	r3, [r1], #1
    6748:	e3520001 	cmp	r2, #1
    674c:	21520003 	cmpcs	r2, r3
    6750:	0afffff8 	beq	6738 <strcmp_unaligned>
    6754:	e0420003 	sub	r0, r2, r3
    6758:	e12fff1e 	bx	lr
    675c:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)
    6760:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    6764:	e3a02001 	mov	r2, #1
    6768:	e1822402 	orr	r2, r2, r2, lsl #8
    676c:	e1822802 	orr	r2, r2, r2, lsl #16
    6770:	e201c003 	and	r12, r1, #3
    6774:	e3c11003 	bic	r1, r1, #3
    6778:	e4904004 	ldr	r4, [r0], #4
    677c:	e4915004 	ldr	r5, [r1], #4
    6780:	e35c0002 	cmp	r12, #2
    6784:	0a000017 	beq	67e8 <strcmp_unaligned+0xb0>
    6788:	8a00002d 	bhi	6844 <strcmp_unaligned+0x10c>
    678c:	e3c4c4ff 	bic	r12, r4, #-16777216	; 0xff000000
    6790:	e15c0425 	cmp	r12, r5, lsr #8
    6794:	e0443002 	sub	r3, r4, r2
    6798:	e1c33004 	bic	r3, r3, r4
    679c:	1a000007 	bne	67c0 <strcmp_unaligned+0x88>
    67a0:	e0133382 	ands	r3, r3, r2, lsl #7
    67a4:	04915004 	ldreq	r5, [r1], #4
    67a8:	1a000006 	bne	67c8 <strcmp_unaligned+0x90>
    67ac:	e02cc004 	eor	r12, r12, r4
    67b0:	e15c0c05 	cmp	r12, r5, lsl #24
    67b4:	1a000008 	bne	67dc <strcmp_unaligned+0xa4>
    67b8:	e4904004 	ldr	r4, [r0], #4
    67bc:	eafffff2 	b	678c <strcmp_unaligned+0x54>
    67c0:	e1a05425 	lsr	r5, r5, #8
    67c4:	ea000037 	b	68a8 <strcmp_unaligned+0x170>
    67c8:	e3d334ff 	bics	r3, r3, #-16777216	; 0xff000000
    67cc:	1a000031 	bne	6898 <strcmp_unaligned+0x160>
    67d0:	e5d15000 	ldrb	r5, [r1]
    67d4:	e1a0cc24 	lsr	r12, r4, #24
    67d8:	ea000032 	b	68a8 <strcmp_unaligned+0x170>
    67dc:	e1a0cc24 	lsr	r12, r4, #24
    67e0:	e20550ff 	and	r5, r5, #255	; 0xff
    67e4:	ea00002f 	b	68a8 <strcmp_unaligned+0x170>
    67e8:	e1a0c804 	lsl	r12, r4, #16
    67ec:	e0443002 	sub	r3, r4, r2
    67f0:	e1a0c82c 	lsr	r12, r12, #16
    67f4:	e1c33004 	bic	r3, r3, r4
    67f8:	e15c0825 	cmp	r12, r5, lsr #16
    67fc:	1a00000e 	bne	683c <strcmp_unaligned+0x104>
    6800:	e0133382 	ands	r3, r3, r2, lsl #7
    6804:	04915004 	ldreq	r5, [r1], #4
    6808:	1a000004 	bne	6820 <strcmp_unaligned+0xe8>
    680c:	e02cc004 	eor	r12, r12, r4
    6810:	e15c0805 	cmp	r12, r5, lsl #16
    6814:	1a000006 	bne	6834 <strcmp_unaligned+0xfc>
    6818:	e4904004 	ldr	r4, [r0], #4
    681c:	eafffff1 	b	67e8 <strcmp_unaligned+0xb0>
    6820:	e1b03803 	lsls	r3, r3, #16
    6824:	1a00001b 	bne	6898 <strcmp_unaligned+0x160>
    6828:	e1d150b0 	ldrh	r5, [r1]
    682c:	e1a0c824 	lsr	r12, r4, #16
    6830:	ea00001c 	b	68a8 <strcmp_unaligned+0x170>
    6834:	e1a05805 	lsl	r5, r5, #16
    6838:	e1a0c824 	lsr	r12, r4, #16
    683c:	e1a05825 	lsr	r5, r5, #16
    6840:	ea000018 	b	68a8 <strcmp_unaligned+0x170>
    6844:	e204c0ff 	and	r12, r4, #255	; 0xff
    6848:	e15c0c25 	cmp	r12, r5, lsr #24
    684c:	e0443002 	sub	r3, r4, r2
    6850:	e1c33004 	bic	r3, r3, r4
    6854:	1a000007 	bne	6878 <strcmp_unaligned+0x140>
    6858:	e0133382 	ands	r3, r3, r2, lsl #7
    685c:	04915004 	ldreq	r5, [r1], #4
    6860:	1a000006 	bne	6880 <strcmp_unaligned+0x148>
    6864:	e02cc004 	eor	r12, r12, r4
    6868:	e15c0405 	cmp	r12, r5, lsl #8
    686c:	1a000006 	bne	688c <strcmp_unaligned+0x154>
    6870:	e4904004 	ldr	r4, [r0], #4
    6874:	eafffff2 	b	6844 <strcmp_unaligned+0x10c>
    6878:	e1a05c25 	lsr	r5, r5, #24
    687c:	ea000009 	b	68a8 <strcmp_unaligned+0x170>
    6880:	e31400ff 	tst	r4, #255	; 0xff
    6884:	0a000003 	beq	6898 <strcmp_unaligned+0x160>
    6888:	e4915004 	ldr	r5, [r1], #4
    688c:	e1a0c424 	lsr	r12, r4, #8
    6890:	e3c554ff 	bic	r5, r5, #-16777216	; 0xff000000
    6894:	ea000003 	b	68a8 <strcmp_unaligned+0x170>
    6898:	e3a00000 	mov	r0, #0
    689c:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    68a0:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    68a4:	e12fff1e 	bx	lr
    68a8:	e20c20ff 	and	r2, r12, #255	; 0xff
    68ac:	e20500ff 	and	r0, r5, #255	; 0xff
    68b0:	e3500001 	cmp	r0, #1
    68b4:	21500002 	cmpcs	r0, r2
    68b8:	01a0c42c 	lsreq	r12, r12, #8
    68bc:	01a05425 	lsreq	r5, r5, #8
    68c0:	0afffff8 	beq	68a8 <strcmp_unaligned+0x170>
    68c4:	e0420000 	sub	r0, r2, r0
    68c8:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    68cc:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    68d0:	e12fff1e 	bx	lr

000068d4 <__register_exitproc>:
    68d4:	e59fc0e4 	ldr	r12, [pc, #228]	; 69c0 <__register_exitproc+0xec>
    68d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    68dc:	e59c4000 	ldr	r4, [r12]
    68e0:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    68e4:	e35c0000 	cmp	r12, #0
    68e8:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    68ec:	e59c5004 	ldr	r5, [r12, #4]
    68f0:	0584c148 	streq	r12, [r4, #328]	; 0x148
    68f4:	e355001f 	cmp	r5, #31
    68f8:	e24dd010 	sub	sp, sp, #16
    68fc:	e1a06000 	mov	r6, r0
    6900:	da000015 	ble	695c <__register_exitproc+0x88>
    6904:	e59f00b8 	ldr	r0, [pc, #184]	; 69c4 <__register_exitproc+0xf0>
    6908:	e3500000 	cmp	r0, #0
    690c:	1a000001 	bne	6918 <__register_exitproc+0x44>
    6910:	e3e00000 	mvn	r0, #0
    6914:	ea000018 	b	697c <__register_exitproc+0xa8>
    6918:	e3a00e19 	mov	r0, #400	; 0x190
    691c:	e58d100c 	str	r1, [sp, #12]
    6920:	e58d2008 	str	r2, [sp, #8]
    6924:	e58d3004 	str	r3, [sp, #4]
    6928:	ebfffd74 	bl	5f00 <malloc>
    692c:	e250c000 	subs	r12, r0, #0
    6930:	e59d100c 	ldr	r1, [sp, #12]
    6934:	e59d2008 	ldr	r2, [sp, #8]
    6938:	e59d3004 	ldr	r3, [sp, #4]
    693c:	0afffff3 	beq	6910 <__register_exitproc+0x3c>
    6940:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    6944:	e3a00000 	mov	r0, #0
    6948:	e58c0004 	str	r0, [r12, #4]
    694c:	e58c5000 	str	r5, [r12]
    6950:	e584c148 	str	r12, [r4, #328]	; 0x148
    6954:	e58c0188 	str	r0, [r12, #392]	; 0x188
    6958:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    695c:	e3560000 	cmp	r6, #0
    6960:	e59c4004 	ldr	r4, [r12, #4]
    6964:	1a000007 	bne	6988 <__register_exitproc+0xb4>
    6968:	e2843002 	add	r3, r4, #2
    696c:	e2844001 	add	r4, r4, #1
    6970:	e78c1103 	str	r1, [r12, r3, lsl #2]
    6974:	e58c4004 	str	r4, [r12, #4]
    6978:	e3a00000 	mov	r0, #0
    697c:	e28dd010 	add	sp, sp, #16
    6980:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    6984:	e12fff1e 	bx	lr
    6988:	e3a00001 	mov	r0, #1
    698c:	e1a00410 	lsl	r0, r0, r4
    6990:	e08c8104 	add	r8, r12, r4, lsl #2
    6994:	e3560002 	cmp	r6, #2
    6998:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    699c:	e5883108 	str	r3, [r8, #264]	; 0x108
    69a0:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    69a4:	e1877000 	orr	r7, r7, r0
    69a8:	01830000 	orreq	r0, r3, r0
    69ac:	e1a05008 	mov	r5, r8
    69b0:	e5882088 	str	r2, [r8, #136]	; 0x88
    69b4:	e58c7188 	str	r7, [r12, #392]	; 0x188
    69b8:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    69bc:	eaffffe9 	b	6968 <__register_exitproc+0x94>
    69c0:	00007528 	.word	0x00007528
    69c4:	00005f00 	.word	0x00005f00

000069c8 <__call_exitprocs>:
    69c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    69cc:	e59f3168 	ldr	r3, [pc, #360]	; 6b3c <__call_exitprocs+0x174>
    69d0:	e5933000 	ldr	r3, [r3]
    69d4:	e24dd014 	sub	sp, sp, #20
    69d8:	e58d3004 	str	r3, [sp, #4]
    69dc:	e2833f52 	add	r3, r3, #328	; 0x148
    69e0:	e58d0008 	str	r0, [sp, #8]
    69e4:	e58d300c 	str	r3, [sp, #12]
    69e8:	e1a07001 	mov	r7, r1
    69ec:	e3a08001 	mov	r8, #1
    69f0:	e59d3004 	ldr	r3, [sp, #4]
    69f4:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    69f8:	e3560000 	cmp	r6, #0
    69fc:	e59db00c 	ldr	r11, [sp, #12]
    6a00:	0a000033 	beq	6ad4 <__call_exitprocs+0x10c>
    6a04:	e5965004 	ldr	r5, [r6, #4]
    6a08:	e2554001 	subs	r4, r5, #1
    6a0c:	5286a088 	addpl	r10, r6, #136	; 0x88
    6a10:	5285501f 	addpl	r5, r5, #31
    6a14:	508a5105 	addpl	r5, r10, r5, lsl #2
    6a18:	5a000007 	bpl	6a3c <__call_exitprocs+0x74>
    6a1c:	ea000029 	b	6ac8 <__call_exitprocs+0x100>
    6a20:	e5953000 	ldr	r3, [r5]
    6a24:	e1530007 	cmp	r3, r7
    6a28:	0a000005 	beq	6a44 <__call_exitprocs+0x7c>
    6a2c:	e2444001 	sub	r4, r4, #1
    6a30:	e3740001 	cmn	r4, #1
    6a34:	e2455004 	sub	r5, r5, #4
    6a38:	0a000022 	beq	6ac8 <__call_exitprocs+0x100>
    6a3c:	e3570000 	cmp	r7, #0
    6a40:	1afffff6 	bne	6a20 <__call_exitprocs+0x58>
    6a44:	e5963004 	ldr	r3, [r6, #4]
    6a48:	e06a2005 	rsb	r2, r10, r5
    6a4c:	e2433001 	sub	r3, r3, #1
    6a50:	e0862002 	add	r2, r6, r2
    6a54:	e1530004 	cmp	r3, r4
    6a58:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    6a5c:	13a01000 	movne	r1, #0
    6a60:	05864004 	streq	r4, [r6, #4]
    6a64:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    6a68:	e3530000 	cmp	r3, #0
    6a6c:	0affffee 	beq	6a2c <__call_exitprocs+0x64>
    6a70:	e1a02418 	lsl	r2, r8, r4
    6a74:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    6a78:	e1120001 	tst	r2, r1
    6a7c:	e5969004 	ldr	r9, [r6, #4]
    6a80:	0a000016 	beq	6ae0 <__call_exitprocs+0x118>
    6a84:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    6a88:	e1120001 	tst	r2, r1
    6a8c:	1a000016 	bne	6aec <__call_exitprocs+0x124>
    6a90:	e59d0008 	ldr	r0, [sp, #8]
    6a94:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    6a98:	e1a0e00f 	mov	lr, pc
    6a9c:	e12fff13 	bx	r3
    6aa0:	e5963004 	ldr	r3, [r6, #4]
    6aa4:	e1530009 	cmp	r3, r9
    6aa8:	1affffd0 	bne	69f0 <__call_exitprocs+0x28>
    6aac:	e59b3000 	ldr	r3, [r11]
    6ab0:	e1530006 	cmp	r3, r6
    6ab4:	1affffcd 	bne	69f0 <__call_exitprocs+0x28>
    6ab8:	e2444001 	sub	r4, r4, #1
    6abc:	e3740001 	cmn	r4, #1
    6ac0:	e2455004 	sub	r5, r5, #4
    6ac4:	1affffdc 	bne	6a3c <__call_exitprocs+0x74>
    6ac8:	e59f1070 	ldr	r1, [pc, #112]	; 6b40 <__call_exitprocs+0x178>
    6acc:	e3510000 	cmp	r1, #0
    6ad0:	1a000009 	bne	6afc <__call_exitprocs+0x134>
    6ad4:	e28dd014 	add	sp, sp, #20
    6ad8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    6adc:	e12fff1e 	bx	lr
    6ae0:	e1a0e00f 	mov	lr, pc
    6ae4:	e12fff13 	bx	r3
    6ae8:	eaffffec 	b	6aa0 <__call_exitprocs+0xd8>
    6aec:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    6af0:	e1a0e00f 	mov	lr, pc
    6af4:	e12fff13 	bx	r3
    6af8:	eaffffe8 	b	6aa0 <__call_exitprocs+0xd8>
    6afc:	e5963004 	ldr	r3, [r6, #4]
    6b00:	e3530000 	cmp	r3, #0
    6b04:	e5963000 	ldr	r3, [r6]
    6b08:	1a000008 	bne	6b30 <__call_exitprocs+0x168>
    6b0c:	e3530000 	cmp	r3, #0
    6b10:	0a000006 	beq	6b30 <__call_exitprocs+0x168>
    6b14:	e1a00006 	mov	r0, r6
    6b18:	e58b3000 	str	r3, [r11]
    6b1c:	ebfffcff 	bl	5f20 <free>
    6b20:	e59b6000 	ldr	r6, [r11]
    6b24:	e3560000 	cmp	r6, #0
    6b28:	1affffb5 	bne	6a04 <__call_exitprocs+0x3c>
    6b2c:	eaffffe8 	b	6ad4 <__call_exitprocs+0x10c>
    6b30:	e1a0b006 	mov	r11, r6
    6b34:	e1a06003 	mov	r6, r3
    6b38:	eafffff9 	b	6b24 <__call_exitprocs+0x15c>
    6b3c:	00007528 	.word	0x00007528
    6b40:	00005f20 	.word	0x00005f20

00006b44 <register_fini>:
    6b44:	e92d4008 	push	{r3, lr}
    6b48:	e59f3010 	ldr	r3, [pc, #16]	; 6b60 <register_fini+0x1c>
    6b4c:	e3530000 	cmp	r3, #0
    6b50:	159f000c 	ldrne	r0, [pc, #12]	; 6b64 <register_fini+0x20>
    6b54:	1bfffcd0 	blne	5e9c <atexit>
    6b58:	e8bd4008 	pop	{r3, lr}
    6b5c:	e12fff1e 	bx	lr
    6b60:	0000754c 	.word	0x0000754c
    6b64:	00006b68 	.word	0x00006b68

00006b68 <__libc_fini_array>:
    6b68:	e92d4038 	push	{r3, r4, r5, lr}
    6b6c:	e59f5030 	ldr	r5, [pc, #48]	; 6ba4 <__libc_fini_array+0x3c>
    6b70:	e59f4030 	ldr	r4, [pc, #48]	; 6ba8 <__libc_fini_array+0x40>
    6b74:	e0654004 	rsb	r4, r5, r4
    6b78:	e1b04144 	asrs	r4, r4, #2
    6b7c:	10855104 	addne	r5, r5, r4, lsl #2
    6b80:	0a000004 	beq	6b98 <__libc_fini_array+0x30>
    6b84:	e5353004 	ldr	r3, [r5, #-4]!
    6b88:	e1a0e00f 	mov	lr, pc
    6b8c:	e12fff13 	bx	r3
    6b90:	e2544001 	subs	r4, r4, #1
    6b94:	1afffffa 	bne	6b84 <__libc_fini_array+0x1c>
    6b98:	eb00026b 	bl	754c <__libc_fini>
    6b9c:	e8bd4038 	pop	{r3, r4, r5, lr}
    6ba0:	e12fff1e 	bx	lr
    6ba4:	00007564 	.word	0x00007564
    6ba8:	00007568 	.word	0x00007568

00006bac <_malloc_trim_r>:
    6bac:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    6bb0:	e59f50e4 	ldr	r5, [pc, #228]	; 6c9c <_malloc_trim_r+0xf0>
    6bb4:	e1a07001 	mov	r7, r1
    6bb8:	e1a04000 	mov	r4, r0
    6bbc:	ebfffea6 	bl	665c <__malloc_lock>
    6bc0:	e5953008 	ldr	r3, [r5, #8]
    6bc4:	e5936004 	ldr	r6, [r3, #4]
    6bc8:	e3c66003 	bic	r6, r6, #3
    6bcc:	e2863efe 	add	r3, r6, #4064	; 0xfe0
    6bd0:	e283300f 	add	r3, r3, #15
    6bd4:	e0677003 	rsb	r7, r7, r3
    6bd8:	e1a07627 	lsr	r7, r7, #12
    6bdc:	e2477001 	sub	r7, r7, #1
    6be0:	e1a07607 	lsl	r7, r7, #12
    6be4:	e3570a01 	cmp	r7, #4096	; 0x1000
    6be8:	ba000006 	blt	6c08 <_malloc_trim_r+0x5c>
    6bec:	e1a00004 	mov	r0, r4
    6bf0:	e3a01000 	mov	r1, #0
    6bf4:	ebfffe9a 	bl	6664 <_sbrk_r>
    6bf8:	e5953008 	ldr	r3, [r5, #8]
    6bfc:	e0833006 	add	r3, r3, r6
    6c00:	e1500003 	cmp	r0, r3
    6c04:	0a000004 	beq	6c1c <_malloc_trim_r+0x70>
    6c08:	e1a00004 	mov	r0, r4
    6c0c:	ebfffe93 	bl	6660 <__malloc_unlock>
    6c10:	e3a00000 	mov	r0, #0
    6c14:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    6c18:	e12fff1e 	bx	lr
    6c1c:	e1a00004 	mov	r0, r4
    6c20:	e2671000 	rsb	r1, r7, #0
    6c24:	ebfffe8e 	bl	6664 <_sbrk_r>
    6c28:	e3700001 	cmn	r0, #1
    6c2c:	0a00000b 	beq	6c60 <_malloc_trim_r+0xb4>
    6c30:	e59f3068 	ldr	r3, [pc, #104]	; 6ca0 <_malloc_trim_r+0xf4>
    6c34:	e5952008 	ldr	r2, [r5, #8]
    6c38:	e5931000 	ldr	r1, [r3]
    6c3c:	e0676006 	rsb	r6, r7, r6
    6c40:	e3866001 	orr	r6, r6, #1
    6c44:	e0677001 	rsb	r7, r7, r1
    6c48:	e1a00004 	mov	r0, r4
    6c4c:	e5826004 	str	r6, [r2, #4]
    6c50:	e5837000 	str	r7, [r3]
    6c54:	ebfffe81 	bl	6660 <__malloc_unlock>
    6c58:	e3a00001 	mov	r0, #1
    6c5c:	eaffffec 	b	6c14 <_malloc_trim_r+0x68>
    6c60:	e1a00004 	mov	r0, r4
    6c64:	e3a01000 	mov	r1, #0
    6c68:	ebfffe7d 	bl	6664 <_sbrk_r>
    6c6c:	e5953008 	ldr	r3, [r5, #8]
    6c70:	e0632000 	rsb	r2, r3, r0
    6c74:	e352000f 	cmp	r2, #15
    6c78:	daffffe2 	ble	6c08 <_malloc_trim_r+0x5c>
    6c7c:	e59f1020 	ldr	r1, [pc, #32]	; 6ca4 <_malloc_trim_r+0xf8>
    6c80:	e5911000 	ldr	r1, [r1]
    6c84:	e0610000 	rsb	r0, r1, r0
    6c88:	e59f1010 	ldr	r1, [pc, #16]	; 6ca0 <_malloc_trim_r+0xf4>
    6c8c:	e3822001 	orr	r2, r2, #1
    6c90:	e5810000 	str	r0, [r1]
    6c94:	e5832004 	str	r2, [r3, #4]
    6c98:	eaffffda 	b	6c08 <_malloc_trim_r+0x5c>
    6c9c:	000e50d0 	.word	0x000e50d0
    6ca0:	0010758c 	.word	0x0010758c
    6ca4:	000e54d8 	.word	0x000e54d8

00006ca8 <_free_r>:
    6ca8:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    6cac:	e2514000 	subs	r4, r1, #0
    6cb0:	e1a06000 	mov	r6, r0
    6cb4:	0a000046 	beq	6dd4 <_free_r+0x12c>
    6cb8:	ebfffe67 	bl	665c <__malloc_lock>
    6cbc:	e514e004 	ldr	lr, [r4, #-4]
    6cc0:	e59f1238 	ldr	r1, [pc, #568]	; 6f00 <_free_r+0x258>
    6cc4:	e244c008 	sub	r12, r4, #8
    6cc8:	e3ce3001 	bic	r3, lr, #1
    6ccc:	e08c2003 	add	r2, r12, r3
    6cd0:	e5910008 	ldr	r0, [r1, #8]
    6cd4:	e5925004 	ldr	r5, [r2, #4]
    6cd8:	e1500002 	cmp	r0, r2
    6cdc:	e3c55003 	bic	r5, r5, #3
    6ce0:	0a00004a 	beq	6e10 <_free_r+0x168>
    6ce4:	e21ee001 	ands	lr, lr, #1
    6ce8:	e5825004 	str	r5, [r2, #4]
    6cec:	13a0e000 	movne	lr, #0
    6cf0:	1a000009 	bne	6d1c <_free_r+0x74>
    6cf4:	e5144008 	ldr	r4, [r4, #-8]
    6cf8:	e064c00c 	rsb	r12, r4, r12
    6cfc:	e59c0008 	ldr	r0, [r12, #8]
    6d00:	e2817008 	add	r7, r1, #8
    6d04:	e1500007 	cmp	r0, r7
    6d08:	e0833004 	add	r3, r3, r4
    6d0c:	159c400c 	ldrne	r4, [r12, #12]
    6d10:	1580400c 	strne	r4, [r0, #12]
    6d14:	15840008 	strne	r0, [r4, #8]
    6d18:	03a0e001 	moveq	lr, #1
    6d1c:	e0820005 	add	r0, r2, r5
    6d20:	e5900004 	ldr	r0, [r0, #4]
    6d24:	e3100001 	tst	r0, #1
    6d28:	1a000009 	bne	6d54 <_free_r+0xac>
    6d2c:	e35e0000 	cmp	lr, #0
    6d30:	e5920008 	ldr	r0, [r2, #8]
    6d34:	e0833005 	add	r3, r3, r5
    6d38:	1a000002 	bne	6d48 <_free_r+0xa0>
    6d3c:	e59f41c0 	ldr	r4, [pc, #448]	; 6f04 <_free_r+0x25c>
    6d40:	e1500004 	cmp	r0, r4
    6d44:	0a000047 	beq	6e68 <_free_r+0x1c0>
    6d48:	e592200c 	ldr	r2, [r2, #12]
    6d4c:	e580200c 	str	r2, [r0, #12]
    6d50:	e5820008 	str	r0, [r2, #8]
    6d54:	e3832001 	orr	r2, r3, #1
    6d58:	e35e0000 	cmp	lr, #0
    6d5c:	e58c2004 	str	r2, [r12, #4]
    6d60:	e78c3003 	str	r3, [r12, r3]
    6d64:	1a000018 	bne	6dcc <_free_r+0x124>
    6d68:	e3530c02 	cmp	r3, #512	; 0x200
    6d6c:	3a00001a 	bcc	6ddc <_free_r+0x134>
    6d70:	e1a024a3 	lsr	r2, r3, #9
    6d74:	e3520004 	cmp	r2, #4
    6d78:	8a000042 	bhi	6e88 <_free_r+0x1e0>
    6d7c:	e1a0e323 	lsr	lr, r3, #6
    6d80:	e28ee038 	add	lr, lr, #56	; 0x38
    6d84:	e1a0008e 	lsl	r0, lr, #1
    6d88:	e0810100 	add	r0, r1, r0, lsl #2
    6d8c:	e5902008 	ldr	r2, [r0, #8]
    6d90:	e1520000 	cmp	r2, r0
    6d94:	e59f1164 	ldr	r1, [pc, #356]	; 6f00 <_free_r+0x258>
    6d98:	0a000044 	beq	6eb0 <_free_r+0x208>
    6d9c:	e5921004 	ldr	r1, [r2, #4]
    6da0:	e3c11003 	bic	r1, r1, #3
    6da4:	e1530001 	cmp	r3, r1
    6da8:	2a000002 	bcs	6db8 <_free_r+0x110>
    6dac:	e5922008 	ldr	r2, [r2, #8]
    6db0:	e1500002 	cmp	r0, r2
    6db4:	1afffff8 	bne	6d9c <_free_r+0xf4>
    6db8:	e592300c 	ldr	r3, [r2, #12]
    6dbc:	e58c300c 	str	r3, [r12, #12]
    6dc0:	e58c2008 	str	r2, [r12, #8]
    6dc4:	e582c00c 	str	r12, [r2, #12]
    6dc8:	e583c008 	str	r12, [r3, #8]
    6dcc:	e1a00006 	mov	r0, r6
    6dd0:	ebfffe22 	bl	6660 <__malloc_unlock>
    6dd4:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    6dd8:	e12fff1e 	bx	lr
    6ddc:	e5912004 	ldr	r2, [r1, #4]
    6de0:	e1a031a3 	lsr	r3, r3, #3
    6de4:	e1a00143 	asr	r0, r3, #2
    6de8:	e3a0e001 	mov	lr, #1
    6dec:	e182001e 	orr	r0, r2, lr, lsl r0
    6df0:	e0813183 	add	r3, r1, r3, lsl #3
    6df4:	e5932008 	ldr	r2, [r3, #8]
    6df8:	e58c300c 	str	r3, [r12, #12]
    6dfc:	e58c2008 	str	r2, [r12, #8]
    6e00:	e5810004 	str	r0, [r1, #4]
    6e04:	e583c008 	str	r12, [r3, #8]
    6e08:	e582c00c 	str	r12, [r2, #12]
    6e0c:	eaffffee 	b	6dcc <_free_r+0x124>
    6e10:	e31e0001 	tst	lr, #1
    6e14:	e0853003 	add	r3, r5, r3
    6e18:	1a000006 	bne	6e38 <_free_r+0x190>
    6e1c:	e5142008 	ldr	r2, [r4, #-8]
    6e20:	e062c00c 	rsb	r12, r2, r12
    6e24:	e59c000c 	ldr	r0, [r12, #12]
    6e28:	e59ce008 	ldr	lr, [r12, #8]
    6e2c:	e58e000c 	str	r0, [lr, #12]
    6e30:	e580e008 	str	lr, [r0, #8]
    6e34:	e0833002 	add	r3, r3, r2
    6e38:	e59f20c8 	ldr	r2, [pc, #200]	; 6f08 <_free_r+0x260>
    6e3c:	e5920000 	ldr	r0, [r2]
    6e40:	e3832001 	orr	r2, r3, #1
    6e44:	e1530000 	cmp	r3, r0
    6e48:	e58c2004 	str	r2, [r12, #4]
    6e4c:	e581c008 	str	r12, [r1, #8]
    6e50:	3affffdd 	bcc	6dcc <_free_r+0x124>
    6e54:	e59f30b0 	ldr	r3, [pc, #176]	; 6f0c <_free_r+0x264>
    6e58:	e1a00006 	mov	r0, r6
    6e5c:	e5931000 	ldr	r1, [r3]
    6e60:	ebffff51 	bl	6bac <_malloc_trim_r>
    6e64:	eaffffd8 	b	6dcc <_free_r+0x124>
    6e68:	e3832001 	orr	r2, r3, #1
    6e6c:	e581c014 	str	r12, [r1, #20]
    6e70:	e581c010 	str	r12, [r1, #16]
    6e74:	e58c000c 	str	r0, [r12, #12]
    6e78:	e58c0008 	str	r0, [r12, #8]
    6e7c:	e58c2004 	str	r2, [r12, #4]
    6e80:	e78c3003 	str	r3, [r12, r3]
    6e84:	eaffffd0 	b	6dcc <_free_r+0x124>
    6e88:	e3520014 	cmp	r2, #20
    6e8c:	9282e05b 	addls	lr, r2, #91	; 0x5b
    6e90:	91a0008e 	lslls	r0, lr, #1
    6e94:	9affffbb 	bls	6d88 <_free_r+0xe0>
    6e98:	e3520054 	cmp	r2, #84	; 0x54
    6e9c:	8a00000a 	bhi	6ecc <_free_r+0x224>
    6ea0:	e1a0e623 	lsr	lr, r3, #12
    6ea4:	e28ee06e 	add	lr, lr, #110	; 0x6e
    6ea8:	e1a0008e 	lsl	r0, lr, #1
    6eac:	eaffffb5 	b	6d88 <_free_r+0xe0>
    6eb0:	e5913004 	ldr	r3, [r1, #4]
    6eb4:	e1a0e14e 	asr	lr, lr, #2
    6eb8:	e3a00001 	mov	r0, #1
    6ebc:	e1830e10 	orr	r0, r3, r0, lsl lr
    6ec0:	e1a03002 	mov	r3, r2
    6ec4:	e5810004 	str	r0, [r1, #4]
    6ec8:	eaffffbb 	b	6dbc <_free_r+0x114>
    6ecc:	e3520f55 	cmp	r2, #340	; 0x154
    6ed0:	91a0e7a3 	lsrls	lr, r3, #15
    6ed4:	928ee077 	addls	lr, lr, #119	; 0x77
    6ed8:	91a0008e 	lslls	r0, lr, #1
    6edc:	9affffa9 	bls	6d88 <_free_r+0xe0>
    6ee0:	e59f0028 	ldr	r0, [pc, #40]	; 6f10 <_free_r+0x268>
    6ee4:	e1520000 	cmp	r2, r0
    6ee8:	91a0e923 	lsrls	lr, r3, #18
    6eec:	928ee07c 	addls	lr, lr, #124	; 0x7c
    6ef0:	91a0008e 	lslls	r0, lr, #1
    6ef4:	83a000fc 	movhi	r0, #252	; 0xfc
    6ef8:	83a0e07e 	movhi	lr, #126	; 0x7e
    6efc:	eaffffa1 	b	6d88 <_free_r+0xe0>
    6f00:	000e50d0 	.word	0x000e50d0
    6f04:	000e50d8 	.word	0x000e50d8
    6f08:	000e54dc 	.word	0x000e54dc
    6f0c:	00107588 	.word	0x00107588
    6f10:	00000554 	.word	0x00000554

00006f14 <cleanup_glue>:
    6f14:	e92d4038 	push	{r3, r4, r5, lr}
    6f18:	e1a04001 	mov	r4, r1
    6f1c:	e5911000 	ldr	r1, [r1]
    6f20:	e3510000 	cmp	r1, #0
    6f24:	e1a05000 	mov	r5, r0
    6f28:	1bfffff9 	blne	6f14 <cleanup_glue>
    6f2c:	e1a00005 	mov	r0, r5
    6f30:	e1a01004 	mov	r1, r4
    6f34:	ebffff5b 	bl	6ca8 <_free_r>
    6f38:	e8bd4038 	pop	{r3, r4, r5, lr}
    6f3c:	e12fff1e 	bx	lr

00006f40 <_reclaim_reent>:
    6f40:	e59f30f0 	ldr	r3, [pc, #240]	; 7038 <_reclaim_reent+0xf8>
    6f44:	e5933000 	ldr	r3, [r3]
    6f48:	e1500003 	cmp	r0, r3
    6f4c:	e92d4070 	push	{r4, r5, r6, lr}
    6f50:	e1a05000 	mov	r5, r0
    6f54:	0a00002b 	beq	7008 <_reclaim_reent+0xc8>
    6f58:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    6f5c:	e3520000 	cmp	r2, #0
    6f60:	0a000011 	beq	6fac <_reclaim_reent+0x6c>
    6f64:	e3a03000 	mov	r3, #0
    6f68:	e1a06003 	mov	r6, r3
    6f6c:	e7921103 	ldr	r1, [r2, r3, lsl #2]
    6f70:	e3510000 	cmp	r1, #0
    6f74:	0a000005 	beq	6f90 <_reclaim_reent+0x50>
    6f78:	e5914000 	ldr	r4, [r1]
    6f7c:	e1a00005 	mov	r0, r5
    6f80:	ebffff48 	bl	6ca8 <_free_r>
    6f84:	e2541000 	subs	r1, r4, #0
    6f88:	1afffffa 	bne	6f78 <_reclaim_reent+0x38>
    6f8c:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    6f90:	e2866001 	add	r6, r6, #1
    6f94:	e3560020 	cmp	r6, #32
    6f98:	e1a03006 	mov	r3, r6
    6f9c:	1afffff2 	bne	6f6c <_reclaim_reent+0x2c>
    6fa0:	e1a00005 	mov	r0, r5
    6fa4:	e1a01002 	mov	r1, r2
    6fa8:	ebffff3e 	bl	6ca8 <_free_r>
    6fac:	e5951040 	ldr	r1, [r5, #64]	; 0x40
    6fb0:	e3510000 	cmp	r1, #0
    6fb4:	11a00005 	movne	r0, r5
    6fb8:	1bffff3a 	blne	6ca8 <_free_r>
    6fbc:	e5951148 	ldr	r1, [r5, #328]	; 0x148
    6fc0:	e3510000 	cmp	r1, #0
    6fc4:	0a000008 	beq	6fec <_reclaim_reent+0xac>
    6fc8:	e2856f53 	add	r6, r5, #332	; 0x14c
    6fcc:	e1510006 	cmp	r1, r6
    6fd0:	0a000005 	beq	6fec <_reclaim_reent+0xac>
    6fd4:	e5914000 	ldr	r4, [r1]
    6fd8:	e1a00005 	mov	r0, r5
    6fdc:	ebffff31 	bl	6ca8 <_free_r>
    6fe0:	e1560004 	cmp	r6, r4
    6fe4:	e1a01004 	mov	r1, r4
    6fe8:	1afffff9 	bne	6fd4 <_reclaim_reent+0x94>
    6fec:	e5951054 	ldr	r1, [r5, #84]	; 0x54
    6ff0:	e3510000 	cmp	r1, #0
    6ff4:	11a00005 	movne	r0, r5
    6ff8:	1bffff2a 	blne	6ca8 <_free_r>
    6ffc:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    7000:	e3530000 	cmp	r3, #0
    7004:	1a000001 	bne	7010 <_reclaim_reent+0xd0>
    7008:	e8bd4070 	pop	{r4, r5, r6, lr}
    700c:	e12fff1e 	bx	lr
    7010:	e1a00005 	mov	r0, r5
    7014:	e595c03c 	ldr	r12, [r5, #60]	; 0x3c
    7018:	e1a0e00f 	mov	lr, pc
    701c:	e12fff1c 	bx	r12
    7020:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
    7024:	e3510000 	cmp	r1, #0
    7028:	0afffff6 	beq	7008 <_reclaim_reent+0xc8>
    702c:	e1a00005 	mov	r0, r5
    7030:	e8bd4070 	pop	{r4, r5, r6, lr}
    7034:	eaffffb6 	b	6f14 <cleanup_glue>
    7038:	000e4ca0 	.word	0x000e4ca0

0000703c <_wrapup_reent>:
    703c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    7040:	e2507000 	subs	r7, r0, #0
    7044:	059f3060 	ldreq	r3, [pc, #96]	; 70ac <_wrapup_reent+0x70>
    7048:	05937000 	ldreq	r7, [r3]
    704c:	e5976148 	ldr	r6, [r7, #328]	; 0x148
    7050:	e3560000 	cmp	r6, #0
    7054:	0a00000d 	beq	7090 <_wrapup_reent+0x54>
    7058:	e5965004 	ldr	r5, [r6, #4]
    705c:	e2554001 	subs	r4, r5, #1
    7060:	52855002 	addpl	r5, r5, #2
    7064:	50865105 	addpl	r5, r6, r5, lsl #2
    7068:	4a000005 	bmi	7084 <_wrapup_reent+0x48>
    706c:	e5353004 	ldr	r3, [r5, #-4]!
    7070:	e2444001 	sub	r4, r4, #1
    7074:	e1a0e00f 	mov	lr, pc
    7078:	e12fff13 	bx	r3
    707c:	e3740001 	cmn	r4, #1
    7080:	1afffff9 	bne	706c <_wrapup_reent+0x30>
    7084:	e5966000 	ldr	r6, [r6]
    7088:	e3560000 	cmp	r6, #0
    708c:	1afffff1 	bne	7058 <_wrapup_reent+0x1c>
    7090:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
    7094:	e3530000 	cmp	r3, #0
    7098:	11a00007 	movne	r0, r7
    709c:	11a0e00f 	movne	lr, pc
    70a0:	112fff13 	bxne	r3
    70a4:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    70a8:	e12fff1e 	bx	lr
    70ac:	000e4ca0 	.word	0x000e4ca0

000070b0 <__cs3_premain>:
    70b0:	e92d4008 	push	{r3, lr}
    70b4:	eb000033 	bl	7188 <__libc_init_array>
    70b8:	e59f3030 	ldr	r3, [pc, #48]	; 70f0 <__cs3_premain+0x40>
    70bc:	e3530000 	cmp	r3, #0
    70c0:	15930000 	ldrne	r0, [r3]
    70c4:	01a00003 	moveq	r0, r3
    70c8:	e59f3024 	ldr	r3, [pc, #36]	; 70f4 <__cs3_premain+0x44>
    70cc:	e3530000 	cmp	r3, #0
    70d0:	15931000 	ldrne	r1, [r3]
    70d4:	01a01003 	moveq	r1, r3
    70d8:	e3a02000 	mov	r2, #0
    70dc:	ebffe62b 	bl	990 <main>
    70e0:	e59f3010 	ldr	r3, [pc, #16]	; 70f8 <__cs3_premain+0x48>
    70e4:	e3530000 	cmp	r3, #0
    70e8:	1bfffb77 	blne	5ecc <exit>
    70ec:	eafffffe 	b	70ec <__cs3_premain+0x3c>
	...
    70f8:	00005ecc 	.word	0x00005ecc

000070fc <_exit>:
    70fc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    7100:	e3a00018 	mov	r0, #24
    7104:	e59f1004 	ldr	r1, [pc, #4]	; 7110 <_exit+0x14>
    7108:	ef123456 	svc	0x00123456
    710c:	eafffffe 	b	710c <_exit+0x10>
    7110:	00020026 	.word	0x00020026

00007114 <_sbrk>:
    7114:	e92d4008 	push	{r3, lr}
    7118:	e59f305c 	ldr	r3, [pc, #92]	; 717c <_sbrk+0x68>
    711c:	e59f105c 	ldr	r1, [pc, #92]	; 7180 <_sbrk+0x6c>
    7120:	e5932000 	ldr	r2, [r3]
    7124:	e5913000 	ldr	r3, [r1]
    7128:	e3520000 	cmp	r2, #0
    712c:	e0830000 	add	r0, r3, r0
    7130:	0a000002 	beq	7140 <_sbrk+0x2c>
    7134:	e0602002 	rsb	r2, r0, r2
    7138:	e3520000 	cmp	r2, #0
    713c:	ba000009 	blt	7168 <_sbrk+0x54>
    7140:	e04d2003 	sub	r2, sp, r3
    7144:	e3520000 	cmp	r2, #0
    7148:	ba000002 	blt	7158 <_sbrk+0x44>
    714c:	e04d2000 	sub	r2, sp, r0
    7150:	e35200ff 	cmp	r2, #255	; 0xff
    7154:	da000003 	ble	7168 <_sbrk+0x54>
    7158:	e5810000 	str	r0, [r1]
    715c:	e1a00003 	mov	r0, r3
    7160:	e8bd4008 	pop	{r3, lr}
    7164:	e12fff1e 	bx	lr
    7168:	ebfffb53 	bl	5ebc <__errno>
    716c:	e3a0300c 	mov	r3, #12
    7170:	e5803000 	str	r3, [r0]
    7174:	e3e03000 	mvn	r3, #0
    7178:	eafffff7 	b	715c <_sbrk+0x48>
    717c:	000e54e0 	.word	0x000e54e0
    7180:	000e54e4 	.word	0x000e54e4

00007184 <__cs3_isr_interrupt>:
    7184:	eafffffe 	b	7184 <__cs3_isr_interrupt>

00007188 <__libc_init_array>:
    7188:	e92d4070 	push	{r4, r5, r6, lr}
    718c:	e59f506c 	ldr	r5, [pc, #108]	; 7200 <__libc_init_array+0x78>
    7190:	e59f606c 	ldr	r6, [pc, #108]	; 7204 <__libc_init_array+0x7c>
    7194:	e0656006 	rsb	r6, r5, r6
    7198:	e1b06146 	asrs	r6, r6, #2
    719c:	12455004 	subne	r5, r5, #4
    71a0:	13a04000 	movne	r4, #0
    71a4:	0a000005 	beq	71c0 <__libc_init_array+0x38>
    71a8:	e5b53004 	ldr	r3, [r5, #4]!
    71ac:	e2844001 	add	r4, r4, #1
    71b0:	e1a0e00f 	mov	lr, pc
    71b4:	e12fff13 	bx	r3
    71b8:	e1560004 	cmp	r6, r4
    71bc:	1afffff9 	bne	71a8 <__libc_init_array+0x20>
    71c0:	e59f5040 	ldr	r5, [pc, #64]	; 7208 <__libc_init_array+0x80>
    71c4:	e59f6040 	ldr	r6, [pc, #64]	; 720c <__libc_init_array+0x84>
    71c8:	e0656006 	rsb	r6, r5, r6
    71cc:	eb0000d6 	bl	752c <_init>
    71d0:	e1b06146 	asrs	r6, r6, #2
    71d4:	12455004 	subne	r5, r5, #4
    71d8:	13a04000 	movne	r4, #0
    71dc:	0a000005 	beq	71f8 <__libc_init_array+0x70>
    71e0:	e5b53004 	ldr	r3, [r5, #4]!
    71e4:	e2844001 	add	r4, r4, #1
    71e8:	e1a0e00f 	mov	lr, pc
    71ec:	e12fff13 	bx	r3
    71f0:	e1560004 	cmp	r6, r4
    71f4:	1afffff9 	bne	71e0 <__libc_init_array+0x58>
    71f8:	e8bd4070 	pop	{r4, r5, r6, lr}
    71fc:	e12fff1e 	bx	lr
    7200:	00007544 	.word	0x00007544
    7204:	00007544 	.word	0x00007544
    7208:	00007544 	.word	0x00007544
    720c:	0000754c 	.word	0x0000754c

Disassembly of section .rodata:

00007218 <seg7_codes>:
    7218:	4f5b063f 077d6d66 7c77677f 71795e39     ?.[Ofm}..gw|9^yq

00007228 <song_list>:
    7228:	0000758c 00000001 00007598 00000001     .u.......u......
    7238:	000075a4 00000004 000075d4 0000000b     .u.......u......
    7248:	00007658 00000003 0000767c 00000011     Xv......|v......
    7258:	00007748 00000003                       Hw......

00007260 <volume_sensitivity>:
    7260:	00000000 3ff80000                       .......?

00007268 <default_volume>:
    7268:	00000005                                ....

0000726c <min_volume>:
    726c:	00000000                                ....

00007270 <max_volume>:
    7270:	0000000a                                ....

00007274 <error_code>:
    7274:	00000040 00000041 00007343 00000045     @...A...Cs..E...
    7284:	00000053 00000042 00007344 00007346     S...B...Ds..Fs..
    7294:	00000047 00000043 00000044 00000046     G...C...D...F...
    72a4:	00007341 00007347 00000000              As..Gs......

000072b0 <harmonic_intensities>:
    72b0:	00000000 3ff00000 00000000 3fe00000     .......?.......?
    72c0:	00000000 3fd00000                       .......?

000072c8 <num_harmonics>:
    72c8:	00000000 40080000                       .......@

000072d0 <default_amplitude>:
    72d0:	c0000000 4150624d                       ....MbPA

000072d8 <sampling_period>:
    72d8:	d2f1a9fc 3f20624d                       ....Mb ?

000072e0 <sampling_frequency>:
    72e0:	00001f40 00000000                       @.......

000072e8 <pi>:
    72e8:	54442d18 400921fb 00006244 00006245     .-DT.!.@Db..Eb..
    72f8:	00006247 00006241 00006242 00776f70     Gb..Ab..Bb..pow.

00007308 <bp>:
    7308:	00000000 3ff00000 00000000 3ff80000     .......?.......?

00007318 <dp_l>:
	...
    7320:	43cfd006 3e4cfdeb                       ...C..L>

00007328 <dp_h>:
	...
    7330:	40000000 3fe2b803 00000000              ...@...?....

0000733c <npio2_hw>:
    733c:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
    734c:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
    735c:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
    736c:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
    737c:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
    738c:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
    739c:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
    73ac:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

000073bc <two_over_pi>:
    73bc:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
    73cc:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
    73dc:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
    73ec:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
    73fc:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
    740c:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
    741c:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
    742c:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
    743c:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
    744c:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
    745c:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
    746c:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
    747c:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
    748c:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
    749c:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
    74ac:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
    74bc:	0060e27b 00c08c6b 00000000              {.`.k.......

000074c8 <init_jk>:
    74c8:	00000002 00000003 00000004 00000006     ................

000074d8 <PIo2>:
    74d8:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
    74e8:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
    74f8:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
    7508:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

00007518 <TWO52>:
    7518:	00000000 43300000 00000000 c3300000     ......0C......0.

00007528 <_global_impure_ptr>:
    7528:	000e4ca8                                .L..

0000752c <_init>:
    752c:	e1a0c00d 	mov	r12, sp
    7530:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    7534:	e24cb004 	sub	r11, r12, #4
    7538:	e24bd028 	sub	sp, r11, #40	; 0x28
    753c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    7540:	e12fff1e 	bx	lr

00007544 <__init_array_start>:
    7544:	00006b44 	.word	0x00006b44

00007548 <__frame_dummy_init_array_entry>:
    7548:	00000208                                ....

0000754c <__libc_fini>:
    754c:	e1a0c00d 	mov	r12, sp
    7550:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    7554:	e24cb004 	sub	r11, r12, #4
    7558:	e24bd028 	sub	sp, r11, #40	; 0x28
    755c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    7560:	e12fff1e 	bx	lr

00007564 <__fini_array_start>:
    7564:	000001c4 	.word	0x000001c4

00007568 <__cs3_regions>:
    7568:	00000000 	.word	0x00000000
    756c:	00000040 	.word	0x00000040
    7570:	00000040 	.word	0x00000040
    7574:	000e54a8 	.word	0x000e54a8
    7578:	000220d8 	.word	0x000220d8

0000757c <__cs3_regions_end>:
    757c:	00000000 	.word	0x00000000
>>>>>>> parent of 2b8786d... Fix issues with validity and silent notes taking too long to generate
